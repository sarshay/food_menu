{"ast":null,"code":"var _ol_obj_ = {};\n/**\n * Polyfill for Object.assign().  Assigns enumerable and own properties from\n * one or more source objects to a target object.\n *\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n * @param {!Object} target The target object.\n * @param {...Object} var_sources The source object(s).\n * @return {!Object} The modified target object.\n */\n\n_ol_obj_.assign = typeof Object.assign === 'function' ? Object.assign : function (target, var_sources) {\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n\n  for (var i = 1, ii = arguments.length; i < ii; ++i) {\n    var source = arguments[i];\n\n    if (source !== undefined && source !== null) {\n      for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return output;\n};\n/**\n * Removes all properties from an object.\n * @param {Object} object The object to clear.\n */\n\n_ol_obj_.clear = function (object) {\n  for (var property in object) {\n    delete object[property];\n  }\n};\n/**\n * Get an array of property values from an object.\n * @param {Object<K,V>} object The object from which to get the values.\n * @return {!Array<V>} The property values.\n * @template K,V\n */\n\n\n_ol_obj_.getValues = function (object) {\n  var values = [];\n\n  for (var property in object) {\n    values.push(object[property]);\n  }\n\n  return values;\n};\n/**\n * Determine if an object has any properties.\n * @param {Object} object The object to check.\n * @return {boolean} The object is empty.\n */\n\n\n_ol_obj_.isEmpty = function (object) {\n  var property;\n\n  for (property in object) {\n    return false;\n  }\n\n  return !property;\n};\n\nexport default _ol_obj_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/obj.js"],"names":["_ol_obj_","assign","Object","target","var_sources","undefined","TypeError","output","i","ii","arguments","length","source","key","hasOwnProperty","clear","object","property","getValues","values","push","isEmpty"],"mappings":"AAAA,IAAIA,QAAQ,GAAG,EAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,QAAQ,CAACC,MAAT,GAAmB,OAAOC,MAAM,CAACD,MAAd,KAAyB,UAA1B,GAAwCC,MAAM,CAACD,MAA/C,GAAwD,UAASE,MAAT,EAAiBC,WAAjB,EAA8B;AACtG,MAAID,MAAM,KAAKE,SAAX,IAAwBF,MAAM,KAAK,IAAvC,EAA6C;AAC3C,UAAM,IAAIG,SAAJ,CAAc,4CAAd,CAAN;AACD;;AAED,MAAIC,MAAM,GAAGL,MAAM,CAACC,MAAD,CAAnB;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGC,SAAS,CAACC,MAA/B,EAAuCH,CAAC,GAAGC,EAA3C,EAA+C,EAAED,CAAjD,EAAoD;AAClD,QAAII,MAAM,GAAGF,SAAS,CAACF,CAAD,CAAtB;;AACA,QAAII,MAAM,KAAKP,SAAX,IAAwBO,MAAM,KAAK,IAAvC,EAA6C;AAC3C,WAAK,IAAIC,GAAT,IAAgBD,MAAhB,EAAwB;AACtB,YAAIA,MAAM,CAACE,cAAP,CAAsBD,GAAtB,CAAJ,EAAgC;AAC9BN,UAAAA,MAAM,CAACM,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AACD;AACF;AACF;AACF;;AACD,SAAON,MAAP;AACD,CAjBD;AAoBA;AACA;AACA;AACA;;AACAP,QAAQ,CAACe,KAAT,GAAiB,UAASC,MAAT,EAAiB;AAChC,OAAK,IAAIC,QAAT,IAAqBD,MAArB,EAA6B;AAC3B,WAAOA,MAAM,CAACC,QAAD,CAAb;AACD;AACF,CAJD;AAOA;AACA;AACA;AACA;AACA;AACA;;;AACAjB,QAAQ,CAACkB,SAAT,GAAqB,UAASF,MAAT,EAAiB;AACpC,MAAIG,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIF,QAAT,IAAqBD,MAArB,EAA6B;AAC3BG,IAAAA,MAAM,CAACC,IAAP,CAAYJ,MAAM,CAACC,QAAD,CAAlB;AACD;;AACD,SAAOE,MAAP;AACD,CAND;AASA;AACA;AACA;AACA;AACA;;;AACAnB,QAAQ,CAACqB,OAAT,GAAmB,UAASL,MAAT,EAAiB;AAClC,MAAIC,QAAJ;;AACA,OAAKA,QAAL,IAAiBD,MAAjB,EAAyB;AACvB,WAAO,KAAP;AACD;;AACD,SAAO,CAACC,QAAR;AACD,CAND;;AAOA,eAAejB,QAAf","sourcesContent":["var _ol_obj_ = {};\n\n\n/**\n * Polyfill for Object.assign().  Assigns enumerable and own properties from\n * one or more source objects to a target object.\n *\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n * @param {!Object} target The target object.\n * @param {...Object} var_sources The source object(s).\n * @return {!Object} The modified target object.\n */\n_ol_obj_.assign = (typeof Object.assign === 'function') ? Object.assign : function(target, var_sources) {\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n  for (var i = 1, ii = arguments.length; i < ii; ++i) {\n    var source = arguments[i];\n    if (source !== undefined && source !== null) {\n      for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n  return output;\n};\n\n\n/**\n * Removes all properties from an object.\n * @param {Object} object The object to clear.\n */\n_ol_obj_.clear = function(object) {\n  for (var property in object) {\n    delete object[property];\n  }\n};\n\n\n/**\n * Get an array of property values from an object.\n * @param {Object<K,V>} object The object from which to get the values.\n * @return {!Array<V>} The property values.\n * @template K,V\n */\n_ol_obj_.getValues = function(object) {\n  var values = [];\n  for (var property in object) {\n    values.push(object[property]);\n  }\n  return values;\n};\n\n\n/**\n * Determine if an object has any properties.\n * @param {Object} object The object to check.\n * @return {boolean} The object is empty.\n */\n_ol_obj_.isEmpty = function(object) {\n  var property;\n  for (property in object) {\n    return false;\n  }\n  return !property;\n};\nexport default _ol_obj_;\n"]},"metadata":{},"sourceType":"module"}