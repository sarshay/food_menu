{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/net\n */\n\n\nimport { getUid } from './util.js';\n/**\n * Simple JSONP helper. Supports error callbacks and a custom callback param.\n * The error callback will be called when no JSONP is executed after 10 seconds.\n *\n * @param {string} url Request url. A 'callback' query parameter will be\n *     appended.\n * @param {Function} callback Callback on success.\n * @param {Function} [opt_errback] Callback on error.\n * @param {string} [opt_callbackParam] Custom query parameter for the JSONP\n *     callback. Default is 'callback'.\n */\n\nexport function jsonp(url, callback, opt_errback, opt_callbackParam) {\n  var script = document.createElement('script');\n  var key = 'olc_' + getUid(callback);\n\n  function cleanup() {\n    delete window[key];\n    script.parentNode.removeChild(script);\n  }\n\n  script.async = true;\n  script.src = url + (url.indexOf('?') == -1 ? '?' : '&') + (opt_callbackParam || 'callback') + '=' + key;\n  var timer = setTimeout(function () {\n    cleanup();\n\n    if (opt_errback) {\n      opt_errback();\n    }\n  }, 10000);\n\n  window[key] = function (data) {\n    clearTimeout(timer);\n    cleanup();\n    callback(data);\n  };\n\n  document.getElementsByTagName('head')[0].appendChild(script);\n}\n\nvar ResponseError =\n/** @class */\nfunction (_super) {\n  __extends(ResponseError, _super);\n  /**\n   * @param {XMLHttpRequest} response The XHR object.\n   */\n\n\n  function ResponseError(response) {\n    var _this = this;\n\n    var message = 'Unexpected response status: ' + response.status;\n    _this = _super.call(this, message) || this;\n    /**\n     * @type {string}\n     */\n\n    _this.name = 'ResponseError';\n    /**\n     * @type {XMLHttpRequest}\n     */\n\n    _this.response = response;\n    return _this;\n  }\n\n  return ResponseError;\n}(Error);\n\nexport { ResponseError };\n\nvar ClientError =\n/** @class */\nfunction (_super) {\n  __extends(ClientError, _super);\n  /**\n   * @param {XMLHttpRequest} client The XHR object.\n   */\n\n\n  function ClientError(client) {\n    var _this = _super.call(this, 'Failed to issue request') || this;\n    /**\n     * @type {string}\n     */\n\n\n    _this.name = 'ClientError';\n    /**\n     * @type {XMLHttpRequest}\n     */\n\n    _this.client = client;\n    return _this;\n  }\n\n  return ClientError;\n}(Error);\n\nexport { ClientError };\n/**\n * @param {string} url The URL.\n * @return {Promise<Object>} A promise that resolves to the JSON response.\n */\n\nexport function getJSON(url) {\n  return new Promise(function (resolve, reject) {\n    /**\n     * @param {ProgressEvent<XMLHttpRequest>} event The load event.\n     */\n    function onLoad(event) {\n      var client = event.target; // status will be 0 for file:// urls\n\n      if (!client.status || client.status >= 200 && client.status < 300) {\n        var data = void 0;\n\n        try {\n          data = JSON.parse(client.responseText);\n        } catch (err) {\n          var message = 'Error parsing response text as JSON: ' + err.message;\n          reject(new Error(message));\n          return;\n        }\n\n        resolve(data);\n        return;\n      }\n\n      reject(new ResponseError(client));\n    }\n    /**\n     * @param {ProgressEvent<XMLHttpRequest>} event The error event.\n     */\n\n\n    function onError(event) {\n      reject(new ClientError(event.target));\n    }\n\n    var client = new XMLHttpRequest();\n    client.addEventListener('load', onLoad);\n    client.addEventListener('error', onError);\n    client.open('GET', url);\n    client.setRequestHeader('Accept', 'application/json');\n    client.send();\n  });\n}\n/**\n * @param {string} base The base URL.\n * @param {string} url The potentially relative URL.\n * @return {string} The full URL.\n */\n\nexport function resolveUrl(base, url) {\n  if (url.indexOf('://') >= 0) {\n    return url;\n  }\n\n  return new URL(url, base).href;\n}\nvar originalXHR;\nexport function overrideXHR(xhr) {\n  if (typeof XMLHttpRequest !== 'undefined') {\n    originalXHR = XMLHttpRequest;\n  }\n\n  global.XMLHttpRequest = xhr;\n}\nexport function restoreXHR() {\n  global.XMLHttpRequest = originalXHR;\n}","map":{"version":3,"sources":["src/net.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/net\n */\nimport { getUid } from './util.js';\n/**\n * Simple JSONP helper. Supports error callbacks and a custom callback param.\n * The error callback will be called when no JSONP is executed after 10 seconds.\n *\n * @param {string} url Request url. A 'callback' query parameter will be\n *     appended.\n * @param {Function} callback Callback on success.\n * @param {Function} [opt_errback] Callback on error.\n * @param {string} [opt_callbackParam] Custom query parameter for the JSONP\n *     callback. Default is 'callback'.\n */\nexport function jsonp(url, callback, opt_errback, opt_callbackParam) {\n    var script = document.createElement('script');\n    var key = 'olc_' + getUid(callback);\n    function cleanup() {\n        delete window[key];\n        script.parentNode.removeChild(script);\n    }\n    script.async = true;\n    script.src =\n        url +\n            (url.indexOf('?') == -1 ? '?' : '&') +\n            (opt_callbackParam || 'callback') +\n            '=' +\n            key;\n    var timer = setTimeout(function () {\n        cleanup();\n        if (opt_errback) {\n            opt_errback();\n        }\n    }, 10000);\n    window[key] = function (data) {\n        clearTimeout(timer);\n        cleanup();\n        callback(data);\n    };\n    document.getElementsByTagName('head')[0].appendChild(script);\n}\nvar ResponseError = /** @class */ (function (_super) {\n    __extends(ResponseError, _super);\n    /**\n     * @param {XMLHttpRequest} response The XHR object.\n     */\n    function ResponseError(response) {\n        var _this = this;\n        var message = 'Unexpected response status: ' + response.status;\n        _this = _super.call(this, message) || this;\n        /**\n         * @type {string}\n         */\n        _this.name = 'ResponseError';\n        /**\n         * @type {XMLHttpRequest}\n         */\n        _this.response = response;\n        return _this;\n    }\n    return ResponseError;\n}(Error));\nexport { ResponseError };\nvar ClientError = /** @class */ (function (_super) {\n    __extends(ClientError, _super);\n    /**\n     * @param {XMLHttpRequest} client The XHR object.\n     */\n    function ClientError(client) {\n        var _this = _super.call(this, 'Failed to issue request') || this;\n        /**\n         * @type {string}\n         */\n        _this.name = 'ClientError';\n        /**\n         * @type {XMLHttpRequest}\n         */\n        _this.client = client;\n        return _this;\n    }\n    return ClientError;\n}(Error));\nexport { ClientError };\n/**\n * @param {string} url The URL.\n * @return {Promise<Object>} A promise that resolves to the JSON response.\n */\nexport function getJSON(url) {\n    return new Promise(function (resolve, reject) {\n        /**\n         * @param {ProgressEvent<XMLHttpRequest>} event The load event.\n         */\n        function onLoad(event) {\n            var client = event.target;\n            // status will be 0 for file:// urls\n            if (!client.status || (client.status >= 200 && client.status < 300)) {\n                var data = void 0;\n                try {\n                    data = JSON.parse(client.responseText);\n                }\n                catch (err) {\n                    var message = 'Error parsing response text as JSON: ' + err.message;\n                    reject(new Error(message));\n                    return;\n                }\n                resolve(data);\n                return;\n            }\n            reject(new ResponseError(client));\n        }\n        /**\n         * @param {ProgressEvent<XMLHttpRequest>} event The error event.\n         */\n        function onError(event) {\n            reject(new ClientError(event.target));\n        }\n        var client = new XMLHttpRequest();\n        client.addEventListener('load', onLoad);\n        client.addEventListener('error', onError);\n        client.open('GET', url);\n        client.setRequestHeader('Accept', 'application/json');\n        client.send();\n    });\n}\n/**\n * @param {string} base The base URL.\n * @param {string} url The potentially relative URL.\n * @return {string} The full URL.\n */\nexport function resolveUrl(base, url) {\n    if (url.indexOf('://') >= 0) {\n        return url;\n    }\n    return new URL(url, base).href;\n}\nvar originalXHR;\nexport function overrideXHR(xhr) {\n    if (typeof XMLHttpRequest !== 'undefined') {\n        originalXHR = XMLHttpRequest;\n    }\n    global.XMLHttpRequest = xhr;\n}\nexport function restoreXHR() {\n    global.XMLHttpRequest = originalXHR;\n}\n//# sourceMappingURL=net.js.map"]},"metadata":{},"sourceType":"module"}