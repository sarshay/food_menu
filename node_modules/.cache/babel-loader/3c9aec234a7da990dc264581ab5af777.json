{"ast":null,"code":"// Based on https://github.com/Polymer/PointerEvents\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nimport _ol_ from '../index.js';\nimport _ol_pointer_EventSource_ from '../pointer/eventsource.js';\n/**\n * @param {ol.pointer.PointerEventHandler} dispatcher Event handler.\n * @constructor\n * @extends {ol.pointer.EventSource}\n */\n\nvar _ol_pointer_MouseSource_ = function (dispatcher) {\n  var mapping = {\n    'mousedown': this.mousedown,\n    'mousemove': this.mousemove,\n    'mouseup': this.mouseup,\n    'mouseover': this.mouseover,\n    'mouseout': this.mouseout\n  };\n\n  _ol_pointer_EventSource_.call(this, dispatcher, mapping);\n  /**\n   * @const\n   * @type {!Object.<string, Event|Object>}\n   */\n\n\n  this.pointerMap = dispatcher.pointerMap;\n  /**\n   * @const\n   * @type {Array.<ol.Pixel>}\n   */\n\n  this.lastTouches = [];\n};\n\n_ol_.inherits(_ol_pointer_MouseSource_, _ol_pointer_EventSource_);\n/**\n * @const\n * @type {number}\n */\n\n\n_ol_pointer_MouseSource_.POINTER_ID = 1;\n/**\n * @const\n * @type {string}\n */\n\n_ol_pointer_MouseSource_.POINTER_TYPE = 'mouse';\n/**\n * Radius around touchend that swallows mouse events.\n *\n * @const\n * @type {number}\n */\n\n_ol_pointer_MouseSource_.DEDUP_DIST = 25;\n/**\n * Detect if a mouse event was simulated from a touch by\n * checking if previously there was a touch event at the\n * same position.\n *\n * FIXME - Known problem with the native Android browser on\n * Samsung GT-I9100 (Android 4.1.2):\n * In case the page is scrolled, this function does not work\n * correctly when a canvas is used (WebGL or canvas renderer).\n * Mouse listeners on canvas elements (for this browser), create\n * two mouse events: One 'good' and one 'bad' one (on other browsers or\n * when a div is used, there is only one event). For the 'bad' one,\n * clientX/clientY and also pageX/pageY are wrong when the page\n * is scrolled. Because of that, this function can not detect if\n * the events were simulated from a touch event. As result, a\n * pointer event at a wrong position is dispatched, which confuses\n * the map interactions.\n * It is unclear, how one can get the correct position for the event\n * or detect that the positions are invalid.\n *\n * @private\n * @param {Event} inEvent The in event.\n * @return {boolean} True, if the event was generated by a touch.\n */\n\n_ol_pointer_MouseSource_.prototype.isEventSimulatedFromTouch_ = function (inEvent) {\n  var lts = this.lastTouches;\n  var x = inEvent.clientX,\n      y = inEvent.clientY;\n\n  for (var i = 0, l = lts.length, t; i < l && (t = lts[i]); i++) {\n    // simulated mouse events will be swallowed near a primary touchend\n    var dx = Math.abs(x - t[0]),\n        dy = Math.abs(y - t[1]);\n\n    if (dx <= _ol_pointer_MouseSource_.DEDUP_DIST && dy <= _ol_pointer_MouseSource_.DEDUP_DIST) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Creates a copy of the original event that will be used\n * for the fake pointer event.\n *\n * @param {Event} inEvent The in event.\n * @param {ol.pointer.PointerEventHandler} dispatcher Event handler.\n * @return {Object} The copied event.\n */\n\n\n_ol_pointer_MouseSource_.prepareEvent = function (inEvent, dispatcher) {\n  var e = dispatcher.cloneEvent(inEvent, inEvent); // forward mouse preventDefault\n\n  var pd = e.preventDefault;\n\n  e.preventDefault = function () {\n    inEvent.preventDefault();\n    pd();\n  };\n\n  e.pointerId = _ol_pointer_MouseSource_.POINTER_ID;\n  e.isPrimary = true;\n  e.pointerType = _ol_pointer_MouseSource_.POINTER_TYPE;\n  return e;\n};\n/**\n * Handler for `mousedown`.\n *\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_MouseSource_.prototype.mousedown = function (inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    // TODO(dfreedman) workaround for some elements not sending mouseup\n    // http://crbug/149091\n    if (_ol_pointer_MouseSource_.POINTER_ID.toString() in this.pointerMap) {\n      this.cancel(inEvent);\n    }\n\n    var e = _ol_pointer_MouseSource_.prepareEvent(inEvent, this.dispatcher);\n\n    this.pointerMap[_ol_pointer_MouseSource_.POINTER_ID.toString()] = inEvent;\n    this.dispatcher.down(e, inEvent);\n  }\n};\n/**\n * Handler for `mousemove`.\n *\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_MouseSource_.prototype.mousemove = function (inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var e = _ol_pointer_MouseSource_.prepareEvent(inEvent, this.dispatcher);\n\n    this.dispatcher.move(e, inEvent);\n  }\n};\n/**\n * Handler for `mouseup`.\n *\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_MouseSource_.prototype.mouseup = function (inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var p = this.pointerMap[_ol_pointer_MouseSource_.POINTER_ID.toString()];\n\n    if (p && p.button === inEvent.button) {\n      var e = _ol_pointer_MouseSource_.prepareEvent(inEvent, this.dispatcher);\n\n      this.dispatcher.up(e, inEvent);\n      this.cleanupMouse();\n    }\n  }\n};\n/**\n * Handler for `mouseover`.\n *\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_MouseSource_.prototype.mouseover = function (inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var e = _ol_pointer_MouseSource_.prepareEvent(inEvent, this.dispatcher);\n\n    this.dispatcher.enterOver(e, inEvent);\n  }\n};\n/**\n * Handler for `mouseout`.\n *\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_MouseSource_.prototype.mouseout = function (inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var e = _ol_pointer_MouseSource_.prepareEvent(inEvent, this.dispatcher);\n\n    this.dispatcher.leaveOut(e, inEvent);\n  }\n};\n/**\n * Dispatches a `pointercancel` event.\n *\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_MouseSource_.prototype.cancel = function (inEvent) {\n  var e = _ol_pointer_MouseSource_.prepareEvent(inEvent, this.dispatcher);\n\n  this.dispatcher.cancel(e, inEvent);\n  this.cleanupMouse();\n};\n/**\n * Remove the mouse from the list of active pointers.\n */\n\n\n_ol_pointer_MouseSource_.prototype.cleanupMouse = function () {\n  delete this.pointerMap[_ol_pointer_MouseSource_.POINTER_ID.toString()];\n};\n\nexport default _ol_pointer_MouseSource_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/pointer/mousesource.js"],"names":["_ol_","_ol_pointer_EventSource_","_ol_pointer_MouseSource_","dispatcher","mapping","mousedown","mousemove","mouseup","mouseover","mouseout","call","pointerMap","lastTouches","inherits","POINTER_ID","POINTER_TYPE","DEDUP_DIST","prototype","isEventSimulatedFromTouch_","inEvent","lts","x","clientX","y","clientY","i","l","length","t","dx","Math","abs","dy","prepareEvent","e","cloneEvent","pd","preventDefault","pointerId","isPrimary","pointerType","toString","cancel","down","move","p","button","up","cleanupMouse","enterOver","leaveOut"],"mappings":"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","sourcesContent":["// Based on https://github.com/Polymer/PointerEvents\n\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport _ol_ from '../index.js';\nimport _ol_pointer_EventSource_ from '../pointer/eventsource.js';\n\n/**\n * @param {ol.pointer.PointerEventHandler} dispatcher Event handler.\n * @constructor\n * @extends {ol.pointer.EventSource}\n */\nvar _ol_pointer_MouseSource_ = function(dispatcher) {\n  var mapping = {\n    'mousedown': this.mousedown,\n    'mousemove': this.mousemove,\n    'mouseup': this.mouseup,\n    'mouseover': this.mouseover,\n    'mouseout': this.mouseout\n  };\n  _ol_pointer_EventSource_.call(this, dispatcher, mapping);\n\n  /**\n   * @const\n   * @type {!Object.<string, Event|Object>}\n   */\n  this.pointerMap = dispatcher.pointerMap;\n\n  /**\n   * @const\n   * @type {Array.<ol.Pixel>}\n   */\n  this.lastTouches = [];\n};\n\n_ol_.inherits(_ol_pointer_MouseSource_, _ol_pointer_EventSource_);\n\n\n/**\n * @const\n * @type {number}\n */\n_ol_pointer_MouseSource_.POINTER_ID = 1;\n\n\n/**\n * @const\n * @type {string}\n */\n_ol_pointer_MouseSource_.POINTER_TYPE = 'mouse';\n\n\n/**\n * Radius around touchend that swallows mouse events.\n *\n * @const\n * @type {number}\n */\n_ol_pointer_MouseSource_.DEDUP_DIST = 25;\n\n\n/**\n * Detect if a mouse event was simulated from a touch by\n * checking if previously there was a touch event at the\n * same position.\n *\n * FIXME - Known problem with the native Android browser on\n * Samsung GT-I9100 (Android 4.1.2):\n * In case the page is scrolled, this function does not work\n * correctly when a canvas is used (WebGL or canvas renderer).\n * Mouse listeners on canvas elements (for this browser), create\n * two mouse events: One 'good' and one 'bad' one (on other browsers or\n * when a div is used, there is only one event). For the 'bad' one,\n * clientX/clientY and also pageX/pageY are wrong when the page\n * is scrolled. Because of that, this function can not detect if\n * the events were simulated from a touch event. As result, a\n * pointer event at a wrong position is dispatched, which confuses\n * the map interactions.\n * It is unclear, how one can get the correct position for the event\n * or detect that the positions are invalid.\n *\n * @private\n * @param {Event} inEvent The in event.\n * @return {boolean} True, if the event was generated by a touch.\n */\n_ol_pointer_MouseSource_.prototype.isEventSimulatedFromTouch_ = function(inEvent) {\n  var lts = this.lastTouches;\n  var x = inEvent.clientX, y = inEvent.clientY;\n  for (var i = 0, l = lts.length, t; i < l && (t = lts[i]); i++) {\n    // simulated mouse events will be swallowed near a primary touchend\n    var dx = Math.abs(x - t[0]), dy = Math.abs(y - t[1]);\n    if (dx <= _ol_pointer_MouseSource_.DEDUP_DIST &&\n        dy <= _ol_pointer_MouseSource_.DEDUP_DIST) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Creates a copy of the original event that will be used\n * for the fake pointer event.\n *\n * @param {Event} inEvent The in event.\n * @param {ol.pointer.PointerEventHandler} dispatcher Event handler.\n * @return {Object} The copied event.\n */\n_ol_pointer_MouseSource_.prepareEvent = function(inEvent, dispatcher) {\n  var e = dispatcher.cloneEvent(inEvent, inEvent);\n\n  // forward mouse preventDefault\n  var pd = e.preventDefault;\n  e.preventDefault = function() {\n    inEvent.preventDefault();\n    pd();\n  };\n\n  e.pointerId = _ol_pointer_MouseSource_.POINTER_ID;\n  e.isPrimary = true;\n  e.pointerType = _ol_pointer_MouseSource_.POINTER_TYPE;\n\n  return e;\n};\n\n\n/**\n * Handler for `mousedown`.\n *\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_MouseSource_.prototype.mousedown = function(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    // TODO(dfreedman) workaround for some elements not sending mouseup\n    // http://crbug/149091\n    if (_ol_pointer_MouseSource_.POINTER_ID.toString() in this.pointerMap) {\n      this.cancel(inEvent);\n    }\n    var e = _ol_pointer_MouseSource_.prepareEvent(inEvent, this.dispatcher);\n    this.pointerMap[_ol_pointer_MouseSource_.POINTER_ID.toString()] = inEvent;\n    this.dispatcher.down(e, inEvent);\n  }\n};\n\n\n/**\n * Handler for `mousemove`.\n *\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_MouseSource_.prototype.mousemove = function(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var e = _ol_pointer_MouseSource_.prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.move(e, inEvent);\n  }\n};\n\n\n/**\n * Handler for `mouseup`.\n *\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_MouseSource_.prototype.mouseup = function(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var p = this.pointerMap[_ol_pointer_MouseSource_.POINTER_ID.toString()];\n\n    if (p && p.button === inEvent.button) {\n      var e = _ol_pointer_MouseSource_.prepareEvent(inEvent, this.dispatcher);\n      this.dispatcher.up(e, inEvent);\n      this.cleanupMouse();\n    }\n  }\n};\n\n\n/**\n * Handler for `mouseover`.\n *\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_MouseSource_.prototype.mouseover = function(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var e = _ol_pointer_MouseSource_.prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.enterOver(e, inEvent);\n  }\n};\n\n\n/**\n * Handler for `mouseout`.\n *\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_MouseSource_.prototype.mouseout = function(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var e = _ol_pointer_MouseSource_.prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.leaveOut(e, inEvent);\n  }\n};\n\n\n/**\n * Dispatches a `pointercancel` event.\n *\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_MouseSource_.prototype.cancel = function(inEvent) {\n  var e = _ol_pointer_MouseSource_.prepareEvent(inEvent, this.dispatcher);\n  this.dispatcher.cancel(e, inEvent);\n  this.cleanupMouse();\n};\n\n\n/**\n * Remove the mouse from the list of active pointers.\n */\n_ol_pointer_MouseSource_.prototype.cleanupMouse = function() {\n  delete this.pointerMap[_ol_pointer_MouseSource_.POINTER_ID.toString()];\n};\nexport default _ol_pointer_MouseSource_;\n"]},"metadata":{},"sourceType":"module"}