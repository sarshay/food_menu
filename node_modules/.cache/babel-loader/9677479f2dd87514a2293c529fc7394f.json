{"ast":null,"code":"/**\n * @module ol/webgl/TileTexture\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport WebGLArrayBuffer from './Buffer.js';\nimport { ARRAY_BUFFER, STATIC_DRAW } from '../webgl.js';\nimport { toSize } from '../size.js';\n\nfunction bindAndConfigure(gl, texture) {\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n}\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image The image.\n */\n\n\nfunction uploadImageTexture(gl, texture, image) {\n  bindAndConfigure(gl, texture);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n}\n/**\n * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").Data} data The pixel data.\n * @param {import(\"../size.js\").Size} size The pixel size.\n * @param {number} bandCount The band count.\n */\n\n\nfunction uploadDataTexture(helper, texture, data, size, bandCount) {\n  var gl = helper.getGL();\n  bindAndConfigure(gl, texture);\n  var format;\n\n  switch (bandCount) {\n    case 1:\n      {\n        format = gl.LUMINANCE;\n        break;\n      }\n\n    case 2:\n      {\n        format = gl.LUMINANCE_ALPHA;\n        break;\n      }\n\n    case 3:\n      {\n        format = gl.RGB;\n        break;\n      }\n\n    case 4:\n      {\n        format = gl.RGBA;\n        break;\n      }\n\n    default:\n      {\n        throw new Error(\"Unsupported number of bands: \" + bandCount);\n      }\n  }\n\n  var textureType;\n\n  if (data instanceof Float32Array) {\n    textureType = gl.FLOAT;\n    helper.getExtension('OES_texture_float');\n    helper.getExtension('OES_texture_float_linear');\n  } else {\n    textureType = gl.UNSIGNED_BYTE;\n  }\n\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, size[0], size[1], 0, format, textureType, data);\n}\n\nvar TileTexture =\n/** @class */\nfunction (_super) {\n  __extends(TileTexture, _super);\n  /**\n   * @param {import(\"../DataTile.js\").default|import(\"../ImageTile.js\").default} tile The tile.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} grid Tile grid.\n   * @param {import(\"../webgl/Helper.js\").default} helper WebGL helper.\n   */\n\n\n  function TileTexture(tile, grid, helper) {\n    var _this = _super.call(this) || this;\n    /**\n     * @type {import(\"../DataTile.js\").default|import(\"../ImageTile.js\").default}\n     */\n\n\n    _this.tile;\n    /**\n     * @type {Array<WebGLTexture>}\n     */\n\n    _this.textures = [];\n    _this.handleTileChange_ = _this.handleTileChange_.bind(_this);\n    _this.size = toSize(grid.getTileSize(tile.tileCoord[0]));\n    _this.bandCount = NaN;\n    _this.helper_ = helper;\n    var coords = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n    coords.fromArray([0, 1, 1, 1, 1, 0, 0, 0]);\n    helper.flushBufferData(coords);\n    _this.coords = coords;\n\n    _this.setTile(tile);\n\n    return _this;\n  }\n  /**\n   * @param {import(\"../DataTile.js\").default|import(\"../ImageTile.js\").default} tile Tile.\n   */\n\n\n  TileTexture.prototype.setTile = function (tile) {\n    if (tile !== this.tile) {\n      if (this.tile) {\n        this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n\n      this.tile = tile;\n      this.textures.length = 0;\n      this.loaded = tile.getState() === TileState.LOADED;\n\n      if (this.loaded) {\n        this.uploadTile_();\n      } else {\n        tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n    }\n  };\n\n  TileTexture.prototype.uploadTile_ = function () {\n    var helper = this.helper_;\n    var gl = helper.getGL();\n    var tile = this.tile;\n\n    if (tile instanceof ImageTile) {\n      var texture = gl.createTexture();\n      this.textures.push(texture);\n      this.bandCount = 4;\n      uploadImageTexture(gl, texture, tile.getImage());\n      return;\n    }\n\n    var data = tile.getData();\n    var isFloat = data instanceof Float32Array;\n    var pixelCount = this.size[0] * this.size[1]; // Float arrays feature four bytes per element,\n    //  BYTES_PER_ELEMENT throws a TypeScript exception but would handle\n    //  this better for more varied typed arrays.\n\n    this.bandCount = data.byteLength / (isFloat ? 4 : 1) / pixelCount;\n    var textureCount = Math.ceil(this.bandCount / 4);\n\n    if (textureCount === 1) {\n      var texture = gl.createTexture();\n      this.textures.push(texture);\n      uploadDataTexture(helper, texture, data, this.size, this.bandCount);\n      return;\n    }\n\n    var DataType = isFloat ? Float32Array : Uint8Array;\n    var textureDataArrays = new Array(textureCount);\n\n    for (var textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      var texture = gl.createTexture();\n      this.textures.push(texture);\n      var bandCount = textureIndex < textureCount - 1 ? 4 : this.bandCount % 4;\n      textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);\n    }\n\n    var valueCount = pixelCount * this.bandCount;\n\n    for (var dataIndex = 0; dataIndex < valueCount; ++dataIndex) {\n      var bandIndex = dataIndex % this.bandCount;\n      var textureBandIndex = bandIndex % 4;\n      var textureIndex = Math.floor(bandIndex / 4);\n      var bandCount = textureIndex < textureCount - 1 ? 4 : this.bandCount % 4;\n      var pixelIndex = Math.floor(dataIndex / this.bandCount);\n      textureDataArrays[textureIndex][pixelIndex * bandCount + textureBandIndex] = data[dataIndex];\n    }\n\n    for (var textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      var bandCount = textureIndex < textureCount - 1 ? 4 : this.bandCount % 4;\n      var texture = this.textures[textureIndex];\n      var data_1 = textureDataArrays[textureIndex];\n      uploadDataTexture(helper, texture, data_1, this.size, bandCount);\n    }\n  };\n\n  TileTexture.prototype.handleTileChange_ = function () {\n    if (this.tile.getState() === TileState.LOADED) {\n      this.loaded = true;\n      this.uploadTile_();\n      this.dispatchEvent(EventType.CHANGE);\n    }\n  };\n\n  TileTexture.prototype.disposeInternal = function () {\n    var gl = this.helper_.getGL();\n    this.helper_.deleteBuffer(this.coords);\n\n    for (var i = 0; i < this.textures.length; ++i) {\n      gl.deleteTexture(this.textures[i]);\n    }\n\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n  };\n\n  return TileTexture;\n}(EventTarget);\n\nexport default TileTexture;","map":{"version":3,"sources":["../src/webgl/TileTexture.js"],"names":[],"mappings":"AAAA;;AAEG;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,OAAO,WAAP,MAAwB,qBAAxB;AACA,OAAO,SAAP,MAAsB,wBAAtB;AACA,OAAO,SAAP,MAAsB,iBAAtB;AACA,OAAO,SAAP,MAAsB,iBAAtB;AACA,OAAO,gBAAP,MAA6B,aAA7B;AACA,SAAQ,YAAR,EAAsB,WAAtB,QAAwC,aAAxC;AACA,SAAQ,MAAR,QAAqB,YAArB;;AAEA,SAAS,gBAAT,CAA0B,EAA1B,EAA8B,OAA9B,EAAqC;AACnC,EAAA,EAAE,CAAC,WAAH,CAAe,EAAE,CAAC,UAAlB,EAA8B,OAA9B;AACA,EAAA,EAAE,CAAC,aAAH,CAAiB,EAAE,CAAC,UAApB,EAAgC,EAAE,CAAC,cAAnC,EAAmD,EAAE,CAAC,aAAtD;AACA,EAAA,EAAE,CAAC,aAAH,CAAiB,EAAE,CAAC,UAApB,EAAgC,EAAE,CAAC,cAAnC,EAAmD,EAAE,CAAC,aAAtD;AACA,EAAA,EAAE,CAAC,aAAH,CAAiB,EAAE,CAAC,UAApB,EAAgC,EAAE,CAAC,kBAAnC,EAAuD,EAAE,CAAC,MAA1D;AACA,EAAA,EAAE,CAAC,aAAH,CAAiB,EAAE,CAAC,UAApB,EAAgC,EAAE,CAAC,kBAAnC,EAAuD,EAAE,CAAC,MAA1D;AACD;AAED;;;;AAIG;;;AACH,SAAS,kBAAT,CAA4B,EAA5B,EAAgC,OAAhC,EAAyC,KAAzC,EAA8C;AAC5C,EAAA,gBAAgB,CAAC,EAAD,EAAK,OAAL,CAAhB;AAEA,EAAA,EAAE,CAAC,UAAH,CAAc,EAAE,CAAC,UAAjB,EAA6B,CAA7B,EAAgC,EAAE,CAAC,IAAnC,EAAyC,EAAE,CAAC,IAA5C,EAAkD,EAAE,CAAC,aAArD,EAAoE,KAApE;AACD;AAED;;;;;;AAMG;;;AACH,SAAS,iBAAT,CAA2B,MAA3B,EAAmC,OAAnC,EAA4C,IAA5C,EAAkD,IAAlD,EAAwD,SAAxD,EAAiE;AAC/D,MAAM,EAAE,GAAG,MAAM,CAAC,KAAP,EAAX;AACA,EAAA,gBAAgB,CAAC,EAAD,EAAK,OAAL,CAAhB;AAEA,MAAI,MAAJ;;AACA,UAAQ,SAAR;AACE,SAAK,CAAL;AAAQ;AACN,QAAA,MAAM,GAAG,EAAE,CAAC,SAAZ;AACA;AACD;;AACD,SAAK,CAAL;AAAQ;AACN,QAAA,MAAM,GAAG,EAAE,CAAC,eAAZ;AACA;AACD;;AACD,SAAK,CAAL;AAAQ;AACN,QAAA,MAAM,GAAG,EAAE,CAAC,GAAZ;AACA;AACD;;AACD,SAAK,CAAL;AAAQ;AACN,QAAA,MAAM,GAAG,EAAE,CAAC,IAAZ;AACA;AACD;;AACD;AAAS;AACP,cAAM,IAAI,KAAJ,CAAU,kCAAgC,SAA1C,CAAN;AACD;AAnBH;;AAsBA,MAAI,WAAJ;;AACA,MAAI,IAAI,YAAY,YAApB,EAAkC;AAChC,IAAA,WAAW,GAAG,EAAE,CAAC,KAAjB;AACA,IAAA,MAAM,CAAC,YAAP,CAAoB,mBAApB;AACA,IAAA,MAAM,CAAC,YAAP,CAAoB,0BAApB;AACD,GAJD,MAIO;AACL,IAAA,WAAW,GAAG,EAAE,CAAC,aAAjB;AACD;;AAED,EAAA,EAAE,CAAC,UAAH,CACE,EAAE,CAAC,UADL,EAEE,CAFF,EAGE,MAHF,EAIE,IAAI,CAAC,CAAD,CAJN,EAKE,IAAI,CAAC,CAAD,CALN,EAME,CANF,EAOE,MAPF,EAQE,WARF,EASE,IATF;AAWD;;AAED,IAAA,WAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0B,EAAA,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;AACxB;;;;AAIG;;;AACH,WAAA,WAAA,CAAY,IAAZ,EAAkB,IAAlB,EAAwB,MAAxB,EAA8B;AAA9B,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADT;AAGE;;AAEG;;;AACH,IAAA,KAAI,CAAC,IAAL;AAEA;;AAEG;;AACH,IAAA,KAAI,CAAC,QAAL,GAAgB,EAAhB;AACA,IAAA,KAAI,CAAC,iBAAL,GAAyB,KAAI,CAAC,iBAAL,CAAuB,IAAvB,CAA4B,KAA5B,CAAzB;AAEA,IAAA,KAAI,CAAC,IAAL,GAAY,MAAM,CAAC,IAAI,CAAC,WAAL,CAAiB,IAAI,CAAC,SAAL,CAAe,CAAf,CAAjB,CAAD,CAAlB;AAEA,IAAA,KAAI,CAAC,SAAL,GAAiB,GAAjB;AAEA,IAAA,KAAI,CAAC,OAAL,GAAe,MAAf;AAEA,QAAM,MAAM,GAAG,IAAI,gBAAJ,CAAqB,YAArB,EAAmC,WAAnC,CAAf;AACA,IAAA,MAAM,CAAC,SAAP,CAAiB,CACf,CADe,EAEf,CAFe,EAGf,CAHe,EAIf,CAJe,EAKf,CALe,EAMf,CANe,EAOf,CAPe,EAQf,CARe,CAAjB;AAUA,IAAA,MAAM,CAAC,eAAP,CAAuB,MAAvB;AAEA,IAAA,KAAI,CAAC,MAAL,GAAc,MAAd;;AACA,IAAA,KAAI,CAAC,OAAL,CAAa,IAAb;;;AACD;AAED;;AAEG;;;AACH,EAAA,WAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,IAAR,EAAY;AACV,QAAI,IAAI,KAAK,KAAK,IAAlB,EAAwB;AACtB,UAAI,KAAK,IAAT,EAAe;AACb,aAAK,IAAL,CAAU,mBAAV,CAA8B,SAAS,CAAC,MAAxC,EAAgD,KAAK,iBAArD;AACD;;AACD,WAAK,IAAL,GAAY,IAAZ;AACA,WAAK,QAAL,CAAc,MAAd,GAAuB,CAAvB;AACA,WAAK,MAAL,GAAc,IAAI,CAAC,QAAL,OAAoB,SAAS,CAAC,MAA5C;;AACA,UAAI,KAAK,MAAT,EAAiB;AACf,aAAK,WAAL;AACD,OAFD,MAEO;AACL,QAAA,IAAI,CAAC,gBAAL,CAAsB,SAAS,CAAC,MAAhC,EAAwC,KAAK,iBAA7C;AACD;AACF;AACF,GAdD;;AAgBA,EAAA,WAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,QAAM,MAAM,GAAG,KAAK,OAApB;AACA,QAAM,EAAE,GAAG,MAAM,CAAC,KAAP,EAAX;AACA,QAAM,IAAI,GAAG,KAAK,IAAlB;;AAEA,QAAI,IAAI,YAAY,SAApB,EAA+B;AAC7B,UAAM,OAAO,GAAG,EAAE,CAAC,aAAH,EAAhB;AACA,WAAK,QAAL,CAAc,IAAd,CAAmB,OAAnB;AACA,WAAK,SAAL,GAAiB,CAAjB;AACA,MAAA,kBAAkB,CAAC,EAAD,EAAK,OAAL,EAAc,IAAI,CAAC,QAAL,EAAd,CAAlB;AACA;AACD;;AAED,QAAM,IAAI,GAAG,IAAI,CAAC,OAAL,EAAb;AACA,QAAM,OAAO,GAAG,IAAI,YAAY,YAAhC;AACA,QAAM,UAAU,GAAG,KAAK,IAAL,CAAU,CAAV,IAAe,KAAK,IAAL,CAAU,CAAV,CAAlC,CAfF,CAgBE;AACA;AACA;;AACA,SAAK,SAAL,GAAiB,IAAI,CAAC,UAAL,IAAmB,OAAO,GAAG,CAAH,GAAO,CAAjC,IAAsC,UAAvD;AACA,QAAM,YAAY,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,SAAL,GAAiB,CAA3B,CAArB;;AAEA,QAAI,YAAY,KAAK,CAArB,EAAwB;AACtB,UAAM,OAAO,GAAG,EAAE,CAAC,aAAH,EAAhB;AACA,WAAK,QAAL,CAAc,IAAd,CAAmB,OAAnB;AACA,MAAA,iBAAiB,CAAC,MAAD,EAAS,OAAT,EAAkB,IAAlB,EAAwB,KAAK,IAA7B,EAAmC,KAAK,SAAxC,CAAjB;AACA;AACD;;AAED,QAAM,QAAQ,GAAG,OAAO,GAAG,YAAH,GAAkB,UAA1C;AAEA,QAAM,iBAAiB,GAAG,IAAI,KAAJ,CAAU,YAAV,CAA1B;;AACA,SAAK,IAAI,YAAY,GAAG,CAAxB,EAA2B,YAAY,GAAG,YAA1C,EAAwD,EAAE,YAA1D,EAAwE;AACtE,UAAM,OAAO,GAAG,EAAE,CAAC,aAAH,EAAhB;AACA,WAAK,QAAL,CAAc,IAAd,CAAmB,OAAnB;AAEA,UAAM,SAAS,GACb,YAAY,GAAG,YAAY,GAAG,CAA9B,GAAkC,CAAlC,GAAsC,KAAK,SAAL,GAAiB,CADzD;AAEA,MAAA,iBAAiB,CAAC,YAAD,CAAjB,GAAkC,IAAI,QAAJ,CAAa,UAAU,GAAG,SAA1B,CAAlC;AACD;;AAED,QAAM,UAAU,GAAG,UAAU,GAAG,KAAK,SAArC;;AACA,SAAK,IAAI,SAAS,GAAG,CAArB,EAAwB,SAAS,GAAG,UAApC,EAAgD,EAAE,SAAlD,EAA6D;AAC3D,UAAM,SAAS,GAAG,SAAS,GAAG,KAAK,SAAnC;AACA,UAAM,gBAAgB,GAAG,SAAS,GAAG,CAArC;AACA,UAAM,YAAY,GAAG,IAAI,CAAC,KAAL,CAAW,SAAS,GAAG,CAAvB,CAArB;AACA,UAAM,SAAS,GACb,YAAY,GAAG,YAAY,GAAG,CAA9B,GAAkC,CAAlC,GAAsC,KAAK,SAAL,GAAiB,CADzD;AAEA,UAAM,UAAU,GAAG,IAAI,CAAC,KAAL,CAAW,SAAS,GAAG,KAAK,SAA5B,CAAnB;AACA,MAAA,iBAAiB,CAAC,YAAD,CAAjB,CACE,UAAU,GAAG,SAAb,GAAyB,gBAD3B,IAEI,IAAI,CAAC,SAAD,CAFR;AAGD;;AAED,SAAK,IAAI,YAAY,GAAG,CAAxB,EAA2B,YAAY,GAAG,YAA1C,EAAwD,EAAE,YAA1D,EAAwE;AACtE,UAAM,SAAS,GACb,YAAY,GAAG,YAAY,GAAG,CAA9B,GAAkC,CAAlC,GAAsC,KAAK,SAAL,GAAiB,CADzD;AAEA,UAAM,OAAO,GAAG,KAAK,QAAL,CAAc,YAAd,CAAhB;AACA,UAAM,MAAI,GAAG,iBAAiB,CAAC,YAAD,CAA9B;AACA,MAAA,iBAAiB,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAAwB,KAAK,IAA7B,EAAmC,SAAnC,CAAjB;AACD;AACF,GA7DD;;AA+DA,EAAA,WAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,YAAA;AACE,QAAI,KAAK,IAAL,CAAU,QAAV,OAAyB,SAAS,CAAC,MAAvC,EAA+C;AAC7C,WAAK,MAAL,GAAc,IAAd;AACA,WAAK,WAAL;AACA,WAAK,aAAL,CAAmB,SAAS,CAAC,MAA7B;AACD;AACF,GAND;;AAQA,EAAA,WAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;AACE,QAAM,EAAE,GAAG,KAAK,OAAL,CAAa,KAAb,EAAX;AACA,SAAK,OAAL,CAAa,YAAb,CAA0B,KAAK,MAA/B;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,QAAL,CAAc,MAAlC,EAA0C,EAAE,CAA5C,EAA+C;AAC7C,MAAA,EAAE,CAAC,aAAH,CAAiB,KAAK,QAAL,CAAc,CAAd,CAAjB;AACD;;AACD,SAAK,IAAL,CAAU,mBAAV,CAA8B,SAAS,CAAC,MAAxC,EAAgD,KAAK,iBAArD;AACD,GAPD;;AAQF,SAAA,WAAA;AAAC,CA7ID,CAA0B,WAA1B,CAAA;;AA+IA,eAAe,WAAf","sourceRoot":"","sourcesContent":["/**\n * @module ol/webgl/TileTexture\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport WebGLArrayBuffer from './Buffer.js';\nimport { ARRAY_BUFFER, STATIC_DRAW } from '../webgl.js';\nimport { toSize } from '../size.js';\nfunction bindAndConfigure(gl, texture) {\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n}\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image The image.\n */\nfunction uploadImageTexture(gl, texture, image) {\n    bindAndConfigure(gl, texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n}\n/**\n * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").Data} data The pixel data.\n * @param {import(\"../size.js\").Size} size The pixel size.\n * @param {number} bandCount The band count.\n */\nfunction uploadDataTexture(helper, texture, data, size, bandCount) {\n    var gl = helper.getGL();\n    bindAndConfigure(gl, texture);\n    var format;\n    switch (bandCount) {\n        case 1: {\n            format = gl.LUMINANCE;\n            break;\n        }\n        case 2: {\n            format = gl.LUMINANCE_ALPHA;\n            break;\n        }\n        case 3: {\n            format = gl.RGB;\n            break;\n        }\n        case 4: {\n            format = gl.RGBA;\n            break;\n        }\n        default: {\n            throw new Error(\"Unsupported number of bands: \" + bandCount);\n        }\n    }\n    var textureType;\n    if (data instanceof Float32Array) {\n        textureType = gl.FLOAT;\n        helper.getExtension('OES_texture_float');\n        helper.getExtension('OES_texture_float_linear');\n    }\n    else {\n        textureType = gl.UNSIGNED_BYTE;\n    }\n    gl.texImage2D(gl.TEXTURE_2D, 0, format, size[0], size[1], 0, format, textureType, data);\n}\nvar TileTexture = /** @class */ (function (_super) {\n    __extends(TileTexture, _super);\n    /**\n     * @param {import(\"../DataTile.js\").default|import(\"../ImageTile.js\").default} tile The tile.\n     * @param {import(\"../tilegrid/TileGrid.js\").default} grid Tile grid.\n     * @param {import(\"../webgl/Helper.js\").default} helper WebGL helper.\n     */\n    function TileTexture(tile, grid, helper) {\n        var _this = _super.call(this) || this;\n        /**\n         * @type {import(\"../DataTile.js\").default|import(\"../ImageTile.js\").default}\n         */\n        _this.tile;\n        /**\n         * @type {Array<WebGLTexture>}\n         */\n        _this.textures = [];\n        _this.handleTileChange_ = _this.handleTileChange_.bind(_this);\n        _this.size = toSize(grid.getTileSize(tile.tileCoord[0]));\n        _this.bandCount = NaN;\n        _this.helper_ = helper;\n        var coords = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n        coords.fromArray([\n            0,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n        ]);\n        helper.flushBufferData(coords);\n        _this.coords = coords;\n        _this.setTile(tile);\n        return _this;\n    }\n    /**\n     * @param {import(\"../DataTile.js\").default|import(\"../ImageTile.js\").default} tile Tile.\n     */\n    TileTexture.prototype.setTile = function (tile) {\n        if (tile !== this.tile) {\n            if (this.tile) {\n                this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n            }\n            this.tile = tile;\n            this.textures.length = 0;\n            this.loaded = tile.getState() === TileState.LOADED;\n            if (this.loaded) {\n                this.uploadTile_();\n            }\n            else {\n                tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n            }\n        }\n    };\n    TileTexture.prototype.uploadTile_ = function () {\n        var helper = this.helper_;\n        var gl = helper.getGL();\n        var tile = this.tile;\n        if (tile instanceof ImageTile) {\n            var texture = gl.createTexture();\n            this.textures.push(texture);\n            this.bandCount = 4;\n            uploadImageTexture(gl, texture, tile.getImage());\n            return;\n        }\n        var data = tile.getData();\n        var isFloat = data instanceof Float32Array;\n        var pixelCount = this.size[0] * this.size[1];\n        // Float arrays feature four bytes per element,\n        //  BYTES_PER_ELEMENT throws a TypeScript exception but would handle\n        //  this better for more varied typed arrays.\n        this.bandCount = data.byteLength / (isFloat ? 4 : 1) / pixelCount;\n        var textureCount = Math.ceil(this.bandCount / 4);\n        if (textureCount === 1) {\n            var texture = gl.createTexture();\n            this.textures.push(texture);\n            uploadDataTexture(helper, texture, data, this.size, this.bandCount);\n            return;\n        }\n        var DataType = isFloat ? Float32Array : Uint8Array;\n        var textureDataArrays = new Array(textureCount);\n        for (var textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n            var texture = gl.createTexture();\n            this.textures.push(texture);\n            var bandCount = textureIndex < textureCount - 1 ? 4 : this.bandCount % 4;\n            textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);\n        }\n        var valueCount = pixelCount * this.bandCount;\n        for (var dataIndex = 0; dataIndex < valueCount; ++dataIndex) {\n            var bandIndex = dataIndex % this.bandCount;\n            var textureBandIndex = bandIndex % 4;\n            var textureIndex = Math.floor(bandIndex / 4);\n            var bandCount = textureIndex < textureCount - 1 ? 4 : this.bandCount % 4;\n            var pixelIndex = Math.floor(dataIndex / this.bandCount);\n            textureDataArrays[textureIndex][pixelIndex * bandCount + textureBandIndex] = data[dataIndex];\n        }\n        for (var textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n            var bandCount = textureIndex < textureCount - 1 ? 4 : this.bandCount % 4;\n            var texture = this.textures[textureIndex];\n            var data_1 = textureDataArrays[textureIndex];\n            uploadDataTexture(helper, texture, data_1, this.size, bandCount);\n        }\n    };\n    TileTexture.prototype.handleTileChange_ = function () {\n        if (this.tile.getState() === TileState.LOADED) {\n            this.loaded = true;\n            this.uploadTile_();\n            this.dispatchEvent(EventType.CHANGE);\n        }\n    };\n    TileTexture.prototype.disposeInternal = function () {\n        var gl = this.helper_.getGL();\n        this.helper_.deleteBuffer(this.coords);\n        for (var i = 0; i < this.textures.length; ++i) {\n            gl.deleteTexture(this.textures[i]);\n        }\n        this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n    };\n    return TileTexture;\n}(EventTarget));\nexport default TileTexture;\n//# sourceMappingURL=TileTexture.js.map"]},"metadata":{},"sourceType":"module"}