{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_ViewHint_ from '../viewhint.js';\nimport _ol_functions_ from '../functions.js';\nimport _ol_interaction_Interaction_ from '../interaction/interaction.js';\nimport _ol_interaction_Pointer_ from '../interaction/pointer.js';\nimport _ol_RotationConstraint_ from '../rotationconstraint.js';\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n *\n * @constructor\n * @extends {ol.interaction.Pointer}\n * @param {olx.interaction.PinchRotateOptions=} opt_options Options.\n * @api\n */\n\nvar _ol_interaction_PinchRotate_ = function (opt_options) {\n  _ol_interaction_Pointer_.call(this, {\n    handleDownEvent: _ol_interaction_PinchRotate_.handleDownEvent_,\n    handleDragEvent: _ol_interaction_PinchRotate_.handleDragEvent_,\n    handleUpEvent: _ol_interaction_PinchRotate_.handleUpEvent_\n  });\n\n  var options = opt_options || {};\n  /**\n   * @private\n   * @type {ol.Coordinate}\n   */\n\n  this.anchor_ = null;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.lastAngle_ = undefined;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.rotating_ = false;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.rotationDelta_ = 0.0;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.duration_ = options.duration !== undefined ? options.duration : 250;\n};\n\n_ol_.inherits(_ol_interaction_PinchRotate_, _ol_interaction_Pointer_);\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {ol.interaction.PinchRotate}\n * @private\n */\n\n\n_ol_interaction_PinchRotate_.handleDragEvent_ = function (mapBrowserEvent) {\n  var rotationDelta = 0.0;\n  var touch0 = this.targetPointers[0];\n  var touch1 = this.targetPointers[1]; // angle between touches\n\n  var angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);\n\n  if (this.lastAngle_ !== undefined) {\n    var delta = angle - this.lastAngle_;\n    this.rotationDelta_ += delta;\n\n    if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {\n      this.rotating_ = true;\n    }\n\n    rotationDelta = delta;\n  }\n\n  this.lastAngle_ = angle;\n  var map = mapBrowserEvent.map;\n  var view = map.getView();\n\n  if (view.getConstraints().rotation === _ol_RotationConstraint_.disable) {\n    return;\n  } // rotate anchor point.\n  // FIXME: should be the intersection point between the lines:\n  //     touch0,touch1 and previousTouch0,previousTouch1\n\n\n  var viewportPosition = map.getViewport().getBoundingClientRect();\n\n  var centroid = _ol_interaction_Pointer_.centroid(this.targetPointers);\n\n  centroid[0] -= viewportPosition.left;\n  centroid[1] -= viewportPosition.top;\n  this.anchor_ = map.getCoordinateFromPixel(centroid); // rotate\n\n  if (this.rotating_) {\n    var rotation = view.getRotation();\n    map.render();\n\n    _ol_interaction_Interaction_.rotateWithoutConstraints(view, rotation + rotationDelta, this.anchor_);\n  }\n};\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Stop drag sequence?\n * @this {ol.interaction.PinchRotate}\n * @private\n */\n\n\n_ol_interaction_PinchRotate_.handleUpEvent_ = function (mapBrowserEvent) {\n  if (this.targetPointers.length < 2) {\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    view.setHint(_ol_ViewHint_.INTERACTING, -1);\n\n    if (this.rotating_) {\n      var rotation = view.getRotation();\n\n      _ol_interaction_Interaction_.rotate(view, rotation, this.anchor_, this.duration_);\n    }\n\n    return false;\n  } else {\n    return true;\n  }\n};\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Start drag sequence?\n * @this {ol.interaction.PinchRotate}\n * @private\n */\n\n\n_ol_interaction_PinchRotate_.handleDownEvent_ = function (mapBrowserEvent) {\n  if (this.targetPointers.length >= 2) {\n    var map = mapBrowserEvent.map;\n    this.anchor_ = null;\n    this.lastAngle_ = undefined;\n    this.rotating_ = false;\n    this.rotationDelta_ = 0.0;\n\n    if (!this.handlingDownUpSequence) {\n      map.getView().setHint(_ol_ViewHint_.INTERACTING, 1);\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_interaction_PinchRotate_.prototype.shouldStopEvent = _ol_functions_.FALSE;\nexport default _ol_interaction_PinchRotate_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/interaction/pinchrotate.js"],"names":["_ol_","_ol_ViewHint_","_ol_functions_","_ol_interaction_Interaction_","_ol_interaction_Pointer_","_ol_RotationConstraint_","_ol_interaction_PinchRotate_","opt_options","call","handleDownEvent","handleDownEvent_","handleDragEvent","handleDragEvent_","handleUpEvent","handleUpEvent_","options","anchor_","lastAngle_","undefined","rotating_","rotationDelta_","threshold_","threshold","duration_","duration","inherits","mapBrowserEvent","rotationDelta","touch0","targetPointers","touch1","angle","Math","atan2","clientY","clientX","delta","abs","map","view","getView","getConstraints","rotation","disable","viewportPosition","getViewport","getBoundingClientRect","centroid","left","top","getCoordinateFromPixel","getRotation","render","rotateWithoutConstraints","length","setHint","INTERACTING","rotate","handlingDownUpSequence","prototype","shouldStopEvent","FALSE"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,4BAAP,MAAyC,+BAAzC;AACA,OAAOC,wBAAP,MAAqC,2BAArC;AACA,OAAOC,uBAAP,MAAoC,0BAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,4BAA4B,GAAG,UAASC,WAAT,EAAsB;AAEvDH,EAAAA,wBAAwB,CAACI,IAAzB,CAA8B,IAA9B,EAAoC;AAClCC,IAAAA,eAAe,EAAEH,4BAA4B,CAACI,gBADZ;AAElCC,IAAAA,eAAe,EAAEL,4BAA4B,CAACM,gBAFZ;AAGlCC,IAAAA,aAAa,EAAEP,4BAA4B,CAACQ;AAHV,GAApC;;AAMA,MAAIC,OAAO,GAAGR,WAAW,IAAI,EAA7B;AAEA;AACF;AACA;AACA;;AACE,OAAKS,OAAL,GAAe,IAAf;AAEA;AACF;AACA;AACA;;AACE,OAAKC,UAAL,GAAkBC,SAAlB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,SAAL,GAAiB,KAAjB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,cAAL,GAAsB,GAAtB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,UAAL,GAAkBN,OAAO,CAACO,SAAR,KAAsBJ,SAAtB,GAAkCH,OAAO,CAACO,SAA1C,GAAsD,GAAxE;AAEA;AACF;AACA;AACA;;AACE,OAAKC,SAAL,GAAiBR,OAAO,CAACS,QAAR,KAAqBN,SAArB,GAAiCH,OAAO,CAACS,QAAzC,GAAoD,GAArE;AAED,CA9CD;;AAgDAxB,IAAI,CAACyB,QAAL,CAAcnB,4BAAd,EAA4CF,wBAA5C;AAGA;AACA;AACA;AACA;AACA;;;AACAE,4BAA4B,CAACM,gBAA7B,GAAgD,UAASc,eAAT,EAA0B;AACxE,MAAIC,aAAa,GAAG,GAApB;AAEA,MAAIC,MAAM,GAAG,KAAKC,cAAL,CAAoB,CAApB,CAAb;AACA,MAAIC,MAAM,GAAG,KAAKD,cAAL,CAAoB,CAApB,CAAb,CAJwE,CAMxE;;AACA,MAAIE,KAAK,GAAGC,IAAI,CAACC,KAAL,CACRH,MAAM,CAACI,OAAP,GAAiBN,MAAM,CAACM,OADhB,EAERJ,MAAM,CAACK,OAAP,GAAiBP,MAAM,CAACO,OAFhB,CAAZ;;AAIA,MAAI,KAAKlB,UAAL,KAAoBC,SAAxB,EAAmC;AACjC,QAAIkB,KAAK,GAAGL,KAAK,GAAG,KAAKd,UAAzB;AACA,SAAKG,cAAL,IAAuBgB,KAAvB;;AACA,QAAI,CAAC,KAAKjB,SAAN,IACAa,IAAI,CAACK,GAAL,CAAS,KAAKjB,cAAd,IAAgC,KAAKC,UADzC,EACqD;AACnD,WAAKF,SAAL,GAAiB,IAAjB;AACD;;AACDQ,IAAAA,aAAa,GAAGS,KAAhB;AACD;;AACD,OAAKnB,UAAL,GAAkBc,KAAlB;AAEA,MAAIO,GAAG,GAAGZ,eAAe,CAACY,GAA1B;AACA,MAAIC,IAAI,GAAGD,GAAG,CAACE,OAAJ,EAAX;;AACA,MAAID,IAAI,CAACE,cAAL,GAAsBC,QAAtB,KAAmCrC,uBAAuB,CAACsC,OAA/D,EAAwE;AACtE;AACD,GA1BuE,CA4BxE;AACA;AACA;;;AACA,MAAIC,gBAAgB,GAAGN,GAAG,CAACO,WAAJ,GAAkBC,qBAAlB,EAAvB;;AACA,MAAIC,QAAQ,GAAG3C,wBAAwB,CAAC2C,QAAzB,CAAkC,KAAKlB,cAAvC,CAAf;;AACAkB,EAAAA,QAAQ,CAAC,CAAD,CAAR,IAAeH,gBAAgB,CAACI,IAAhC;AACAD,EAAAA,QAAQ,CAAC,CAAD,CAAR,IAAeH,gBAAgB,CAACK,GAAhC;AACA,OAAKjC,OAAL,GAAesB,GAAG,CAACY,sBAAJ,CAA2BH,QAA3B,CAAf,CAnCwE,CAqCxE;;AACA,MAAI,KAAK5B,SAAT,EAAoB;AAClB,QAAIuB,QAAQ,GAAGH,IAAI,CAACY,WAAL,EAAf;AACAb,IAAAA,GAAG,CAACc,MAAJ;;AACAjD,IAAAA,4BAA4B,CAACkD,wBAA7B,CAAsDd,IAAtD,EACIG,QAAQ,GAAGf,aADf,EAC8B,KAAKX,OADnC;AAED;AACF,CA5CD;AA+CA;AACA;AACA;AACA;AACA;AACA;;;AACAV,4BAA4B,CAACQ,cAA7B,GAA8C,UAASY,eAAT,EAA0B;AACtE,MAAI,KAAKG,cAAL,CAAoByB,MAApB,GAA6B,CAAjC,EAAoC;AAClC,QAAIhB,GAAG,GAAGZ,eAAe,CAACY,GAA1B;AACA,QAAIC,IAAI,GAAGD,GAAG,CAACE,OAAJ,EAAX;AACAD,IAAAA,IAAI,CAACgB,OAAL,CAAatD,aAAa,CAACuD,WAA3B,EAAwC,CAAC,CAAzC;;AACA,QAAI,KAAKrC,SAAT,EAAoB;AAClB,UAAIuB,QAAQ,GAAGH,IAAI,CAACY,WAAL,EAAf;;AACAhD,MAAAA,4BAA4B,CAACsD,MAA7B,CACIlB,IADJ,EACUG,QADV,EACoB,KAAK1B,OADzB,EACkC,KAAKO,SADvC;AAED;;AACD,WAAO,KAAP;AACD,GAVD,MAUO;AACL,WAAO,IAAP;AACD;AACF,CAdD;AAiBA;AACA;AACA;AACA;AACA;AACA;;;AACAjB,4BAA4B,CAACI,gBAA7B,GAAgD,UAASgB,eAAT,EAA0B;AACxE,MAAI,KAAKG,cAAL,CAAoByB,MAApB,IAA8B,CAAlC,EAAqC;AACnC,QAAIhB,GAAG,GAAGZ,eAAe,CAACY,GAA1B;AACA,SAAKtB,OAAL,GAAe,IAAf;AACA,SAAKC,UAAL,GAAkBC,SAAlB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,cAAL,GAAsB,GAAtB;;AACA,QAAI,CAAC,KAAKsC,sBAAV,EAAkC;AAChCpB,MAAAA,GAAG,CAACE,OAAJ,GAAce,OAAd,CAAsBtD,aAAa,CAACuD,WAApC,EAAiD,CAAjD;AACD;;AACD,WAAO,IAAP;AACD,GAVD,MAUO;AACL,WAAO,KAAP;AACD;AACF,CAdD;AAiBA;AACA;AACA;;;AACAlD,4BAA4B,CAACqD,SAA7B,CAAuCC,eAAvC,GAAyD1D,cAAc,CAAC2D,KAAxE;AACA,eAAevD,4BAAf","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_ViewHint_ from '../viewhint.js';\nimport _ol_functions_ from '../functions.js';\nimport _ol_interaction_Interaction_ from '../interaction/interaction.js';\nimport _ol_interaction_Pointer_ from '../interaction/pointer.js';\nimport _ol_RotationConstraint_ from '../rotationconstraint.js';\n\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n *\n * @constructor\n * @extends {ol.interaction.Pointer}\n * @param {olx.interaction.PinchRotateOptions=} opt_options Options.\n * @api\n */\nvar _ol_interaction_PinchRotate_ = function(opt_options) {\n\n  _ol_interaction_Pointer_.call(this, {\n    handleDownEvent: _ol_interaction_PinchRotate_.handleDownEvent_,\n    handleDragEvent: _ol_interaction_PinchRotate_.handleDragEvent_,\n    handleUpEvent: _ol_interaction_PinchRotate_.handleUpEvent_\n  });\n\n  var options = opt_options || {};\n\n  /**\n   * @private\n   * @type {ol.Coordinate}\n   */\n  this.anchor_ = null;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.lastAngle_ = undefined;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.rotating_ = false;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.rotationDelta_ = 0.0;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.duration_ = options.duration !== undefined ? options.duration : 250;\n\n};\n\n_ol_.inherits(_ol_interaction_PinchRotate_, _ol_interaction_Pointer_);\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {ol.interaction.PinchRotate}\n * @private\n */\n_ol_interaction_PinchRotate_.handleDragEvent_ = function(mapBrowserEvent) {\n  var rotationDelta = 0.0;\n\n  var touch0 = this.targetPointers[0];\n  var touch1 = this.targetPointers[1];\n\n  // angle between touches\n  var angle = Math.atan2(\n      touch1.clientY - touch0.clientY,\n      touch1.clientX - touch0.clientX);\n\n  if (this.lastAngle_ !== undefined) {\n    var delta = angle - this.lastAngle_;\n    this.rotationDelta_ += delta;\n    if (!this.rotating_ &&\n        Math.abs(this.rotationDelta_) > this.threshold_) {\n      this.rotating_ = true;\n    }\n    rotationDelta = delta;\n  }\n  this.lastAngle_ = angle;\n\n  var map = mapBrowserEvent.map;\n  var view = map.getView();\n  if (view.getConstraints().rotation === _ol_RotationConstraint_.disable) {\n    return;\n  }\n\n  // rotate anchor point.\n  // FIXME: should be the intersection point between the lines:\n  //     touch0,touch1 and previousTouch0,previousTouch1\n  var viewportPosition = map.getViewport().getBoundingClientRect();\n  var centroid = _ol_interaction_Pointer_.centroid(this.targetPointers);\n  centroid[0] -= viewportPosition.left;\n  centroid[1] -= viewportPosition.top;\n  this.anchor_ = map.getCoordinateFromPixel(centroid);\n\n  // rotate\n  if (this.rotating_) {\n    var rotation = view.getRotation();\n    map.render();\n    _ol_interaction_Interaction_.rotateWithoutConstraints(view,\n        rotation + rotationDelta, this.anchor_);\n  }\n};\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Stop drag sequence?\n * @this {ol.interaction.PinchRotate}\n * @private\n */\n_ol_interaction_PinchRotate_.handleUpEvent_ = function(mapBrowserEvent) {\n  if (this.targetPointers.length < 2) {\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    view.setHint(_ol_ViewHint_.INTERACTING, -1);\n    if (this.rotating_) {\n      var rotation = view.getRotation();\n      _ol_interaction_Interaction_.rotate(\n          view, rotation, this.anchor_, this.duration_);\n    }\n    return false;\n  } else {\n    return true;\n  }\n};\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Start drag sequence?\n * @this {ol.interaction.PinchRotate}\n * @private\n */\n_ol_interaction_PinchRotate_.handleDownEvent_ = function(mapBrowserEvent) {\n  if (this.targetPointers.length >= 2) {\n    var map = mapBrowserEvent.map;\n    this.anchor_ = null;\n    this.lastAngle_ = undefined;\n    this.rotating_ = false;\n    this.rotationDelta_ = 0.0;\n    if (!this.handlingDownUpSequence) {\n      map.getView().setHint(_ol_ViewHint_.INTERACTING, 1);\n    }\n    return true;\n  } else {\n    return false;\n  }\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_interaction_PinchRotate_.prototype.shouldStopEvent = _ol_functions_.FALSE;\nexport default _ol_interaction_PinchRotate_;\n"]},"metadata":{},"sourceType":"module"}