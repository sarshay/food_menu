{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\food_menu\\\\src\\\\map\\\\map.js\";\nimport React, { Component } from \"react\";\nimport OlMap from \"ol/map\";\nimport OlView from \"ol/view\";\nimport OlLayerTile from \"ol/layer/tile\";\nimport OlSourceOSM from \"ol/source/osm\";\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport VectorSource from 'ol/source/Vector';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol'; // import {fromLonLat} from 'ol/proj';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst rome = new Feature({\n  geometry: new Point([50415068.71848947, 2286631.4318463975])\n});\nconst vectorSource = new VectorSource({\n  features: [rome]\n});\nconst vectorLayer = new VectorLayer({\n  source: vectorSource\n});\n\nclass PublicMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      center: [0, 0],\n      zoom: 1\n    };\n    this.olmap = new OlMap({\n      target: null,\n      layers: [new OlLayerTile({\n        source: new OlSourceOSM()\n      }), vectorLayer],\n      view: new OlView({\n        center: this.state.center,\n        zoom: this.state.zoom\n      })\n    });\n  }\n\n  updateMap() {\n    this.olmap.getView().setCenter(this.state.center);\n    this.olmap.getView().setZoom(this.state.zoom);\n  }\n\n  componentDidMount() {\n    this.olmap.setTarget(\"map\"); // Listen to map changes\n\n    this.olmap.on(\"moveend\", () => {\n      let center = this.olmap.getView().getCenter();\n      let zoom = this.olmap.getView().getZoom();\n      this.setState({\n        center,\n        zoom\n      });\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    let center = this.olmap.getView().getCenter();\n    let zoom = this.olmap.getView().getZoom();\n    if (center === nextState.center && zoom === nextState.zoom) return false;\n    return true;\n  }\n\n  userAction() {\n    this.setState({\n      center: [50415068.71848947, 2286631.4318463975],\n      zoom: 13\n    });\n    console.log(this.olmap.getView().getCenter());\n  }\n\n  render() {\n    this.updateMap(); // Update map on render?\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        width: \"100%\",\n        height: \"360px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => this.userAction(),\n        children: this.olmap.getView().getCenter()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default PublicMap;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/src/map/map.js"],"names":["React","Component","OlMap","OlView","OlLayerTile","OlSourceOSM","Feature","Point","VectorSource","Tile","TileLayer","Vector","VectorLayer","rome","geometry","vectorSource","features","vectorLayer","source","PublicMap","constructor","props","state","center","zoom","olmap","target","layers","view","updateMap","getView","setCenter","setZoom","componentDidMount","setTarget","on","getCenter","getZoom","setState","shouldComponentUpdate","nextProps","nextState","userAction","console","log","render","width","height","e"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport OlMap from \"ol/map\";\r\nimport OlView from \"ol/view\";\r\nimport OlLayerTile from \"ol/layer/tile\";\r\nimport OlSourceOSM from \"ol/source/osm\";\r\nimport Feature from 'ol/Feature';\r\nimport Point from 'ol/geom/Point';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from 'ol';\r\n// import {fromLonLat} from 'ol/proj';\r\n\r\nconst rome = new Feature({\r\n  geometry: new Point([50415068.71848947, 2286631.4318463975]),\r\n});\r\nconst vectorSource = new VectorSource({\r\n  features: [rome],\r\n});\r\nconst vectorLayer = new VectorLayer({\r\n  source: vectorSource,\r\n});\r\n\r\nclass PublicMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { center: [0, 0], zoom: 1 };\r\n\r\n    this.olmap = new OlMap({\r\n      target: null,\r\n      layers: [\r\n        new OlLayerTile({\r\n          source: new OlSourceOSM()\r\n        }),\r\n        vectorLayer\r\n      ],\r\n      view: new OlView({\r\n        center: this.state.center,\r\n        zoom: this.state.zoom\r\n      })\r\n    });\r\n  }\r\n\r\n  updateMap() {\r\n    this.olmap.getView().setCenter(this.state.center);\r\n    this.olmap.getView().setZoom(this.state.zoom);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.olmap.setTarget(\"map\");\r\n\r\n    // Listen to map changes\r\n    this.olmap.on(\"moveend\", () => {\r\n      let center = this.olmap.getView().getCenter();\r\n      let zoom = this.olmap.getView().getZoom();\r\n      this.setState({ center, zoom });\r\n    });\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    let center = this.olmap.getView().getCenter();\r\n    let zoom = this.olmap.getView().getZoom();\r\n    if (center === nextState.center && zoom === nextState.zoom) return false;\r\n    return true;\r\n  }\r\n\r\n  userAction() {\r\n    this.setState({ center: [50415068.71848947, 2286631.4318463975], zoom: 13 });\r\n    console.log(this.olmap.getView().getCenter())\r\n  }\r\n\r\n  render() {\r\n    this.updateMap(); // Update map on render?\r\n    return (\r\n      <div id=\"map\" style={{ width: \"100%\", height: \"360px\" }}>\r\n        <button onClick={e => this.userAction()}>{this.olmap.getView().getCenter()}</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PublicMap;"]},"metadata":{},"sourceType":"module"}