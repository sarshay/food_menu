{"ast":null,"code":"import _ol_ from './index.js';\nimport _ol_MapEvent_ from './mapevent.js';\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link ol.Map} for which events trigger a map browser event.\n *\n * @constructor\n * @extends {ol.MapEvent}\n * @implements {oli.MapBrowserEvent}\n * @param {string} type Event type.\n * @param {ol.PluggableMap} map Map.\n * @param {Event} browserEvent Browser event.\n * @param {boolean=} opt_dragging Is the map currently being dragged?\n * @param {?olx.FrameState=} opt_frameState Frame state.\n */\n\nvar _ol_MapBrowserEvent_ = function (type, map, browserEvent, opt_dragging, opt_frameState) {\n  _ol_MapEvent_.call(this, type, map, opt_frameState);\n  /**\n   * The original browser event.\n   * @const\n   * @type {Event}\n   * @api\n   */\n\n\n  this.originalEvent = browserEvent;\n  /**\n   * The map pixel relative to the viewport corresponding to the original browser event.\n   * @type {ol.Pixel}\n   * @api\n   */\n\n  this.pixel = map.getEventPixel(browserEvent);\n  /**\n   * The coordinate in view projection corresponding to the original browser event.\n   * @type {ol.Coordinate}\n   * @api\n   */\n\n  this.coordinate = map.getCoordinateFromPixel(this.pixel);\n  /**\n   * Indicates if the map is currently being dragged. Only set for\n   * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n   *\n   * @type {boolean}\n   * @api\n   */\n\n  this.dragging = opt_dragging !== undefined ? opt_dragging : false;\n};\n\n_ol_.inherits(_ol_MapBrowserEvent_, _ol_MapEvent_);\n/**\n * Prevents the default browser action.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault\n * @override\n * @api\n */\n\n\n_ol_MapBrowserEvent_.prototype.preventDefault = function () {\n  _ol_MapEvent_.prototype.preventDefault.call(this);\n\n  this.originalEvent.preventDefault();\n};\n/**\n * Prevents further propagation of the current event.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation\n * @override\n * @api\n */\n\n\n_ol_MapBrowserEvent_.prototype.stopPropagation = function () {\n  _ol_MapEvent_.prototype.stopPropagation.call(this);\n\n  this.originalEvent.stopPropagation();\n};\n\nexport default _ol_MapBrowserEvent_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/mapbrowserevent.js"],"names":["_ol_","_ol_MapEvent_","_ol_MapBrowserEvent_","type","map","browserEvent","opt_dragging","opt_frameState","call","originalEvent","pixel","getEventPixel","coordinate","getCoordinateFromPixel","dragging","undefined","inherits","prototype","preventDefault","stopPropagation"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAOC,aAAP,MAA0B,eAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,oBAAoB,GAAG,UAASC,IAAT,EAAeC,GAAf,EAAoBC,YAApB,EAAkCC,YAAlC,EACvBC,cADuB,EACP;AAElBN,EAAAA,aAAa,CAACO,IAAd,CAAmB,IAAnB,EAAyBL,IAAzB,EAA+BC,GAA/B,EAAoCG,cAApC;AAEA;AACF;AACA;AACA;AACA;AACA;;;AACE,OAAKE,aAAL,GAAqBJ,YAArB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKK,KAAL,GAAaN,GAAG,CAACO,aAAJ,CAAkBN,YAAlB,CAAb;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKO,UAAL,GAAkBR,GAAG,CAACS,sBAAJ,CAA2B,KAAKH,KAAhC,CAAlB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKI,QAAL,GAAgBR,YAAY,KAAKS,SAAjB,GAA6BT,YAA7B,GAA4C,KAA5D;AAED,CApCD;;AAsCAN,IAAI,CAACgB,QAAL,CAAcd,oBAAd,EAAoCD,aAApC;AAGA;AACA;AACA;AACA;AACA;AACA;;;AACAC,oBAAoB,CAACe,SAArB,CAA+BC,cAA/B,GAAgD,YAAW;AACzDjB,EAAAA,aAAa,CAACgB,SAAd,CAAwBC,cAAxB,CAAuCV,IAAvC,CAA4C,IAA5C;;AACA,OAAKC,aAAL,CAAmBS,cAAnB;AACD,CAHD;AAMA;AACA;AACA;AACA;AACA;AACA;;;AACAhB,oBAAoB,CAACe,SAArB,CAA+BE,eAA/B,GAAiD,YAAW;AAC1DlB,EAAAA,aAAa,CAACgB,SAAd,CAAwBE,eAAxB,CAAwCX,IAAxC,CAA6C,IAA7C;;AACA,OAAKC,aAAL,CAAmBU,eAAnB;AACD,CAHD;;AAIA,eAAejB,oBAAf","sourcesContent":["import _ol_ from './index.js';\nimport _ol_MapEvent_ from './mapevent.js';\n\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link ol.Map} for which events trigger a map browser event.\n *\n * @constructor\n * @extends {ol.MapEvent}\n * @implements {oli.MapBrowserEvent}\n * @param {string} type Event type.\n * @param {ol.PluggableMap} map Map.\n * @param {Event} browserEvent Browser event.\n * @param {boolean=} opt_dragging Is the map currently being dragged?\n * @param {?olx.FrameState=} opt_frameState Frame state.\n */\nvar _ol_MapBrowserEvent_ = function(type, map, browserEvent, opt_dragging,\n    opt_frameState) {\n\n  _ol_MapEvent_.call(this, type, map, opt_frameState);\n\n  /**\n   * The original browser event.\n   * @const\n   * @type {Event}\n   * @api\n   */\n  this.originalEvent = browserEvent;\n\n  /**\n   * The map pixel relative to the viewport corresponding to the original browser event.\n   * @type {ol.Pixel}\n   * @api\n   */\n  this.pixel = map.getEventPixel(browserEvent);\n\n  /**\n   * The coordinate in view projection corresponding to the original browser event.\n   * @type {ol.Coordinate}\n   * @api\n   */\n  this.coordinate = map.getCoordinateFromPixel(this.pixel);\n\n  /**\n   * Indicates if the map is currently being dragged. Only set for\n   * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n   *\n   * @type {boolean}\n   * @api\n   */\n  this.dragging = opt_dragging !== undefined ? opt_dragging : false;\n\n};\n\n_ol_.inherits(_ol_MapBrowserEvent_, _ol_MapEvent_);\n\n\n/**\n * Prevents the default browser action.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault\n * @override\n * @api\n */\n_ol_MapBrowserEvent_.prototype.preventDefault = function() {\n  _ol_MapEvent_.prototype.preventDefault.call(this);\n  this.originalEvent.preventDefault();\n};\n\n\n/**\n * Prevents further propagation of the current event.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation\n * @override\n * @api\n */\n_ol_MapBrowserEvent_.prototype.stopPropagation = function() {\n  _ol_MapEvent_.prototype.stopPropagation.call(this);\n  this.originalEvent.stopPropagation();\n};\nexport default _ol_MapBrowserEvent_;\n"]},"metadata":{},"sourceType":"module"}