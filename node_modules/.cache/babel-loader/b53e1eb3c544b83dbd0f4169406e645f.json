{"ast":null,"code":"import _ol_obj_ from './obj.js';\nvar _ol_events_ = {};\n/**\n * @param {ol.EventsKey} listenerObj Listener object.\n * @return {ol.EventsListenerFunctionType} Bound listener.\n */\n\n_ol_events_.bindListener_ = function (listenerObj) {\n  var boundListener = function (evt) {\n    var listener = listenerObj.listener;\n    var bindTo = listenerObj.bindTo || listenerObj.target;\n\n    if (listenerObj.callOnce) {\n      _ol_events_.unlistenByKey(listenerObj);\n    }\n\n    return listener.call(bindTo, evt);\n  };\n\n  listenerObj.boundListener = boundListener;\n  return boundListener;\n};\n/**\n * Finds the matching {@link ol.EventsKey} in the given listener\n * array.\n *\n * @param {!Array<!ol.EventsKey>} listeners Array of listeners.\n * @param {!Function} listener The listener function.\n * @param {Object=} opt_this The `this` value inside the listener.\n * @param {boolean=} opt_setDeleteIndex Set the deleteIndex on the matching\n *     listener, for {@link ol.events.unlistenByKey}.\n * @return {ol.EventsKey|undefined} The matching listener object.\n * @private\n */\n\n\n_ol_events_.findListener_ = function (listeners, listener, opt_this, opt_setDeleteIndex) {\n  var listenerObj;\n\n  for (var i = 0, ii = listeners.length; i < ii; ++i) {\n    listenerObj = listeners[i];\n\n    if (listenerObj.listener === listener && listenerObj.bindTo === opt_this) {\n      if (opt_setDeleteIndex) {\n        listenerObj.deleteIndex = i;\n      }\n\n      return listenerObj;\n    }\n  }\n\n  return undefined;\n};\n/**\n * @param {ol.EventTargetLike} target Target.\n * @param {string} type Type.\n * @return {Array.<ol.EventsKey>|undefined} Listeners.\n */\n\n\n_ol_events_.getListeners = function (target, type) {\n  var listenerMap = target.ol_lm;\n  return listenerMap ? listenerMap[type] : undefined;\n};\n/**\n * Get the lookup of listeners.  If one does not exist on the target, it is\n * created.\n * @param {ol.EventTargetLike} target Target.\n * @return {!Object.<string, Array.<ol.EventsKey>>} Map of\n *     listeners by event type.\n * @private\n */\n\n\n_ol_events_.getListenerMap_ = function (target) {\n  var listenerMap = target.ol_lm;\n\n  if (!listenerMap) {\n    listenerMap = target.ol_lm = {};\n  }\n\n  return listenerMap;\n};\n/**\n * Clean up all listener objects of the given type.  All properties on the\n * listener objects will be removed, and if no listeners remain in the listener\n * map, it will be removed from the target.\n * @param {ol.EventTargetLike} target Target.\n * @param {string} type Type.\n * @private\n */\n\n\n_ol_events_.removeListeners_ = function (target, type) {\n  var listeners = _ol_events_.getListeners(target, type);\n\n  if (listeners) {\n    for (var i = 0, ii = listeners.length; i < ii; ++i) {\n      target.removeEventListener(type, listeners[i].boundListener);\n\n      _ol_obj_.clear(listeners[i]);\n    }\n\n    listeners.length = 0;\n    var listenerMap = target.ol_lm;\n\n    if (listenerMap) {\n      delete listenerMap[type];\n\n      if (Object.keys(listenerMap).length === 0) {\n        delete target.ol_lm;\n      }\n    }\n  }\n};\n/**\n * Registers an event listener on an event target. Inspired by\n * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}\n *\n * This function efficiently binds a `listener` to a `this` object, and returns\n * a key for use with {@link ol.events.unlistenByKey}.\n *\n * @param {ol.EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ol.EventsListenerFunctionType} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @param {boolean=} opt_once If true, add the listener as one-off listener.\n * @return {ol.EventsKey} Unique key for the listener.\n */\n\n\n_ol_events_.listen = function (target, type, listener, opt_this, opt_once) {\n  var listenerMap = _ol_events_.getListenerMap_(target);\n\n  var listeners = listenerMap[type];\n\n  if (!listeners) {\n    listeners = listenerMap[type] = [];\n  }\n\n  var listenerObj = _ol_events_.findListener_(listeners, listener, opt_this, false);\n\n  if (listenerObj) {\n    if (!opt_once) {\n      // Turn one-off listener into a permanent one.\n      listenerObj.callOnce = false;\n    }\n  } else {\n    listenerObj =\n    /** @type {ol.EventsKey} */\n    {\n      bindTo: opt_this,\n      callOnce: !!opt_once,\n      listener: listener,\n      target: target,\n      type: type\n    };\n    target.addEventListener(type, _ol_events_.bindListener_(listenerObj));\n    listeners.push(listenerObj);\n  }\n\n  return listenerObj;\n};\n/**\n * Registers a one-off event listener on an event target. Inspired by\n * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}\n *\n * This function efficiently binds a `listener` as self-unregistering listener\n * to a `this` object, and returns a key for use with\n * {@link ol.events.unlistenByKey} in case the listener needs to be unregistered\n * before it is called.\n *\n * When {@link ol.events.listen} is called with the same arguments after this\n * function, the self-unregistering listener will be turned into a permanent\n * listener.\n *\n * @param {ol.EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ol.EventsListenerFunctionType} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @return {ol.EventsKey} Key for unlistenByKey.\n */\n\n\n_ol_events_.listenOnce = function (target, type, listener, opt_this) {\n  return _ol_events_.listen(target, type, listener, opt_this, true);\n};\n/**\n * Unregisters an event listener on an event target. Inspired by\n * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}\n *\n * To return a listener, this function needs to be called with the exact same\n * arguments that were used for a previous {@link ol.events.listen} call.\n *\n * @param {ol.EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ol.EventsListenerFunctionType} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n */\n\n\n_ol_events_.unlisten = function (target, type, listener, opt_this) {\n  var listeners = _ol_events_.getListeners(target, type);\n\n  if (listeners) {\n    var listenerObj = _ol_events_.findListener_(listeners, listener, opt_this, true);\n\n    if (listenerObj) {\n      _ol_events_.unlistenByKey(listenerObj);\n    }\n  }\n};\n/**\n * Unregisters event listeners on an event target. Inspired by\n * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}\n *\n * The argument passed to this function is the key returned from\n * {@link ol.events.listen} or {@link ol.events.listenOnce}.\n *\n * @param {ol.EventsKey} key The key.\n */\n\n\n_ol_events_.unlistenByKey = function (key) {\n  if (key && key.target) {\n    key.target.removeEventListener(key.type, key.boundListener);\n\n    var listeners = _ol_events_.getListeners(key.target, key.type);\n\n    if (listeners) {\n      var i = 'deleteIndex' in key ? key.deleteIndex : listeners.indexOf(key);\n\n      if (i !== -1) {\n        listeners.splice(i, 1);\n      }\n\n      if (listeners.length === 0) {\n        _ol_events_.removeListeners_(key.target, key.type);\n      }\n    }\n\n    _ol_obj_.clear(key);\n  }\n};\n/**\n * Unregisters all event listeners on an event target. Inspired by\n * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}\n *\n * @param {ol.EventTargetLike} target Target.\n */\n\n\n_ol_events_.unlistenAll = function (target) {\n  var listenerMap = _ol_events_.getListenerMap_(target);\n\n  for (var type in listenerMap) {\n    _ol_events_.removeListeners_(target, type);\n  }\n};\n\nexport default _ol_events_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/events.js"],"names":["_ol_obj_","_ol_events_","bindListener_","listenerObj","boundListener","evt","listener","bindTo","target","callOnce","unlistenByKey","call","findListener_","listeners","opt_this","opt_setDeleteIndex","i","ii","length","deleteIndex","undefined","getListeners","type","listenerMap","ol_lm","getListenerMap_","removeListeners_","removeEventListener","clear","Object","keys","listen","opt_once","addEventListener","push","listenOnce","unlisten","key","indexOf","splice","unlistenAll"],"mappings":"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","sourcesContent":["import _ol_obj_ from './obj.js';\nvar _ol_events_ = {};\n\n\n/**\n * @param {ol.EventsKey} listenerObj Listener object.\n * @return {ol.EventsListenerFunctionType} Bound listener.\n */\n_ol_events_.bindListener_ = function(listenerObj) {\n  var boundListener = function(evt) {\n    var listener = listenerObj.listener;\n    var bindTo = listenerObj.bindTo || listenerObj.target;\n    if (listenerObj.callOnce) {\n      _ol_events_.unlistenByKey(listenerObj);\n    }\n    return listener.call(bindTo, evt);\n  };\n  listenerObj.boundListener = boundListener;\n  return boundListener;\n};\n\n\n/**\n * Finds the matching {@link ol.EventsKey} in the given listener\n * array.\n *\n * @param {!Array<!ol.EventsKey>} listeners Array of listeners.\n * @param {!Function} listener The listener function.\n * @param {Object=} opt_this The `this` value inside the listener.\n * @param {boolean=} opt_setDeleteIndex Set the deleteIndex on the matching\n *     listener, for {@link ol.events.unlistenByKey}.\n * @return {ol.EventsKey|undefined} The matching listener object.\n * @private\n */\n_ol_events_.findListener_ = function(listeners, listener, opt_this,\n    opt_setDeleteIndex) {\n  var listenerObj;\n  for (var i = 0, ii = listeners.length; i < ii; ++i) {\n    listenerObj = listeners[i];\n    if (listenerObj.listener === listener &&\n        listenerObj.bindTo === opt_this) {\n      if (opt_setDeleteIndex) {\n        listenerObj.deleteIndex = i;\n      }\n      return listenerObj;\n    }\n  }\n  return undefined;\n};\n\n\n/**\n * @param {ol.EventTargetLike} target Target.\n * @param {string} type Type.\n * @return {Array.<ol.EventsKey>|undefined} Listeners.\n */\n_ol_events_.getListeners = function(target, type) {\n  var listenerMap = target.ol_lm;\n  return listenerMap ? listenerMap[type] : undefined;\n};\n\n\n/**\n * Get the lookup of listeners.  If one does not exist on the target, it is\n * created.\n * @param {ol.EventTargetLike} target Target.\n * @return {!Object.<string, Array.<ol.EventsKey>>} Map of\n *     listeners by event type.\n * @private\n */\n_ol_events_.getListenerMap_ = function(target) {\n  var listenerMap = target.ol_lm;\n  if (!listenerMap) {\n    listenerMap = target.ol_lm = {};\n  }\n  return listenerMap;\n};\n\n\n/**\n * Clean up all listener objects of the given type.  All properties on the\n * listener objects will be removed, and if no listeners remain in the listener\n * map, it will be removed from the target.\n * @param {ol.EventTargetLike} target Target.\n * @param {string} type Type.\n * @private\n */\n_ol_events_.removeListeners_ = function(target, type) {\n  var listeners = _ol_events_.getListeners(target, type);\n  if (listeners) {\n    for (var i = 0, ii = listeners.length; i < ii; ++i) {\n      target.removeEventListener(type, listeners[i].boundListener);\n      _ol_obj_.clear(listeners[i]);\n    }\n    listeners.length = 0;\n    var listenerMap = target.ol_lm;\n    if (listenerMap) {\n      delete listenerMap[type];\n      if (Object.keys(listenerMap).length === 0) {\n        delete target.ol_lm;\n      }\n    }\n  }\n};\n\n\n/**\n * Registers an event listener on an event target. Inspired by\n * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}\n *\n * This function efficiently binds a `listener` to a `this` object, and returns\n * a key for use with {@link ol.events.unlistenByKey}.\n *\n * @param {ol.EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ol.EventsListenerFunctionType} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @param {boolean=} opt_once If true, add the listener as one-off listener.\n * @return {ol.EventsKey} Unique key for the listener.\n */\n_ol_events_.listen = function(target, type, listener, opt_this, opt_once) {\n  var listenerMap = _ol_events_.getListenerMap_(target);\n  var listeners = listenerMap[type];\n  if (!listeners) {\n    listeners = listenerMap[type] = [];\n  }\n  var listenerObj = _ol_events_.findListener_(listeners, listener, opt_this,\n      false);\n  if (listenerObj) {\n    if (!opt_once) {\n      // Turn one-off listener into a permanent one.\n      listenerObj.callOnce = false;\n    }\n  } else {\n    listenerObj = /** @type {ol.EventsKey} */ ({\n      bindTo: opt_this,\n      callOnce: !!opt_once,\n      listener: listener,\n      target: target,\n      type: type\n    });\n    target.addEventListener(type, _ol_events_.bindListener_(listenerObj));\n    listeners.push(listenerObj);\n  }\n\n  return listenerObj;\n};\n\n\n/**\n * Registers a one-off event listener on an event target. Inspired by\n * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}\n *\n * This function efficiently binds a `listener` as self-unregistering listener\n * to a `this` object, and returns a key for use with\n * {@link ol.events.unlistenByKey} in case the listener needs to be unregistered\n * before it is called.\n *\n * When {@link ol.events.listen} is called with the same arguments after this\n * function, the self-unregistering listener will be turned into a permanent\n * listener.\n *\n * @param {ol.EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ol.EventsListenerFunctionType} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @return {ol.EventsKey} Key for unlistenByKey.\n */\n_ol_events_.listenOnce = function(target, type, listener, opt_this) {\n  return _ol_events_.listen(target, type, listener, opt_this, true);\n};\n\n\n/**\n * Unregisters an event listener on an event target. Inspired by\n * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}\n *\n * To return a listener, this function needs to be called with the exact same\n * arguments that were used for a previous {@link ol.events.listen} call.\n *\n * @param {ol.EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ol.EventsListenerFunctionType} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n */\n_ol_events_.unlisten = function(target, type, listener, opt_this) {\n  var listeners = _ol_events_.getListeners(target, type);\n  if (listeners) {\n    var listenerObj = _ol_events_.findListener_(listeners, listener, opt_this,\n        true);\n    if (listenerObj) {\n      _ol_events_.unlistenByKey(listenerObj);\n    }\n  }\n};\n\n\n/**\n * Unregisters event listeners on an event target. Inspired by\n * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}\n *\n * The argument passed to this function is the key returned from\n * {@link ol.events.listen} or {@link ol.events.listenOnce}.\n *\n * @param {ol.EventsKey} key The key.\n */\n_ol_events_.unlistenByKey = function(key) {\n  if (key && key.target) {\n    key.target.removeEventListener(key.type, key.boundListener);\n    var listeners = _ol_events_.getListeners(key.target, key.type);\n    if (listeners) {\n      var i = 'deleteIndex' in key ? key.deleteIndex : listeners.indexOf(key);\n      if (i !== -1) {\n        listeners.splice(i, 1);\n      }\n      if (listeners.length === 0) {\n        _ol_events_.removeListeners_(key.target, key.type);\n      }\n    }\n    _ol_obj_.clear(key);\n  }\n};\n\n\n/**\n * Unregisters all event listeners on an event target. Inspired by\n * {@link https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html}\n *\n * @param {ol.EventTargetLike} target Target.\n */\n_ol_events_.unlistenAll = function(target) {\n  var listenerMap = _ol_events_.getListenerMap_(target);\n  for (var type in listenerMap) {\n    _ol_events_.removeListeners_(target, type);\n  }\n};\nexport default _ol_events_;\n"]},"metadata":{},"sourceType":"module"}