{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_LayerType_ from '../layertype.js';\nimport _ol_layer_Layer_ from '../layer/layer.js';\nimport _ol_layer_TileProperty_ from '../layer/tileproperty.js';\nimport _ol_obj_ from '../obj.js';\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link ol.Object}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @constructor\n * @extends {ol.layer.Layer}\n * @fires ol.render.Event\n * @param {olx.layer.TileOptions=} opt_options Tile layer options.\n * @api\n */\n\nvar _ol_layer_Tile_ = function (opt_options) {\n  var options = opt_options ? opt_options : {};\n\n  var baseOptions = _ol_obj_.assign({}, options);\n\n  delete baseOptions.preload;\n  delete baseOptions.useInterimTilesOnError;\n\n  _ol_layer_Layer_.call(this,\n  /** @type {olx.layer.LayerOptions} */\n  baseOptions);\n\n  this.setPreload(options.preload !== undefined ? options.preload : 0);\n  this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ? options.useInterimTilesOnError : true);\n  /**\n   * The layer type.\n   * @protected\n   * @type {ol.LayerType}\n   */\n\n  this.type = _ol_LayerType_.TILE;\n};\n\n_ol_.inherits(_ol_layer_Tile_, _ol_layer_Layer_);\n/**\n * Return the level as number to which we will preload tiles up to.\n * @return {number} The level to preload tiles up to.\n * @observable\n * @api\n */\n\n\n_ol_layer_Tile_.prototype.getPreload = function () {\n  return (\n    /** @type {number} */\n    this.get(_ol_layer_TileProperty_.PRELOAD)\n  );\n};\n/**\n * Return the associated {@link ol.source.Tile tilesource} of the layer.\n * @function\n * @return {ol.source.Tile} Source.\n * @api\n */\n\n\n_ol_layer_Tile_.prototype.getSource;\n/**\n * Set the level as number to which we will preload tiles up to.\n * @param {number} preload The level to preload tiles up to.\n * @observable\n * @api\n */\n\n_ol_layer_Tile_.prototype.setPreload = function (preload) {\n  this.set(_ol_layer_TileProperty_.PRELOAD, preload);\n};\n/**\n * Whether we use interim tiles on error.\n * @return {boolean} Use interim tiles on error.\n * @observable\n * @api\n */\n\n\n_ol_layer_Tile_.prototype.getUseInterimTilesOnError = function () {\n  return (\n    /** @type {boolean} */\n    this.get(_ol_layer_TileProperty_.USE_INTERIM_TILES_ON_ERROR)\n  );\n};\n/**\n * Set whether we use interim tiles on error.\n * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n * @observable\n * @api\n */\n\n\n_ol_layer_Tile_.prototype.setUseInterimTilesOnError = function (useInterimTilesOnError) {\n  this.set(_ol_layer_TileProperty_.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n};\n\nexport default _ol_layer_Tile_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/layer/tile.js"],"names":["_ol_","_ol_LayerType_","_ol_layer_Layer_","_ol_layer_TileProperty_","_ol_obj_","_ol_layer_Tile_","opt_options","options","baseOptions","assign","preload","useInterimTilesOnError","call","setPreload","undefined","setUseInterimTilesOnError","type","TILE","inherits","prototype","getPreload","get","PRELOAD","getSource","set","getUseInterimTilesOnError","USE_INTERIM_TILES_ON_ERROR"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,gBAAP,MAA6B,mBAA7B;AACA,OAAOC,uBAAP,MAAoC,0BAApC;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,eAAe,GAAG,UAASC,WAAT,EAAsB;AAC1C,MAAIC,OAAO,GAAGD,WAAW,GAAGA,WAAH,GAAiB,EAA1C;;AAEA,MAAIE,WAAW,GAAGJ,QAAQ,CAACK,MAAT,CAAgB,EAAhB,EAAoBF,OAApB,CAAlB;;AAEA,SAAOC,WAAW,CAACE,OAAnB;AACA,SAAOF,WAAW,CAACG,sBAAnB;;AACAT,EAAAA,gBAAgB,CAACU,IAAjB,CAAsB,IAAtB;AAA6B;AAAuCJ,EAAAA,WAApE;;AAEA,OAAKK,UAAL,CAAgBN,OAAO,CAACG,OAAR,KAAoBI,SAApB,GAAgCP,OAAO,CAACG,OAAxC,GAAkD,CAAlE;AACA,OAAKK,yBAAL,CAA+BR,OAAO,CAACI,sBAAR,KAAmCG,SAAnC,GAC7BP,OAAO,CAACI,sBADqB,GACI,IADnC;AAGA;AACF;AACA;AACA;AACA;;AACE,OAAKK,IAAL,GAAYf,cAAc,CAACgB,IAA3B;AAED,CApBD;;AAsBAjB,IAAI,CAACkB,QAAL,CAAcb,eAAd,EAA+BH,gBAA/B;AAGA;AACA;AACA;AACA;AACA;AACA;;;AACAG,eAAe,CAACc,SAAhB,CAA0BC,UAA1B,GAAuC,YAAW;AAChD;AACA;AAAsB,SAAKC,GAAL,CAASlB,uBAAuB,CAACmB,OAAjC;AADtB;AAGD,CAJD;AAOA;AACA;AACA;AACA;AACA;AACA;;;AACAjB,eAAe,CAACc,SAAhB,CAA0BI,SAA1B;AAGA;AACA;AACA;AACA;AACA;AACA;;AACAlB,eAAe,CAACc,SAAhB,CAA0BN,UAA1B,GAAuC,UAASH,OAAT,EAAkB;AACvD,OAAKc,GAAL,CAASrB,uBAAuB,CAACmB,OAAjC,EAA0CZ,OAA1C;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AACAL,eAAe,CAACc,SAAhB,CAA0BM,yBAA1B,GAAsD,YAAW;AAC/D;AACA;AAAuB,SAAKJ,GAAL,CAASlB,uBAAuB,CAACuB,0BAAjC;AADvB;AAGD,CAJD;AAOA;AACA;AACA;AACA;AACA;AACA;;;AACArB,eAAe,CAACc,SAAhB,CAA0BJ,yBAA1B,GAAsD,UAASJ,sBAAT,EAAiC;AACrF,OAAKa,GAAL,CACIrB,uBAAuB,CAACuB,0BAD5B,EACwDf,sBADxD;AAED,CAHD;;AAIA,eAAeN,eAAf","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_LayerType_ from '../layertype.js';\nimport _ol_layer_Layer_ from '../layer/layer.js';\nimport _ol_layer_TileProperty_ from '../layer/tileproperty.js';\nimport _ol_obj_ from '../obj.js';\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link ol.Object}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @constructor\n * @extends {ol.layer.Layer}\n * @fires ol.render.Event\n * @param {olx.layer.TileOptions=} opt_options Tile layer options.\n * @api\n */\nvar _ol_layer_Tile_ = function(opt_options) {\n  var options = opt_options ? opt_options : {};\n\n  var baseOptions = _ol_obj_.assign({}, options);\n\n  delete baseOptions.preload;\n  delete baseOptions.useInterimTilesOnError;\n  _ol_layer_Layer_.call(this,  /** @type {olx.layer.LayerOptions} */ (baseOptions));\n\n  this.setPreload(options.preload !== undefined ? options.preload : 0);\n  this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ?\n    options.useInterimTilesOnError : true);\n\n  /**\n   * The layer type.\n   * @protected\n   * @type {ol.LayerType}\n   */\n  this.type = _ol_LayerType_.TILE;\n\n};\n\n_ol_.inherits(_ol_layer_Tile_, _ol_layer_Layer_);\n\n\n/**\n * Return the level as number to which we will preload tiles up to.\n * @return {number} The level to preload tiles up to.\n * @observable\n * @api\n */\n_ol_layer_Tile_.prototype.getPreload = function() {\n  return (\n  /** @type {number} */ this.get(_ol_layer_TileProperty_.PRELOAD)\n  );\n};\n\n\n/**\n * Return the associated {@link ol.source.Tile tilesource} of the layer.\n * @function\n * @return {ol.source.Tile} Source.\n * @api\n */\n_ol_layer_Tile_.prototype.getSource;\n\n\n/**\n * Set the level as number to which we will preload tiles up to.\n * @param {number} preload The level to preload tiles up to.\n * @observable\n * @api\n */\n_ol_layer_Tile_.prototype.setPreload = function(preload) {\n  this.set(_ol_layer_TileProperty_.PRELOAD, preload);\n};\n\n\n/**\n * Whether we use interim tiles on error.\n * @return {boolean} Use interim tiles on error.\n * @observable\n * @api\n */\n_ol_layer_Tile_.prototype.getUseInterimTilesOnError = function() {\n  return (\n  /** @type {boolean} */ this.get(_ol_layer_TileProperty_.USE_INTERIM_TILES_ON_ERROR)\n  );\n};\n\n\n/**\n * Set whether we use interim tiles on error.\n * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n * @observable\n * @api\n */\n_ol_layer_Tile_.prototype.setUseInterimTilesOnError = function(useInterimTilesOnError) {\n  this.set(\n      _ol_layer_TileProperty_.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n};\nexport default _ol_layer_Tile_;\n"]},"metadata":{},"sourceType":"module"}