{"ast":null,"code":"var _ol_vec_Mat4_ = {};\n/**\n * @return {Array.<number>} 4x4 matrix representing a 3D identity transform.\n */\n\n_ol_vec_Mat4_.create = function () {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n};\n/**\n * @param {Array.<number>} mat4 Flattened 4x4 matrix receiving the result.\n * @param {ol.Transform} transform Transformation matrix.\n * @return {Array.<number>} 2D transformation matrix as flattened 4x4 matrix.\n */\n\n\n_ol_vec_Mat4_.fromTransform = function (mat4, transform) {\n  mat4[0] = transform[0];\n  mat4[1] = transform[1];\n  mat4[4] = transform[2];\n  mat4[5] = transform[3];\n  mat4[12] = transform[4];\n  mat4[13] = transform[5];\n  return mat4;\n};\n\nexport default _ol_vec_Mat4_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/vec/mat4.js"],"names":["_ol_vec_Mat4_","create","fromTransform","mat4","transform"],"mappings":"AAAA,IAAIA,aAAa,GAAG,EAApB;AAGA;AACA;AACA;;AACAA,aAAa,CAACC,MAAd,GAAuB,YAAW;AAChC,SAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,CAAP;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAD,aAAa,CAACE,aAAd,GAA8B,UAASC,IAAT,EAAeC,SAAf,EAA0B;AACtDD,EAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUC,SAAS,CAAC,CAAD,CAAnB;AACAD,EAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUC,SAAS,CAAC,CAAD,CAAnB;AACAD,EAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUC,SAAS,CAAC,CAAD,CAAnB;AACAD,EAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUC,SAAS,CAAC,CAAD,CAAnB;AACAD,EAAAA,IAAI,CAAC,EAAD,CAAJ,GAAWC,SAAS,CAAC,CAAD,CAApB;AACAD,EAAAA,IAAI,CAAC,EAAD,CAAJ,GAAWC,SAAS,CAAC,CAAD,CAApB;AACA,SAAOD,IAAP;AACD,CARD;;AASA,eAAeH,aAAf","sourcesContent":["var _ol_vec_Mat4_ = {};\n\n\n/**\n * @return {Array.<number>} 4x4 matrix representing a 3D identity transform.\n */\n_ol_vec_Mat4_.create = function() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n};\n\n\n/**\n * @param {Array.<number>} mat4 Flattened 4x4 matrix receiving the result.\n * @param {ol.Transform} transform Transformation matrix.\n * @return {Array.<number>} 2D transformation matrix as flattened 4x4 matrix.\n */\n_ol_vec_Mat4_.fromTransform = function(mat4, transform) {\n  mat4[0] = transform[0];\n  mat4[1] = transform[1];\n  mat4[4] = transform[2];\n  mat4[5] = transform[3];\n  mat4[12] = transform[4];\n  mat4[13] = transform[5];\n  return mat4;\n};\nexport default _ol_vec_Mat4_;\n"]},"metadata":{},"sourceType":"module"}