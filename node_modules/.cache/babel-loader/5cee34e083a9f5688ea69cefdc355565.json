{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_TileState_ from '../tilestate.js';\nimport _ol_TileUrlFunction_ from '../tileurlfunction.js';\nimport _ol_source_Tile_ from '../source/tile.js';\nimport _ol_source_TileEventType_ from '../source/tileeventtype.js';\nimport _ol_tilecoord_ from '../tilecoord.js';\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @constructor\n * @abstract\n * @fires ol.source.Tile.Event\n * @extends {ol.source.Tile}\n * @param {ol.SourceUrlTileOptions} options Image tile options.\n */\n\nvar _ol_source_UrlTile_ = function (options) {\n  _ol_source_Tile_.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    extent: options.extent,\n    logo: options.logo,\n    opaque: options.opaque,\n    projection: options.projection,\n    state: options.state,\n    tileGrid: options.tileGrid,\n    tilePixelRatio: options.tilePixelRatio,\n    wrapX: options.wrapX,\n    transition: options.transition\n  });\n  /**\n   * @protected\n   * @type {ol.TileLoadFunctionType}\n   */\n\n\n  this.tileLoadFunction = options.tileLoadFunction;\n  /**\n   * @protected\n   * @type {ol.TileUrlFunctionType}\n   */\n\n  this.tileUrlFunction = this.fixedTileUrlFunction ? this.fixedTileUrlFunction.bind(this) : _ol_TileUrlFunction_.nullTileUrlFunction;\n  /**\n   * @protected\n   * @type {!Array.<string>|null}\n   */\n\n  this.urls = null;\n\n  if (options.urls) {\n    this.setUrls(options.urls);\n  } else if (options.url) {\n    this.setUrl(options.url);\n  }\n\n  if (options.tileUrlFunction) {\n    this.setTileUrlFunction(options.tileUrlFunction);\n  }\n  /**\n   * @private\n   * @type {Object.<number, boolean>}\n   */\n\n\n  this.tileLoadingKeys_ = {};\n};\n\n_ol_.inherits(_ol_source_UrlTile_, _ol_source_Tile_);\n/**\n * @type {ol.TileUrlFunctionType|undefined}\n * @protected\n */\n\n\n_ol_source_UrlTile_.prototype.fixedTileUrlFunction;\n/**\n * Return the tile load function of the source.\n * @return {ol.TileLoadFunctionType} TileLoadFunction\n * @api\n */\n\n_ol_source_UrlTile_.prototype.getTileLoadFunction = function () {\n  return this.tileLoadFunction;\n};\n/**\n * Return the tile URL function of the source.\n * @return {ol.TileUrlFunctionType} TileUrlFunction\n * @api\n */\n\n\n_ol_source_UrlTile_.prototype.getTileUrlFunction = function () {\n  return this.tileUrlFunction;\n};\n/**\n * Return the URLs used for this source.\n * When a tileUrlFunction is used instead of url or urls,\n * null will be returned.\n * @return {!Array.<string>|null} URLs.\n * @api\n */\n\n\n_ol_source_UrlTile_.prototype.getUrls = function () {\n  return this.urls;\n};\n/**\n * Handle tile change events.\n * @param {ol.events.Event} event Event.\n * @protected\n */\n\n\n_ol_source_UrlTile_.prototype.handleTileChange = function (event) {\n  var tile =\n  /** @type {ol.Tile} */\n  event.target;\n\n  var uid = _ol_.getUid(tile);\n\n  var tileState = tile.getState();\n  var type;\n\n  if (tileState == _ol_TileState_.LOADING) {\n    this.tileLoadingKeys_[uid] = true;\n    type = _ol_source_TileEventType_.TILELOADSTART;\n  } else if (uid in this.tileLoadingKeys_) {\n    delete this.tileLoadingKeys_[uid];\n    type = tileState == _ol_TileState_.ERROR ? _ol_source_TileEventType_.TILELOADERROR : tileState == _ol_TileState_.LOADED || tileState == _ol_TileState_.ABORT ? _ol_source_TileEventType_.TILELOADEND : undefined;\n  }\n\n  if (type != undefined) {\n    this.dispatchEvent(new _ol_source_Tile_.Event(type, tile));\n  }\n};\n/**\n * Set the tile load function of the source.\n * @param {ol.TileLoadFunctionType} tileLoadFunction Tile load function.\n * @api\n */\n\n\n_ol_source_UrlTile_.prototype.setTileLoadFunction = function (tileLoadFunction) {\n  this.tileCache.clear();\n  this.tileLoadFunction = tileLoadFunction;\n  this.changed();\n};\n/**\n * Set the tile URL function of the source.\n * @param {ol.TileUrlFunctionType} tileUrlFunction Tile URL function.\n * @param {string=} opt_key Optional new tile key for the source.\n * @api\n */\n\n\n_ol_source_UrlTile_.prototype.setTileUrlFunction = function (tileUrlFunction, opt_key) {\n  this.tileUrlFunction = tileUrlFunction;\n  this.tileCache.pruneExceptNewestZ();\n\n  if (typeof opt_key !== 'undefined') {\n    this.setKey(opt_key);\n  } else {\n    this.changed();\n  }\n};\n/**\n * Set the URL to use for requests.\n * @param {string} url URL.\n * @api\n */\n\n\n_ol_source_UrlTile_.prototype.setUrl = function (url) {\n  var urls = this.urls = _ol_TileUrlFunction_.expandUrl(url);\n\n  this.setTileUrlFunction(this.fixedTileUrlFunction ? this.fixedTileUrlFunction.bind(this) : _ol_TileUrlFunction_.createFromTemplates(urls, this.tileGrid), url);\n};\n/**\n * Set the URLs to use for requests.\n * @param {Array.<string>} urls URLs.\n * @api\n */\n\n\n_ol_source_UrlTile_.prototype.setUrls = function (urls) {\n  this.urls = urls;\n  var key = urls.join('\\n');\n  this.setTileUrlFunction(this.fixedTileUrlFunction ? this.fixedTileUrlFunction.bind(this) : _ol_TileUrlFunction_.createFromTemplates(urls, this.tileGrid), key);\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_source_UrlTile_.prototype.useTile = function (z, x, y) {\n  var tileCoordKey = _ol_tilecoord_.getKeyZXY(z, x, y);\n\n  if (this.tileCache.containsKey(tileCoordKey)) {\n    this.tileCache.get(tileCoordKey);\n  }\n};\n\nexport default _ol_source_UrlTile_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/source/urltile.js"],"names":["_ol_","_ol_TileState_","_ol_TileUrlFunction_","_ol_source_Tile_","_ol_source_TileEventType_","_ol_tilecoord_","_ol_source_UrlTile_","options","call","attributions","cacheSize","extent","logo","opaque","projection","state","tileGrid","tilePixelRatio","wrapX","transition","tileLoadFunction","tileUrlFunction","fixedTileUrlFunction","bind","nullTileUrlFunction","urls","setUrls","url","setUrl","setTileUrlFunction","tileLoadingKeys_","inherits","prototype","getTileLoadFunction","getTileUrlFunction","getUrls","handleTileChange","event","tile","target","uid","getUid","tileState","getState","type","LOADING","TILELOADSTART","ERROR","TILELOADERROR","LOADED","ABORT","TILELOADEND","undefined","dispatchEvent","Event","setTileLoadFunction","tileCache","clear","changed","opt_key","pruneExceptNewestZ","setKey","expandUrl","createFromTemplates","key","join","useTile","z","x","y","tileCoordKey","getKeyZXY","containsKey","get"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,oBAAP,MAAiC,uBAAjC;AACA,OAAOC,gBAAP,MAA6B,mBAA7B;AACA,OAAOC,yBAAP,MAAsC,4BAAtC;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,mBAAmB,GAAG,UAASC,OAAT,EAAkB;AAE1CJ,EAAAA,gBAAgB,CAACK,IAAjB,CAAsB,IAAtB,EAA4B;AAC1BC,IAAAA,YAAY,EAAEF,OAAO,CAACE,YADI;AAE1BC,IAAAA,SAAS,EAAEH,OAAO,CAACG,SAFO;AAG1BC,IAAAA,MAAM,EAAEJ,OAAO,CAACI,MAHU;AAI1BC,IAAAA,IAAI,EAAEL,OAAO,CAACK,IAJY;AAK1BC,IAAAA,MAAM,EAAEN,OAAO,CAACM,MALU;AAM1BC,IAAAA,UAAU,EAAEP,OAAO,CAACO,UANM;AAO1BC,IAAAA,KAAK,EAAER,OAAO,CAACQ,KAPW;AAQ1BC,IAAAA,QAAQ,EAAET,OAAO,CAACS,QARQ;AAS1BC,IAAAA,cAAc,EAAEV,OAAO,CAACU,cATE;AAU1BC,IAAAA,KAAK,EAAEX,OAAO,CAACW,KAVW;AAW1BC,IAAAA,UAAU,EAAEZ,OAAO,CAACY;AAXM,GAA5B;AAcA;AACF;AACA;AACA;;;AACE,OAAKC,gBAAL,GAAwBb,OAAO,CAACa,gBAAhC;AAEA;AACF;AACA;AACA;;AACE,OAAKC,eAAL,GAAuB,KAAKC,oBAAL,GACrB,KAAKA,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B,CADqB,GAErBrB,oBAAoB,CAACsB,mBAFvB;AAIA;AACF;AACA;AACA;;AACE,OAAKC,IAAL,GAAY,IAAZ;;AAEA,MAAIlB,OAAO,CAACkB,IAAZ,EAAkB;AAChB,SAAKC,OAAL,CAAanB,OAAO,CAACkB,IAArB;AACD,GAFD,MAEO,IAAIlB,OAAO,CAACoB,GAAZ,EAAiB;AACtB,SAAKC,MAAL,CAAYrB,OAAO,CAACoB,GAApB;AACD;;AACD,MAAIpB,OAAO,CAACc,eAAZ,EAA6B;AAC3B,SAAKQ,kBAAL,CAAwBtB,OAAO,CAACc,eAAhC;AACD;AAED;AACF;AACA;AACA;;;AACE,OAAKS,gBAAL,GAAwB,EAAxB;AAED,CAnDD;;AAqDA9B,IAAI,CAAC+B,QAAL,CAAczB,mBAAd,EAAmCH,gBAAnC;AAGA;AACA;AACA;AACA;;;AACAG,mBAAmB,CAAC0B,SAApB,CAA8BV,oBAA9B;AAEA;AACA;AACA;AACA;AACA;;AACAhB,mBAAmB,CAAC0B,SAApB,CAA8BC,mBAA9B,GAAoD,YAAW;AAC7D,SAAO,KAAKb,gBAAZ;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAd,mBAAmB,CAAC0B,SAApB,CAA8BE,kBAA9B,GAAmD,YAAW;AAC5D,SAAO,KAAKb,eAAZ;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAf,mBAAmB,CAAC0B,SAApB,CAA8BG,OAA9B,GAAwC,YAAW;AACjD,SAAO,KAAKV,IAAZ;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAnB,mBAAmB,CAAC0B,SAApB,CAA8BI,gBAA9B,GAAiD,UAASC,KAAT,EAAgB;AAC/D,MAAIC,IAAI;AAAG;AAAwBD,EAAAA,KAAK,CAACE,MAAzC;;AACA,MAAIC,GAAG,GAAGxC,IAAI,CAACyC,MAAL,CAAYH,IAAZ,CAAV;;AACA,MAAII,SAAS,GAAGJ,IAAI,CAACK,QAAL,EAAhB;AACA,MAAIC,IAAJ;;AACA,MAAIF,SAAS,IAAIzC,cAAc,CAAC4C,OAAhC,EAAyC;AACvC,SAAKf,gBAAL,CAAsBU,GAAtB,IAA6B,IAA7B;AACAI,IAAAA,IAAI,GAAGxC,yBAAyB,CAAC0C,aAAjC;AACD,GAHD,MAGO,IAAIN,GAAG,IAAI,KAAKV,gBAAhB,EAAkC;AACvC,WAAO,KAAKA,gBAAL,CAAsBU,GAAtB,CAAP;AACAI,IAAAA,IAAI,GAAGF,SAAS,IAAIzC,cAAc,CAAC8C,KAA5B,GAAoC3C,yBAAyB,CAAC4C,aAA9D,GACJN,SAAS,IAAIzC,cAAc,CAACgD,MAA5B,IAAsCP,SAAS,IAAIzC,cAAc,CAACiD,KAAnE,GACE9C,yBAAyB,CAAC+C,WAD5B,GAC0CC,SAF5C;AAGD;;AACD,MAAIR,IAAI,IAAIQ,SAAZ,EAAuB;AACrB,SAAKC,aAAL,CAAmB,IAAIlD,gBAAgB,CAACmD,KAArB,CAA2BV,IAA3B,EAAiCN,IAAjC,CAAnB;AACD;AACF,CAjBD;AAoBA;AACA;AACA;AACA;AACA;;;AACAhC,mBAAmB,CAAC0B,SAApB,CAA8BuB,mBAA9B,GAAoD,UAASnC,gBAAT,EAA2B;AAC7E,OAAKoC,SAAL,CAAeC,KAAf;AACA,OAAKrC,gBAAL,GAAwBA,gBAAxB;AACA,OAAKsC,OAAL;AACD,CAJD;AAOA;AACA;AACA;AACA;AACA;AACA;;;AACApD,mBAAmB,CAAC0B,SAApB,CAA8BH,kBAA9B,GAAmD,UAASR,eAAT,EAA0BsC,OAA1B,EAAmC;AACpF,OAAKtC,eAAL,GAAuBA,eAAvB;AACA,OAAKmC,SAAL,CAAeI,kBAAf;;AACA,MAAI,OAAOD,OAAP,KAAmB,WAAvB,EAAoC;AAClC,SAAKE,MAAL,CAAYF,OAAZ;AACD,GAFD,MAEO;AACL,SAAKD,OAAL;AACD;AACF,CARD;AAWA;AACA;AACA;AACA;AACA;;;AACApD,mBAAmB,CAAC0B,SAApB,CAA8BJ,MAA9B,GAAuC,UAASD,GAAT,EAAc;AACnD,MAAIF,IAAI,GAAG,KAAKA,IAAL,GAAYvB,oBAAoB,CAAC4D,SAArB,CAA+BnC,GAA/B,CAAvB;;AACA,OAAKE,kBAAL,CAAwB,KAAKP,oBAAL,GACtB,KAAKA,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B,CADsB,GAEtBrB,oBAAoB,CAAC6D,mBAArB,CAAyCtC,IAAzC,EAA+C,KAAKT,QAApD,CAFF,EAEiEW,GAFjE;AAGD,CALD;AAQA;AACA;AACA;AACA;AACA;;;AACArB,mBAAmB,CAAC0B,SAApB,CAA8BN,OAA9B,GAAwC,UAASD,IAAT,EAAe;AACrD,OAAKA,IAAL,GAAYA,IAAZ;AACA,MAAIuC,GAAG,GAAGvC,IAAI,CAACwC,IAAL,CAAU,IAAV,CAAV;AACA,OAAKpC,kBAAL,CAAwB,KAAKP,oBAAL,GACtB,KAAKA,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B,CADsB,GAEtBrB,oBAAoB,CAAC6D,mBAArB,CAAyCtC,IAAzC,EAA+C,KAAKT,QAApD,CAFF,EAEiEgD,GAFjE;AAGD,CAND;AASA;AACA;AACA;;;AACA1D,mBAAmB,CAAC0B,SAApB,CAA8BkC,OAA9B,GAAwC,UAASC,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkB;AACxD,MAAIC,YAAY,GAAGjE,cAAc,CAACkE,SAAf,CAAyBJ,CAAzB,EAA4BC,CAA5B,EAA+BC,CAA/B,CAAnB;;AACA,MAAI,KAAKb,SAAL,CAAegB,WAAf,CAA2BF,YAA3B,CAAJ,EAA8C;AAC5C,SAAKd,SAAL,CAAeiB,GAAf,CAAmBH,YAAnB;AACD;AACF,CALD;;AAMA,eAAehE,mBAAf","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_TileState_ from '../tilestate.js';\nimport _ol_TileUrlFunction_ from '../tileurlfunction.js';\nimport _ol_source_Tile_ from '../source/tile.js';\nimport _ol_source_TileEventType_ from '../source/tileeventtype.js';\nimport _ol_tilecoord_ from '../tilecoord.js';\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @constructor\n * @abstract\n * @fires ol.source.Tile.Event\n * @extends {ol.source.Tile}\n * @param {ol.SourceUrlTileOptions} options Image tile options.\n */\nvar _ol_source_UrlTile_ = function(options) {\n\n  _ol_source_Tile_.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    extent: options.extent,\n    logo: options.logo,\n    opaque: options.opaque,\n    projection: options.projection,\n    state: options.state,\n    tileGrid: options.tileGrid,\n    tilePixelRatio: options.tilePixelRatio,\n    wrapX: options.wrapX,\n    transition: options.transition\n  });\n\n  /**\n   * @protected\n   * @type {ol.TileLoadFunctionType}\n   */\n  this.tileLoadFunction = options.tileLoadFunction;\n\n  /**\n   * @protected\n   * @type {ol.TileUrlFunctionType}\n   */\n  this.tileUrlFunction = this.fixedTileUrlFunction ?\n    this.fixedTileUrlFunction.bind(this) :\n    _ol_TileUrlFunction_.nullTileUrlFunction;\n\n  /**\n   * @protected\n   * @type {!Array.<string>|null}\n   */\n  this.urls = null;\n\n  if (options.urls) {\n    this.setUrls(options.urls);\n  } else if (options.url) {\n    this.setUrl(options.url);\n  }\n  if (options.tileUrlFunction) {\n    this.setTileUrlFunction(options.tileUrlFunction);\n  }\n\n  /**\n   * @private\n   * @type {Object.<number, boolean>}\n   */\n  this.tileLoadingKeys_ = {};\n\n};\n\n_ol_.inherits(_ol_source_UrlTile_, _ol_source_Tile_);\n\n\n/**\n * @type {ol.TileUrlFunctionType|undefined}\n * @protected\n */\n_ol_source_UrlTile_.prototype.fixedTileUrlFunction;\n\n/**\n * Return the tile load function of the source.\n * @return {ol.TileLoadFunctionType} TileLoadFunction\n * @api\n */\n_ol_source_UrlTile_.prototype.getTileLoadFunction = function() {\n  return this.tileLoadFunction;\n};\n\n\n/**\n * Return the tile URL function of the source.\n * @return {ol.TileUrlFunctionType} TileUrlFunction\n * @api\n */\n_ol_source_UrlTile_.prototype.getTileUrlFunction = function() {\n  return this.tileUrlFunction;\n};\n\n\n/**\n * Return the URLs used for this source.\n * When a tileUrlFunction is used instead of url or urls,\n * null will be returned.\n * @return {!Array.<string>|null} URLs.\n * @api\n */\n_ol_source_UrlTile_.prototype.getUrls = function() {\n  return this.urls;\n};\n\n\n/**\n * Handle tile change events.\n * @param {ol.events.Event} event Event.\n * @protected\n */\n_ol_source_UrlTile_.prototype.handleTileChange = function(event) {\n  var tile = /** @type {ol.Tile} */ (event.target);\n  var uid = _ol_.getUid(tile);\n  var tileState = tile.getState();\n  var type;\n  if (tileState == _ol_TileState_.LOADING) {\n    this.tileLoadingKeys_[uid] = true;\n    type = _ol_source_TileEventType_.TILELOADSTART;\n  } else if (uid in this.tileLoadingKeys_) {\n    delete this.tileLoadingKeys_[uid];\n    type = tileState == _ol_TileState_.ERROR ? _ol_source_TileEventType_.TILELOADERROR :\n      (tileState == _ol_TileState_.LOADED || tileState == _ol_TileState_.ABORT) ?\n        _ol_source_TileEventType_.TILELOADEND : undefined;\n  }\n  if (type != undefined) {\n    this.dispatchEvent(new _ol_source_Tile_.Event(type, tile));\n  }\n};\n\n\n/**\n * Set the tile load function of the source.\n * @param {ol.TileLoadFunctionType} tileLoadFunction Tile load function.\n * @api\n */\n_ol_source_UrlTile_.prototype.setTileLoadFunction = function(tileLoadFunction) {\n  this.tileCache.clear();\n  this.tileLoadFunction = tileLoadFunction;\n  this.changed();\n};\n\n\n/**\n * Set the tile URL function of the source.\n * @param {ol.TileUrlFunctionType} tileUrlFunction Tile URL function.\n * @param {string=} opt_key Optional new tile key for the source.\n * @api\n */\n_ol_source_UrlTile_.prototype.setTileUrlFunction = function(tileUrlFunction, opt_key) {\n  this.tileUrlFunction = tileUrlFunction;\n  this.tileCache.pruneExceptNewestZ();\n  if (typeof opt_key !== 'undefined') {\n    this.setKey(opt_key);\n  } else {\n    this.changed();\n  }\n};\n\n\n/**\n * Set the URL to use for requests.\n * @param {string} url URL.\n * @api\n */\n_ol_source_UrlTile_.prototype.setUrl = function(url) {\n  var urls = this.urls = _ol_TileUrlFunction_.expandUrl(url);\n  this.setTileUrlFunction(this.fixedTileUrlFunction ?\n    this.fixedTileUrlFunction.bind(this) :\n    _ol_TileUrlFunction_.createFromTemplates(urls, this.tileGrid), url);\n};\n\n\n/**\n * Set the URLs to use for requests.\n * @param {Array.<string>} urls URLs.\n * @api\n */\n_ol_source_UrlTile_.prototype.setUrls = function(urls) {\n  this.urls = urls;\n  var key = urls.join('\\n');\n  this.setTileUrlFunction(this.fixedTileUrlFunction ?\n    this.fixedTileUrlFunction.bind(this) :\n    _ol_TileUrlFunction_.createFromTemplates(urls, this.tileGrid), key);\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_source_UrlTile_.prototype.useTile = function(z, x, y) {\n  var tileCoordKey = _ol_tilecoord_.getKeyZXY(z, x, y);\n  if (this.tileCache.containsKey(tileCoordKey)) {\n    this.tileCache.get(tileCoordKey);\n  }\n};\nexport default _ol_source_UrlTile_;\n"]},"metadata":{},"sourceType":"module"}