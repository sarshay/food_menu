{"ast":null,"code":"var _ol_dom_ = {};\n/**\n * Create an html canvas element and returns its 2d context.\n * @param {number=} opt_width Canvas width.\n * @param {number=} opt_height Canvas height.\n * @return {CanvasRenderingContext2D} The context.\n */\n\n_ol_dom_.createCanvasContext2D = function (opt_width, opt_height) {\n  var canvas = document.createElement('CANVAS');\n\n  if (opt_width) {\n    canvas.width = opt_width;\n  }\n\n  if (opt_height) {\n    canvas.height = opt_height;\n  }\n\n  return canvas.getContext('2d');\n};\n/**\n * Get the current computed width for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerWidth(true)`.\n * @param {!Element} element Element.\n * @return {number} The width.\n */\n\n\n_ol_dom_.outerWidth = function (element) {\n  var width = element.offsetWidth;\n  var style = getComputedStyle(element);\n  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\n  return width;\n};\n/**\n * Get the current computed height for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerHeight(true)`.\n * @param {!Element} element Element.\n * @return {number} The height.\n */\n\n\n_ol_dom_.outerHeight = function (element) {\n  var height = element.offsetHeight;\n  var style = getComputedStyle(element);\n  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\n  return height;\n};\n/**\n * @param {Node} newNode Node to replace old node\n * @param {Node} oldNode The node to be replaced\n */\n\n\n_ol_dom_.replaceNode = function (newNode, oldNode) {\n  var parent = oldNode.parentNode;\n\n  if (parent) {\n    parent.replaceChild(newNode, oldNode);\n  }\n};\n/**\n * @param {Node} node The node to remove.\n * @returns {Node} The node that was removed or null.\n */\n\n\n_ol_dom_.removeNode = function (node) {\n  return node && node.parentNode ? node.parentNode.removeChild(node) : null;\n};\n/**\n * @param {Node} node The node to remove the children from.\n */\n\n\n_ol_dom_.removeChildren = function (node) {\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n};\n\nexport default _ol_dom_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/dom.js"],"names":["_ol_dom_","createCanvasContext2D","opt_width","opt_height","canvas","document","createElement","width","height","getContext","outerWidth","element","offsetWidth","style","getComputedStyle","parseInt","marginLeft","marginRight","outerHeight","offsetHeight","marginTop","marginBottom","replaceNode","newNode","oldNode","parent","parentNode","replaceChild","removeNode","node","removeChild","removeChildren","lastChild"],"mappings":"AAAA,IAAIA,QAAQ,GAAG,EAAf;AAGA;AACA;AACA;AACA;AACA;AACA;;AACAA,QAAQ,CAACC,qBAAT,GAAiC,UAASC,SAAT,EAAoBC,UAApB,EAAgC;AAC/D,MAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;;AACA,MAAIJ,SAAJ,EAAe;AACbE,IAAAA,MAAM,CAACG,KAAP,GAAeL,SAAf;AACD;;AACD,MAAIC,UAAJ,EAAgB;AACdC,IAAAA,MAAM,CAACI,MAAP,GAAgBL,UAAhB;AACD;;AACD,SAAOC,MAAM,CAACK,UAAP,CAAkB,IAAlB,CAAP;AACD,CATD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAT,QAAQ,CAACU,UAAT,GAAsB,UAASC,OAAT,EAAkB;AACtC,MAAIJ,KAAK,GAAGI,OAAO,CAACC,WAApB;AACA,MAAIC,KAAK,GAAGC,gBAAgB,CAACH,OAAD,CAA5B;AACAJ,EAAAA,KAAK,IAAIQ,QAAQ,CAACF,KAAK,CAACG,UAAP,EAAmB,EAAnB,CAAR,GAAiCD,QAAQ,CAACF,KAAK,CAACI,WAAP,EAAoB,EAApB,CAAlD;AAEA,SAAOV,KAAP;AACD,CAND;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAP,QAAQ,CAACkB,WAAT,GAAuB,UAASP,OAAT,EAAkB;AACvC,MAAIH,MAAM,GAAGG,OAAO,CAACQ,YAArB;AACA,MAAIN,KAAK,GAAGC,gBAAgB,CAACH,OAAD,CAA5B;AACAH,EAAAA,MAAM,IAAIO,QAAQ,CAACF,KAAK,CAACO,SAAP,EAAkB,EAAlB,CAAR,GAAgCL,QAAQ,CAACF,KAAK,CAACQ,YAAP,EAAqB,EAArB,CAAlD;AAEA,SAAOb,MAAP;AACD,CAND;AAQA;AACA;AACA;AACA;;;AACAR,QAAQ,CAACsB,WAAT,GAAuB,UAASC,OAAT,EAAkBC,OAAlB,EAA2B;AAChD,MAAIC,MAAM,GAAGD,OAAO,CAACE,UAArB;;AACA,MAAID,MAAJ,EAAY;AACVA,IAAAA,MAAM,CAACE,YAAP,CAAoBJ,OAApB,EAA6BC,OAA7B;AACD;AACF,CALD;AAOA;AACA;AACA;AACA;;;AACAxB,QAAQ,CAAC4B,UAAT,GAAsB,UAASC,IAAT,EAAe;AACnC,SAAOA,IAAI,IAAIA,IAAI,CAACH,UAAb,GAA0BG,IAAI,CAACH,UAAL,CAAgBI,WAAhB,CAA4BD,IAA5B,CAA1B,GAA8D,IAArE;AACD,CAFD;AAIA;AACA;AACA;;;AACA7B,QAAQ,CAAC+B,cAAT,GAA0B,UAASF,IAAT,EAAe;AACvC,SAAOA,IAAI,CAACG,SAAZ,EAAuB;AACrBH,IAAAA,IAAI,CAACC,WAAL,CAAiBD,IAAI,CAACG,SAAtB;AACD;AACF,CAJD;;AAKA,eAAehC,QAAf","sourcesContent":["var _ol_dom_ = {};\n\n\n/**\n * Create an html canvas element and returns its 2d context.\n * @param {number=} opt_width Canvas width.\n * @param {number=} opt_height Canvas height.\n * @return {CanvasRenderingContext2D} The context.\n */\n_ol_dom_.createCanvasContext2D = function(opt_width, opt_height) {\n  var canvas = document.createElement('CANVAS');\n  if (opt_width) {\n    canvas.width = opt_width;\n  }\n  if (opt_height) {\n    canvas.height = opt_height;\n  }\n  return canvas.getContext('2d');\n};\n\n\n/**\n * Get the current computed width for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerWidth(true)`.\n * @param {!Element} element Element.\n * @return {number} The width.\n */\n_ol_dom_.outerWidth = function(element) {\n  var width = element.offsetWidth;\n  var style = getComputedStyle(element);\n  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\n\n  return width;\n};\n\n\n/**\n * Get the current computed height for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerHeight(true)`.\n * @param {!Element} element Element.\n * @return {number} The height.\n */\n_ol_dom_.outerHeight = function(element) {\n  var height = element.offsetHeight;\n  var style = getComputedStyle(element);\n  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\n\n  return height;\n};\n\n/**\n * @param {Node} newNode Node to replace old node\n * @param {Node} oldNode The node to be replaced\n */\n_ol_dom_.replaceNode = function(newNode, oldNode) {\n  var parent = oldNode.parentNode;\n  if (parent) {\n    parent.replaceChild(newNode, oldNode);\n  }\n};\n\n/**\n * @param {Node} node The node to remove.\n * @returns {Node} The node that was removed or null.\n */\n_ol_dom_.removeNode = function(node) {\n  return node && node.parentNode ? node.parentNode.removeChild(node) : null;\n};\n\n/**\n * @param {Node} node The node to remove the children from.\n */\n_ol_dom_.removeChildren = function(node) {\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n};\nexport default _ol_dom_;\n"]},"metadata":{},"sourceType":"module"}