{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_MapEventType_ from '../mapeventtype.js';\nimport _ol_Object_ from '../object.js';\nimport _ol_dom_ from '../dom.js';\nimport _ol_events_ from '../events.js';\n/**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * var myControl = new ol.control.Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be `ol.Object`s in a `ol.Collection`, so you can use their\n * methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @constructor\n * @extends {ol.Object}\n * @implements {oli.control.Control}\n * @param {olx.control.ControlOptions} options Control options.\n * @api\n */\n\nvar _ol_control_Control_ = function (options) {\n  _ol_Object_.call(this);\n  /**\n   * @protected\n   * @type {Element}\n   */\n\n\n  this.element = options.element ? options.element : null;\n  /**\n   * @private\n   * @type {Element}\n   */\n\n  this.target_ = null;\n  /**\n   * @private\n   * @type {ol.PluggableMap}\n   */\n\n  this.map_ = null;\n  /**\n   * @protected\n   * @type {!Array.<ol.EventsKey>}\n   */\n\n  this.listenerKeys = [];\n  /**\n   * @type {function(ol.MapEvent)}\n   */\n\n  this.render = options.render ? options.render : _ol_.nullFunction;\n\n  if (options.target) {\n    this.setTarget(options.target);\n  }\n};\n\n_ol_.inherits(_ol_control_Control_, _ol_Object_);\n/**\n * @inheritDoc\n */\n\n\n_ol_control_Control_.prototype.disposeInternal = function () {\n  _ol_dom_.removeNode(this.element);\n\n  _ol_Object_.prototype.disposeInternal.call(this);\n};\n/**\n * Get the map associated with this control.\n * @return {ol.PluggableMap} Map.\n * @api\n */\n\n\n_ol_control_Control_.prototype.getMap = function () {\n  return this.map_;\n};\n/**\n * Remove the control from its current map and attach it to the new map.\n * Subclasses may set up event handlers to get notified about changes to\n * the map here.\n * @param {ol.PluggableMap} map Map.\n * @override\n * @api\n */\n\n\n_ol_control_Control_.prototype.setMap = function (map) {\n  if (this.map_) {\n    _ol_dom_.removeNode(this.element);\n  }\n\n  for (var i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n    _ol_events_.unlistenByKey(this.listenerKeys[i]);\n  }\n\n  this.listenerKeys.length = 0;\n  this.map_ = map;\n\n  if (this.map_) {\n    var target = this.target_ ? this.target_ : map.getOverlayContainerStopEvent();\n    target.appendChild(this.element);\n\n    if (this.render !== _ol_.nullFunction) {\n      this.listenerKeys.push(_ol_events_.listen(map, _ol_MapEventType_.POSTRENDER, this.render, this));\n    }\n\n    map.render();\n  }\n};\n/**\n * This function is used to set a target element for the control. It has no\n * effect if it is called after the control has been added to the map (i.e.\n * after `setMap` is called on the control). If no `target` is set in the\n * options passed to the control constructor and if `setTarget` is not called\n * then the control is added to the map's overlay container.\n * @param {Element|string} target Target.\n * @api\n */\n\n\n_ol_control_Control_.prototype.setTarget = function (target) {\n  this.target_ = typeof target === 'string' ? document.getElementById(target) : target;\n};\n\nexport default _ol_control_Control_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/control/control.js"],"names":["_ol_","_ol_MapEventType_","_ol_Object_","_ol_dom_","_ol_events_","_ol_control_Control_","options","call","element","target_","map_","listenerKeys","render","nullFunction","target","setTarget","inherits","prototype","disposeInternal","removeNode","getMap","setMap","map","i","ii","length","unlistenByKey","getOverlayContainerStopEvent","appendChild","push","listen","POSTRENDER","document","getElementById"],"mappings":"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","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_MapEventType_ from '../mapeventtype.js';\nimport _ol_Object_ from '../object.js';\nimport _ol_dom_ from '../dom.js';\nimport _ol_events_ from '../events.js';\n\n/**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * var myControl = new ol.control.Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be `ol.Object`s in a `ol.Collection`, so you can use their\n * methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @constructor\n * @extends {ol.Object}\n * @implements {oli.control.Control}\n * @param {olx.control.ControlOptions} options Control options.\n * @api\n */\nvar _ol_control_Control_ = function(options) {\n\n  _ol_Object_.call(this);\n\n  /**\n   * @protected\n   * @type {Element}\n   */\n  this.element = options.element ? options.element : null;\n\n  /**\n   * @private\n   * @type {Element}\n   */\n  this.target_ = null;\n\n  /**\n   * @private\n   * @type {ol.PluggableMap}\n   */\n  this.map_ = null;\n\n  /**\n   * @protected\n   * @type {!Array.<ol.EventsKey>}\n   */\n  this.listenerKeys = [];\n\n  /**\n   * @type {function(ol.MapEvent)}\n   */\n  this.render = options.render ? options.render : _ol_.nullFunction;\n\n  if (options.target) {\n    this.setTarget(options.target);\n  }\n\n};\n\n_ol_.inherits(_ol_control_Control_, _ol_Object_);\n\n\n/**\n * @inheritDoc\n */\n_ol_control_Control_.prototype.disposeInternal = function() {\n  _ol_dom_.removeNode(this.element);\n  _ol_Object_.prototype.disposeInternal.call(this);\n};\n\n\n/**\n * Get the map associated with this control.\n * @return {ol.PluggableMap} Map.\n * @api\n */\n_ol_control_Control_.prototype.getMap = function() {\n  return this.map_;\n};\n\n\n/**\n * Remove the control from its current map and attach it to the new map.\n * Subclasses may set up event handlers to get notified about changes to\n * the map here.\n * @param {ol.PluggableMap} map Map.\n * @override\n * @api\n */\n_ol_control_Control_.prototype.setMap = function(map) {\n  if (this.map_) {\n    _ol_dom_.removeNode(this.element);\n  }\n  for (var i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n    _ol_events_.unlistenByKey(this.listenerKeys[i]);\n  }\n  this.listenerKeys.length = 0;\n  this.map_ = map;\n  if (this.map_) {\n    var target = this.target_ ?\n      this.target_ : map.getOverlayContainerStopEvent();\n    target.appendChild(this.element);\n    if (this.render !== _ol_.nullFunction) {\n      this.listenerKeys.push(_ol_events_.listen(map,\n          _ol_MapEventType_.POSTRENDER, this.render, this));\n    }\n    map.render();\n  }\n};\n\n\n/**\n * This function is used to set a target element for the control. It has no\n * effect if it is called after the control has been added to the map (i.e.\n * after `setMap` is called on the control). If no `target` is set in the\n * options passed to the control constructor and if `setTarget` is not called\n * then the control is added to the map's overlay container.\n * @param {Element|string} target Target.\n * @api\n */\n_ol_control_Control_.prototype.setTarget = function(target) {\n  this.target_ = typeof target === 'string' ?\n    document.getElementById(target) :\n    target;\n};\nexport default _ol_control_Control_;\n"]},"metadata":{},"sourceType":"module"}