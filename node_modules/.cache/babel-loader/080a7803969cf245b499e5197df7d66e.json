{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_coordinate_ from '../coordinate.js';\nimport _ol_events_EventType_ from '../events/eventtype.js';\nimport _ol_events_KeyCode_ from '../events/keycode.js';\nimport _ol_events_condition_ from '../events/condition.js';\nimport _ol_interaction_Interaction_ from '../interaction/interaction.js';\n/**\n * @classdesc\n * Allows the user to pan the map using keyboard arrows.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link ol.Map}. `document` never loses focus but, for any other element,\n * focus will have to be on, and returned to, this element if the keys are to\n * function.\n * See also {@link ol.interaction.KeyboardZoom}.\n *\n * @constructor\n * @extends {ol.interaction.Interaction}\n * @param {olx.interaction.KeyboardPanOptions=} opt_options Options.\n * @api\n */\n\nvar _ol_interaction_KeyboardPan_ = function (opt_options) {\n  _ol_interaction_Interaction_.call(this, {\n    handleEvent: _ol_interaction_KeyboardPan_.handleEvent\n  });\n\n  var options = opt_options || {};\n  /**\n   * @private\n   * @param {ol.MapBrowserEvent} mapBrowserEvent Browser event.\n   * @return {boolean} Combined condition result.\n   */\n\n  this.defaultCondition_ = function (mapBrowserEvent) {\n    return _ol_events_condition_.noModifierKeys(mapBrowserEvent) && _ol_events_condition_.targetNotEditable(mapBrowserEvent);\n  };\n  /**\n   * @private\n   * @type {ol.EventsConditionType}\n   */\n\n\n  this.condition_ = options.condition !== undefined ? options.condition : this.defaultCondition_;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.duration_ = options.duration !== undefined ? options.duration : 100;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.pixelDelta_ = options.pixelDelta !== undefined ? options.pixelDelta : 128;\n};\n\n_ol_.inherits(_ol_interaction_KeyboardPan_, _ol_interaction_Interaction_);\n/**\n * Handles the {@link ol.MapBrowserEvent map browser event} if it was a\n * `KeyEvent`, and decides the direction to pan to (if an arrow key was\n * pressed).\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {ol.interaction.KeyboardPan}\n * @api\n */\n\n\n_ol_interaction_KeyboardPan_.handleEvent = function (mapBrowserEvent) {\n  var stopEvent = false;\n\n  if (mapBrowserEvent.type == _ol_events_EventType_.KEYDOWN) {\n    var keyEvent = mapBrowserEvent.originalEvent;\n    var keyCode = keyEvent.keyCode;\n\n    if (this.condition_(mapBrowserEvent) && (keyCode == _ol_events_KeyCode_.DOWN || keyCode == _ol_events_KeyCode_.LEFT || keyCode == _ol_events_KeyCode_.RIGHT || keyCode == _ol_events_KeyCode_.UP)) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      var mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n      var deltaX = 0,\n          deltaY = 0;\n\n      if (keyCode == _ol_events_KeyCode_.DOWN) {\n        deltaY = -mapUnitsDelta;\n      } else if (keyCode == _ol_events_KeyCode_.LEFT) {\n        deltaX = -mapUnitsDelta;\n      } else if (keyCode == _ol_events_KeyCode_.RIGHT) {\n        deltaX = mapUnitsDelta;\n      } else {\n        deltaY = mapUnitsDelta;\n      }\n\n      var delta = [deltaX, deltaY];\n\n      _ol_coordinate_.rotate(delta, view.getRotation());\n\n      _ol_interaction_Interaction_.pan(view, delta, this.duration_);\n\n      mapBrowserEvent.preventDefault();\n      stopEvent = true;\n    }\n  }\n\n  return !stopEvent;\n};\n\nexport default _ol_interaction_KeyboardPan_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/interaction/keyboardpan.js"],"names":["_ol_","_ol_coordinate_","_ol_events_EventType_","_ol_events_KeyCode_","_ol_events_condition_","_ol_interaction_Interaction_","_ol_interaction_KeyboardPan_","opt_options","call","handleEvent","options","defaultCondition_","mapBrowserEvent","noModifierKeys","targetNotEditable","condition_","condition","undefined","duration_","duration","pixelDelta_","pixelDelta","inherits","stopEvent","type","KEYDOWN","keyEvent","originalEvent","keyCode","DOWN","LEFT","RIGHT","UP","map","view","getView","mapUnitsDelta","getResolution","deltaX","deltaY","delta","rotate","getRotation","pan","preventDefault"],"mappings":"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","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_coordinate_ from '../coordinate.js';\nimport _ol_events_EventType_ from '../events/eventtype.js';\nimport _ol_events_KeyCode_ from '../events/keycode.js';\nimport _ol_events_condition_ from '../events/condition.js';\nimport _ol_interaction_Interaction_ from '../interaction/interaction.js';\n\n/**\n * @classdesc\n * Allows the user to pan the map using keyboard arrows.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link ol.Map}. `document` never loses focus but, for any other element,\n * focus will have to be on, and returned to, this element if the keys are to\n * function.\n * See also {@link ol.interaction.KeyboardZoom}.\n *\n * @constructor\n * @extends {ol.interaction.Interaction}\n * @param {olx.interaction.KeyboardPanOptions=} opt_options Options.\n * @api\n */\nvar _ol_interaction_KeyboardPan_ = function(opt_options) {\n\n  _ol_interaction_Interaction_.call(this, {\n    handleEvent: _ol_interaction_KeyboardPan_.handleEvent\n  });\n\n  var options = opt_options || {};\n\n  /**\n   * @private\n   * @param {ol.MapBrowserEvent} mapBrowserEvent Browser event.\n   * @return {boolean} Combined condition result.\n   */\n  this.defaultCondition_ = function(mapBrowserEvent) {\n    return _ol_events_condition_.noModifierKeys(mapBrowserEvent) &&\n      _ol_events_condition_.targetNotEditable(mapBrowserEvent);\n  };\n\n  /**\n   * @private\n   * @type {ol.EventsConditionType}\n   */\n  this.condition_ = options.condition !== undefined ?\n    options.condition : this.defaultCondition_;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.duration_ = options.duration !== undefined ? options.duration : 100;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.pixelDelta_ = options.pixelDelta !== undefined ?\n    options.pixelDelta : 128;\n\n};\n\n_ol_.inherits(_ol_interaction_KeyboardPan_, _ol_interaction_Interaction_);\n\n/**\n * Handles the {@link ol.MapBrowserEvent map browser event} if it was a\n * `KeyEvent`, and decides the direction to pan to (if an arrow key was\n * pressed).\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {ol.interaction.KeyboardPan}\n * @api\n */\n_ol_interaction_KeyboardPan_.handleEvent = function(mapBrowserEvent) {\n  var stopEvent = false;\n  if (mapBrowserEvent.type == _ol_events_EventType_.KEYDOWN) {\n    var keyEvent = mapBrowserEvent.originalEvent;\n    var keyCode = keyEvent.keyCode;\n    if (this.condition_(mapBrowserEvent) &&\n        (keyCode == _ol_events_KeyCode_.DOWN ||\n        keyCode == _ol_events_KeyCode_.LEFT ||\n        keyCode == _ol_events_KeyCode_.RIGHT ||\n        keyCode == _ol_events_KeyCode_.UP)) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      var mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n      var deltaX = 0, deltaY = 0;\n      if (keyCode == _ol_events_KeyCode_.DOWN) {\n        deltaY = -mapUnitsDelta;\n      } else if (keyCode == _ol_events_KeyCode_.LEFT) {\n        deltaX = -mapUnitsDelta;\n      } else if (keyCode == _ol_events_KeyCode_.RIGHT) {\n        deltaX = mapUnitsDelta;\n      } else {\n        deltaY = mapUnitsDelta;\n      }\n      var delta = [deltaX, deltaY];\n      _ol_coordinate_.rotate(delta, view.getRotation());\n      _ol_interaction_Interaction_.pan(view, delta, this.duration_);\n      mapBrowserEvent.preventDefault();\n      stopEvent = true;\n    }\n  }\n  return !stopEvent;\n};\nexport default _ol_interaction_KeyboardPan_;\n"]},"metadata":{},"sourceType":"module"}