{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_Attribution_ from '../attribution.js';\nimport _ol_Object_ from '../object.js';\nimport _ol_proj_ from '../proj.js';\nimport _ol_source_State_ from '../source/state.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link ol.layer.Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n *\n * @constructor\n * @abstract\n * @extends {ol.Object}\n * @param {ol.SourceSourceOptions} options Source options.\n * @api\n */\n\nvar _ol_source_Source_ = function (options) {\n  _ol_Object_.call(this);\n  /**\n   * @private\n   * @type {ol.proj.Projection}\n   */\n\n\n  this.projection_ = _ol_proj_.get(options.projection);\n  /**\n   * @private\n   * @type {Array.<ol.Attribution>}\n   */\n\n  this.attributions_ = null;\n  /**\n   * @private\n   * @type {?ol.Attribution2}\n   */\n\n  this.attributions2_ = this.adaptAttributions_(options.attributions);\n  /**\n   * @private\n   * @type {string|olx.LogoOptions|undefined}\n   */\n\n  this.logo_ = options.logo;\n  /**\n   * @private\n   * @type {ol.source.State}\n   */\n\n  this.state_ = options.state !== undefined ? options.state : _ol_source_State_.READY;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n};\n\n_ol_.inherits(_ol_source_Source_, _ol_Object_);\n/**\n * Turns the attributions option into an attributions function.\n * @suppress {deprecated}\n * @param {ol.AttributionLike|undefined} attributionLike The attribution option.\n * @return {?ol.Attribution2} An attribution function (or null).\n */\n\n\n_ol_source_Source_.prototype.adaptAttributions_ = function (attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n\n  if (attributionLike instanceof _ol_Attribution_) {\n    // TODO: remove attributions_ in next major release\n    this.attributions_ = [attributionLike];\n    return function (frameState) {\n      return [attributionLike.getHTML()];\n    };\n  }\n\n  if (Array.isArray(attributionLike)) {\n    if (attributionLike[0] instanceof _ol_Attribution_) {\n      // TODO: remove attributions_ in next major release\n      this.attributions_ = attributionLike;\n      var attributions = attributionLike.map(function (attribution) {\n        return attribution.getHTML();\n      });\n      return function (frameState) {\n        return attributions;\n      };\n    } // TODO: remove attributions_ in next major release\n\n\n    this.attributions_ = attributionLike.map(function (attribution) {\n      return new _ol_Attribution_({\n        html: attribution\n      });\n    });\n    return function (frameState) {\n      return attributionLike;\n    };\n  }\n\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  } // TODO: remove attributions_ in next major release\n\n\n  this.attributions_ = [new _ol_Attribution_({\n    html: attributionLike\n  })];\n  return function (frameState) {\n    return [attributionLike];\n  };\n};\n/**\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {number} hitTolerance Hit tolerance in pixels.\n * @param {Object.<string, boolean>} skippedFeatureUids Skipped feature uids.\n * @param {function((ol.Feature|ol.render.Feature)): T} callback Feature\n *     callback.\n * @return {T|undefined} Callback result.\n * @template T\n */\n\n\n_ol_source_Source_.prototype.forEachFeatureAtCoordinate = _ol_.nullFunction;\n/**\n * Get the attributions of the source.\n * @return {Array.<ol.Attribution>} Attributions.\n * @api\n */\n\n_ol_source_Source_.prototype.getAttributions = function () {\n  return this.attributions_;\n};\n/**\n * Get the attribution function for the source.\n * @return {?ol.Attribution2} Attribution function.\n */\n\n\n_ol_source_Source_.prototype.getAttributions2 = function () {\n  return this.attributions2_;\n};\n/**\n * Get the logo of the source.\n * @return {string|olx.LogoOptions|undefined} Logo.\n * @api\n */\n\n\n_ol_source_Source_.prototype.getLogo = function () {\n  return this.logo_;\n};\n/**\n * Get the projection of the source.\n * @return {ol.proj.Projection} Projection.\n * @api\n */\n\n\n_ol_source_Source_.prototype.getProjection = function () {\n  return this.projection_;\n};\n/**\n * @abstract\n * @return {Array.<number>|undefined} Resolutions.\n */\n\n\n_ol_source_Source_.prototype.getResolutions = function () {};\n/**\n * Get the state of the source, see {@link ol.source.State} for possible states.\n * @return {ol.source.State} State.\n * @api\n */\n\n\n_ol_source_Source_.prototype.getState = function () {\n  return this.state_;\n};\n/**\n * @return {boolean|undefined} Wrap X.\n */\n\n\n_ol_source_Source_.prototype.getWrapX = function () {\n  return this.wrapX_;\n};\n/**\n * Refreshes the source and finally dispatches a 'change' event.\n * @api\n */\n\n\n_ol_source_Source_.prototype.refresh = function () {\n  this.changed();\n};\n/**\n * Set the attributions of the source.\n * @param {ol.AttributionLike|undefined} attributions Attributions.\n *     Can be passed as `string`, `Array<string>`, `{@link ol.Attribution2}`,\n *     or `undefined`.\n * @api\n */\n\n\n_ol_source_Source_.prototype.setAttributions = function (attributions) {\n  this.attributions2_ = this.adaptAttributions_(attributions);\n  this.changed();\n};\n/**\n * Set the logo of the source.\n * @param {string|olx.LogoOptions|undefined} logo Logo.\n */\n\n\n_ol_source_Source_.prototype.setLogo = function (logo) {\n  this.logo_ = logo;\n};\n/**\n * Set the state of the source.\n * @param {ol.source.State} state State.\n * @protected\n */\n\n\n_ol_source_Source_.prototype.setState = function (state) {\n  this.state_ = state;\n  this.changed();\n};\n\nexport default _ol_source_Source_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/source/source.js"],"names":["_ol_","_ol_Attribution_","_ol_Object_","_ol_proj_","_ol_source_State_","_ol_source_Source_","options","call","projection_","get","projection","attributions_","attributions2_","adaptAttributions_","attributions","logo_","logo","state_","state","undefined","READY","wrapX_","wrapX","inherits","prototype","attributionLike","frameState","getHTML","Array","isArray","map","attribution","html","forEachFeatureAtCoordinate","nullFunction","getAttributions","getAttributions2","getLogo","getProjection","getResolutions","getState","getWrapX","refresh","changed","setAttributions","setLogo","setState"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,gBAAP,MAA6B,mBAA7B;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,iBAAP,MAA8B,oBAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,kBAAkB,GAAG,UAASC,OAAT,EAAkB;AAEzCJ,EAAAA,WAAW,CAACK,IAAZ,CAAiB,IAAjB;AAEA;AACF;AACA;AACA;;;AACE,OAAKC,WAAL,GAAmBL,SAAS,CAACM,GAAV,CAAcH,OAAO,CAACI,UAAtB,CAAnB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,aAAL,GAAqB,IAArB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,cAAL,GAAsB,KAAKC,kBAAL,CAAwBP,OAAO,CAACQ,YAAhC,CAAtB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,KAAL,GAAaT,OAAO,CAACU,IAArB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,MAAL,GAAcX,OAAO,CAACY,KAAR,KAAkBC,SAAlB,GACZb,OAAO,CAACY,KADI,GACId,iBAAiB,CAACgB,KADpC;AAGA;AACF;AACA;AACA;;AACE,OAAKC,MAAL,GAAcf,OAAO,CAACgB,KAAR,KAAkBH,SAAlB,GAA8Bb,OAAO,CAACgB,KAAtC,GAA8C,KAA5D;AAED,CAzCD;;AA2CAtB,IAAI,CAACuB,QAAL,CAAclB,kBAAd,EAAkCH,WAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAG,kBAAkB,CAACmB,SAAnB,CAA6BX,kBAA7B,GAAkD,UAASY,eAAT,EAA0B;AAC1E,MAAI,CAACA,eAAL,EAAsB;AACpB,WAAO,IAAP;AACD;;AACD,MAAIA,eAAe,YAAYxB,gBAA/B,EAAiD;AAE/C;AACA,SAAKU,aAAL,GAAqB,CAACc,eAAD,CAArB;AAEA,WAAO,UAASC,UAAT,EAAqB;AAC1B,aAAO,CAACD,eAAe,CAACE,OAAhB,EAAD,CAAP;AACD,KAFD;AAGD;;AACD,MAAIC,KAAK,CAACC,OAAN,CAAcJ,eAAd,CAAJ,EAAoC;AAClC,QAAIA,eAAe,CAAC,CAAD,CAAf,YAA8BxB,gBAAlC,EAAoD;AAElD;AACA,WAAKU,aAAL,GAAqBc,eAArB;AAEA,UAAIX,YAAY,GAAGW,eAAe,CAACK,GAAhB,CAAoB,UAASC,WAAT,EAAsB;AAC3D,eAAOA,WAAW,CAACJ,OAAZ,EAAP;AACD,OAFkB,CAAnB;AAGA,aAAO,UAASD,UAAT,EAAqB;AAC1B,eAAOZ,YAAP;AACD,OAFD;AAGD,KAZiC,CAclC;;;AACA,SAAKH,aAAL,GAAqBc,eAAe,CAACK,GAAhB,CAAoB,UAASC,WAAT,EAAsB;AAC7D,aAAO,IAAI9B,gBAAJ,CAAqB;AAAC+B,QAAAA,IAAI,EAAED;AAAP,OAArB,CAAP;AACD,KAFoB,CAArB;AAIA,WAAO,UAASL,UAAT,EAAqB;AAC1B,aAAOD,eAAP;AACD,KAFD;AAGD;;AAED,MAAI,OAAOA,eAAP,KAA2B,UAA/B,EAA2C;AACzC,WAAOA,eAAP;AACD,GAvCyE,CAyC1E;;;AACA,OAAKd,aAAL,GAAqB,CACnB,IAAIV,gBAAJ,CAAqB;AAAC+B,IAAAA,IAAI,EAAEP;AAAP,GAArB,CADmB,CAArB;AAIA,SAAO,UAASC,UAAT,EAAqB;AAC1B,WAAO,CAACD,eAAD,CAAP;AACD,GAFD;AAGD,CAjDD;AAmDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACApB,kBAAkB,CAACmB,SAAnB,CAA6BS,0BAA7B,GAA0DjC,IAAI,CAACkC,YAA/D;AAGA;AACA;AACA;AACA;AACA;;AACA7B,kBAAkB,CAACmB,SAAnB,CAA6BW,eAA7B,GAA+C,YAAW;AACxD,SAAO,KAAKxB,aAAZ;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACAN,kBAAkB,CAACmB,SAAnB,CAA6BY,gBAA7B,GAAgD,YAAW;AACzD,SAAO,KAAKxB,cAAZ;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAP,kBAAkB,CAACmB,SAAnB,CAA6Ba,OAA7B,GAAuC,YAAW;AAChD,SAAO,KAAKtB,KAAZ;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAV,kBAAkB,CAACmB,SAAnB,CAA6Bc,aAA7B,GAA6C,YAAW;AACtD,SAAO,KAAK9B,WAAZ;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACAH,kBAAkB,CAACmB,SAAnB,CAA6Be,cAA7B,GAA8C,YAAW,CAAE,CAA3D;AAGA;AACA;AACA;AACA;AACA;;;AACAlC,kBAAkB,CAACmB,SAAnB,CAA6BgB,QAA7B,GAAwC,YAAW;AACjD,SAAO,KAAKvB,MAAZ;AACD,CAFD;AAKA;AACA;AACA;;;AACAZ,kBAAkB,CAACmB,SAAnB,CAA6BiB,QAA7B,GAAwC,YAAW;AACjD,SAAO,KAAKpB,MAAZ;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACAhB,kBAAkB,CAACmB,SAAnB,CAA6BkB,OAA7B,GAAuC,YAAW;AAChD,OAAKC,OAAL;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAtC,kBAAkB,CAACmB,SAAnB,CAA6BoB,eAA7B,GAA+C,UAAS9B,YAAT,EAAuB;AACpE,OAAKF,cAAL,GAAsB,KAAKC,kBAAL,CAAwBC,YAAxB,CAAtB;AACA,OAAK6B,OAAL;AACD,CAHD;AAMA;AACA;AACA;AACA;;;AACAtC,kBAAkB,CAACmB,SAAnB,CAA6BqB,OAA7B,GAAuC,UAAS7B,IAAT,EAAe;AACpD,OAAKD,KAAL,GAAaC,IAAb;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAX,kBAAkB,CAACmB,SAAnB,CAA6BsB,QAA7B,GAAwC,UAAS5B,KAAT,EAAgB;AACtD,OAAKD,MAAL,GAAcC,KAAd;AACA,OAAKyB,OAAL;AACD,CAHD;;AAIA,eAAetC,kBAAf","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_Attribution_ from '../attribution.js';\nimport _ol_Object_ from '../object.js';\nimport _ol_proj_ from '../proj.js';\nimport _ol_source_State_ from '../source/state.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link ol.layer.Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n *\n * @constructor\n * @abstract\n * @extends {ol.Object}\n * @param {ol.SourceSourceOptions} options Source options.\n * @api\n */\nvar _ol_source_Source_ = function(options) {\n\n  _ol_Object_.call(this);\n\n  /**\n   * @private\n   * @type {ol.proj.Projection}\n   */\n  this.projection_ = _ol_proj_.get(options.projection);\n\n  /**\n   * @private\n   * @type {Array.<ol.Attribution>}\n   */\n  this.attributions_ = null;\n\n  /**\n   * @private\n   * @type {?ol.Attribution2}\n   */\n  this.attributions2_ = this.adaptAttributions_(options.attributions);\n\n  /**\n   * @private\n   * @type {string|olx.LogoOptions|undefined}\n   */\n  this.logo_ = options.logo;\n\n  /**\n   * @private\n   * @type {ol.source.State}\n   */\n  this.state_ = options.state !== undefined ?\n    options.state : _ol_source_State_.READY;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n\n};\n\n_ol_.inherits(_ol_source_Source_, _ol_Object_);\n\n/**\n * Turns the attributions option into an attributions function.\n * @suppress {deprecated}\n * @param {ol.AttributionLike|undefined} attributionLike The attribution option.\n * @return {?ol.Attribution2} An attribution function (or null).\n */\n_ol_source_Source_.prototype.adaptAttributions_ = function(attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n  if (attributionLike instanceof _ol_Attribution_) {\n\n    // TODO: remove attributions_ in next major release\n    this.attributions_ = [attributionLike];\n\n    return function(frameState) {\n      return [attributionLike.getHTML()];\n    };\n  }\n  if (Array.isArray(attributionLike)) {\n    if (attributionLike[0] instanceof _ol_Attribution_) {\n\n      // TODO: remove attributions_ in next major release\n      this.attributions_ = attributionLike;\n\n      var attributions = attributionLike.map(function(attribution) {\n        return attribution.getHTML();\n      });\n      return function(frameState) {\n        return attributions;\n      };\n    }\n\n    // TODO: remove attributions_ in next major release\n    this.attributions_ = attributionLike.map(function(attribution) {\n      return new _ol_Attribution_({html: attribution});\n    });\n\n    return function(frameState) {\n      return attributionLike;\n    };\n  }\n\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n\n  // TODO: remove attributions_ in next major release\n  this.attributions_ = [\n    new _ol_Attribution_({html: attributionLike})\n  ];\n\n  return function(frameState) {\n    return [attributionLike];\n  };\n};\n\n/**\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {number} hitTolerance Hit tolerance in pixels.\n * @param {Object.<string, boolean>} skippedFeatureUids Skipped feature uids.\n * @param {function((ol.Feature|ol.render.Feature)): T} callback Feature\n *     callback.\n * @return {T|undefined} Callback result.\n * @template T\n */\n_ol_source_Source_.prototype.forEachFeatureAtCoordinate = _ol_.nullFunction;\n\n\n/**\n * Get the attributions of the source.\n * @return {Array.<ol.Attribution>} Attributions.\n * @api\n */\n_ol_source_Source_.prototype.getAttributions = function() {\n  return this.attributions_;\n};\n\n\n/**\n * Get the attribution function for the source.\n * @return {?ol.Attribution2} Attribution function.\n */\n_ol_source_Source_.prototype.getAttributions2 = function() {\n  return this.attributions2_;\n};\n\n\n/**\n * Get the logo of the source.\n * @return {string|olx.LogoOptions|undefined} Logo.\n * @api\n */\n_ol_source_Source_.prototype.getLogo = function() {\n  return this.logo_;\n};\n\n\n/**\n * Get the projection of the source.\n * @return {ol.proj.Projection} Projection.\n * @api\n */\n_ol_source_Source_.prototype.getProjection = function() {\n  return this.projection_;\n};\n\n\n/**\n * @abstract\n * @return {Array.<number>|undefined} Resolutions.\n */\n_ol_source_Source_.prototype.getResolutions = function() {};\n\n\n/**\n * Get the state of the source, see {@link ol.source.State} for possible states.\n * @return {ol.source.State} State.\n * @api\n */\n_ol_source_Source_.prototype.getState = function() {\n  return this.state_;\n};\n\n\n/**\n * @return {boolean|undefined} Wrap X.\n */\n_ol_source_Source_.prototype.getWrapX = function() {\n  return this.wrapX_;\n};\n\n\n/**\n * Refreshes the source and finally dispatches a 'change' event.\n * @api\n */\n_ol_source_Source_.prototype.refresh = function() {\n  this.changed();\n};\n\n\n/**\n * Set the attributions of the source.\n * @param {ol.AttributionLike|undefined} attributions Attributions.\n *     Can be passed as `string`, `Array<string>`, `{@link ol.Attribution2}`,\n *     or `undefined`.\n * @api\n */\n_ol_source_Source_.prototype.setAttributions = function(attributions) {\n  this.attributions2_ = this.adaptAttributions_(attributions);\n  this.changed();\n};\n\n\n/**\n * Set the logo of the source.\n * @param {string|olx.LogoOptions|undefined} logo Logo.\n */\n_ol_source_Source_.prototype.setLogo = function(logo) {\n  this.logo_ = logo;\n};\n\n\n/**\n * Set the state of the source.\n * @param {ol.source.State} state State.\n * @protected\n */\n_ol_source_Source_.prototype.setState = function(state) {\n  this.state_ = state;\n  this.changed();\n};\nexport default _ol_source_Source_;\n"]},"metadata":{},"sourceType":"module"}