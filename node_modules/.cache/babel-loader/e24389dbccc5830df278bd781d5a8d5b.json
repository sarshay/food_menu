{"ast":null,"code":"import _ol_ from './index.js';\nimport _ol_ImageBase_ from './imagebase.js';\nimport _ol_ImageState_ from './imagestate.js';\n/**\n * @constructor\n * @extends {ol.ImageBase}\n * @param {ol.Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {HTMLCanvasElement} canvas Canvas.\n * @param {ol.ImageCanvasLoader=} opt_loader Optional loader function to\n *     support asynchronous canvas drawing.\n */\n\nvar _ol_ImageCanvas_ = function (extent, resolution, pixelRatio, canvas, opt_loader) {\n  /**\n   * Optional canvas loader function.\n   * @type {?ol.ImageCanvasLoader}\n   * @private\n   */\n  this.loader_ = opt_loader !== undefined ? opt_loader : null;\n  var state = opt_loader !== undefined ? _ol_ImageState_.IDLE : _ol_ImageState_.LOADED;\n\n  _ol_ImageBase_.call(this, extent, resolution, pixelRatio, state);\n  /**\n   * @private\n   * @type {HTMLCanvasElement}\n   */\n\n\n  this.canvas_ = canvas;\n  /**\n   * @private\n   * @type {Error}\n   */\n\n  this.error_ = null;\n};\n\n_ol_.inherits(_ol_ImageCanvas_, _ol_ImageBase_);\n/**\n * Get any error associated with asynchronous rendering.\n * @return {Error} Any error that occurred during rendering.\n */\n\n\n_ol_ImageCanvas_.prototype.getError = function () {\n  return this.error_;\n};\n/**\n * Handle async drawing complete.\n * @param {Error} err Any error during drawing.\n * @private\n */\n\n\n_ol_ImageCanvas_.prototype.handleLoad_ = function (err) {\n  if (err) {\n    this.error_ = err;\n    this.state = _ol_ImageState_.ERROR;\n  } else {\n    this.state = _ol_ImageState_.LOADED;\n  }\n\n  this.changed();\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_ImageCanvas_.prototype.load = function () {\n  if (this.state == _ol_ImageState_.IDLE) {\n    this.state = _ol_ImageState_.LOADING;\n    this.changed();\n    this.loader_(this.handleLoad_.bind(this));\n  }\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_ImageCanvas_.prototype.getImage = function () {\n  return this.canvas_;\n};\n\nexport default _ol_ImageCanvas_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/imagecanvas.js"],"names":["_ol_","_ol_ImageBase_","_ol_ImageState_","_ol_ImageCanvas_","extent","resolution","pixelRatio","canvas","opt_loader","loader_","undefined","state","IDLE","LOADED","call","canvas_","error_","inherits","prototype","getError","handleLoad_","err","ERROR","changed","load","LOADING","bind","getImage"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAOC,cAAP,MAA2B,gBAA3B;AACA,OAAOC,eAAP,MAA4B,iBAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,gBAAgB,GAAG,UAASC,MAAT,EAAiBC,UAAjB,EAA6BC,UAA7B,EAAyCC,MAAzC,EAAiDC,UAAjD,EAA6D;AAElF;AACF;AACA;AACA;AACA;AACE,OAAKC,OAAL,GAAeD,UAAU,KAAKE,SAAf,GAA2BF,UAA3B,GAAwC,IAAvD;AAEA,MAAIG,KAAK,GAAGH,UAAU,KAAKE,SAAf,GACVR,eAAe,CAACU,IADN,GACaV,eAAe,CAACW,MADzC;;AAGAZ,EAAAA,cAAc,CAACa,IAAf,CAAoB,IAApB,EAA0BV,MAA1B,EAAkCC,UAAlC,EAA8CC,UAA9C,EAA0DK,KAA1D;AAEA;AACF;AACA;AACA;;;AACE,OAAKI,OAAL,GAAeR,MAAf;AAEA;AACF;AACA;AACA;;AACE,OAAKS,MAAL,GAAc,IAAd;AAED,CA1BD;;AA4BAhB,IAAI,CAACiB,QAAL,CAAcd,gBAAd,EAAgCF,cAAhC;AAGA;AACA;AACA;AACA;;;AACAE,gBAAgB,CAACe,SAAjB,CAA2BC,QAA3B,GAAsC,YAAW;AAC/C,SAAO,KAAKH,MAAZ;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAb,gBAAgB,CAACe,SAAjB,CAA2BE,WAA3B,GAAyC,UAASC,GAAT,EAAc;AACrD,MAAIA,GAAJ,EAAS;AACP,SAAKL,MAAL,GAAcK,GAAd;AACA,SAAKV,KAAL,GAAaT,eAAe,CAACoB,KAA7B;AACD,GAHD,MAGO;AACL,SAAKX,KAAL,GAAaT,eAAe,CAACW,MAA7B;AACD;;AACD,OAAKU,OAAL;AACD,CARD;AAWA;AACA;AACA;;;AACApB,gBAAgB,CAACe,SAAjB,CAA2BM,IAA3B,GAAkC,YAAW;AAC3C,MAAI,KAAKb,KAAL,IAAcT,eAAe,CAACU,IAAlC,EAAwC;AACtC,SAAKD,KAAL,GAAaT,eAAe,CAACuB,OAA7B;AACA,SAAKF,OAAL;AACA,SAAKd,OAAL,CAAa,KAAKW,WAAL,CAAiBM,IAAjB,CAAsB,IAAtB,CAAb;AACD;AACF,CAND;AASA;AACA;AACA;;;AACAvB,gBAAgB,CAACe,SAAjB,CAA2BS,QAA3B,GAAsC,YAAW;AAC/C,SAAO,KAAKZ,OAAZ;AACD,CAFD;;AAGA,eAAeZ,gBAAf","sourcesContent":["import _ol_ from './index.js';\nimport _ol_ImageBase_ from './imagebase.js';\nimport _ol_ImageState_ from './imagestate.js';\n\n/**\n * @constructor\n * @extends {ol.ImageBase}\n * @param {ol.Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {HTMLCanvasElement} canvas Canvas.\n * @param {ol.ImageCanvasLoader=} opt_loader Optional loader function to\n *     support asynchronous canvas drawing.\n */\nvar _ol_ImageCanvas_ = function(extent, resolution, pixelRatio, canvas, opt_loader) {\n\n  /**\n   * Optional canvas loader function.\n   * @type {?ol.ImageCanvasLoader}\n   * @private\n   */\n  this.loader_ = opt_loader !== undefined ? opt_loader : null;\n\n  var state = opt_loader !== undefined ?\n    _ol_ImageState_.IDLE : _ol_ImageState_.LOADED;\n\n  _ol_ImageBase_.call(this, extent, resolution, pixelRatio, state);\n\n  /**\n   * @private\n   * @type {HTMLCanvasElement}\n   */\n  this.canvas_ = canvas;\n\n  /**\n   * @private\n   * @type {Error}\n   */\n  this.error_ = null;\n\n};\n\n_ol_.inherits(_ol_ImageCanvas_, _ol_ImageBase_);\n\n\n/**\n * Get any error associated with asynchronous rendering.\n * @return {Error} Any error that occurred during rendering.\n */\n_ol_ImageCanvas_.prototype.getError = function() {\n  return this.error_;\n};\n\n\n/**\n * Handle async drawing complete.\n * @param {Error} err Any error during drawing.\n * @private\n */\n_ol_ImageCanvas_.prototype.handleLoad_ = function(err) {\n  if (err) {\n    this.error_ = err;\n    this.state = _ol_ImageState_.ERROR;\n  } else {\n    this.state = _ol_ImageState_.LOADED;\n  }\n  this.changed();\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_ImageCanvas_.prototype.load = function() {\n  if (this.state == _ol_ImageState_.IDLE) {\n    this.state = _ol_ImageState_.LOADING;\n    this.changed();\n    this.loader_(this.handleLoad_.bind(this));\n  }\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_ImageCanvas_.prototype.getImage = function() {\n  return this.canvas_;\n};\nexport default _ol_ImageCanvas_;\n"]},"metadata":{},"sourceType":"module"}