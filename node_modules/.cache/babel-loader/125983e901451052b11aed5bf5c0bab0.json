{"ast":null,"code":"import _ol_MapBrowserEventType_ from '../mapbrowsereventtype.js';\nimport _ol_asserts_ from '../asserts.js';\nimport _ol_functions_ from '../functions.js';\nimport _ol_has_ from '../has.js';\nvar _ol_events_condition_ = {};\n/**\n * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when\n * additionally the shift-key is pressed).\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt key is pressed.\n * @api\n */\n\n_ol_events_condition_.altKeyOnly = function (mapBrowserEvent) {\n  var originalEvent = mapBrowserEvent.originalEvent;\n  return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\n/**\n * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise\n * (e.g. when additionally the platform-modifier-key is pressed).\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt and shift keys are pressed.\n * @api\n */\n\n\n_ol_events_condition_.altShiftKeysOnly = function (mapBrowserEvent) {\n  var originalEvent = mapBrowserEvent.originalEvent;\n  return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;\n};\n/**\n * Return always true.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True.\n * @function\n * @api\n */\n\n\n_ol_events_condition_.always = _ol_functions_.TRUE;\n/**\n * Return `true` if the event is a `click` event, `false` otherwise.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `click` event.\n * @api\n */\n\n_ol_events_condition_.click = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == _ol_MapBrowserEventType_.CLICK;\n};\n/**\n * Return `true` if the event has an \"action\"-producing mouse button.\n *\n * By definition, this includes left-click on windows/linux, and left-click\n * without the ctrl key on Macs.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} The result.\n */\n\n\n_ol_events_condition_.mouseActionButton = function (mapBrowserEvent) {\n  var originalEvent = mapBrowserEvent.originalEvent;\n  return originalEvent.button == 0 && !(_ol_has_.WEBKIT && _ol_has_.MAC && originalEvent.ctrlKey);\n};\n/**\n * Return always false.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} False.\n * @function\n * @api\n */\n\n\n_ol_events_condition_.never = _ol_functions_.FALSE;\n/**\n * Return `true` if the browser event is a `pointermove` event, `false`\n * otherwise.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if the browser event is a `pointermove` event.\n * @api\n */\n\n_ol_events_condition_.pointerMove = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == 'pointermove';\n};\n/**\n * Return `true` if the event is a map `singleclick` event, `false` otherwise.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `singleclick` event.\n * @api\n */\n\n\n_ol_events_condition_.singleClick = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == _ol_MapBrowserEventType_.SINGLECLICK;\n};\n/**\n * Return `true` if the event is a map `dblclick` event, `false` otherwise.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `dblclick` event.\n * @api\n */\n\n\n_ol_events_condition_.doubleClick = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == _ol_MapBrowserEventType_.DBLCLICK;\n};\n/**\n * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is\n * pressed.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True only if there no modifier keys are pressed.\n * @api\n */\n\n\n_ol_events_condition_.noModifierKeys = function (mapBrowserEvent) {\n  var originalEvent = mapBrowserEvent.originalEvent;\n  return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\n/**\n * Return `true` if only the platform-modifier-key (the meta-key on Mac,\n * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally\n * the shift-key is pressed).\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the platform modifier key is pressed.\n * @api\n */\n\n\n_ol_events_condition_.platformModifierKeyOnly = function (mapBrowserEvent) {\n  var originalEvent = mapBrowserEvent.originalEvent;\n  return !originalEvent.altKey && (_ol_has_.MAC ? originalEvent.metaKey : originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\n/**\n * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when\n * additionally the alt-key is pressed).\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the shift key is pressed.\n * @api\n */\n\n\n_ol_events_condition_.shiftKeyOnly = function (mapBrowserEvent) {\n  var originalEvent = mapBrowserEvent.originalEvent;\n  return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;\n};\n/**\n * Return `true` if the target element is not editable, i.e. not a `<input>`-,\n * `<select>`- or `<textarea>`-element, `false` otherwise.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True only if the target element is not editable.\n * @api\n */\n\n\n_ol_events_condition_.targetNotEditable = function (mapBrowserEvent) {\n  var target = mapBrowserEvent.originalEvent.target;\n  var tagName = target.tagName;\n  return tagName !== 'INPUT' && tagName !== 'SELECT' && tagName !== 'TEXTAREA';\n};\n/**\n * Return `true` if the event originates from a mouse device.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a mouse device.\n * @api\n */\n\n\n_ol_events_condition_.mouseOnly = function (mapBrowserEvent) {\n  _ol_asserts_.assert(mapBrowserEvent.pointerEvent, 56); // mapBrowserEvent must originate from a pointer event\n  // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n\n\n  return (\n    /** @type {ol.MapBrowserEvent} */\n    mapBrowserEvent.pointerEvent.pointerType == 'mouse'\n  );\n};\n/**\n * Return `true` if the event originates from a primary pointer in\n * contact with the surface or if the left mouse button is pressed.\n * @see http://www.w3.org/TR/pointerevents/#button-states\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a primary pointer.\n * @api\n */\n\n\n_ol_events_condition_.primaryAction = function (mapBrowserEvent) {\n  var pointerEvent = mapBrowserEvent.pointerEvent;\n  return pointerEvent.isPrimary && pointerEvent.button === 0;\n};\n\nexport default _ol_events_condition_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/events/condition.js"],"names":["_ol_MapBrowserEventType_","_ol_asserts_","_ol_functions_","_ol_has_","_ol_events_condition_","altKeyOnly","mapBrowserEvent","originalEvent","altKey","metaKey","ctrlKey","shiftKey","altShiftKeysOnly","always","TRUE","click","type","CLICK","mouseActionButton","button","WEBKIT","MAC","never","FALSE","pointerMove","singleClick","SINGLECLICK","doubleClick","DBLCLICK","noModifierKeys","platformModifierKeyOnly","shiftKeyOnly","targetNotEditable","target","tagName","mouseOnly","assert","pointerEvent","pointerType","primaryAction","isPrimary"],"mappings":"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","sourcesContent":["import _ol_MapBrowserEventType_ from '../mapbrowsereventtype.js';\nimport _ol_asserts_ from '../asserts.js';\nimport _ol_functions_ from '../functions.js';\nimport _ol_has_ from '../has.js';\nvar _ol_events_condition_ = {};\n\n\n/**\n * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when\n * additionally the shift-key is pressed).\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt key is pressed.\n * @api\n */\n_ol_events_condition_.altKeyOnly = function(mapBrowserEvent) {\n  var originalEvent = mapBrowserEvent.originalEvent;\n  return (\n    originalEvent.altKey &&\n      !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n      !originalEvent.shiftKey);\n};\n\n\n/**\n * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise\n * (e.g. when additionally the platform-modifier-key is pressed).\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt and shift keys are pressed.\n * @api\n */\n_ol_events_condition_.altShiftKeysOnly = function(mapBrowserEvent) {\n  var originalEvent = mapBrowserEvent.originalEvent;\n  return (\n    originalEvent.altKey &&\n      !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n      originalEvent.shiftKey);\n};\n\n\n/**\n * Return always true.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True.\n * @function\n * @api\n */\n_ol_events_condition_.always = _ol_functions_.TRUE;\n\n\n/**\n * Return `true` if the event is a `click` event, `false` otherwise.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `click` event.\n * @api\n */\n_ol_events_condition_.click = function(mapBrowserEvent) {\n  return mapBrowserEvent.type == _ol_MapBrowserEventType_.CLICK;\n};\n\n\n/**\n * Return `true` if the event has an \"action\"-producing mouse button.\n *\n * By definition, this includes left-click on windows/linux, and left-click\n * without the ctrl key on Macs.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} The result.\n */\n_ol_events_condition_.mouseActionButton = function(mapBrowserEvent) {\n  var originalEvent = mapBrowserEvent.originalEvent;\n  return originalEvent.button == 0 &&\n      !(_ol_has_.WEBKIT && _ol_has_.MAC && originalEvent.ctrlKey);\n};\n\n\n/**\n * Return always false.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} False.\n * @function\n * @api\n */\n_ol_events_condition_.never = _ol_functions_.FALSE;\n\n\n/**\n * Return `true` if the browser event is a `pointermove` event, `false`\n * otherwise.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if the browser event is a `pointermove` event.\n * @api\n */\n_ol_events_condition_.pointerMove = function(mapBrowserEvent) {\n  return mapBrowserEvent.type == 'pointermove';\n};\n\n\n/**\n * Return `true` if the event is a map `singleclick` event, `false` otherwise.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `singleclick` event.\n * @api\n */\n_ol_events_condition_.singleClick = function(mapBrowserEvent) {\n  return mapBrowserEvent.type == _ol_MapBrowserEventType_.SINGLECLICK;\n};\n\n\n/**\n * Return `true` if the event is a map `dblclick` event, `false` otherwise.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `dblclick` event.\n * @api\n */\n_ol_events_condition_.doubleClick = function(mapBrowserEvent) {\n  return mapBrowserEvent.type == _ol_MapBrowserEventType_.DBLCLICK;\n};\n\n\n/**\n * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is\n * pressed.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True only if there no modifier keys are pressed.\n * @api\n */\n_ol_events_condition_.noModifierKeys = function(mapBrowserEvent) {\n  var originalEvent = mapBrowserEvent.originalEvent;\n  return (\n    !originalEvent.altKey &&\n      !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n      !originalEvent.shiftKey);\n};\n\n\n/**\n * Return `true` if only the platform-modifier-key (the meta-key on Mac,\n * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally\n * the shift-key is pressed).\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the platform modifier key is pressed.\n * @api\n */\n_ol_events_condition_.platformModifierKeyOnly = function(mapBrowserEvent) {\n  var originalEvent = mapBrowserEvent.originalEvent;\n  return !originalEvent.altKey &&\n    (_ol_has_.MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&\n    !originalEvent.shiftKey;\n};\n\n\n/**\n * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when\n * additionally the alt-key is pressed).\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the shift key is pressed.\n * @api\n */\n_ol_events_condition_.shiftKeyOnly = function(mapBrowserEvent) {\n  var originalEvent = mapBrowserEvent.originalEvent;\n  return (\n    !originalEvent.altKey &&\n      !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n      originalEvent.shiftKey);\n};\n\n\n/**\n * Return `true` if the target element is not editable, i.e. not a `<input>`-,\n * `<select>`- or `<textarea>`-element, `false` otherwise.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True only if the target element is not editable.\n * @api\n */\n_ol_events_condition_.targetNotEditable = function(mapBrowserEvent) {\n  var target = mapBrowserEvent.originalEvent.target;\n  var tagName = target.tagName;\n  return (\n    tagName !== 'INPUT' &&\n      tagName !== 'SELECT' &&\n      tagName !== 'TEXTAREA');\n};\n\n\n/**\n * Return `true` if the event originates from a mouse device.\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a mouse device.\n * @api\n */\n_ol_events_condition_.mouseOnly = function(mapBrowserEvent) {\n  _ol_asserts_.assert(mapBrowserEvent.pointerEvent, 56); // mapBrowserEvent must originate from a pointer event\n  // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return /** @type {ol.MapBrowserEvent} */ (mapBrowserEvent).pointerEvent.pointerType == 'mouse';\n};\n\n\n/**\n * Return `true` if the event originates from a primary pointer in\n * contact with the surface or if the left mouse button is pressed.\n * @see http://www.w3.org/TR/pointerevents/#button-states\n *\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a primary pointer.\n * @api\n */\n_ol_events_condition_.primaryAction = function(mapBrowserEvent) {\n  var pointerEvent = mapBrowserEvent.pointerEvent;\n  return pointerEvent.isPrimary && pointerEvent.button === 0;\n};\nexport default _ol_events_condition_;\n"]},"metadata":{},"sourceType":"module"}