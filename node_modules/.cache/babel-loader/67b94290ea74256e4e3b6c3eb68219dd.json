{"ast":null,"code":"// Based on https://github.com/Polymer/PointerEvents\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nimport _ol_ from '../index.js';\nimport _ol_events_Event_ from '../events/event.js';\n/**\n * A class for pointer events.\n *\n * This class is used as an abstraction for mouse events,\n * touch events and even native pointer events.\n *\n * @constructor\n * @extends {ol.events.Event}\n * @param {string} type The type of the event to create.\n * @param {Event} originalEvent The event.\n * @param {Object.<string, ?>=} opt_eventDict An optional dictionary of\n *    initial event properties.\n */\n\nvar _ol_pointer_PointerEvent_ = function (type, originalEvent, opt_eventDict) {\n  _ol_events_Event_.call(this, type);\n  /**\n   * @const\n   * @type {Event}\n   */\n\n\n  this.originalEvent = originalEvent;\n  var eventDict = opt_eventDict ? opt_eventDict : {};\n  /**\n   * @type {number}\n   */\n\n  this.buttons = this.getButtons_(eventDict);\n  /**\n   * @type {number}\n   */\n\n  this.pressure = this.getPressure_(eventDict, this.buttons); // MouseEvent related properties\n\n  /**\n   * @type {boolean}\n   */\n\n  this.bubbles = 'bubbles' in eventDict ? eventDict['bubbles'] : false;\n  /**\n   * @type {boolean}\n   */\n\n  this.cancelable = 'cancelable' in eventDict ? eventDict['cancelable'] : false;\n  /**\n   * @type {Object}\n   */\n\n  this.view = 'view' in eventDict ? eventDict['view'] : null;\n  /**\n   * @type {number}\n   */\n\n  this.detail = 'detail' in eventDict ? eventDict['detail'] : null;\n  /**\n   * @type {number}\n   */\n\n  this.screenX = 'screenX' in eventDict ? eventDict['screenX'] : 0;\n  /**\n   * @type {number}\n   */\n\n  this.screenY = 'screenY' in eventDict ? eventDict['screenY'] : 0;\n  /**\n   * @type {number}\n   */\n\n  this.clientX = 'clientX' in eventDict ? eventDict['clientX'] : 0;\n  /**\n   * @type {number}\n   */\n\n  this.clientY = 'clientY' in eventDict ? eventDict['clientY'] : 0;\n  /**\n   * @type {boolean}\n   */\n\n  this.ctrlKey = 'ctrlKey' in eventDict ? eventDict['ctrlKey'] : false;\n  /**\n   * @type {boolean}\n   */\n\n  this.altKey = 'altKey' in eventDict ? eventDict['altKey'] : false;\n  /**\n   * @type {boolean}\n   */\n\n  this.shiftKey = 'shiftKey' in eventDict ? eventDict['shiftKey'] : false;\n  /**\n   * @type {boolean}\n   */\n\n  this.metaKey = 'metaKey' in eventDict ? eventDict['metaKey'] : false;\n  /**\n   * @type {number}\n   */\n\n  this.button = 'button' in eventDict ? eventDict['button'] : 0;\n  /**\n   * @type {Node}\n   */\n\n  this.relatedTarget = 'relatedTarget' in eventDict ? eventDict['relatedTarget'] : null; // PointerEvent related properties\n\n  /**\n   * @const\n   * @type {number}\n   */\n\n  this.pointerId = 'pointerId' in eventDict ? eventDict['pointerId'] : 0;\n  /**\n   * @type {number}\n   */\n\n  this.width = 'width' in eventDict ? eventDict['width'] : 0;\n  /**\n   * @type {number}\n   */\n\n  this.height = 'height' in eventDict ? eventDict['height'] : 0;\n  /**\n   * @type {number}\n   */\n\n  this.tiltX = 'tiltX' in eventDict ? eventDict['tiltX'] : 0;\n  /**\n   * @type {number}\n   */\n\n  this.tiltY = 'tiltY' in eventDict ? eventDict['tiltY'] : 0;\n  /**\n   * @type {string}\n   */\n\n  this.pointerType = 'pointerType' in eventDict ? eventDict['pointerType'] : '';\n  /**\n   * @type {number}\n   */\n\n  this.hwTimestamp = 'hwTimestamp' in eventDict ? eventDict['hwTimestamp'] : 0;\n  /**\n   * @type {boolean}\n   */\n\n  this.isPrimary = 'isPrimary' in eventDict ? eventDict['isPrimary'] : false; // keep the semantics of preventDefault\n\n  if (originalEvent.preventDefault) {\n    this.preventDefault = function () {\n      originalEvent.preventDefault();\n    };\n  }\n};\n\n_ol_.inherits(_ol_pointer_PointerEvent_, _ol_events_Event_);\n/**\n * @private\n * @param {Object.<string, ?>} eventDict The event dictionary.\n * @return {number} Button indicator.\n */\n\n\n_ol_pointer_PointerEvent_.prototype.getButtons_ = function (eventDict) {\n  // According to the w3c spec,\n  // http://www.w3.org/TR/DOM-Level-3-Events/#events-MouseEvent-button\n  // MouseEvent.button == 0 can mean either no mouse button depressed, or the\n  // left mouse button depressed.\n  //\n  // As of now, the only way to distinguish between the two states of\n  // MouseEvent.button is by using the deprecated MouseEvent.which property, as\n  // this maps mouse buttons to positive integers > 0, and uses 0 to mean that\n  // no mouse button is held.\n  //\n  // MouseEvent.which is derived from MouseEvent.button at MouseEvent creation,\n  // but initMouseEvent does not expose an argument with which to set\n  // MouseEvent.which. Calling initMouseEvent with a buttonArg of 0 will set\n  // MouseEvent.button == 0 and MouseEvent.which == 1, breaking the expectations\n  // of app developers.\n  //\n  // The only way to propagate the correct state of MouseEvent.which and\n  // MouseEvent.button to a new MouseEvent.button == 0 and MouseEvent.which == 0\n  // is to call initMouseEvent with a buttonArg value of -1.\n  //\n  // This is fixed with DOM Level 4's use of buttons\n  var buttons;\n\n  if (eventDict.buttons || _ol_pointer_PointerEvent_.HAS_BUTTONS) {\n    buttons = eventDict.buttons;\n  } else {\n    switch (eventDict.which) {\n      case 1:\n        buttons = 1;\n        break;\n\n      case 2:\n        buttons = 4;\n        break;\n\n      case 3:\n        buttons = 2;\n        break;\n\n      default:\n        buttons = 0;\n    }\n  }\n\n  return buttons;\n};\n/**\n * @private\n * @param {Object.<string, ?>} eventDict The event dictionary.\n * @param {number} buttons Button indicator.\n * @return {number} The pressure.\n */\n\n\n_ol_pointer_PointerEvent_.prototype.getPressure_ = function (eventDict, buttons) {\n  // Spec requires that pointers without pressure specified use 0.5 for down\n  // state and 0 for up state.\n  var pressure = 0;\n\n  if (eventDict.pressure) {\n    pressure = eventDict.pressure;\n  } else {\n    pressure = buttons ? 0.5 : 0;\n  }\n\n  return pressure;\n};\n/**\n * Is the `buttons` property supported?\n * @type {boolean}\n */\n\n\n_ol_pointer_PointerEvent_.HAS_BUTTONS = false;\n/**\n * Checks if the `buttons` property is supported.\n */\n\n(function () {\n  try {\n    var ev = new MouseEvent('click', {\n      buttons: 1\n    });\n    _ol_pointer_PointerEvent_.HAS_BUTTONS = ev.buttons === 1;\n  } catch (e) {// pass\n  }\n})();\n\nexport default _ol_pointer_PointerEvent_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/pointer/pointerevent.js"],"names":["_ol_","_ol_events_Event_","_ol_pointer_PointerEvent_","type","originalEvent","opt_eventDict","call","eventDict","buttons","getButtons_","pressure","getPressure_","bubbles","cancelable","view","detail","screenX","screenY","clientX","clientY","ctrlKey","altKey","shiftKey","metaKey","button","relatedTarget","pointerId","width","height","tiltX","tiltY","pointerType","hwTimestamp","isPrimary","preventDefault","inherits","prototype","HAS_BUTTONS","which","ev","MouseEvent","e"],"mappings":"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","sourcesContent":["// Based on https://github.com/Polymer/PointerEvents\n\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport _ol_ from '../index.js';\nimport _ol_events_Event_ from '../events/event.js';\n\n/**\n * A class for pointer events.\n *\n * This class is used as an abstraction for mouse events,\n * touch events and even native pointer events.\n *\n * @constructor\n * @extends {ol.events.Event}\n * @param {string} type The type of the event to create.\n * @param {Event} originalEvent The event.\n * @param {Object.<string, ?>=} opt_eventDict An optional dictionary of\n *    initial event properties.\n */\nvar _ol_pointer_PointerEvent_ = function(type, originalEvent, opt_eventDict) {\n  _ol_events_Event_.call(this, type);\n\n  /**\n   * @const\n   * @type {Event}\n   */\n  this.originalEvent = originalEvent;\n\n  var eventDict = opt_eventDict ? opt_eventDict : {};\n\n  /**\n   * @type {number}\n   */\n  this.buttons = this.getButtons_(eventDict);\n\n  /**\n   * @type {number}\n   */\n  this.pressure = this.getPressure_(eventDict, this.buttons);\n\n  // MouseEvent related properties\n\n  /**\n   * @type {boolean}\n   */\n  this.bubbles = 'bubbles' in eventDict ? eventDict['bubbles'] : false;\n\n  /**\n   * @type {boolean}\n   */\n  this.cancelable = 'cancelable' in eventDict ? eventDict['cancelable'] : false;\n\n  /**\n   * @type {Object}\n   */\n  this.view = 'view' in eventDict ? eventDict['view'] : null;\n\n  /**\n   * @type {number}\n   */\n  this.detail = 'detail' in eventDict ? eventDict['detail'] : null;\n\n  /**\n   * @type {number}\n   */\n  this.screenX = 'screenX' in eventDict ? eventDict['screenX'] : 0;\n\n  /**\n   * @type {number}\n   */\n  this.screenY = 'screenY' in eventDict ? eventDict['screenY'] : 0;\n\n  /**\n   * @type {number}\n   */\n  this.clientX = 'clientX' in eventDict ? eventDict['clientX'] : 0;\n\n  /**\n   * @type {number}\n   */\n  this.clientY = 'clientY' in eventDict ? eventDict['clientY'] : 0;\n\n  /**\n   * @type {boolean}\n   */\n  this.ctrlKey = 'ctrlKey' in eventDict ? eventDict['ctrlKey'] : false;\n\n  /**\n   * @type {boolean}\n   */\n  this.altKey = 'altKey' in eventDict ? eventDict['altKey'] : false;\n\n  /**\n   * @type {boolean}\n   */\n  this.shiftKey = 'shiftKey' in eventDict ? eventDict['shiftKey'] : false;\n\n  /**\n   * @type {boolean}\n   */\n  this.metaKey = 'metaKey' in eventDict ? eventDict['metaKey'] : false;\n\n  /**\n   * @type {number}\n   */\n  this.button = 'button' in eventDict ? eventDict['button'] : 0;\n\n  /**\n   * @type {Node}\n   */\n  this.relatedTarget = 'relatedTarget' in eventDict ?\n    eventDict['relatedTarget'] : null;\n\n  // PointerEvent related properties\n\n  /**\n   * @const\n   * @type {number}\n   */\n  this.pointerId = 'pointerId' in eventDict ? eventDict['pointerId'] : 0;\n\n  /**\n   * @type {number}\n   */\n  this.width = 'width' in eventDict ? eventDict['width'] : 0;\n\n  /**\n   * @type {number}\n   */\n  this.height = 'height' in eventDict ? eventDict['height'] : 0;\n\n  /**\n   * @type {number}\n   */\n  this.tiltX = 'tiltX' in eventDict ? eventDict['tiltX'] : 0;\n\n  /**\n   * @type {number}\n   */\n  this.tiltY = 'tiltY' in eventDict ? eventDict['tiltY'] : 0;\n\n  /**\n   * @type {string}\n   */\n  this.pointerType = 'pointerType' in eventDict ? eventDict['pointerType'] : '';\n\n  /**\n   * @type {number}\n   */\n  this.hwTimestamp = 'hwTimestamp' in eventDict ? eventDict['hwTimestamp'] : 0;\n\n  /**\n   * @type {boolean}\n   */\n  this.isPrimary = 'isPrimary' in eventDict ? eventDict['isPrimary'] : false;\n\n  // keep the semantics of preventDefault\n  if (originalEvent.preventDefault) {\n    this.preventDefault = function() {\n      originalEvent.preventDefault();\n    };\n  }\n};\n\n_ol_.inherits(_ol_pointer_PointerEvent_, _ol_events_Event_);\n\n\n/**\n * @private\n * @param {Object.<string, ?>} eventDict The event dictionary.\n * @return {number} Button indicator.\n */\n_ol_pointer_PointerEvent_.prototype.getButtons_ = function(eventDict) {\n  // According to the w3c spec,\n  // http://www.w3.org/TR/DOM-Level-3-Events/#events-MouseEvent-button\n  // MouseEvent.button == 0 can mean either no mouse button depressed, or the\n  // left mouse button depressed.\n  //\n  // As of now, the only way to distinguish between the two states of\n  // MouseEvent.button is by using the deprecated MouseEvent.which property, as\n  // this maps mouse buttons to positive integers > 0, and uses 0 to mean that\n  // no mouse button is held.\n  //\n  // MouseEvent.which is derived from MouseEvent.button at MouseEvent creation,\n  // but initMouseEvent does not expose an argument with which to set\n  // MouseEvent.which. Calling initMouseEvent with a buttonArg of 0 will set\n  // MouseEvent.button == 0 and MouseEvent.which == 1, breaking the expectations\n  // of app developers.\n  //\n  // The only way to propagate the correct state of MouseEvent.which and\n  // MouseEvent.button to a new MouseEvent.button == 0 and MouseEvent.which == 0\n  // is to call initMouseEvent with a buttonArg value of -1.\n  //\n  // This is fixed with DOM Level 4's use of buttons\n  var buttons;\n  if (eventDict.buttons || _ol_pointer_PointerEvent_.HAS_BUTTONS) {\n    buttons = eventDict.buttons;\n  } else {\n    switch (eventDict.which) {\n      case 1: buttons = 1; break;\n      case 2: buttons = 4; break;\n      case 3: buttons = 2; break;\n      default: buttons = 0;\n    }\n  }\n  return buttons;\n};\n\n\n/**\n * @private\n * @param {Object.<string, ?>} eventDict The event dictionary.\n * @param {number} buttons Button indicator.\n * @return {number} The pressure.\n */\n_ol_pointer_PointerEvent_.prototype.getPressure_ = function(eventDict, buttons) {\n  // Spec requires that pointers without pressure specified use 0.5 for down\n  // state and 0 for up state.\n  var pressure = 0;\n  if (eventDict.pressure) {\n    pressure = eventDict.pressure;\n  } else {\n    pressure = buttons ? 0.5 : 0;\n  }\n  return pressure;\n};\n\n\n/**\n * Is the `buttons` property supported?\n * @type {boolean}\n */\n_ol_pointer_PointerEvent_.HAS_BUTTONS = false;\n\n\n/**\n * Checks if the `buttons` property is supported.\n */\n(function() {\n  try {\n    var ev = new MouseEvent('click', {buttons: 1});\n    _ol_pointer_PointerEvent_.HAS_BUTTONS = ev.buttons === 1;\n  } catch (e) {\n    // pass\n  }\n})();\nexport default _ol_pointer_PointerEvent_;\n"]},"metadata":{},"sourceType":"module"}