{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_ImageTile_ from '../imagetile.js';\nimport _ol_TileCache_ from '../tilecache.js';\nimport _ol_TileState_ from '../tilestate.js';\nimport _ol_events_ from '../events.js';\nimport _ol_events_EventType_ from '../events/eventtype.js';\nimport _ol_proj_ from '../proj.js';\nimport _ol_reproj_Tile_ from '../reproj/tile.js';\nimport _ol_source_UrlTile_ from '../source/urltile.js';\nimport _ol_tilecoord_ from '../tilecoord.js';\nimport _ol_tilegrid_ from '../tilegrid.js';\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @constructor\n * @fires ol.source.Tile.Event\n * @extends {ol.source.UrlTile}\n * @param {olx.source.TileImageOptions} options Image tile options.\n * @api\n */\n\nvar _ol_source_TileImage_ = function (options) {\n  _ol_source_UrlTile_.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    extent: options.extent,\n    logo: options.logo,\n    opaque: options.opaque,\n    projection: options.projection,\n    state: options.state,\n    tileGrid: options.tileGrid,\n    tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : _ol_source_TileImage_.defaultTileLoadFunction,\n    tilePixelRatio: options.tilePixelRatio,\n    tileUrlFunction: options.tileUrlFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX,\n    transition: options.transition\n  });\n  /**\n   * @protected\n   * @type {?string}\n   */\n\n\n  this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n  /**\n   * @protected\n   * @type {function(new: ol.ImageTile, ol.TileCoord, ol.TileState, string,\n   *        ?string, ol.TileLoadFunctionType, olx.TileOptions=)}\n   */\n\n  this.tileClass = options.tileClass !== undefined ? options.tileClass : _ol_ImageTile_;\n  /**\n   * @protected\n   * @type {Object.<string, ol.TileCache>}\n   */\n\n  this.tileCacheForProjection = {};\n  /**\n   * @protected\n   * @type {Object.<string, ol.tilegrid.TileGrid>}\n   */\n\n  this.tileGridForProjection = {};\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.renderReprojectionEdges_ = false;\n};\n\n_ol_.inherits(_ol_source_TileImage_, _ol_source_UrlTile_);\n/**\n * @inheritDoc\n */\n\n\n_ol_source_TileImage_.prototype.canExpireCache = function () {\n  if (!_ol_.ENABLE_RASTER_REPROJECTION) {\n    return _ol_source_UrlTile_.prototype.canExpireCache.call(this);\n  }\n\n  if (this.tileCache.canExpireCache()) {\n    return true;\n  } else {\n    for (var key in this.tileCacheForProjection) {\n      if (this.tileCacheForProjection[key].canExpireCache()) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_source_TileImage_.prototype.expireCache = function (projection, usedTiles) {\n  if (!_ol_.ENABLE_RASTER_REPROJECTION) {\n    _ol_source_UrlTile_.prototype.expireCache.call(this, projection, usedTiles);\n\n    return;\n  }\n\n  var usedTileCache = this.getTileCacheForProjection(projection);\n  this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n\n  for (var id in this.tileCacheForProjection) {\n    var tileCache = this.tileCacheForProjection[id];\n    tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n  }\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_source_TileImage_.prototype.getGutter = function (projection) {\n  if (_ol_.ENABLE_RASTER_REPROJECTION && this.getProjection() && projection && !_ol_proj_.equivalent(this.getProjection(), projection)) {\n    return 0;\n  } else {\n    return this.getGutterInternal();\n  }\n};\n/**\n * @protected\n * @return {number} Gutter.\n */\n\n\n_ol_source_TileImage_.prototype.getGutterInternal = function () {\n  return 0;\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_source_TileImage_.prototype.getOpaque = function (projection) {\n  if (_ol_.ENABLE_RASTER_REPROJECTION && this.getProjection() && projection && !_ol_proj_.equivalent(this.getProjection(), projection)) {\n    return false;\n  } else {\n    return _ol_source_UrlTile_.prototype.getOpaque.call(this, projection);\n  }\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_source_TileImage_.prototype.getTileGridForProjection = function (projection) {\n  if (!_ol_.ENABLE_RASTER_REPROJECTION) {\n    return _ol_source_UrlTile_.prototype.getTileGridForProjection.call(this, projection);\n  }\n\n  var thisProj = this.getProjection();\n\n  if (this.tileGrid && (!thisProj || _ol_proj_.equivalent(thisProj, projection))) {\n    return this.tileGrid;\n  } else {\n    var projKey = _ol_.getUid(projection).toString();\n\n    if (!(projKey in this.tileGridForProjection)) {\n      this.tileGridForProjection[projKey] = _ol_tilegrid_.getForProjection(projection);\n    }\n\n    return (\n      /** @type {!ol.tilegrid.TileGrid} */\n      this.tileGridForProjection[projKey]\n    );\n  }\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_source_TileImage_.prototype.getTileCacheForProjection = function (projection) {\n  if (!_ol_.ENABLE_RASTER_REPROJECTION) {\n    return _ol_source_UrlTile_.prototype.getTileCacheForProjection.call(this, projection);\n  }\n\n  var thisProj = this.getProjection();\n\n  if (!thisProj || _ol_proj_.equivalent(thisProj, projection)) {\n    return this.tileCache;\n  } else {\n    var projKey = _ol_.getUid(projection).toString();\n\n    if (!(projKey in this.tileCacheForProjection)) {\n      this.tileCacheForProjection[projKey] = new _ol_TileCache_(this.tileCache.highWaterMark);\n    }\n\n    return this.tileCacheForProjection[projKey];\n  }\n};\n/**\n * @param {number} z Tile coordinate z.\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @param {number} pixelRatio Pixel ratio.\n * @param {ol.proj.Projection} projection Projection.\n * @param {string} key The key set on the tile.\n * @return {!ol.Tile} Tile.\n * @private\n */\n\n\n_ol_source_TileImage_.prototype.createTile_ = function (z, x, y, pixelRatio, projection, key) {\n  var tileCoord = [z, x, y];\n  var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n  var tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n  var tile = new this.tileClass(tileCoord, tileUrl !== undefined ? _ol_TileState_.IDLE : _ol_TileState_.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n  tile.key = key;\n\n  _ol_events_.listen(tile, _ol_events_EventType_.CHANGE, this.handleTileChange, this);\n\n  return tile;\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_source_TileImage_.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n  var sourceProjection =\n  /** @type {!ol.proj.Projection} */\n  this.getProjection();\n\n  if (!_ol_.ENABLE_RASTER_REPROJECTION || !sourceProjection || !projection || _ol_proj_.equivalent(sourceProjection, projection)) {\n    return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n  } else {\n    var cache = this.getTileCacheForProjection(projection);\n    var tileCoord = [z, x, y];\n    var tile;\n\n    var tileCoordKey = _ol_tilecoord_.getKey(tileCoord);\n\n    if (cache.containsKey(tileCoordKey)) {\n      tile =\n      /** @type {!ol.Tile} */\n      cache.get(tileCoordKey);\n    }\n\n    var key = this.getKey();\n\n    if (tile && tile.key == key) {\n      return tile;\n    } else {\n      var sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n      var targetTileGrid = this.getTileGridForProjection(projection);\n      var wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n      var newTile = new _ol_reproj_Tile_(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutterInternal(), function (z, x, y, pixelRatio) {\n        return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n      }.bind(this), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_);\n      newTile.key = key;\n\n      if (tile) {\n        newTile.interimTile = tile;\n        newTile.refreshInterimChain();\n        cache.replace(tileCoordKey, newTile);\n      } else {\n        cache.set(tileCoordKey, newTile);\n      }\n\n      return newTile;\n    }\n  }\n};\n/**\n * @param {number} z Tile coordinate z.\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @param {number} pixelRatio Pixel ratio.\n * @param {!ol.proj.Projection} projection Projection.\n * @return {!ol.Tile} Tile.\n * @protected\n */\n\n\n_ol_source_TileImage_.prototype.getTileInternal = function (z, x, y, pixelRatio, projection) {\n  var tile = null;\n\n  var tileCoordKey = _ol_tilecoord_.getKeyZXY(z, x, y);\n\n  var key = this.getKey();\n\n  if (!this.tileCache.containsKey(tileCoordKey)) {\n    tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n    this.tileCache.set(tileCoordKey, tile);\n  } else {\n    tile = this.tileCache.get(tileCoordKey);\n\n    if (tile.key != key) {\n      // The source's params changed. If the tile has an interim tile and if we\n      // can use it then we use it. Otherwise we create a new tile.  In both\n      // cases we attempt to assign an interim tile to the new tile.\n      var interimTile = tile;\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key); //make the new tile the head of the list,\n\n      if (interimTile.getState() == _ol_TileState_.IDLE) {\n        //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n        tile.interimTile = interimTile.interimTile;\n      } else {\n        tile.interimTile = interimTile;\n      }\n\n      tile.refreshInterimChain();\n      this.tileCache.replace(tileCoordKey, tile);\n    }\n  }\n\n  return tile;\n};\n/**\n * Sets whether to render reprojection edges or not (usually for debugging).\n * @param {boolean} render Render the edges.\n * @api\n */\n\n\n_ol_source_TileImage_.prototype.setRenderReprojectionEdges = function (render) {\n  if (!_ol_.ENABLE_RASTER_REPROJECTION || this.renderReprojectionEdges_ == render) {\n    return;\n  }\n\n  this.renderReprojectionEdges_ = render;\n\n  for (var id in this.tileCacheForProjection) {\n    this.tileCacheForProjection[id].clear();\n  }\n\n  this.changed();\n};\n/**\n * Sets the tile grid to use when reprojecting the tiles to the given\n * projection instead of the default tile grid for the projection.\n *\n * This can be useful when the default tile grid cannot be created\n * (e.g. projection has no extent defined) or\n * for optimization reasons (custom tile size, resolutions, ...).\n *\n * @param {ol.ProjectionLike} projection Projection.\n * @param {ol.tilegrid.TileGrid} tilegrid Tile grid to use for the projection.\n * @api\n */\n\n\n_ol_source_TileImage_.prototype.setTileGridForProjection = function (projection, tilegrid) {\n  if (_ol_.ENABLE_RASTER_REPROJECTION) {\n    var proj = _ol_proj_.get(projection);\n\n    if (proj) {\n      var projKey = _ol_.getUid(proj).toString();\n\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n};\n/**\n * @param {ol.ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\n\n\n_ol_source_TileImage_.defaultTileLoadFunction = function (imageTile, src) {\n  imageTile.getImage().src = src;\n};\n\nexport default _ol_source_TileImage_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/source/tileimage.js"],"names":["_ol_","_ol_ImageTile_","_ol_TileCache_","_ol_TileState_","_ol_events_","_ol_events_EventType_","_ol_proj_","_ol_reproj_Tile_","_ol_source_UrlTile_","_ol_tilecoord_","_ol_tilegrid_","_ol_source_TileImage_","options","call","attributions","cacheSize","extent","logo","opaque","projection","state","tileGrid","tileLoadFunction","defaultTileLoadFunction","tilePixelRatio","tileUrlFunction","url","urls","wrapX","transition","crossOrigin","undefined","tileClass","tileCacheForProjection","tileGridForProjection","reprojectionErrorThreshold_","reprojectionErrorThreshold","renderReprojectionEdges_","inherits","prototype","canExpireCache","ENABLE_RASTER_REPROJECTION","tileCache","key","expireCache","usedTiles","usedTileCache","getTileCacheForProjection","id","getGutter","getProjection","equivalent","getGutterInternal","getOpaque","getTileGridForProjection","thisProj","projKey","getUid","toString","getForProjection","highWaterMark","createTile_","z","x","y","pixelRatio","tileCoord","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","IDLE","EMPTY","tileOptions","listen","CHANGE","handleTileChange","getTile","sourceProjection","getTileInternal","cache","tileCoordKey","getKey","containsKey","get","sourceTileGrid","targetTileGrid","wrappedTileCoord","newTile","getTilePixelRatio","bind","interimTile","refreshInterimChain","replace","set","getKeyZXY","getState","setRenderReprojectionEdges","render","clear","changed","setTileGridForProjection","tilegrid","proj","imageTile","src","getImage"],"mappings":"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","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_ImageTile_ from '../imagetile.js';\nimport _ol_TileCache_ from '../tilecache.js';\nimport _ol_TileState_ from '../tilestate.js';\nimport _ol_events_ from '../events.js';\nimport _ol_events_EventType_ from '../events/eventtype.js';\nimport _ol_proj_ from '../proj.js';\nimport _ol_reproj_Tile_ from '../reproj/tile.js';\nimport _ol_source_UrlTile_ from '../source/urltile.js';\nimport _ol_tilecoord_ from '../tilecoord.js';\nimport _ol_tilegrid_ from '../tilegrid.js';\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @constructor\n * @fires ol.source.Tile.Event\n * @extends {ol.source.UrlTile}\n * @param {olx.source.TileImageOptions} options Image tile options.\n * @api\n */\nvar _ol_source_TileImage_ = function(options) {\n\n  _ol_source_UrlTile_.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    extent: options.extent,\n    logo: options.logo,\n    opaque: options.opaque,\n    projection: options.projection,\n    state: options.state,\n    tileGrid: options.tileGrid,\n    tileLoadFunction: options.tileLoadFunction ?\n      options.tileLoadFunction : _ol_source_TileImage_.defaultTileLoadFunction,\n    tilePixelRatio: options.tilePixelRatio,\n    tileUrlFunction: options.tileUrlFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX,\n    transition: options.transition\n  });\n\n  /**\n   * @protected\n   * @type {?string}\n   */\n  this.crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n  /**\n   * @protected\n   * @type {function(new: ol.ImageTile, ol.TileCoord, ol.TileState, string,\n   *        ?string, ol.TileLoadFunctionType, olx.TileOptions=)}\n   */\n  this.tileClass = options.tileClass !== undefined ?\n    options.tileClass : _ol_ImageTile_;\n\n  /**\n   * @protected\n   * @type {Object.<string, ol.TileCache>}\n   */\n  this.tileCacheForProjection = {};\n\n  /**\n   * @protected\n   * @type {Object.<string, ol.tilegrid.TileGrid>}\n   */\n  this.tileGridForProjection = {};\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.renderReprojectionEdges_ = false;\n};\n\n_ol_.inherits(_ol_source_TileImage_, _ol_source_UrlTile_);\n\n\n/**\n * @inheritDoc\n */\n_ol_source_TileImage_.prototype.canExpireCache = function() {\n  if (!_ol_.ENABLE_RASTER_REPROJECTION) {\n    return _ol_source_UrlTile_.prototype.canExpireCache.call(this);\n  }\n  if (this.tileCache.canExpireCache()) {\n    return true;\n  } else {\n    for (var key in this.tileCacheForProjection) {\n      if (this.tileCacheForProjection[key].canExpireCache()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_source_TileImage_.prototype.expireCache = function(projection, usedTiles) {\n  if (!_ol_.ENABLE_RASTER_REPROJECTION) {\n    _ol_source_UrlTile_.prototype.expireCache.call(this, projection, usedTiles);\n    return;\n  }\n  var usedTileCache = this.getTileCacheForProjection(projection);\n\n  this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n  for (var id in this.tileCacheForProjection) {\n    var tileCache = this.tileCacheForProjection[id];\n    tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n  }\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_source_TileImage_.prototype.getGutter = function(projection) {\n  if (_ol_.ENABLE_RASTER_REPROJECTION &&\n      this.getProjection() && projection &&\n      !_ol_proj_.equivalent(this.getProjection(), projection)) {\n    return 0;\n  } else {\n    return this.getGutterInternal();\n  }\n};\n\n\n/**\n * @protected\n * @return {number} Gutter.\n */\n_ol_source_TileImage_.prototype.getGutterInternal = function() {\n  return 0;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_source_TileImage_.prototype.getOpaque = function(projection) {\n  if (_ol_.ENABLE_RASTER_REPROJECTION &&\n      this.getProjection() && projection &&\n      !_ol_proj_.equivalent(this.getProjection(), projection)) {\n    return false;\n  } else {\n    return _ol_source_UrlTile_.prototype.getOpaque.call(this, projection);\n  }\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_source_TileImage_.prototype.getTileGridForProjection = function(projection) {\n  if (!_ol_.ENABLE_RASTER_REPROJECTION) {\n    return _ol_source_UrlTile_.prototype.getTileGridForProjection.call(this, projection);\n  }\n  var thisProj = this.getProjection();\n  if (this.tileGrid &&\n      (!thisProj || _ol_proj_.equivalent(thisProj, projection))) {\n    return this.tileGrid;\n  } else {\n    var projKey = _ol_.getUid(projection).toString();\n    if (!(projKey in this.tileGridForProjection)) {\n      this.tileGridForProjection[projKey] =\n          _ol_tilegrid_.getForProjection(projection);\n    }\n    return /** @type {!ol.tilegrid.TileGrid} */ (this.tileGridForProjection[projKey]);\n  }\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_source_TileImage_.prototype.getTileCacheForProjection = function(projection) {\n  if (!_ol_.ENABLE_RASTER_REPROJECTION) {\n    return _ol_source_UrlTile_.prototype.getTileCacheForProjection.call(this, projection);\n  }\n  var thisProj = this.getProjection();\n  if (!thisProj || _ol_proj_.equivalent(thisProj, projection)) {\n    return this.tileCache;\n  } else {\n    var projKey = _ol_.getUid(projection).toString();\n    if (!(projKey in this.tileCacheForProjection)) {\n      this.tileCacheForProjection[projKey] = new _ol_TileCache_(this.tileCache.highWaterMark);\n    }\n    return this.tileCacheForProjection[projKey];\n  }\n};\n\n\n/**\n * @param {number} z Tile coordinate z.\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @param {number} pixelRatio Pixel ratio.\n * @param {ol.proj.Projection} projection Projection.\n * @param {string} key The key set on the tile.\n * @return {!ol.Tile} Tile.\n * @private\n */\n_ol_source_TileImage_.prototype.createTile_ = function(z, x, y, pixelRatio, projection, key) {\n  var tileCoord = [z, x, y];\n  var urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord, projection);\n  var tileUrl = urlTileCoord ?\n    this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n  var tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? _ol_TileState_.IDLE : _ol_TileState_.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions);\n  tile.key = key;\n  _ol_events_.listen(tile, _ol_events_EventType_.CHANGE,\n      this.handleTileChange, this);\n  return tile;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_source_TileImage_.prototype.getTile = function(z, x, y, pixelRatio, projection) {\n  var sourceProjection = /** @type {!ol.proj.Projection} */ (this.getProjection());\n  if (!_ol_.ENABLE_RASTER_REPROJECTION ||\n      !sourceProjection || !projection ||\n      _ol_proj_.equivalent(sourceProjection, projection)) {\n    return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n  } else {\n    var cache = this.getTileCacheForProjection(projection);\n    var tileCoord = [z, x, y];\n    var tile;\n    var tileCoordKey = _ol_tilecoord_.getKey(tileCoord);\n    if (cache.containsKey(tileCoordKey)) {\n      tile = /** @type {!ol.Tile} */ (cache.get(tileCoordKey));\n    }\n    var key = this.getKey();\n    if (tile && tile.key == key) {\n      return tile;\n    } else {\n      var sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n      var targetTileGrid = this.getTileGridForProjection(projection);\n      var wrappedTileCoord =\n          this.getTileCoordForTileUrlFunction(tileCoord, projection);\n      var newTile = new _ol_reproj_Tile_(\n          sourceProjection, sourceTileGrid,\n          projection, targetTileGrid,\n          tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio),\n          this.getGutterInternal(),\n          function(z, x, y, pixelRatio) {\n            return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n          }.bind(this), this.reprojectionErrorThreshold_,\n          this.renderReprojectionEdges_);\n      newTile.key = key;\n\n      if (tile) {\n        newTile.interimTile = tile;\n        newTile.refreshInterimChain();\n        cache.replace(tileCoordKey, newTile);\n      } else {\n        cache.set(tileCoordKey, newTile);\n      }\n      return newTile;\n    }\n  }\n};\n\n\n/**\n * @param {number} z Tile coordinate z.\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @param {number} pixelRatio Pixel ratio.\n * @param {!ol.proj.Projection} projection Projection.\n * @return {!ol.Tile} Tile.\n * @protected\n */\n_ol_source_TileImage_.prototype.getTileInternal = function(z, x, y, pixelRatio, projection) {\n  var tile = null;\n  var tileCoordKey = _ol_tilecoord_.getKeyZXY(z, x, y);\n  var key = this.getKey();\n  if (!this.tileCache.containsKey(tileCoordKey)) {\n    tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n    this.tileCache.set(tileCoordKey, tile);\n  } else {\n    tile = this.tileCache.get(tileCoordKey);\n    if (tile.key != key) {\n      // The source's params changed. If the tile has an interim tile and if we\n      // can use it then we use it. Otherwise we create a new tile.  In both\n      // cases we attempt to assign an interim tile to the new tile.\n      var interimTile = tile;\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n\n      //make the new tile the head of the list,\n      if (interimTile.getState() == _ol_TileState_.IDLE) {\n        //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n        tile.interimTile = interimTile.interimTile;\n      } else {\n        tile.interimTile = interimTile;\n      }\n      tile.refreshInterimChain();\n      this.tileCache.replace(tileCoordKey, tile);\n    }\n  }\n  return tile;\n};\n\n\n/**\n * Sets whether to render reprojection edges or not (usually for debugging).\n * @param {boolean} render Render the edges.\n * @api\n */\n_ol_source_TileImage_.prototype.setRenderReprojectionEdges = function(render) {\n  if (!_ol_.ENABLE_RASTER_REPROJECTION ||\n      this.renderReprojectionEdges_ == render) {\n    return;\n  }\n  this.renderReprojectionEdges_ = render;\n  for (var id in this.tileCacheForProjection) {\n    this.tileCacheForProjection[id].clear();\n  }\n  this.changed();\n};\n\n\n/**\n * Sets the tile grid to use when reprojecting the tiles to the given\n * projection instead of the default tile grid for the projection.\n *\n * This can be useful when the default tile grid cannot be created\n * (e.g. projection has no extent defined) or\n * for optimization reasons (custom tile size, resolutions, ...).\n *\n * @param {ol.ProjectionLike} projection Projection.\n * @param {ol.tilegrid.TileGrid} tilegrid Tile grid to use for the projection.\n * @api\n */\n_ol_source_TileImage_.prototype.setTileGridForProjection = function(projection, tilegrid) {\n  if (_ol_.ENABLE_RASTER_REPROJECTION) {\n    var proj = _ol_proj_.get(projection);\n    if (proj) {\n      var projKey = _ol_.getUid(proj).toString();\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n};\n\n\n/**\n * @param {ol.ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\n_ol_source_TileImage_.defaultTileLoadFunction = function(imageTile, src) {\n  imageTile.getImage().src = src;\n};\nexport default _ol_source_TileImage_;\n"]},"metadata":{},"sourceType":"module"}