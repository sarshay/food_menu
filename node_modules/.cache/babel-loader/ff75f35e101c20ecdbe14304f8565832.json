{"ast":null,"code":"import _ol_ from '../../index.js';\nimport _ol_colorlike_ from '../../colorlike.js';\nimport _ol_dom_ from '../../dom.js';\nimport _ol_geom_GeometryType_ from '../../geom/geometrytype.js';\nimport _ol_has_ from '../../has.js';\nimport _ol_render_replay_ from '../replay.js';\nimport _ol_render_webgl_ from '../webgl.js';\nimport _ol_render_webgl_TextureReplay_ from '../webgl/texturereplay.js';\nimport _ol_style_AtlasManager_ from '../../style/atlasmanager.js';\nimport _ol_webgl_Buffer_ from '../../webgl/buffer.js';\n/**\n * @constructor\n * @extends {ol.render.webgl.TextureReplay}\n * @param {number} tolerance Tolerance.\n * @param {ol.Extent} maxExtent Max extent.\n * @struct\n */\n\nvar _ol_render_webgl_TextReplay_ = function (tolerance, maxExtent) {\n  _ol_render_webgl_TextureReplay_.call(this, tolerance, maxExtent);\n  /**\n   * @private\n   * @type {Array.<HTMLCanvasElement>}\n   */\n\n\n  this.images_ = [];\n  /**\n   * @private\n   * @type {Array.<WebGLTexture>}\n   */\n\n  this.textures_ = [];\n  /**\n   * @private\n   * @type {HTMLCanvasElement}\n   */\n\n  this.measureCanvas_ = _ol_dom_.createCanvasContext2D(0, 0).canvas;\n  /**\n   * @private\n   * @type {{strokeColor: (ol.ColorLike|null),\n   *         lineCap: (string|undefined),\n   *         lineDash: Array.<number>,\n   *         lineDashOffset: (number|undefined),\n   *         lineJoin: (string|undefined),\n   *         lineWidth: number,\n   *         miterLimit: (number|undefined),\n   *         fillColor: (ol.ColorLike|null),\n   *         font: (string|undefined),\n   *         scale: (number|undefined)}}\n   */\n\n  this.state_ = {\n    strokeColor: null,\n    lineCap: undefined,\n    lineDash: null,\n    lineDashOffset: undefined,\n    lineJoin: undefined,\n    lineWidth: 0,\n    miterLimit: undefined,\n    fillColor: null,\n    font: undefined,\n    scale: undefined\n  };\n  /**\n   * @private\n   * @type {string}\n   */\n\n  this.text_ = '';\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.textAlign_ = undefined;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.textBaseline_ = undefined;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.offsetX_ = undefined;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.offsetY_ = undefined;\n  /**\n   * @private\n   * @type {Object.<string, ol.WebglGlyphAtlas>}\n   */\n\n  this.atlases_ = {};\n  /**\n   * @private\n   * @type {ol.WebglGlyphAtlas|undefined}\n   */\n\n  this.currAtlas_ = undefined;\n  this.scale = 1;\n  this.opacity = 1;\n};\n\n_ol_.inherits(_ol_render_webgl_TextReplay_, _ol_render_webgl_TextureReplay_);\n/**\n * @inheritDoc\n */\n\n\n_ol_render_webgl_TextReplay_.prototype.drawText = function (geometry, feature) {\n  if (this.text_) {\n    var flatCoordinates = null;\n    var offset = 0;\n    var end = 2;\n    var stride = 2;\n\n    switch (geometry.getType()) {\n      case _ol_geom_GeometryType_.POINT:\n      case _ol_geom_GeometryType_.MULTI_POINT:\n        flatCoordinates = geometry.getFlatCoordinates();\n        end = flatCoordinates.length;\n        stride = geometry.getStride();\n        break;\n\n      case _ol_geom_GeometryType_.CIRCLE:\n        flatCoordinates =\n        /** @type {ol.geom.Circle} */\n        geometry.getCenter();\n        break;\n\n      case _ol_geom_GeometryType_.LINE_STRING:\n        flatCoordinates =\n        /** @type {ol.geom.LineString} */\n        geometry.getFlatMidpoint();\n        break;\n\n      case _ol_geom_GeometryType_.MULTI_LINE_STRING:\n        flatCoordinates =\n        /** @type {ol.geom.MultiLineString} */\n        geometry.getFlatMidpoints();\n        end = flatCoordinates.length;\n        break;\n\n      case _ol_geom_GeometryType_.POLYGON:\n        flatCoordinates =\n        /** @type {ol.geom.Polygon} */\n        geometry.getFlatInteriorPoint();\n        break;\n\n      case _ol_geom_GeometryType_.MULTI_POLYGON:\n        flatCoordinates =\n        /** @type {ol.geom.MultiPolygon} */\n        geometry.getFlatInteriorPoints();\n        end = flatCoordinates.length;\n        break;\n\n      default:\n    }\n\n    this.startIndices.push(this.indices.length);\n    this.startIndicesFeature.push(feature);\n    var glyphAtlas = this.currAtlas_;\n    var lines = this.text_.split('\\n');\n    var textSize = this.getTextSize_(lines);\n    var i, ii, j, jj, currX, currY, charArr, charInfo;\n    var anchorX = Math.round(textSize[0] * this.textAlign_ - this.offsetX_);\n    var anchorY = Math.round(textSize[1] * this.textBaseline_ - this.offsetY_);\n    var lineWidth = this.state_.lineWidth / 2 * this.state_.scale;\n\n    for (i = 0, ii = lines.length; i < ii; ++i) {\n      currX = 0;\n      currY = glyphAtlas.height * i;\n      charArr = lines[i].split('');\n\n      for (j = 0, jj = charArr.length; j < jj; ++j) {\n        charInfo = glyphAtlas.atlas.getInfo(charArr[j]);\n\n        if (charInfo) {\n          var image = charInfo.image;\n          this.anchorX = anchorX - currX;\n          this.anchorY = anchorY - currY;\n          this.originX = j === 0 ? charInfo.offsetX - lineWidth : charInfo.offsetX;\n          this.originY = charInfo.offsetY;\n          this.height = glyphAtlas.height;\n          this.width = j === 0 || j === charArr.length - 1 ? glyphAtlas.width[charArr[j]] + lineWidth : glyphAtlas.width[charArr[j]];\n          this.imageHeight = image.height;\n          this.imageWidth = image.width;\n          var currentImage;\n\n          if (this.images_.length === 0) {\n            this.images_.push(image);\n          } else {\n            currentImage = this.images_[this.images_.length - 1];\n\n            if (_ol_.getUid(currentImage) != _ol_.getUid(image)) {\n              this.groupIndices.push(this.indices.length);\n              this.images_.push(image);\n            }\n          }\n\n          this.drawText_(flatCoordinates, offset, end, stride);\n        }\n\n        currX += this.width;\n      }\n    }\n  }\n};\n/**\n * @private\n * @param {Array.<string>} lines Label to draw split to lines.\n * @return {Array.<number>} Size of the label in pixels.\n */\n\n\n_ol_render_webgl_TextReplay_.prototype.getTextSize_ = function (lines) {\n  var self = this;\n  var glyphAtlas = this.currAtlas_;\n  var textHeight = lines.length * glyphAtlas.height; //Split every line to an array of chars, sum up their width, and select the longest.\n\n  var textWidth = lines.map(function (str) {\n    var sum = 0;\n    var i, ii;\n\n    for (i = 0, ii = str.length; i < ii; ++i) {\n      var curr = str[i];\n\n      if (!glyphAtlas.width[curr]) {\n        self.addCharToAtlas_(curr);\n      }\n\n      sum += glyphAtlas.width[curr] ? glyphAtlas.width[curr] : 0;\n    }\n\n    return sum;\n  }).reduce(function (max, curr) {\n    return Math.max(max, curr);\n  });\n  return [textWidth, textHeight];\n};\n/**\n * @private\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n */\n\n\n_ol_render_webgl_TextReplay_.prototype.drawText_ = function (flatCoordinates, offset, end, stride) {\n  var i, ii;\n\n  for (i = offset, ii = end; i < ii; i += stride) {\n    this.drawCoordinates(flatCoordinates, offset, end, stride);\n  }\n};\n/**\n * @private\n * @param {string} char Character.\n */\n\n\n_ol_render_webgl_TextReplay_.prototype.addCharToAtlas_ = function (char) {\n  if (char.length === 1) {\n    var glyphAtlas = this.currAtlas_;\n    var state = this.state_;\n    var mCtx = this.measureCanvas_.getContext('2d');\n    mCtx.font = state.font;\n    var width = Math.ceil(mCtx.measureText(char).width * state.scale);\n    var info = glyphAtlas.atlas.add(char, width, glyphAtlas.height, function (ctx, x, y) {\n      //Parameterize the canvas\n      ctx.font =\n      /** @type {string} */\n      state.font;\n      ctx.fillStyle = state.fillColor;\n      ctx.strokeStyle = state.strokeColor;\n      ctx.lineWidth = state.lineWidth;\n      ctx.lineCap =\n      /*** @type {string} */\n      state.lineCap;\n      ctx.lineJoin =\n      /** @type {string} */\n      state.lineJoin;\n      ctx.miterLimit =\n      /** @type {number} */\n      state.miterLimit;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'top';\n\n      if (_ol_has_.CANVAS_LINE_DASH && state.lineDash) {\n        //FIXME: use pixelRatio\n        ctx.setLineDash(state.lineDash);\n        ctx.lineDashOffset =\n        /** @type {number} */\n        state.lineDashOffset;\n      }\n\n      if (state.scale !== 1) {\n        //FIXME: use pixelRatio\n        ctx.setTransform(\n        /** @type {number} */\n        state.scale, 0, 0,\n        /** @type {number} */\n        state.scale, 0, 0);\n      } //Draw the character on the canvas\n\n\n      if (state.strokeColor) {\n        ctx.strokeText(char, x, y);\n      }\n\n      if (state.fillColor) {\n        ctx.fillText(char, x, y);\n      }\n    });\n\n    if (info) {\n      glyphAtlas.width[char] = width;\n    }\n  }\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_render_webgl_TextReplay_.prototype.finish = function (context) {\n  var gl = context.getGL();\n  this.groupIndices.push(this.indices.length);\n  this.hitDetectionGroupIndices = this.groupIndices; // create, bind, and populate the vertices buffer\n\n  this.verticesBuffer = new _ol_webgl_Buffer_(this.vertices); // create, bind, and populate the indices buffer\n\n  this.indicesBuffer = new _ol_webgl_Buffer_(this.indices); // create textures\n\n  /** @type {Object.<string, WebGLTexture>} */\n\n  var texturePerImage = {};\n  this.createTextures(this.textures_, this.images_, texturePerImage, gl);\n  this.state_ = {\n    strokeColor: null,\n    lineCap: undefined,\n    lineDash: null,\n    lineDashOffset: undefined,\n    lineJoin: undefined,\n    lineWidth: 0,\n    miterLimit: undefined,\n    fillColor: null,\n    font: undefined,\n    scale: undefined\n  };\n  this.text_ = '';\n  this.textAlign_ = undefined;\n  this.textBaseline_ = undefined;\n  this.offsetX_ = undefined;\n  this.offsetY_ = undefined;\n  this.images_ = null;\n  this.atlases_ = {};\n  this.currAtlas_ = undefined;\n\n  _ol_render_webgl_TextureReplay_.prototype.finish.call(this, context);\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_render_webgl_TextReplay_.prototype.setTextStyle = function (textStyle) {\n  var state = this.state_;\n  var textFillStyle = textStyle.getFill();\n  var textStrokeStyle = textStyle.getStroke();\n\n  if (!textStyle || !textStyle.getText() || !textFillStyle && !textStrokeStyle) {\n    this.text_ = '';\n  } else {\n    if (!textFillStyle) {\n      state.fillColor = null;\n    } else {\n      var textFillStyleColor = textFillStyle.getColor();\n      state.fillColor = _ol_colorlike_.asColorLike(textFillStyleColor ? textFillStyleColor : _ol_render_webgl_.defaultFillStyle);\n    }\n\n    if (!textStrokeStyle) {\n      state.strokeColor = null;\n      state.lineWidth = 0;\n    } else {\n      var textStrokeStyleColor = textStrokeStyle.getColor();\n      state.strokeColor = _ol_colorlike_.asColorLike(textStrokeStyleColor ? textStrokeStyleColor : _ol_render_webgl_.defaultStrokeStyle);\n      state.lineWidth = textStrokeStyle.getWidth() || _ol_render_webgl_.defaultLineWidth;\n      state.lineCap = textStrokeStyle.getLineCap() || _ol_render_webgl_.defaultLineCap;\n      state.lineDashOffset = textStrokeStyle.getLineDashOffset() || _ol_render_webgl_.defaultLineDashOffset;\n      state.lineJoin = textStrokeStyle.getLineJoin() || _ol_render_webgl_.defaultLineJoin;\n      state.miterLimit = textStrokeStyle.getMiterLimit() || _ol_render_webgl_.defaultMiterLimit;\n      var lineDash = textStrokeStyle.getLineDash();\n      state.lineDash = lineDash ? lineDash.slice() : _ol_render_webgl_.defaultLineDash;\n    }\n\n    state.font = textStyle.getFont() || _ol_render_webgl_.defaultFont;\n    state.scale = textStyle.getScale() || 1;\n    this.text_ =\n    /** @type {string} */\n    textStyle.getText();\n\n    var textAlign = _ol_render_replay_.TEXT_ALIGN[textStyle.getTextAlign()];\n\n    var textBaseline = _ol_render_replay_.TEXT_ALIGN[textStyle.getTextBaseline()];\n\n    this.textAlign_ = textAlign === undefined ? _ol_render_webgl_.defaultTextAlign : textAlign;\n    this.textBaseline_ = textBaseline === undefined ? _ol_render_webgl_.defaultTextBaseline : textBaseline;\n    this.offsetX_ = textStyle.getOffsetX() || 0;\n    this.offsetY_ = textStyle.getOffsetY() || 0;\n    this.rotateWithView = !!textStyle.getRotateWithView();\n    this.rotation = textStyle.getRotation() || 0;\n    this.currAtlas_ = this.getAtlas_(state);\n  }\n};\n/**\n * @private\n * @param {Object} state Font attributes.\n * @return {ol.WebglGlyphAtlas} Glyph atlas.\n */\n\n\n_ol_render_webgl_TextReplay_.prototype.getAtlas_ = function (state) {\n  var params = [];\n  var i;\n\n  for (i in state) {\n    if (state[i] || state[i] === 0) {\n      if (Array.isArray(state[i])) {\n        params = params.concat(state[i]);\n      } else {\n        params.push(state[i]);\n      }\n    }\n  }\n\n  var hash = this.calculateHash_(params);\n\n  if (!this.atlases_[hash]) {\n    var mCtx = this.measureCanvas_.getContext('2d');\n    mCtx.font = state.font;\n    var height = Math.ceil((mCtx.measureText('M').width * 1.5 + state.lineWidth / 2) * state.scale);\n    this.atlases_[hash] = {\n      atlas: new _ol_style_AtlasManager_({\n        space: state.lineWidth + 1\n      }),\n      width: {},\n      height: height\n    };\n  }\n\n  return this.atlases_[hash];\n};\n/**\n * @private\n * @param {Array.<string|number>} params Array of parameters.\n * @return {string} Hash string.\n */\n\n\n_ol_render_webgl_TextReplay_.prototype.calculateHash_ = function (params) {\n  //TODO: Create a more performant, reliable, general hash function.\n  var i, ii;\n  var hash = '';\n\n  for (i = 0, ii = params.length; i < ii; ++i) {\n    hash += params[i];\n  }\n\n  return hash;\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_render_webgl_TextReplay_.prototype.getTextures = function (opt_all) {\n  return this.textures_;\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_render_webgl_TextReplay_.prototype.getHitDetectionTextures = function () {\n  return this.textures_;\n};\n\nexport default _ol_render_webgl_TextReplay_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/render/webgl/textreplay.js"],"names":["_ol_","_ol_colorlike_","_ol_dom_","_ol_geom_GeometryType_","_ol_has_","_ol_render_replay_","_ol_render_webgl_","_ol_render_webgl_TextureReplay_","_ol_style_AtlasManager_","_ol_webgl_Buffer_","_ol_render_webgl_TextReplay_","tolerance","maxExtent","call","images_","textures_","measureCanvas_","createCanvasContext2D","canvas","state_","strokeColor","lineCap","undefined","lineDash","lineDashOffset","lineJoin","lineWidth","miterLimit","fillColor","font","scale","text_","textAlign_","textBaseline_","offsetX_","offsetY_","atlases_","currAtlas_","opacity","inherits","prototype","drawText","geometry","feature","flatCoordinates","offset","end","stride","getType","POINT","MULTI_POINT","getFlatCoordinates","length","getStride","CIRCLE","getCenter","LINE_STRING","getFlatMidpoint","MULTI_LINE_STRING","getFlatMidpoints","POLYGON","getFlatInteriorPoint","MULTI_POLYGON","getFlatInteriorPoints","startIndices","push","indices","startIndicesFeature","glyphAtlas","lines","split","textSize","getTextSize_","i","ii","j","jj","currX","currY","charArr","charInfo","anchorX","Math","round","anchorY","height","atlas","getInfo","image","originX","offsetX","originY","offsetY","width","imageHeight","imageWidth","currentImage","getUid","groupIndices","drawText_","self","textHeight","textWidth","map","str","sum","curr","addCharToAtlas_","reduce","max","drawCoordinates","char","state","mCtx","getContext","ceil","measureText","info","add","ctx","x","y","fillStyle","strokeStyle","textAlign","textBaseline","CANVAS_LINE_DASH","setLineDash","setTransform","strokeText","fillText","finish","context","gl","getGL","hitDetectionGroupIndices","verticesBuffer","vertices","indicesBuffer","texturePerImage","createTextures","setTextStyle","textStyle","textFillStyle","getFill","textStrokeStyle","getStroke","getText","textFillStyleColor","getColor","asColorLike","defaultFillStyle","textStrokeStyleColor","defaultStrokeStyle","getWidth","defaultLineWidth","getLineCap","defaultLineCap","getLineDashOffset","defaultLineDashOffset","getLineJoin","defaultLineJoin","getMiterLimit","defaultMiterLimit","getLineDash","slice","defaultLineDash","getFont","defaultFont","getScale","TEXT_ALIGN","getTextAlign","getTextBaseline","defaultTextAlign","defaultTextBaseline","getOffsetX","getOffsetY","rotateWithView","getRotateWithView","rotation","getRotation","getAtlas_","params","Array","isArray","concat","hash","calculateHash_","space","getTextures","opt_all","getHitDetectionTextures"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,gBAAjB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,sBAAP,MAAmC,4BAAnC;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,kBAAP,MAA+B,cAA/B;AACA,OAAOC,iBAAP,MAA8B,aAA9B;AACA,OAAOC,+BAAP,MAA4C,2BAA5C;AACA,OAAOC,uBAAP,MAAoC,6BAApC;AACA,OAAOC,iBAAP,MAA8B,uBAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,4BAA4B,GAAG,UAASC,SAAT,EAAoBC,SAApB,EAA+B;AAChEL,EAAAA,+BAA+B,CAACM,IAAhC,CAAqC,IAArC,EAA2CF,SAA3C,EAAsDC,SAAtD;AAEA;AACF;AACA;AACA;;;AACE,OAAKE,OAAL,GAAe,EAAf;AAEA;AACF;AACA;AACA;;AACE,OAAKC,SAAL,GAAiB,EAAjB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,cAAL,GAAsBd,QAAQ,CAACe,qBAAT,CAA+B,CAA/B,EAAkC,CAAlC,EAAqCC,MAA3D;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,MAAL,GAAc;AACZC,IAAAA,WAAW,EAAE,IADD;AAEZC,IAAAA,OAAO,EAAEC,SAFG;AAGZC,IAAAA,QAAQ,EAAE,IAHE;AAIZC,IAAAA,cAAc,EAAEF,SAJJ;AAKZG,IAAAA,QAAQ,EAAEH,SALE;AAMZI,IAAAA,SAAS,EAAE,CANC;AAOZC,IAAAA,UAAU,EAAEL,SAPA;AAQZM,IAAAA,SAAS,EAAE,IARC;AASZC,IAAAA,IAAI,EAAEP,SATM;AAUZQ,IAAAA,KAAK,EAAER;AAVK,GAAd;AAaA;AACF;AACA;AACA;;AACE,OAAKS,KAAL,GAAa,EAAb;AAEA;AACF;AACA;AACA;;AACE,OAAKC,UAAL,GAAkBV,SAAlB;AAEA;AACF;AACA;AACA;;AACE,OAAKW,aAAL,GAAqBX,SAArB;AAEA;AACF;AACA;AACA;;AACE,OAAKY,QAAL,GAAgBZ,SAAhB;AAEA;AACF;AACA;AACA;;AACE,OAAKa,QAAL,GAAgBb,SAAhB;AAEA;AACF;AACA;AACA;;AACE,OAAKc,QAAL,GAAgB,EAAhB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,UAAL,GAAkBf,SAAlB;AAEA,OAAKQ,KAAL,GAAa,CAAb;AAEA,OAAKQ,OAAL,GAAe,CAAf;AAED,CA7FD;;AA+FAtC,IAAI,CAACuC,QAAL,CAAc7B,4BAAd,EAA4CH,+BAA5C;AAGA;AACA;AACA;;;AACAG,4BAA4B,CAAC8B,SAA7B,CAAuCC,QAAvC,GAAkD,UAASC,QAAT,EAAmBC,OAAnB,EAA4B;AAC5E,MAAI,KAAKZ,KAAT,EAAgB;AACd,QAAIa,eAAe,GAAG,IAAtB;AACA,QAAIC,MAAM,GAAG,CAAb;AACA,QAAIC,GAAG,GAAG,CAAV;AACA,QAAIC,MAAM,GAAG,CAAb;;AACA,YAAQL,QAAQ,CAACM,OAAT,EAAR;AACE,WAAK7C,sBAAsB,CAAC8C,KAA5B;AACA,WAAK9C,sBAAsB,CAAC+C,WAA5B;AACEN,QAAAA,eAAe,GAAGF,QAAQ,CAACS,kBAAT,EAAlB;AACAL,QAAAA,GAAG,GAAGF,eAAe,CAACQ,MAAtB;AACAL,QAAAA,MAAM,GAAGL,QAAQ,CAACW,SAAT,EAAT;AACA;;AACF,WAAKlD,sBAAsB,CAACmD,MAA5B;AACEV,QAAAA,eAAe;AAAG;AAA+BF,QAAAA,QAAD,CAAWa,SAAX,EAAhD;AACA;;AACF,WAAKpD,sBAAsB,CAACqD,WAA5B;AACEZ,QAAAA,eAAe;AAAG;AAAmCF,QAAAA,QAAD,CAAWe,eAAX,EAApD;AACA;;AACF,WAAKtD,sBAAsB,CAACuD,iBAA5B;AACEd,QAAAA,eAAe;AAAG;AAAwCF,QAAAA,QAAD,CAAWiB,gBAAX,EAAzD;AACAb,QAAAA,GAAG,GAAGF,eAAe,CAACQ,MAAtB;AACA;;AACF,WAAKjD,sBAAsB,CAACyD,OAA5B;AACEhB,QAAAA,eAAe;AAAG;AAAgCF,QAAAA,QAAD,CAAWmB,oBAAX,EAAjD;AACA;;AACF,WAAK1D,sBAAsB,CAAC2D,aAA5B;AACElB,QAAAA,eAAe;AAAG;AAAqCF,QAAAA,QAAD,CAAWqB,qBAAX,EAAtD;AACAjB,QAAAA,GAAG,GAAGF,eAAe,CAACQ,MAAtB;AACA;;AACF;AAxBF;;AA0BA,SAAKY,YAAL,CAAkBC,IAAlB,CAAuB,KAAKC,OAAL,CAAad,MAApC;AACA,SAAKe,mBAAL,CAAyBF,IAAzB,CAA8BtB,OAA9B;AAEA,QAAIyB,UAAU,GAAG,KAAK/B,UAAtB;AACA,QAAIgC,KAAK,GAAG,KAAKtC,KAAL,CAAWuC,KAAX,CAAiB,IAAjB,CAAZ;AACA,QAAIC,QAAQ,GAAG,KAAKC,YAAL,CAAkBH,KAAlB,CAAf;AACA,QAAII,CAAJ,EAAOC,EAAP,EAAWC,CAAX,EAAcC,EAAd,EAAkBC,KAAlB,EAAyBC,KAAzB,EAAgCC,OAAhC,EAAyCC,QAAzC;AACA,QAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWZ,QAAQ,CAAC,CAAD,CAAR,GAAc,KAAKvC,UAAnB,GAAgC,KAAKE,QAAhD,CAAd;AACA,QAAIkD,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAWZ,QAAQ,CAAC,CAAD,CAAR,GAAc,KAAKtC,aAAnB,GAAmC,KAAKE,QAAnD,CAAd;AACA,QAAIT,SAAS,GAAI,KAAKP,MAAL,CAAYO,SAAZ,GAAwB,CAAzB,GAA8B,KAAKP,MAAL,CAAYW,KAA1D;;AAEA,SAAK2C,CAAC,GAAG,CAAJ,EAAOC,EAAE,GAAGL,KAAK,CAACjB,MAAvB,EAA+BqB,CAAC,GAAGC,EAAnC,EAAuC,EAAED,CAAzC,EAA4C;AAC1CI,MAAAA,KAAK,GAAG,CAAR;AACAC,MAAAA,KAAK,GAAGV,UAAU,CAACiB,MAAX,GAAoBZ,CAA5B;AACAM,MAAAA,OAAO,GAAGV,KAAK,CAACI,CAAD,CAAL,CAASH,KAAT,CAAe,EAAf,CAAV;;AAEA,WAAKK,CAAC,GAAG,CAAJ,EAAOC,EAAE,GAAGG,OAAO,CAAC3B,MAAzB,EAAiCuB,CAAC,GAAGC,EAArC,EAAyC,EAAED,CAA3C,EAA8C;AAC5CK,QAAAA,QAAQ,GAAGZ,UAAU,CAACkB,KAAX,CAAiBC,OAAjB,CAAyBR,OAAO,CAACJ,CAAD,CAAhC,CAAX;;AAEA,YAAIK,QAAJ,EAAc;AACZ,cAAIQ,KAAK,GAAGR,QAAQ,CAACQ,KAArB;AAEA,eAAKP,OAAL,GAAeA,OAAO,GAAGJ,KAAzB;AACA,eAAKO,OAAL,GAAeA,OAAO,GAAGN,KAAzB;AACA,eAAKW,OAAL,GAAed,CAAC,KAAK,CAAN,GAAUK,QAAQ,CAACU,OAAT,GAAmBhE,SAA7B,GAAyCsD,QAAQ,CAACU,OAAjE;AACA,eAAKC,OAAL,GAAeX,QAAQ,CAACY,OAAxB;AACA,eAAKP,MAAL,GAAcjB,UAAU,CAACiB,MAAzB;AACA,eAAKQ,KAAL,GAAalB,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAKI,OAAO,CAAC3B,MAAR,GAAiB,CAAlC,GACXgB,UAAU,CAACyB,KAAX,CAAiBd,OAAO,CAACJ,CAAD,CAAxB,IAA+BjD,SADpB,GACgC0C,UAAU,CAACyB,KAAX,CAAiBd,OAAO,CAACJ,CAAD,CAAxB,CAD7C;AAEA,eAAKmB,WAAL,GAAmBN,KAAK,CAACH,MAAzB;AACA,eAAKU,UAAL,GAAkBP,KAAK,CAACK,KAAxB;AAEA,cAAIG,YAAJ;;AACA,cAAI,KAAKlF,OAAL,CAAasC,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,iBAAKtC,OAAL,CAAamD,IAAb,CAAkBuB,KAAlB;AACD,WAFD,MAEO;AACLQ,YAAAA,YAAY,GAAG,KAAKlF,OAAL,CAAa,KAAKA,OAAL,CAAasC,MAAb,GAAsB,CAAnC,CAAf;;AACA,gBAAIpD,IAAI,CAACiG,MAAL,CAAYD,YAAZ,KAA6BhG,IAAI,CAACiG,MAAL,CAAYT,KAAZ,CAAjC,EAAqD;AACnD,mBAAKU,YAAL,CAAkBjC,IAAlB,CAAuB,KAAKC,OAAL,CAAad,MAApC;AACA,mBAAKtC,OAAL,CAAamD,IAAb,CAAkBuB,KAAlB;AACD;AACF;;AAED,eAAKW,SAAL,CAAevD,eAAf,EAAgCC,MAAhC,EAAwCC,GAAxC,EAA6CC,MAA7C;AACD;;AACD8B,QAAAA,KAAK,IAAI,KAAKgB,KAAd;AACD;AACF;AACF;AACF,CAjFD;AAoFA;AACA;AACA;AACA;AACA;;;AACAnF,4BAA4B,CAAC8B,SAA7B,CAAuCgC,YAAvC,GAAsD,UAASH,KAAT,EAAgB;AACpE,MAAI+B,IAAI,GAAG,IAAX;AACA,MAAIhC,UAAU,GAAG,KAAK/B,UAAtB;AACA,MAAIgE,UAAU,GAAGhC,KAAK,CAACjB,MAAN,GAAegB,UAAU,CAACiB,MAA3C,CAHoE,CAIpE;;AACA,MAAIiB,SAAS,GAAGjC,KAAK,CAACkC,GAAN,CAAU,UAASC,GAAT,EAAc;AACtC,QAAIC,GAAG,GAAG,CAAV;AACA,QAAIhC,CAAJ,EAAOC,EAAP;;AACA,SAAKD,CAAC,GAAG,CAAJ,EAAOC,EAAE,GAAG8B,GAAG,CAACpD,MAArB,EAA6BqB,CAAC,GAAGC,EAAjC,EAAqC,EAAED,CAAvC,EAA0C;AACxC,UAAIiC,IAAI,GAAGF,GAAG,CAAC/B,CAAD,CAAd;;AACA,UAAI,CAACL,UAAU,CAACyB,KAAX,CAAiBa,IAAjB,CAAL,EAA6B;AAC3BN,QAAAA,IAAI,CAACO,eAAL,CAAqBD,IAArB;AACD;;AACDD,MAAAA,GAAG,IAAIrC,UAAU,CAACyB,KAAX,CAAiBa,IAAjB,IAAyBtC,UAAU,CAACyB,KAAX,CAAiBa,IAAjB,CAAzB,GAAkD,CAAzD;AACD;;AACD,WAAOD,GAAP;AACD,GAXe,EAWbG,MAXa,CAWN,UAASC,GAAT,EAAcH,IAAd,EAAoB;AAC5B,WAAOxB,IAAI,CAAC2B,GAAL,CAASA,GAAT,EAAcH,IAAd,CAAP;AACD,GAbe,CAAhB;AAeA,SAAO,CAACJ,SAAD,EAAYD,UAAZ,CAAP;AACD,CArBD;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA3F,4BAA4B,CAAC8B,SAA7B,CAAuC2D,SAAvC,GAAmD,UAASvD,eAAT,EAA0BC,MAA1B,EAC/CC,GAD+C,EAC1CC,MAD0C,EAClC;AACf,MAAI0B,CAAJ,EAAOC,EAAP;;AACA,OAAKD,CAAC,GAAG5B,MAAJ,EAAY6B,EAAE,GAAG5B,GAAtB,EAA2B2B,CAAC,GAAGC,EAA/B,EAAmCD,CAAC,IAAI1B,MAAxC,EAAgD;AAC9C,SAAK+D,eAAL,CAAqBlE,eAArB,EAAsCC,MAAtC,EAA8CC,GAA9C,EAAmDC,MAAnD;AACD;AACF,CAND;AASA;AACA;AACA;AACA;;;AACArC,4BAA4B,CAAC8B,SAA7B,CAAuCmE,eAAvC,GAAyD,UAASI,IAAT,EAAe;AACtE,MAAIA,IAAI,CAAC3D,MAAL,KAAgB,CAApB,EAAuB;AACrB,QAAIgB,UAAU,GAAG,KAAK/B,UAAtB;AACA,QAAI2E,KAAK,GAAG,KAAK7F,MAAjB;AACA,QAAI8F,IAAI,GAAG,KAAKjG,cAAL,CAAoBkG,UAApB,CAA+B,IAA/B,CAAX;AACAD,IAAAA,IAAI,CAACpF,IAAL,GAAYmF,KAAK,CAACnF,IAAlB;AACA,QAAIgE,KAAK,GAAGX,IAAI,CAACiC,IAAL,CAAUF,IAAI,CAACG,WAAL,CAAiBL,IAAjB,EAAuBlB,KAAvB,GAA+BmB,KAAK,CAAClF,KAA/C,CAAZ;AAEA,QAAIuF,IAAI,GAAGjD,UAAU,CAACkB,KAAX,CAAiBgC,GAAjB,CAAqBP,IAArB,EAA2BlB,KAA3B,EAAkCzB,UAAU,CAACiB,MAA7C,EACP,UAASkC,GAAT,EAAcC,CAAd,EAAiBC,CAAjB,EAAoB;AAClB;AACAF,MAAAA,GAAG,CAAC1F,IAAJ;AAAW;AAAuBmF,MAAAA,KAAK,CAACnF,IAAxC;AACA0F,MAAAA,GAAG,CAACG,SAAJ,GAAgBV,KAAK,CAACpF,SAAtB;AACA2F,MAAAA,GAAG,CAACI,WAAJ,GAAkBX,KAAK,CAAC5F,WAAxB;AACAmG,MAAAA,GAAG,CAAC7F,SAAJ,GAAgBsF,KAAK,CAACtF,SAAtB;AACA6F,MAAAA,GAAG,CAAClG,OAAJ;AAAc;AAAwB2F,MAAAA,KAAK,CAAC3F,OAA5C;AACAkG,MAAAA,GAAG,CAAC9F,QAAJ;AAAe;AAAuBuF,MAAAA,KAAK,CAACvF,QAA5C;AACA8F,MAAAA,GAAG,CAAC5F,UAAJ;AAAiB;AAAuBqF,MAAAA,KAAK,CAACrF,UAA9C;AACA4F,MAAAA,GAAG,CAACK,SAAJ,GAAgB,MAAhB;AACAL,MAAAA,GAAG,CAACM,YAAJ,GAAmB,KAAnB;;AACA,UAAIzH,QAAQ,CAAC0H,gBAAT,IAA6Bd,KAAK,CAACzF,QAAvC,EAAiD;AAC/C;AACAgG,QAAAA,GAAG,CAACQ,WAAJ,CAAgBf,KAAK,CAACzF,QAAtB;AACAgG,QAAAA,GAAG,CAAC/F,cAAJ;AAAqB;AAAuBwF,QAAAA,KAAK,CAACxF,cAAlD;AACD;;AACD,UAAIwF,KAAK,CAAClF,KAAN,KAAgB,CAApB,EAAuB;AACrB;AACAyF,QAAAA,GAAG,CAACS,YAAJ;AAAiB;AAAuBhB,QAAAA,KAAK,CAAClF,KAA9C,EAAsD,CAAtD,EAAyD,CAAzD;AACI;AAAuBkF,QAAAA,KAAK,CAAClF,KADjC,EACyC,CADzC,EAC4C,CAD5C;AAED,OApBiB,CAsBlB;;;AACA,UAAIkF,KAAK,CAAC5F,WAAV,EAAuB;AACrBmG,QAAAA,GAAG,CAACU,UAAJ,CAAelB,IAAf,EAAqBS,CAArB,EAAwBC,CAAxB;AACD;;AACD,UAAIT,KAAK,CAACpF,SAAV,EAAqB;AACnB2F,QAAAA,GAAG,CAACW,QAAJ,CAAanB,IAAb,EAAmBS,CAAnB,EAAsBC,CAAtB;AACD;AACF,KA9BM,CAAX;;AAgCA,QAAIJ,IAAJ,EAAU;AACRjD,MAAAA,UAAU,CAACyB,KAAX,CAAiBkB,IAAjB,IAAyBlB,KAAzB;AACD;AACF;AACF,CA5CD;AA+CA;AACA;AACA;;;AACAnF,4BAA4B,CAAC8B,SAA7B,CAAuC2F,MAAvC,GAAgD,UAASC,OAAT,EAAkB;AAChE,MAAIC,EAAE,GAAGD,OAAO,CAACE,KAAR,EAAT;AAEA,OAAKpC,YAAL,CAAkBjC,IAAlB,CAAuB,KAAKC,OAAL,CAAad,MAApC;AACA,OAAKmF,wBAAL,GAAgC,KAAKrC,YAArC,CAJgE,CAMhE;;AACA,OAAKsC,cAAL,GAAsB,IAAI/H,iBAAJ,CAAsB,KAAKgI,QAA3B,CAAtB,CAPgE,CAShE;;AACA,OAAKC,aAAL,GAAqB,IAAIjI,iBAAJ,CAAsB,KAAKyD,OAA3B,CAArB,CAVgE,CAYhE;;AACA;;AACA,MAAIyE,eAAe,GAAG,EAAtB;AAEA,OAAKC,cAAL,CAAoB,KAAK7H,SAAzB,EAAoC,KAAKD,OAAzC,EAAkD6H,eAAlD,EAAmEN,EAAnE;AAEA,OAAKlH,MAAL,GAAc;AACZC,IAAAA,WAAW,EAAE,IADD;AAEZC,IAAAA,OAAO,EAAEC,SAFG;AAGZC,IAAAA,QAAQ,EAAE,IAHE;AAIZC,IAAAA,cAAc,EAAEF,SAJJ;AAKZG,IAAAA,QAAQ,EAAEH,SALE;AAMZI,IAAAA,SAAS,EAAE,CANC;AAOZC,IAAAA,UAAU,EAAEL,SAPA;AAQZM,IAAAA,SAAS,EAAE,IARC;AASZC,IAAAA,IAAI,EAAEP,SATM;AAUZQ,IAAAA,KAAK,EAAER;AAVK,GAAd;AAYA,OAAKS,KAAL,GAAa,EAAb;AACA,OAAKC,UAAL,GAAkBV,SAAlB;AACA,OAAKW,aAAL,GAAqBX,SAArB;AACA,OAAKY,QAAL,GAAgBZ,SAAhB;AACA,OAAKa,QAAL,GAAgBb,SAAhB;AACA,OAAKR,OAAL,GAAe,IAAf;AACA,OAAKsB,QAAL,GAAgB,EAAhB;AACA,OAAKC,UAAL,GAAkBf,SAAlB;;AACAf,EAAAA,+BAA+B,CAACiC,SAAhC,CAA0C2F,MAA1C,CAAiDtH,IAAjD,CAAsD,IAAtD,EAA4DuH,OAA5D;AACD,CAvCD;AA0CA;AACA;AACA;;;AACA1H,4BAA4B,CAAC8B,SAA7B,CAAuCqG,YAAvC,GAAsD,UAASC,SAAT,EAAoB;AACxE,MAAI9B,KAAK,GAAG,KAAK7F,MAAjB;AACA,MAAI4H,aAAa,GAAGD,SAAS,CAACE,OAAV,EAApB;AACA,MAAIC,eAAe,GAAGH,SAAS,CAACI,SAAV,EAAtB;;AACA,MAAI,CAACJ,SAAD,IAAc,CAACA,SAAS,CAACK,OAAV,EAAf,IAAuC,CAACJ,aAAD,IAAkB,CAACE,eAA9D,EAAgF;AAC9E,SAAKlH,KAAL,GAAa,EAAb;AACD,GAFD,MAEO;AACL,QAAI,CAACgH,aAAL,EAAoB;AAClB/B,MAAAA,KAAK,CAACpF,SAAN,GAAkB,IAAlB;AACD,KAFD,MAEO;AACL,UAAIwH,kBAAkB,GAAGL,aAAa,CAACM,QAAd,EAAzB;AACArC,MAAAA,KAAK,CAACpF,SAAN,GAAkB3B,cAAc,CAACqJ,WAAf,CAA2BF,kBAAkB,GAC7DA,kBAD6D,GACxC9I,iBAAiB,CAACiJ,gBADvB,CAAlB;AAED;;AACD,QAAI,CAACN,eAAL,EAAsB;AACpBjC,MAAAA,KAAK,CAAC5F,WAAN,GAAoB,IAApB;AACA4F,MAAAA,KAAK,CAACtF,SAAN,GAAkB,CAAlB;AACD,KAHD,MAGO;AACL,UAAI8H,oBAAoB,GAAGP,eAAe,CAACI,QAAhB,EAA3B;AACArC,MAAAA,KAAK,CAAC5F,WAAN,GAAoBnB,cAAc,CAACqJ,WAAf,CAA2BE,oBAAoB,GACjEA,oBADiE,GAC1ClJ,iBAAiB,CAACmJ,kBADvB,CAApB;AAEAzC,MAAAA,KAAK,CAACtF,SAAN,GAAkBuH,eAAe,CAACS,QAAhB,MAA8BpJ,iBAAiB,CAACqJ,gBAAlE;AACA3C,MAAAA,KAAK,CAAC3F,OAAN,GAAgB4H,eAAe,CAACW,UAAhB,MAAgCtJ,iBAAiB,CAACuJ,cAAlE;AACA7C,MAAAA,KAAK,CAACxF,cAAN,GAAuByH,eAAe,CAACa,iBAAhB,MAAuCxJ,iBAAiB,CAACyJ,qBAAhF;AACA/C,MAAAA,KAAK,CAACvF,QAAN,GAAiBwH,eAAe,CAACe,WAAhB,MAAiC1J,iBAAiB,CAAC2J,eAApE;AACAjD,MAAAA,KAAK,CAACrF,UAAN,GAAmBsH,eAAe,CAACiB,aAAhB,MAAmC5J,iBAAiB,CAAC6J,iBAAxE;AACA,UAAI5I,QAAQ,GAAG0H,eAAe,CAACmB,WAAhB,EAAf;AACApD,MAAAA,KAAK,CAACzF,QAAN,GAAiBA,QAAQ,GAAGA,QAAQ,CAAC8I,KAAT,EAAH,GAAsB/J,iBAAiB,CAACgK,eAAjE;AACD;;AACDtD,IAAAA,KAAK,CAACnF,IAAN,GAAaiH,SAAS,CAACyB,OAAV,MAAuBjK,iBAAiB,CAACkK,WAAtD;AACAxD,IAAAA,KAAK,CAAClF,KAAN,GAAcgH,SAAS,CAAC2B,QAAV,MAAwB,CAAtC;AACA,SAAK1I,KAAL;AAAa;AAAuB+G,IAAAA,SAAS,CAACK,OAAV,EAApC;;AACA,QAAIvB,SAAS,GAAGvH,kBAAkB,CAACqK,UAAnB,CAA8B5B,SAAS,CAAC6B,YAAV,EAA9B,CAAhB;;AACA,QAAI9C,YAAY,GAAGxH,kBAAkB,CAACqK,UAAnB,CAA8B5B,SAAS,CAAC8B,eAAV,EAA9B,CAAnB;;AACA,SAAK5I,UAAL,GAAkB4F,SAAS,KAAKtG,SAAd,GAChBhB,iBAAiB,CAACuK,gBADF,GACqBjD,SADvC;AAEA,SAAK3F,aAAL,GAAqB4F,YAAY,KAAKvG,SAAjB,GACnBhB,iBAAiB,CAACwK,mBADC,GACqBjD,YAD1C;AAEA,SAAK3F,QAAL,GAAgB4G,SAAS,CAACiC,UAAV,MAA0B,CAA1C;AACA,SAAK5I,QAAL,GAAgB2G,SAAS,CAACkC,UAAV,MAA0B,CAA1C;AACA,SAAKC,cAAL,GAAsB,CAAC,CAACnC,SAAS,CAACoC,iBAAV,EAAxB;AACA,SAAKC,QAAL,GAAgBrC,SAAS,CAACsC,WAAV,MAA2B,CAA3C;AAEA,SAAK/I,UAAL,GAAkB,KAAKgJ,SAAL,CAAerE,KAAf,CAAlB;AACD;AACF,CA7CD;AAgDA;AACA;AACA;AACA;AACA;;;AACAtG,4BAA4B,CAAC8B,SAA7B,CAAuC6I,SAAvC,GAAmD,UAASrE,KAAT,EAAgB;AACjE,MAAIsE,MAAM,GAAG,EAAb;AACA,MAAI7G,CAAJ;;AACA,OAAKA,CAAL,IAAUuC,KAAV,EAAiB;AACf,QAAIA,KAAK,CAACvC,CAAD,CAAL,IAAYuC,KAAK,CAACvC,CAAD,CAAL,KAAa,CAA7B,EAAgC;AAC9B,UAAI8G,KAAK,CAACC,OAAN,CAAcxE,KAAK,CAACvC,CAAD,CAAnB,CAAJ,EAA6B;AAC3B6G,QAAAA,MAAM,GAAGA,MAAM,CAACG,MAAP,CAAczE,KAAK,CAACvC,CAAD,CAAnB,CAAT;AACD,OAFD,MAEO;AACL6G,QAAAA,MAAM,CAACrH,IAAP,CAAY+C,KAAK,CAACvC,CAAD,CAAjB;AACD;AACF;AACF;;AACD,MAAIiH,IAAI,GAAG,KAAKC,cAAL,CAAoBL,MAApB,CAAX;;AACA,MAAI,CAAC,KAAKlJ,QAAL,CAAcsJ,IAAd,CAAL,EAA0B;AACxB,QAAIzE,IAAI,GAAG,KAAKjG,cAAL,CAAoBkG,UAApB,CAA+B,IAA/B,CAAX;AACAD,IAAAA,IAAI,CAACpF,IAAL,GAAYmF,KAAK,CAACnF,IAAlB;AACA,QAAIwD,MAAM,GAAGH,IAAI,CAACiC,IAAL,CAAU,CAACF,IAAI,CAACG,WAAL,CAAiB,GAAjB,EAAsBvB,KAAtB,GAA8B,GAA9B,GACpBmB,KAAK,CAACtF,SAAN,GAAkB,CADC,IACIsF,KAAK,CAAClF,KADpB,CAAb;AAGA,SAAKM,QAAL,CAAcsJ,IAAd,IAAsB;AACpBpG,MAAAA,KAAK,EAAE,IAAI9E,uBAAJ,CAA4B;AACjCoL,QAAAA,KAAK,EAAE5E,KAAK,CAACtF,SAAN,GAAkB;AADQ,OAA5B,CADa;AAIpBmE,MAAAA,KAAK,EAAE,EAJa;AAKpBR,MAAAA,MAAM,EAAEA;AALY,KAAtB;AAOD;;AACD,SAAO,KAAKjD,QAAL,CAAcsJ,IAAd,CAAP;AACD,CA5BD;AA+BA;AACA;AACA;AACA;AACA;;;AACAhL,4BAA4B,CAAC8B,SAA7B,CAAuCmJ,cAAvC,GAAwD,UAASL,MAAT,EAAiB;AACvE;AACA,MAAI7G,CAAJ,EAAOC,EAAP;AACA,MAAIgH,IAAI,GAAG,EAAX;;AACA,OAAKjH,CAAC,GAAG,CAAJ,EAAOC,EAAE,GAAG4G,MAAM,CAAClI,MAAxB,EAAgCqB,CAAC,GAAGC,EAApC,EAAwC,EAAED,CAA1C,EAA6C;AAC3CiH,IAAAA,IAAI,IAAIJ,MAAM,CAAC7G,CAAD,CAAd;AACD;;AACD,SAAOiH,IAAP;AACD,CARD;AAWA;AACA;AACA;;;AACAhL,4BAA4B,CAAC8B,SAA7B,CAAuCqJ,WAAvC,GAAqD,UAASC,OAAT,EAAkB;AACrE,SAAO,KAAK/K,SAAZ;AACD,CAFD;AAKA;AACA;AACA;;;AACAL,4BAA4B,CAAC8B,SAA7B,CAAuCuJ,uBAAvC,GAAiE,YAAW;AAC1E,SAAO,KAAKhL,SAAZ;AACD,CAFD;;AAGA,eAAeL,4BAAf","sourcesContent":["import _ol_ from '../../index.js';\nimport _ol_colorlike_ from '../../colorlike.js';\nimport _ol_dom_ from '../../dom.js';\nimport _ol_geom_GeometryType_ from '../../geom/geometrytype.js';\nimport _ol_has_ from '../../has.js';\nimport _ol_render_replay_ from '../replay.js';\nimport _ol_render_webgl_ from '../webgl.js';\nimport _ol_render_webgl_TextureReplay_ from '../webgl/texturereplay.js';\nimport _ol_style_AtlasManager_ from '../../style/atlasmanager.js';\nimport _ol_webgl_Buffer_ from '../../webgl/buffer.js';\n\n/**\n * @constructor\n * @extends {ol.render.webgl.TextureReplay}\n * @param {number} tolerance Tolerance.\n * @param {ol.Extent} maxExtent Max extent.\n * @struct\n */\nvar _ol_render_webgl_TextReplay_ = function(tolerance, maxExtent) {\n  _ol_render_webgl_TextureReplay_.call(this, tolerance, maxExtent);\n\n  /**\n   * @private\n   * @type {Array.<HTMLCanvasElement>}\n   */\n  this.images_ = [];\n\n  /**\n   * @private\n   * @type {Array.<WebGLTexture>}\n   */\n  this.textures_ = [];\n\n  /**\n   * @private\n   * @type {HTMLCanvasElement}\n   */\n  this.measureCanvas_ = _ol_dom_.createCanvasContext2D(0, 0).canvas;\n\n  /**\n   * @private\n   * @type {{strokeColor: (ol.ColorLike|null),\n   *         lineCap: (string|undefined),\n   *         lineDash: Array.<number>,\n   *         lineDashOffset: (number|undefined),\n   *         lineJoin: (string|undefined),\n   *         lineWidth: number,\n   *         miterLimit: (number|undefined),\n   *         fillColor: (ol.ColorLike|null),\n   *         font: (string|undefined),\n   *         scale: (number|undefined)}}\n   */\n  this.state_ = {\n    strokeColor: null,\n    lineCap: undefined,\n    lineDash: null,\n    lineDashOffset: undefined,\n    lineJoin: undefined,\n    lineWidth: 0,\n    miterLimit: undefined,\n    fillColor: null,\n    font: undefined,\n    scale: undefined\n  };\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.text_ = '';\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.textAlign_ = undefined;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.textBaseline_ = undefined;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.offsetX_ = undefined;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.offsetY_ = undefined;\n\n  /**\n   * @private\n   * @type {Object.<string, ol.WebglGlyphAtlas>}\n   */\n  this.atlases_ = {};\n\n  /**\n   * @private\n   * @type {ol.WebglGlyphAtlas|undefined}\n   */\n  this.currAtlas_ = undefined;\n\n  this.scale = 1;\n\n  this.opacity = 1;\n\n};\n\n_ol_.inherits(_ol_render_webgl_TextReplay_, _ol_render_webgl_TextureReplay_);\n\n\n/**\n * @inheritDoc\n */\n_ol_render_webgl_TextReplay_.prototype.drawText = function(geometry, feature) {\n  if (this.text_) {\n    var flatCoordinates = null;\n    var offset = 0;\n    var end = 2;\n    var stride = 2;\n    switch (geometry.getType()) {\n      case _ol_geom_GeometryType_.POINT:\n      case _ol_geom_GeometryType_.MULTI_POINT:\n        flatCoordinates = geometry.getFlatCoordinates();\n        end = flatCoordinates.length;\n        stride = geometry.getStride();\n        break;\n      case _ol_geom_GeometryType_.CIRCLE:\n        flatCoordinates = /** @type {ol.geom.Circle} */ (geometry).getCenter();\n        break;\n      case _ol_geom_GeometryType_.LINE_STRING:\n        flatCoordinates = /** @type {ol.geom.LineString} */ (geometry).getFlatMidpoint();\n        break;\n      case _ol_geom_GeometryType_.MULTI_LINE_STRING:\n        flatCoordinates = /** @type {ol.geom.MultiLineString} */ (geometry).getFlatMidpoints();\n        end = flatCoordinates.length;\n        break;\n      case _ol_geom_GeometryType_.POLYGON:\n        flatCoordinates = /** @type {ol.geom.Polygon} */ (geometry).getFlatInteriorPoint();\n        break;\n      case _ol_geom_GeometryType_.MULTI_POLYGON:\n        flatCoordinates = /** @type {ol.geom.MultiPolygon} */ (geometry).getFlatInteriorPoints();\n        end = flatCoordinates.length;\n        break;\n      default:\n    }\n    this.startIndices.push(this.indices.length);\n    this.startIndicesFeature.push(feature);\n\n    var glyphAtlas = this.currAtlas_;\n    var lines = this.text_.split('\\n');\n    var textSize = this.getTextSize_(lines);\n    var i, ii, j, jj, currX, currY, charArr, charInfo;\n    var anchorX = Math.round(textSize[0] * this.textAlign_ - this.offsetX_);\n    var anchorY = Math.round(textSize[1] * this.textBaseline_ - this.offsetY_);\n    var lineWidth = (this.state_.lineWidth / 2) * this.state_.scale;\n\n    for (i = 0, ii = lines.length; i < ii; ++i) {\n      currX = 0;\n      currY = glyphAtlas.height * i;\n      charArr = lines[i].split('');\n\n      for (j = 0, jj = charArr.length; j < jj; ++j) {\n        charInfo = glyphAtlas.atlas.getInfo(charArr[j]);\n\n        if (charInfo) {\n          var image = charInfo.image;\n\n          this.anchorX = anchorX - currX;\n          this.anchorY = anchorY - currY;\n          this.originX = j === 0 ? charInfo.offsetX - lineWidth : charInfo.offsetX;\n          this.originY = charInfo.offsetY;\n          this.height = glyphAtlas.height;\n          this.width = j === 0 || j === charArr.length - 1 ?\n            glyphAtlas.width[charArr[j]] + lineWidth : glyphAtlas.width[charArr[j]];\n          this.imageHeight = image.height;\n          this.imageWidth = image.width;\n\n          var currentImage;\n          if (this.images_.length === 0) {\n            this.images_.push(image);\n          } else {\n            currentImage = this.images_[this.images_.length - 1];\n            if (_ol_.getUid(currentImage) != _ol_.getUid(image)) {\n              this.groupIndices.push(this.indices.length);\n              this.images_.push(image);\n            }\n          }\n\n          this.drawText_(flatCoordinates, offset, end, stride);\n        }\n        currX += this.width;\n      }\n    }\n  }\n};\n\n\n/**\n * @private\n * @param {Array.<string>} lines Label to draw split to lines.\n * @return {Array.<number>} Size of the label in pixels.\n */\n_ol_render_webgl_TextReplay_.prototype.getTextSize_ = function(lines) {\n  var self = this;\n  var glyphAtlas = this.currAtlas_;\n  var textHeight = lines.length * glyphAtlas.height;\n  //Split every line to an array of chars, sum up their width, and select the longest.\n  var textWidth = lines.map(function(str) {\n    var sum = 0;\n    var i, ii;\n    for (i = 0, ii = str.length; i < ii; ++i) {\n      var curr = str[i];\n      if (!glyphAtlas.width[curr]) {\n        self.addCharToAtlas_(curr);\n      }\n      sum += glyphAtlas.width[curr] ? glyphAtlas.width[curr] : 0;\n    }\n    return sum;\n  }).reduce(function(max, curr) {\n    return Math.max(max, curr);\n  });\n\n  return [textWidth, textHeight];\n};\n\n\n/**\n * @private\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n */\n_ol_render_webgl_TextReplay_.prototype.drawText_ = function(flatCoordinates, offset,\n    end, stride) {\n  var i, ii;\n  for (i = offset, ii = end; i < ii; i += stride) {\n    this.drawCoordinates(flatCoordinates, offset, end, stride);\n  }\n};\n\n\n/**\n * @private\n * @param {string} char Character.\n */\n_ol_render_webgl_TextReplay_.prototype.addCharToAtlas_ = function(char) {\n  if (char.length === 1) {\n    var glyphAtlas = this.currAtlas_;\n    var state = this.state_;\n    var mCtx = this.measureCanvas_.getContext('2d');\n    mCtx.font = state.font;\n    var width = Math.ceil(mCtx.measureText(char).width * state.scale);\n\n    var info = glyphAtlas.atlas.add(char, width, glyphAtlas.height,\n        function(ctx, x, y) {\n          //Parameterize the canvas\n          ctx.font = /** @type {string} */ (state.font);\n          ctx.fillStyle = state.fillColor;\n          ctx.strokeStyle = state.strokeColor;\n          ctx.lineWidth = state.lineWidth;\n          ctx.lineCap = /*** @type {string} */ (state.lineCap);\n          ctx.lineJoin = /** @type {string} */ (state.lineJoin);\n          ctx.miterLimit = /** @type {number} */ (state.miterLimit);\n          ctx.textAlign = 'left';\n          ctx.textBaseline = 'top';\n          if (_ol_has_.CANVAS_LINE_DASH && state.lineDash) {\n            //FIXME: use pixelRatio\n            ctx.setLineDash(state.lineDash);\n            ctx.lineDashOffset = /** @type {number} */ (state.lineDashOffset);\n          }\n          if (state.scale !== 1) {\n            //FIXME: use pixelRatio\n            ctx.setTransform(/** @type {number} */ (state.scale), 0, 0,\n                /** @type {number} */ (state.scale), 0, 0);\n          }\n\n          //Draw the character on the canvas\n          if (state.strokeColor) {\n            ctx.strokeText(char, x, y);\n          }\n          if (state.fillColor) {\n            ctx.fillText(char, x, y);\n          }\n        });\n\n    if (info) {\n      glyphAtlas.width[char] = width;\n    }\n  }\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_render_webgl_TextReplay_.prototype.finish = function(context) {\n  var gl = context.getGL();\n\n  this.groupIndices.push(this.indices.length);\n  this.hitDetectionGroupIndices = this.groupIndices;\n\n  // create, bind, and populate the vertices buffer\n  this.verticesBuffer = new _ol_webgl_Buffer_(this.vertices);\n\n  // create, bind, and populate the indices buffer\n  this.indicesBuffer = new _ol_webgl_Buffer_(this.indices);\n\n  // create textures\n  /** @type {Object.<string, WebGLTexture>} */\n  var texturePerImage = {};\n\n  this.createTextures(this.textures_, this.images_, texturePerImage, gl);\n\n  this.state_ = {\n    strokeColor: null,\n    lineCap: undefined,\n    lineDash: null,\n    lineDashOffset: undefined,\n    lineJoin: undefined,\n    lineWidth: 0,\n    miterLimit: undefined,\n    fillColor: null,\n    font: undefined,\n    scale: undefined\n  };\n  this.text_ = '';\n  this.textAlign_ = undefined;\n  this.textBaseline_ = undefined;\n  this.offsetX_ = undefined;\n  this.offsetY_ = undefined;\n  this.images_ = null;\n  this.atlases_ = {};\n  this.currAtlas_ = undefined;\n  _ol_render_webgl_TextureReplay_.prototype.finish.call(this, context);\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_render_webgl_TextReplay_.prototype.setTextStyle = function(textStyle) {\n  var state = this.state_;\n  var textFillStyle = textStyle.getFill();\n  var textStrokeStyle = textStyle.getStroke();\n  if (!textStyle || !textStyle.getText() || (!textFillStyle && !textStrokeStyle)) {\n    this.text_ = '';\n  } else {\n    if (!textFillStyle) {\n      state.fillColor = null;\n    } else {\n      var textFillStyleColor = textFillStyle.getColor();\n      state.fillColor = _ol_colorlike_.asColorLike(textFillStyleColor ?\n        textFillStyleColor : _ol_render_webgl_.defaultFillStyle);\n    }\n    if (!textStrokeStyle) {\n      state.strokeColor = null;\n      state.lineWidth = 0;\n    } else {\n      var textStrokeStyleColor = textStrokeStyle.getColor();\n      state.strokeColor = _ol_colorlike_.asColorLike(textStrokeStyleColor ?\n        textStrokeStyleColor : _ol_render_webgl_.defaultStrokeStyle);\n      state.lineWidth = textStrokeStyle.getWidth() || _ol_render_webgl_.defaultLineWidth;\n      state.lineCap = textStrokeStyle.getLineCap() || _ol_render_webgl_.defaultLineCap;\n      state.lineDashOffset = textStrokeStyle.getLineDashOffset() || _ol_render_webgl_.defaultLineDashOffset;\n      state.lineJoin = textStrokeStyle.getLineJoin() || _ol_render_webgl_.defaultLineJoin;\n      state.miterLimit = textStrokeStyle.getMiterLimit() || _ol_render_webgl_.defaultMiterLimit;\n      var lineDash = textStrokeStyle.getLineDash();\n      state.lineDash = lineDash ? lineDash.slice() : _ol_render_webgl_.defaultLineDash;\n    }\n    state.font = textStyle.getFont() || _ol_render_webgl_.defaultFont;\n    state.scale = textStyle.getScale() || 1;\n    this.text_ = /** @type {string} */ (textStyle.getText());\n    var textAlign = _ol_render_replay_.TEXT_ALIGN[textStyle.getTextAlign()];\n    var textBaseline = _ol_render_replay_.TEXT_ALIGN[textStyle.getTextBaseline()];\n    this.textAlign_ = textAlign === undefined ?\n      _ol_render_webgl_.defaultTextAlign : textAlign;\n    this.textBaseline_ = textBaseline === undefined ?\n      _ol_render_webgl_.defaultTextBaseline : textBaseline;\n    this.offsetX_ = textStyle.getOffsetX() || 0;\n    this.offsetY_ = textStyle.getOffsetY() || 0;\n    this.rotateWithView = !!textStyle.getRotateWithView();\n    this.rotation = textStyle.getRotation() || 0;\n\n    this.currAtlas_ = this.getAtlas_(state);\n  }\n};\n\n\n/**\n * @private\n * @param {Object} state Font attributes.\n * @return {ol.WebglGlyphAtlas} Glyph atlas.\n */\n_ol_render_webgl_TextReplay_.prototype.getAtlas_ = function(state) {\n  var params = [];\n  var i;\n  for (i in state) {\n    if (state[i] || state[i] === 0) {\n      if (Array.isArray(state[i])) {\n        params = params.concat(state[i]);\n      } else {\n        params.push(state[i]);\n      }\n    }\n  }\n  var hash = this.calculateHash_(params);\n  if (!this.atlases_[hash]) {\n    var mCtx = this.measureCanvas_.getContext('2d');\n    mCtx.font = state.font;\n    var height = Math.ceil((mCtx.measureText('M').width * 1.5 +\n        state.lineWidth / 2) * state.scale);\n\n    this.atlases_[hash] = {\n      atlas: new _ol_style_AtlasManager_({\n        space: state.lineWidth + 1\n      }),\n      width: {},\n      height: height\n    };\n  }\n  return this.atlases_[hash];\n};\n\n\n/**\n * @private\n * @param {Array.<string|number>} params Array of parameters.\n * @return {string} Hash string.\n */\n_ol_render_webgl_TextReplay_.prototype.calculateHash_ = function(params) {\n  //TODO: Create a more performant, reliable, general hash function.\n  var i, ii;\n  var hash = '';\n  for (i = 0, ii = params.length; i < ii; ++i) {\n    hash += params[i];\n  }\n  return hash;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_render_webgl_TextReplay_.prototype.getTextures = function(opt_all) {\n  return this.textures_;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_render_webgl_TextReplay_.prototype.getHitDetectionTextures = function() {\n  return this.textures_;\n};\nexport default _ol_render_webgl_TextReplay_;\n"]},"metadata":{},"sourceType":"module"}