{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_ViewHint_ from '../viewhint.js';\nimport _ol_coordinate_ from '../coordinate.js';\nimport _ol_easing_ from '../easing.js';\nimport _ol_events_condition_ from '../events/condition.js';\nimport _ol_functions_ from '../functions.js';\nimport _ol_interaction_Pointer_ from '../interaction/pointer.js';\n/**\n * @classdesc\n * Allows the user to pan the map by dragging the map.\n *\n * @constructor\n * @extends {ol.interaction.Pointer}\n * @param {olx.interaction.DragPanOptions=} opt_options Options.\n * @api\n */\n\nvar _ol_interaction_DragPan_ = function (opt_options) {\n  _ol_interaction_Pointer_.call(this, {\n    handleDownEvent: _ol_interaction_DragPan_.handleDownEvent_,\n    handleDragEvent: _ol_interaction_DragPan_.handleDragEvent_,\n    handleUpEvent: _ol_interaction_DragPan_.handleUpEvent_\n  });\n\n  var options = opt_options ? opt_options : {};\n  /**\n   * @private\n   * @type {ol.Kinetic|undefined}\n   */\n\n  this.kinetic_ = options.kinetic;\n  /**\n   * @type {ol.Pixel}\n   */\n\n  this.lastCentroid = null;\n  /**\n   * @type {number}\n   */\n\n  this.lastPointersCount_;\n  /**\n   * @private\n   * @type {ol.EventsConditionType}\n   */\n\n  this.condition_ = options.condition ? options.condition : _ol_events_condition_.noModifierKeys;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.noKinetic_ = false;\n};\n\n_ol_.inherits(_ol_interaction_DragPan_, _ol_interaction_Pointer_);\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {ol.interaction.DragPan}\n * @private\n */\n\n\n_ol_interaction_DragPan_.handleDragEvent_ = function (mapBrowserEvent) {\n  var targetPointers = this.targetPointers;\n\n  var centroid = _ol_interaction_Pointer_.centroid(targetPointers);\n\n  if (targetPointers.length == this.lastPointersCount_) {\n    if (this.kinetic_) {\n      this.kinetic_.update(centroid[0], centroid[1]);\n    }\n\n    if (this.lastCentroid) {\n      var deltaX = this.lastCentroid[0] - centroid[0];\n      var deltaY = centroid[1] - this.lastCentroid[1];\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      var viewState = view.getState();\n      var center = [deltaX, deltaY];\n\n      _ol_coordinate_.scale(center, viewState.resolution);\n\n      _ol_coordinate_.rotate(center, viewState.rotation);\n\n      _ol_coordinate_.add(center, viewState.center);\n\n      center = view.constrainCenter(center);\n      view.setCenter(center);\n    }\n  } else if (this.kinetic_) {\n    // reset so we don't overestimate the kinetic energy after\n    // after one finger down, tiny drag, second finger down\n    this.kinetic_.begin();\n  }\n\n  this.lastCentroid = centroid;\n  this.lastPointersCount_ = targetPointers.length;\n};\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Stop drag sequence?\n * @this {ol.interaction.DragPan}\n * @private\n */\n\n\n_ol_interaction_DragPan_.handleUpEvent_ = function (mapBrowserEvent) {\n  var map = mapBrowserEvent.map;\n  var view = map.getView();\n\n  if (this.targetPointers.length === 0) {\n    if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n      var distance = this.kinetic_.getDistance();\n      var angle = this.kinetic_.getAngle();\n      var center =\n      /** @type {!ol.Coordinate} */\n      view.getCenter();\n      var centerpx = map.getPixelFromCoordinate(center);\n      var dest = map.getCoordinateFromPixel([centerpx[0] - distance * Math.cos(angle), centerpx[1] - distance * Math.sin(angle)]);\n      view.animate({\n        center: view.constrainCenter(dest),\n        duration: 500,\n        easing: _ol_easing_.easeOut\n      });\n    }\n\n    view.setHint(_ol_ViewHint_.INTERACTING, -1);\n    return false;\n  } else {\n    if (this.kinetic_) {\n      // reset so we don't overestimate the kinetic energy after\n      // after one finger up, tiny drag, second finger up\n      this.kinetic_.begin();\n    }\n\n    this.lastCentroid = null;\n    return true;\n  }\n};\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Start drag sequence?\n * @this {ol.interaction.DragPan}\n * @private\n */\n\n\n_ol_interaction_DragPan_.handleDownEvent_ = function (mapBrowserEvent) {\n  if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    this.lastCentroid = null;\n\n    if (!this.handlingDownUpSequence) {\n      view.setHint(_ol_ViewHint_.INTERACTING, 1);\n    } // stop any current animation\n\n\n    if (view.getAnimating()) {\n      view.setCenter(mapBrowserEvent.frameState.viewState.center);\n    }\n\n    if (this.kinetic_) {\n      this.kinetic_.begin();\n    } // No kinetic as soon as more than one pointer on the screen is\n    // detected. This is to prevent nasty pans after pinch.\n\n\n    this.noKinetic_ = this.targetPointers.length > 1;\n    return true;\n  } else {\n    return false;\n  }\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_interaction_DragPan_.prototype.shouldStopEvent = _ol_functions_.FALSE;\nexport default _ol_interaction_DragPan_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/interaction/dragpan.js"],"names":["_ol_","_ol_ViewHint_","_ol_coordinate_","_ol_easing_","_ol_events_condition_","_ol_functions_","_ol_interaction_Pointer_","_ol_interaction_DragPan_","opt_options","call","handleDownEvent","handleDownEvent_","handleDragEvent","handleDragEvent_","handleUpEvent","handleUpEvent_","options","kinetic_","kinetic","lastCentroid","lastPointersCount_","condition_","condition","noModifierKeys","noKinetic_","inherits","mapBrowserEvent","targetPointers","centroid","length","update","deltaX","deltaY","map","view","getView","viewState","getState","center","scale","resolution","rotate","rotation","add","constrainCenter","setCenter","begin","end","distance","getDistance","angle","getAngle","getCenter","centerpx","getPixelFromCoordinate","dest","getCoordinateFromPixel","Math","cos","sin","animate","duration","easing","easeOut","setHint","INTERACTING","handlingDownUpSequence","getAnimating","frameState","prototype","shouldStopEvent","FALSE"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,eAAP,MAA4B,kBAA5B;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,qBAAP,MAAkC,wBAAlC;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,wBAAP,MAAqC,2BAArC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,wBAAwB,GAAG,UAASC,WAAT,EAAsB;AAEnDF,EAAAA,wBAAwB,CAACG,IAAzB,CAA8B,IAA9B,EAAoC;AAClCC,IAAAA,eAAe,EAAEH,wBAAwB,CAACI,gBADR;AAElCC,IAAAA,eAAe,EAAEL,wBAAwB,CAACM,gBAFR;AAGlCC,IAAAA,aAAa,EAAEP,wBAAwB,CAACQ;AAHN,GAApC;;AAMA,MAAIC,OAAO,GAAGR,WAAW,GAAGA,WAAH,GAAiB,EAA1C;AAEA;AACF;AACA;AACA;;AACE,OAAKS,QAAL,GAAgBD,OAAO,CAACE,OAAxB;AAEA;AACF;AACA;;AACE,OAAKC,YAAL,GAAoB,IAApB;AAEA;AACF;AACA;;AACE,OAAKC,kBAAL;AAEA;AACF;AACA;AACA;;AACE,OAAKC,UAAL,GAAkBL,OAAO,CAACM,SAAR,GAChBN,OAAO,CAACM,SADQ,GACIlB,qBAAqB,CAACmB,cAD5C;AAGA;AACF;AACA;AACA;;AACE,OAAKC,UAAL,GAAkB,KAAlB;AAED,CAvCD;;AAyCAxB,IAAI,CAACyB,QAAL,CAAclB,wBAAd,EAAwCD,wBAAxC;AAGA;AACA;AACA;AACA;AACA;;;AACAC,wBAAwB,CAACM,gBAAzB,GAA4C,UAASa,eAAT,EAA0B;AACpE,MAAIC,cAAc,GAAG,KAAKA,cAA1B;;AACA,MAAIC,QAAQ,GACRtB,wBAAwB,CAACsB,QAAzB,CAAkCD,cAAlC,CADJ;;AAEA,MAAIA,cAAc,CAACE,MAAf,IAAyB,KAAKT,kBAAlC,EAAsD;AACpD,QAAI,KAAKH,QAAT,EAAmB;AACjB,WAAKA,QAAL,CAAca,MAAd,CAAqBF,QAAQ,CAAC,CAAD,CAA7B,EAAkCA,QAAQ,CAAC,CAAD,CAA1C;AACD;;AACD,QAAI,KAAKT,YAAT,EAAuB;AACrB,UAAIY,MAAM,GAAG,KAAKZ,YAAL,CAAkB,CAAlB,IAAuBS,QAAQ,CAAC,CAAD,CAA5C;AACA,UAAII,MAAM,GAAGJ,QAAQ,CAAC,CAAD,CAAR,GAAc,KAAKT,YAAL,CAAkB,CAAlB,CAA3B;AACA,UAAIc,GAAG,GAAGP,eAAe,CAACO,GAA1B;AACA,UAAIC,IAAI,GAAGD,GAAG,CAACE,OAAJ,EAAX;AACA,UAAIC,SAAS,GAAGF,IAAI,CAACG,QAAL,EAAhB;AACA,UAAIC,MAAM,GAAG,CAACP,MAAD,EAASC,MAAT,CAAb;;AACA9B,MAAAA,eAAe,CAACqC,KAAhB,CAAsBD,MAAtB,EAA8BF,SAAS,CAACI,UAAxC;;AACAtC,MAAAA,eAAe,CAACuC,MAAhB,CAAuBH,MAAvB,EAA+BF,SAAS,CAACM,QAAzC;;AACAxC,MAAAA,eAAe,CAACyC,GAAhB,CAAoBL,MAApB,EAA4BF,SAAS,CAACE,MAAtC;;AACAA,MAAAA,MAAM,GAAGJ,IAAI,CAACU,eAAL,CAAqBN,MAArB,CAAT;AACAJ,MAAAA,IAAI,CAACW,SAAL,CAAeP,MAAf;AACD;AACF,GAjBD,MAiBO,IAAI,KAAKrB,QAAT,EAAmB;AACxB;AACA;AACA,SAAKA,QAAL,CAAc6B,KAAd;AACD;;AACD,OAAK3B,YAAL,GAAoBS,QAApB;AACA,OAAKR,kBAAL,GAA0BO,cAAc,CAACE,MAAzC;AACD,CA5BD;AA+BA;AACA;AACA;AACA;AACA;AACA;;;AACAtB,wBAAwB,CAACQ,cAAzB,GAA0C,UAASW,eAAT,EAA0B;AAClE,MAAIO,GAAG,GAAGP,eAAe,CAACO,GAA1B;AACA,MAAIC,IAAI,GAAGD,GAAG,CAACE,OAAJ,EAAX;;AACA,MAAI,KAAKR,cAAL,CAAoBE,MAApB,KAA+B,CAAnC,EAAsC;AACpC,QAAI,CAAC,KAAKL,UAAN,IAAoB,KAAKP,QAAzB,IAAqC,KAAKA,QAAL,CAAc8B,GAAd,EAAzC,EAA8D;AAC5D,UAAIC,QAAQ,GAAG,KAAK/B,QAAL,CAAcgC,WAAd,EAAf;AACA,UAAIC,KAAK,GAAG,KAAKjC,QAAL,CAAckC,QAAd,EAAZ;AACA,UAAIb,MAAM;AAAG;AAA+BJ,MAAAA,IAAI,CAACkB,SAAL,EAA5C;AACA,UAAIC,QAAQ,GAAGpB,GAAG,CAACqB,sBAAJ,CAA2BhB,MAA3B,CAAf;AACA,UAAIiB,IAAI,GAAGtB,GAAG,CAACuB,sBAAJ,CAA2B,CACpCH,QAAQ,CAAC,CAAD,CAAR,GAAcL,QAAQ,GAAGS,IAAI,CAACC,GAAL,CAASR,KAAT,CADW,EAEpCG,QAAQ,CAAC,CAAD,CAAR,GAAcL,QAAQ,GAAGS,IAAI,CAACE,GAAL,CAAST,KAAT,CAFW,CAA3B,CAAX;AAIAhB,MAAAA,IAAI,CAAC0B,OAAL,CAAa;AACXtB,QAAAA,MAAM,EAAEJ,IAAI,CAACU,eAAL,CAAqBW,IAArB,CADG;AAEXM,QAAAA,QAAQ,EAAE,GAFC;AAGXC,QAAAA,MAAM,EAAE3D,WAAW,CAAC4D;AAHT,OAAb;AAKD;;AACD7B,IAAAA,IAAI,CAAC8B,OAAL,CAAa/D,aAAa,CAACgE,WAA3B,EAAwC,CAAC,CAAzC;AACA,WAAO,KAAP;AACD,GAlBD,MAkBO;AACL,QAAI,KAAKhD,QAAT,EAAmB;AACjB;AACA;AACA,WAAKA,QAAL,CAAc6B,KAAd;AACD;;AACD,SAAK3B,YAAL,GAAoB,IAApB;AACA,WAAO,IAAP;AACD;AACF,CA9BD;AAiCA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,wBAAwB,CAACI,gBAAzB,GAA4C,UAASe,eAAT,EAA0B;AACpE,MAAI,KAAKC,cAAL,CAAoBE,MAApB,GAA6B,CAA7B,IAAkC,KAAKR,UAAL,CAAgBK,eAAhB,CAAtC,EAAwE;AACtE,QAAIO,GAAG,GAAGP,eAAe,CAACO,GAA1B;AACA,QAAIC,IAAI,GAAGD,GAAG,CAACE,OAAJ,EAAX;AACA,SAAKhB,YAAL,GAAoB,IAApB;;AACA,QAAI,CAAC,KAAK+C,sBAAV,EAAkC;AAChChC,MAAAA,IAAI,CAAC8B,OAAL,CAAa/D,aAAa,CAACgE,WAA3B,EAAwC,CAAxC;AACD,KANqE,CAOtE;;;AACA,QAAI/B,IAAI,CAACiC,YAAL,EAAJ,EAAyB;AACvBjC,MAAAA,IAAI,CAACW,SAAL,CAAenB,eAAe,CAAC0C,UAAhB,CAA2BhC,SAA3B,CAAqCE,MAApD;AACD;;AACD,QAAI,KAAKrB,QAAT,EAAmB;AACjB,WAAKA,QAAL,CAAc6B,KAAd;AACD,KAbqE,CActE;AACA;;;AACA,SAAKtB,UAAL,GAAkB,KAAKG,cAAL,CAAoBE,MAApB,GAA6B,CAA/C;AACA,WAAO,IAAP;AACD,GAlBD,MAkBO;AACL,WAAO,KAAP;AACD;AACF,CAtBD;AAyBA;AACA;AACA;;;AACAtB,wBAAwB,CAAC8D,SAAzB,CAAmCC,eAAnC,GAAqDjE,cAAc,CAACkE,KAApE;AACA,eAAehE,wBAAf","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_ViewHint_ from '../viewhint.js';\nimport _ol_coordinate_ from '../coordinate.js';\nimport _ol_easing_ from '../easing.js';\nimport _ol_events_condition_ from '../events/condition.js';\nimport _ol_functions_ from '../functions.js';\nimport _ol_interaction_Pointer_ from '../interaction/pointer.js';\n\n/**\n * @classdesc\n * Allows the user to pan the map by dragging the map.\n *\n * @constructor\n * @extends {ol.interaction.Pointer}\n * @param {olx.interaction.DragPanOptions=} opt_options Options.\n * @api\n */\nvar _ol_interaction_DragPan_ = function(opt_options) {\n\n  _ol_interaction_Pointer_.call(this, {\n    handleDownEvent: _ol_interaction_DragPan_.handleDownEvent_,\n    handleDragEvent: _ol_interaction_DragPan_.handleDragEvent_,\n    handleUpEvent: _ol_interaction_DragPan_.handleUpEvent_\n  });\n\n  var options = opt_options ? opt_options : {};\n\n  /**\n   * @private\n   * @type {ol.Kinetic|undefined}\n   */\n  this.kinetic_ = options.kinetic;\n\n  /**\n   * @type {ol.Pixel}\n   */\n  this.lastCentroid = null;\n\n  /**\n   * @type {number}\n   */\n  this.lastPointersCount_;\n\n  /**\n   * @private\n   * @type {ol.EventsConditionType}\n   */\n  this.condition_ = options.condition ?\n    options.condition : _ol_events_condition_.noModifierKeys;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.noKinetic_ = false;\n\n};\n\n_ol_.inherits(_ol_interaction_DragPan_, _ol_interaction_Pointer_);\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {ol.interaction.DragPan}\n * @private\n */\n_ol_interaction_DragPan_.handleDragEvent_ = function(mapBrowserEvent) {\n  var targetPointers = this.targetPointers;\n  var centroid =\n      _ol_interaction_Pointer_.centroid(targetPointers);\n  if (targetPointers.length == this.lastPointersCount_) {\n    if (this.kinetic_) {\n      this.kinetic_.update(centroid[0], centroid[1]);\n    }\n    if (this.lastCentroid) {\n      var deltaX = this.lastCentroid[0] - centroid[0];\n      var deltaY = centroid[1] - this.lastCentroid[1];\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      var viewState = view.getState();\n      var center = [deltaX, deltaY];\n      _ol_coordinate_.scale(center, viewState.resolution);\n      _ol_coordinate_.rotate(center, viewState.rotation);\n      _ol_coordinate_.add(center, viewState.center);\n      center = view.constrainCenter(center);\n      view.setCenter(center);\n    }\n  } else if (this.kinetic_) {\n    // reset so we don't overestimate the kinetic energy after\n    // after one finger down, tiny drag, second finger down\n    this.kinetic_.begin();\n  }\n  this.lastCentroid = centroid;\n  this.lastPointersCount_ = targetPointers.length;\n};\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Stop drag sequence?\n * @this {ol.interaction.DragPan}\n * @private\n */\n_ol_interaction_DragPan_.handleUpEvent_ = function(mapBrowserEvent) {\n  var map = mapBrowserEvent.map;\n  var view = map.getView();\n  if (this.targetPointers.length === 0) {\n    if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n      var distance = this.kinetic_.getDistance();\n      var angle = this.kinetic_.getAngle();\n      var center = /** @type {!ol.Coordinate} */ (view.getCenter());\n      var centerpx = map.getPixelFromCoordinate(center);\n      var dest = map.getCoordinateFromPixel([\n        centerpx[0] - distance * Math.cos(angle),\n        centerpx[1] - distance * Math.sin(angle)\n      ]);\n      view.animate({\n        center: view.constrainCenter(dest),\n        duration: 500,\n        easing: _ol_easing_.easeOut\n      });\n    }\n    view.setHint(_ol_ViewHint_.INTERACTING, -1);\n    return false;\n  } else {\n    if (this.kinetic_) {\n      // reset so we don't overestimate the kinetic energy after\n      // after one finger up, tiny drag, second finger up\n      this.kinetic_.begin();\n    }\n    this.lastCentroid = null;\n    return true;\n  }\n};\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Start drag sequence?\n * @this {ol.interaction.DragPan}\n * @private\n */\n_ol_interaction_DragPan_.handleDownEvent_ = function(mapBrowserEvent) {\n  if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    this.lastCentroid = null;\n    if (!this.handlingDownUpSequence) {\n      view.setHint(_ol_ViewHint_.INTERACTING, 1);\n    }\n    // stop any current animation\n    if (view.getAnimating()) {\n      view.setCenter(mapBrowserEvent.frameState.viewState.center);\n    }\n    if (this.kinetic_) {\n      this.kinetic_.begin();\n    }\n    // No kinetic as soon as more than one pointer on the screen is\n    // detected. This is to prevent nasty pans after pinch.\n    this.noKinetic_ = this.targetPointers.length > 1;\n    return true;\n  } else {\n    return false;\n  }\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_interaction_DragPan_.prototype.shouldStopEvent = _ol_functions_.FALSE;\nexport default _ol_interaction_DragPan_;\n"]},"metadata":{},"sourceType":"module"}