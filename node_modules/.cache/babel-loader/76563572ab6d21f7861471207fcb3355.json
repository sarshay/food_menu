{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_TileCache_ from '../tilecache.js';\nimport _ol_TileState_ from '../tilestate.js';\nimport _ol_events_Event_ from '../events/event.js';\nimport _ol_proj_ from '../proj.js';\nimport _ol_size_ from '../size.js';\nimport _ol_source_Source_ from '../source/source.js';\nimport _ol_tilecoord_ from '../tilecoord.js';\nimport _ol_tilegrid_ from '../tilegrid.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n *\n * @constructor\n * @abstract\n * @extends {ol.source.Source}\n * @param {ol.SourceTileOptions} options Tile source options.\n * @api\n */\n\nvar _ol_source_Tile_ = function (options) {\n  _ol_source_Source_.call(this, {\n    attributions: options.attributions,\n    extent: options.extent,\n    logo: options.logo,\n    projection: options.projection,\n    state: options.state,\n    wrapX: options.wrapX\n  });\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n\n  this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.tilePixelRatio_ = options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n  /**\n   * @protected\n   * @type {ol.tilegrid.TileGrid}\n   */\n\n  this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n  /**\n   * @protected\n   * @type {ol.TileCache}\n   */\n\n  this.tileCache = new _ol_TileCache_(options.cacheSize);\n  /**\n   * @protected\n   * @type {ol.Size}\n   */\n\n  this.tmpSize = [0, 0];\n  /**\n   * @private\n   * @type {string}\n   */\n\n  this.key_ = '';\n  /**\n   * @protected\n   * @type {olx.TileOptions}\n   */\n\n  this.tileOptions = {\n    transition: options.transition\n  };\n};\n\n_ol_.inherits(_ol_source_Tile_, _ol_source_Source_);\n/**\n * @return {boolean} Can expire cache.\n */\n\n\n_ol_source_Tile_.prototype.canExpireCache = function () {\n  return this.tileCache.canExpireCache();\n};\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @param {Object.<string, ol.TileRange>} usedTiles Used tiles.\n */\n\n\n_ol_source_Tile_.prototype.expireCache = function (projection, usedTiles) {\n  var tileCache = this.getTileCacheForProjection(projection);\n\n  if (tileCache) {\n    tileCache.expireCache(usedTiles);\n  }\n};\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @param {number} z Zoom level.\n * @param {ol.TileRange} tileRange Tile range.\n * @param {function(ol.Tile):(boolean|undefined)} callback Called with each\n *     loaded tile.  If the callback returns `false`, the tile will not be\n *     considered loaded.\n * @return {boolean} The tile range is fully covered with loaded tiles.\n */\n\n\n_ol_source_Tile_.prototype.forEachLoadedTile = function (projection, z, tileRange, callback) {\n  var tileCache = this.getTileCacheForProjection(projection);\n\n  if (!tileCache) {\n    return false;\n  }\n\n  var covered = true;\n  var tile, tileCoordKey, loaded;\n\n  for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n    for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n      tileCoordKey = _ol_tilecoord_.getKeyZXY(z, x, y);\n      loaded = false;\n\n      if (tileCache.containsKey(tileCoordKey)) {\n        tile =\n        /** @type {!ol.Tile} */\n        tileCache.get(tileCoordKey);\n        loaded = tile.getState() === _ol_TileState_.LOADED;\n\n        if (loaded) {\n          loaded = callback(tile) !== false;\n        }\n      }\n\n      if (!loaded) {\n        covered = false;\n      }\n    }\n  }\n\n  return covered;\n};\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @return {number} Gutter.\n */\n\n\n_ol_source_Tile_.prototype.getGutter = function (projection) {\n  return 0;\n};\n/**\n * Return the key to be used for all tiles in the source.\n * @return {string} The key for all tiles.\n * @protected\n */\n\n\n_ol_source_Tile_.prototype.getKey = function () {\n  return this.key_;\n};\n/**\n * Set the value to be used as the key for all tiles in the source.\n * @param {string} key The key for tiles.\n * @protected\n */\n\n\n_ol_source_Tile_.prototype.setKey = function (key) {\n  if (this.key_ !== key) {\n    this.key_ = key;\n    this.changed();\n  }\n};\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @return {boolean} Opaque.\n */\n\n\n_ol_source_Tile_.prototype.getOpaque = function (projection) {\n  return this.opaque_;\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_source_Tile_.prototype.getResolutions = function () {\n  return this.tileGrid.getResolutions();\n};\n/**\n * @abstract\n * @param {number} z Tile coordinate z.\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @param {number} pixelRatio Pixel ratio.\n * @param {ol.proj.Projection} projection Projection.\n * @return {!ol.Tile} Tile.\n */\n\n\n_ol_source_Tile_.prototype.getTile = function (z, x, y, pixelRatio, projection) {};\n/**\n * Return the tile grid of the tile source.\n * @return {ol.tilegrid.TileGrid} Tile grid.\n * @api\n */\n\n\n_ol_source_Tile_.prototype.getTileGrid = function () {\n  return this.tileGrid;\n};\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @return {!ol.tilegrid.TileGrid} Tile grid.\n */\n\n\n_ol_source_Tile_.prototype.getTileGridForProjection = function (projection) {\n  if (!this.tileGrid) {\n    return _ol_tilegrid_.getForProjection(projection);\n  } else {\n    return this.tileGrid;\n  }\n};\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @return {ol.TileCache} Tile cache.\n * @protected\n */\n\n\n_ol_source_Tile_.prototype.getTileCacheForProjection = function (projection) {\n  var thisProj = this.getProjection();\n\n  if (thisProj && !_ol_proj_.equivalent(thisProj, projection)) {\n    return null;\n  } else {\n    return this.tileCache;\n  }\n};\n/**\n * Get the tile pixel ratio for this source. Subclasses may override this\n * method, which is meant to return a supported pixel ratio that matches the\n * provided `pixelRatio` as close as possible.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Tile pixel ratio.\n */\n\n\n_ol_source_Tile_.prototype.getTilePixelRatio = function (pixelRatio) {\n  return this.tilePixelRatio_;\n};\n/**\n * @param {number} z Z.\n * @param {number} pixelRatio Pixel ratio.\n * @param {ol.proj.Projection} projection Projection.\n * @return {ol.Size} Tile size.\n */\n\n\n_ol_source_Tile_.prototype.getTilePixelSize = function (z, pixelRatio, projection) {\n  var tileGrid = this.getTileGridForProjection(projection);\n  var tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n\n  var tileSize = _ol_size_.toSize(tileGrid.getTileSize(z), this.tmpSize);\n\n  if (tilePixelRatio == 1) {\n    return tileSize;\n  } else {\n    return _ol_size_.scale(tileSize, tilePixelRatio, this.tmpSize);\n  }\n};\n/**\n * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n * is outside the resolution and extent range of the tile grid, `null` will be\n * returned.\n * @param {ol.TileCoord} tileCoord Tile coordinate.\n * @param {ol.proj.Projection=} opt_projection Projection.\n * @return {ol.TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n *     null if no tile URL should be created for the passed `tileCoord`.\n */\n\n\n_ol_source_Tile_.prototype.getTileCoordForTileUrlFunction = function (tileCoord, opt_projection) {\n  var projection = opt_projection !== undefined ? opt_projection : this.getProjection();\n  var tileGrid = this.getTileGridForProjection(projection);\n\n  if (this.getWrapX() && projection.isGlobal()) {\n    tileCoord = _ol_tilegrid_.wrapX(tileGrid, tileCoord, projection);\n  }\n\n  return _ol_tilecoord_.withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_source_Tile_.prototype.refresh = function () {\n  this.tileCache.clear();\n  this.changed();\n};\n/**\n * Marks a tile coord as being used, without triggering a load.\n * @param {number} z Tile coordinate z.\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @param {ol.proj.Projection} projection Projection.\n */\n\n\n_ol_source_Tile_.prototype.useTile = _ol_.nullFunction;\n/**\n * @classdesc\n * Events emitted by {@link ol.source.Tile} instances are instances of this\n * type.\n *\n * @constructor\n * @extends {ol.events.Event}\n * @implements {oli.source.Tile.Event}\n * @param {string} type Type.\n * @param {ol.Tile} tile The tile.\n */\n\n_ol_source_Tile_.Event = function (type, tile) {\n  _ol_events_Event_.call(this, type);\n  /**\n   * The tile related to the event.\n   * @type {ol.Tile}\n   * @api\n   */\n\n\n  this.tile = tile;\n};\n\n_ol_.inherits(_ol_source_Tile_.Event, _ol_events_Event_);\n\nexport default _ol_source_Tile_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/source/tile.js"],"names":["_ol_","_ol_TileCache_","_ol_TileState_","_ol_events_Event_","_ol_proj_","_ol_size_","_ol_source_Source_","_ol_tilecoord_","_ol_tilegrid_","_ol_source_Tile_","options","call","attributions","extent","logo","projection","state","wrapX","opaque_","opaque","undefined","tilePixelRatio_","tilePixelRatio","tileGrid","tileCache","cacheSize","tmpSize","key_","tileOptions","transition","inherits","prototype","canExpireCache","expireCache","usedTiles","getTileCacheForProjection","forEachLoadedTile","z","tileRange","callback","covered","tile","tileCoordKey","loaded","x","minX","maxX","y","minY","maxY","getKeyZXY","containsKey","get","getState","LOADED","getGutter","getKey","setKey","key","changed","getOpaque","getResolutions","getTile","pixelRatio","getTileGrid","getTileGridForProjection","getForProjection","thisProj","getProjection","equivalent","getTilePixelRatio","getTilePixelSize","tileSize","toSize","getTileSize","scale","getTileCoordForTileUrlFunction","tileCoord","opt_projection","getWrapX","isGlobal","withinExtentAndZ","refresh","clear","useTile","nullFunction","Event","type"],"mappings":"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","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_TileCache_ from '../tilecache.js';\nimport _ol_TileState_ from '../tilestate.js';\nimport _ol_events_Event_ from '../events/event.js';\nimport _ol_proj_ from '../proj.js';\nimport _ol_size_ from '../size.js';\nimport _ol_source_Source_ from '../source/source.js';\nimport _ol_tilecoord_ from '../tilecoord.js';\nimport _ol_tilegrid_ from '../tilegrid.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n *\n * @constructor\n * @abstract\n * @extends {ol.source.Source}\n * @param {ol.SourceTileOptions} options Tile source options.\n * @api\n */\nvar _ol_source_Tile_ = function(options) {\n\n  _ol_source_Source_.call(this, {\n    attributions: options.attributions,\n    extent: options.extent,\n    logo: options.logo,\n    projection: options.projection,\n    state: options.state,\n    wrapX: options.wrapX\n  });\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.tilePixelRatio_ = options.tilePixelRatio !== undefined ?\n    options.tilePixelRatio : 1;\n\n  /**\n   * @protected\n   * @type {ol.tilegrid.TileGrid}\n   */\n  this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n\n  /**\n   * @protected\n   * @type {ol.TileCache}\n   */\n  this.tileCache = new _ol_TileCache_(options.cacheSize);\n\n  /**\n   * @protected\n   * @type {ol.Size}\n   */\n  this.tmpSize = [0, 0];\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.key_ = '';\n\n  /**\n   * @protected\n   * @type {olx.TileOptions}\n   */\n  this.tileOptions = {transition: options.transition};\n\n};\n\n_ol_.inherits(_ol_source_Tile_, _ol_source_Source_);\n\n\n/**\n * @return {boolean} Can expire cache.\n */\n_ol_source_Tile_.prototype.canExpireCache = function() {\n  return this.tileCache.canExpireCache();\n};\n\n\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @param {Object.<string, ol.TileRange>} usedTiles Used tiles.\n */\n_ol_source_Tile_.prototype.expireCache = function(projection, usedTiles) {\n  var tileCache = this.getTileCacheForProjection(projection);\n  if (tileCache) {\n    tileCache.expireCache(usedTiles);\n  }\n};\n\n\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @param {number} z Zoom level.\n * @param {ol.TileRange} tileRange Tile range.\n * @param {function(ol.Tile):(boolean|undefined)} callback Called with each\n *     loaded tile.  If the callback returns `false`, the tile will not be\n *     considered loaded.\n * @return {boolean} The tile range is fully covered with loaded tiles.\n */\n_ol_source_Tile_.prototype.forEachLoadedTile = function(projection, z, tileRange, callback) {\n  var tileCache = this.getTileCacheForProjection(projection);\n  if (!tileCache) {\n    return false;\n  }\n\n  var covered = true;\n  var tile, tileCoordKey, loaded;\n  for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n    for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n      tileCoordKey = _ol_tilecoord_.getKeyZXY(z, x, y);\n      loaded = false;\n      if (tileCache.containsKey(tileCoordKey)) {\n        tile = /** @type {!ol.Tile} */ (tileCache.get(tileCoordKey));\n        loaded = tile.getState() === _ol_TileState_.LOADED;\n        if (loaded) {\n          loaded = (callback(tile) !== false);\n        }\n      }\n      if (!loaded) {\n        covered = false;\n      }\n    }\n  }\n  return covered;\n};\n\n\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @return {number} Gutter.\n */\n_ol_source_Tile_.prototype.getGutter = function(projection) {\n  return 0;\n};\n\n\n/**\n * Return the key to be used for all tiles in the source.\n * @return {string} The key for all tiles.\n * @protected\n */\n_ol_source_Tile_.prototype.getKey = function() {\n  return this.key_;\n};\n\n\n/**\n * Set the value to be used as the key for all tiles in the source.\n * @param {string} key The key for tiles.\n * @protected\n */\n_ol_source_Tile_.prototype.setKey = function(key) {\n  if (this.key_ !== key) {\n    this.key_ = key;\n    this.changed();\n  }\n};\n\n\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @return {boolean} Opaque.\n */\n_ol_source_Tile_.prototype.getOpaque = function(projection) {\n  return this.opaque_;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_source_Tile_.prototype.getResolutions = function() {\n  return this.tileGrid.getResolutions();\n};\n\n\n/**\n * @abstract\n * @param {number} z Tile coordinate z.\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @param {number} pixelRatio Pixel ratio.\n * @param {ol.proj.Projection} projection Projection.\n * @return {!ol.Tile} Tile.\n */\n_ol_source_Tile_.prototype.getTile = function(z, x, y, pixelRatio, projection) {};\n\n\n/**\n * Return the tile grid of the tile source.\n * @return {ol.tilegrid.TileGrid} Tile grid.\n * @api\n */\n_ol_source_Tile_.prototype.getTileGrid = function() {\n  return this.tileGrid;\n};\n\n\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @return {!ol.tilegrid.TileGrid} Tile grid.\n */\n_ol_source_Tile_.prototype.getTileGridForProjection = function(projection) {\n  if (!this.tileGrid) {\n    return _ol_tilegrid_.getForProjection(projection);\n  } else {\n    return this.tileGrid;\n  }\n};\n\n\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @return {ol.TileCache} Tile cache.\n * @protected\n */\n_ol_source_Tile_.prototype.getTileCacheForProjection = function(projection) {\n  var thisProj = this.getProjection();\n  if (thisProj && !_ol_proj_.equivalent(thisProj, projection)) {\n    return null;\n  } else {\n    return this.tileCache;\n  }\n};\n\n\n/**\n * Get the tile pixel ratio for this source. Subclasses may override this\n * method, which is meant to return a supported pixel ratio that matches the\n * provided `pixelRatio` as close as possible.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Tile pixel ratio.\n */\n_ol_source_Tile_.prototype.getTilePixelRatio = function(pixelRatio) {\n  return this.tilePixelRatio_;\n};\n\n\n/**\n * @param {number} z Z.\n * @param {number} pixelRatio Pixel ratio.\n * @param {ol.proj.Projection} projection Projection.\n * @return {ol.Size} Tile size.\n */\n_ol_source_Tile_.prototype.getTilePixelSize = function(z, pixelRatio, projection) {\n  var tileGrid = this.getTileGridForProjection(projection);\n  var tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n  var tileSize = _ol_size_.toSize(tileGrid.getTileSize(z), this.tmpSize);\n  if (tilePixelRatio == 1) {\n    return tileSize;\n  } else {\n    return _ol_size_.scale(tileSize, tilePixelRatio, this.tmpSize);\n  }\n};\n\n\n/**\n * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n * is outside the resolution and extent range of the tile grid, `null` will be\n * returned.\n * @param {ol.TileCoord} tileCoord Tile coordinate.\n * @param {ol.proj.Projection=} opt_projection Projection.\n * @return {ol.TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n *     null if no tile URL should be created for the passed `tileCoord`.\n */\n_ol_source_Tile_.prototype.getTileCoordForTileUrlFunction = function(tileCoord, opt_projection) {\n  var projection = opt_projection !== undefined ?\n    opt_projection : this.getProjection();\n  var tileGrid = this.getTileGridForProjection(projection);\n  if (this.getWrapX() && projection.isGlobal()) {\n    tileCoord = _ol_tilegrid_.wrapX(tileGrid, tileCoord, projection);\n  }\n  return _ol_tilecoord_.withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_source_Tile_.prototype.refresh = function() {\n  this.tileCache.clear();\n  this.changed();\n};\n\n\n/**\n * Marks a tile coord as being used, without triggering a load.\n * @param {number} z Tile coordinate z.\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @param {ol.proj.Projection} projection Projection.\n */\n_ol_source_Tile_.prototype.useTile = _ol_.nullFunction;\n\n\n/**\n * @classdesc\n * Events emitted by {@link ol.source.Tile} instances are instances of this\n * type.\n *\n * @constructor\n * @extends {ol.events.Event}\n * @implements {oli.source.Tile.Event}\n * @param {string} type Type.\n * @param {ol.Tile} tile The tile.\n */\n_ol_source_Tile_.Event = function(type, tile) {\n\n  _ol_events_Event_.call(this, type);\n\n  /**\n   * The tile related to the event.\n   * @type {ol.Tile}\n   * @api\n   */\n  this.tile = tile;\n\n};\n_ol_.inherits(_ol_source_Tile_.Event, _ol_events_Event_);\nexport default _ol_source_Tile_;\n"]},"metadata":{},"sourceType":"module"}