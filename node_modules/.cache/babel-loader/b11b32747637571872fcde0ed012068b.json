{"ast":null,"code":"var _ol_array_ = {};\n/**\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\n * https://github.com/darkskyapp/binary-search\n *\n * @param {Array.<*>} haystack Items to search through.\n * @param {*} needle The item to look for.\n * @param {Function=} opt_comparator Comparator function.\n * @return {number} The index of the item if found, -1 if not.\n */\n\n_ol_array_.binarySearch = function (haystack, needle, opt_comparator) {\n  var mid, cmp;\n  var comparator = opt_comparator || _ol_array_.numberSafeCompareFunction;\n  var low = 0;\n  var high = haystack.length;\n  var found = false;\n\n  while (low < high) {\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n     * to double (which gives the wrong results). */\n    mid = low + (high - low >> 1);\n    cmp = +comparator(haystack[mid], needle);\n\n    if (cmp < 0.0) {\n      /* Too low. */\n      low = mid + 1;\n    } else {\n      /* Key found or too high */\n      high = mid;\n      found = !cmp;\n    }\n  }\n  /* Key not found. */\n\n\n  return found ? low : ~low;\n};\n/**\n * Compare function for array sort that is safe for numbers.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\n\n\n_ol_array_.numberSafeCompareFunction = function (a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n};\n/**\n * Whether the array contains the given object.\n * @param {Array.<*>} arr The array to test for the presence of the element.\n * @param {*} obj The object for which to test.\n * @return {boolean} The object is in the array.\n */\n\n\n_ol_array_.includes = function (arr, obj) {\n  return arr.indexOf(obj) >= 0;\n};\n/**\n * @param {Array.<number>} arr Array.\n * @param {number} target Target.\n * @param {number} direction 0 means return the nearest, > 0\n *    means return the largest nearest, < 0 means return the\n *    smallest nearest.\n * @return {number} Index.\n */\n\n\n_ol_array_.linearFindNearest = function (arr, target, direction) {\n  var n = arr.length;\n\n  if (arr[0] <= target) {\n    return 0;\n  } else if (target <= arr[n - 1]) {\n    return n - 1;\n  } else {\n    var i;\n\n    if (direction > 0) {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] < target) {\n          return i - 1;\n        }\n      }\n    } else if (direction < 0) {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] <= target) {\n          return i;\n        }\n      }\n    } else {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] == target) {\n          return i;\n        } else if (arr[i] < target) {\n          if (arr[i - 1] - target < target - arr[i]) {\n            return i - 1;\n          } else {\n            return i;\n          }\n        }\n      }\n    }\n\n    return n - 1;\n  }\n};\n/**\n * @param {Array.<*>} arr Array.\n * @param {number} begin Begin index.\n * @param {number} end End index.\n */\n\n\n_ol_array_.reverseSubArray = function (arr, begin, end) {\n  while (begin < end) {\n    var tmp = arr[begin];\n    arr[begin] = arr[end];\n    arr[end] = tmp;\n    ++begin;\n    --end;\n  }\n};\n/**\n * @param {Array.<VALUE>} arr The array to modify.\n * @param {Array.<VALUE>|VALUE} data The elements or arrays of elements\n *     to add to arr.\n * @template VALUE\n */\n\n\n_ol_array_.extend = function (arr, data) {\n  var i;\n  var extension = Array.isArray(data) ? data : [data];\n  var length = extension.length;\n\n  for (i = 0; i < length; i++) {\n    arr[arr.length] = extension[i];\n  }\n};\n/**\n * @param {Array.<VALUE>} arr The array to modify.\n * @param {VALUE} obj The element to remove.\n * @template VALUE\n * @return {boolean} If the element was removed.\n */\n\n\n_ol_array_.remove = function (arr, obj) {\n  var i = arr.indexOf(obj);\n  var found = i > -1;\n\n  if (found) {\n    arr.splice(i, 1);\n  }\n\n  return found;\n};\n/**\n * @param {Array.<VALUE>} arr The array to search in.\n * @param {function(VALUE, number, ?) : boolean} func The function to compare.\n * @template VALUE\n * @return {VALUE} The element found.\n */\n\n\n_ol_array_.find = function (arr, func) {\n  var length = arr.length >>> 0;\n  var value;\n\n  for (var i = 0; i < length; i++) {\n    value = arr[i];\n\n    if (func(value, i, arr)) {\n      return value;\n    }\n  }\n\n  return null;\n};\n/**\n * @param {Array|Uint8ClampedArray} arr1 The first array to compare.\n * @param {Array|Uint8ClampedArray} arr2 The second array to compare.\n * @return {boolean} Whether the two arrays are equal.\n */\n\n\n_ol_array_.equals = function (arr1, arr2) {\n  var len1 = arr1.length;\n\n  if (len1 !== arr2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < len1; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * @param {Array.<*>} arr The array to sort (modifies original).\n * @param {Function} compareFnc Comparison function.\n */\n\n\n_ol_array_.stableSort = function (arr, compareFnc) {\n  var length = arr.length;\n  var tmp = Array(arr.length);\n  var i;\n\n  for (i = 0; i < length; i++) {\n    tmp[i] = {\n      index: i,\n      value: arr[i]\n    };\n  }\n\n  tmp.sort(function (a, b) {\n    return compareFnc(a.value, b.value) || a.index - b.index;\n  });\n\n  for (i = 0; i < arr.length; i++) {\n    arr[i] = tmp[i].value;\n  }\n};\n/**\n * @param {Array.<*>} arr The array to search in.\n * @param {Function} func Comparison function.\n * @return {number} Return index.\n */\n\n\n_ol_array_.findIndex = function (arr, func) {\n  var index;\n  var found = !arr.every(function (el, idx) {\n    index = idx;\n    return !func(el, idx, arr);\n  });\n  return found ? index : -1;\n};\n/**\n * @param {Array.<*>} arr The array to test.\n * @param {Function=} opt_func Comparison function.\n * @param {boolean=} opt_strict Strictly sorted (default false).\n * @return {boolean} Return index.\n */\n\n\n_ol_array_.isSorted = function (arr, opt_func, opt_strict) {\n  var compare = opt_func || _ol_array_.numberSafeCompareFunction;\n  return arr.every(function (currentVal, index) {\n    if (index === 0) {\n      return true;\n    }\n\n    var res = compare(arr[index - 1], currentVal);\n    return !(res > 0 || opt_strict && res === 0);\n  });\n};\n\nexport default _ol_array_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/array.js"],"names":["_ol_array_","binarySearch","haystack","needle","opt_comparator","mid","cmp","comparator","numberSafeCompareFunction","low","high","length","found","a","b","includes","arr","obj","indexOf","linearFindNearest","target","direction","n","i","reverseSubArray","begin","end","tmp","extend","data","extension","Array","isArray","remove","splice","find","func","value","equals","arr1","arr2","len1","stableSort","compareFnc","index","sort","findIndex","every","el","idx","isSorted","opt_func","opt_strict","compare","currentVal","res"],"mappings":"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","sourcesContent":["var _ol_array_ = {};\n\n\n/**\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\n * https://github.com/darkskyapp/binary-search\n *\n * @param {Array.<*>} haystack Items to search through.\n * @param {*} needle The item to look for.\n * @param {Function=} opt_comparator Comparator function.\n * @return {number} The index of the item if found, -1 if not.\n */\n_ol_array_.binarySearch = function(haystack, needle, opt_comparator) {\n  var mid, cmp;\n  var comparator = opt_comparator || _ol_array_.numberSafeCompareFunction;\n  var low = 0;\n  var high = haystack.length;\n  var found = false;\n\n  while (low < high) {\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n     * to double (which gives the wrong results). */\n    mid = low + (high - low >> 1);\n    cmp = +comparator(haystack[mid], needle);\n\n    if (cmp < 0.0) { /* Too low. */\n      low  = mid + 1;\n\n    } else { /* Key found or too high */\n      high = mid;\n      found = !cmp;\n    }\n  }\n\n  /* Key not found. */\n  return found ? low : ~low;\n};\n\n\n/**\n * Compare function for array sort that is safe for numbers.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\n_ol_array_.numberSafeCompareFunction = function(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n};\n\n\n/**\n * Whether the array contains the given object.\n * @param {Array.<*>} arr The array to test for the presence of the element.\n * @param {*} obj The object for which to test.\n * @return {boolean} The object is in the array.\n */\n_ol_array_.includes = function(arr, obj) {\n  return arr.indexOf(obj) >= 0;\n};\n\n\n/**\n * @param {Array.<number>} arr Array.\n * @param {number} target Target.\n * @param {number} direction 0 means return the nearest, > 0\n *    means return the largest nearest, < 0 means return the\n *    smallest nearest.\n * @return {number} Index.\n */\n_ol_array_.linearFindNearest = function(arr, target, direction) {\n  var n = arr.length;\n  if (arr[0] <= target) {\n    return 0;\n  } else if (target <= arr[n - 1]) {\n    return n - 1;\n  } else {\n    var i;\n    if (direction > 0) {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] < target) {\n          return i - 1;\n        }\n      }\n    } else if (direction < 0) {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] <= target) {\n          return i;\n        }\n      }\n    } else {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] == target) {\n          return i;\n        } else if (arr[i] < target) {\n          if (arr[i - 1] - target < target - arr[i]) {\n            return i - 1;\n          } else {\n            return i;\n          }\n        }\n      }\n    }\n    return n - 1;\n  }\n};\n\n\n/**\n * @param {Array.<*>} arr Array.\n * @param {number} begin Begin index.\n * @param {number} end End index.\n */\n_ol_array_.reverseSubArray = function(arr, begin, end) {\n  while (begin < end) {\n    var tmp = arr[begin];\n    arr[begin] = arr[end];\n    arr[end] = tmp;\n    ++begin;\n    --end;\n  }\n};\n\n\n/**\n * @param {Array.<VALUE>} arr The array to modify.\n * @param {Array.<VALUE>|VALUE} data The elements or arrays of elements\n *     to add to arr.\n * @template VALUE\n */\n_ol_array_.extend = function(arr, data) {\n  var i;\n  var extension = Array.isArray(data) ? data : [data];\n  var length = extension.length;\n  for (i = 0; i < length; i++) {\n    arr[arr.length] = extension[i];\n  }\n};\n\n\n/**\n * @param {Array.<VALUE>} arr The array to modify.\n * @param {VALUE} obj The element to remove.\n * @template VALUE\n * @return {boolean} If the element was removed.\n */\n_ol_array_.remove = function(arr, obj) {\n  var i = arr.indexOf(obj);\n  var found = i > -1;\n  if (found) {\n    arr.splice(i, 1);\n  }\n  return found;\n};\n\n\n/**\n * @param {Array.<VALUE>} arr The array to search in.\n * @param {function(VALUE, number, ?) : boolean} func The function to compare.\n * @template VALUE\n * @return {VALUE} The element found.\n */\n_ol_array_.find = function(arr, func) {\n  var length = arr.length >>> 0;\n  var value;\n\n  for (var i = 0; i < length; i++) {\n    value = arr[i];\n    if (func(value, i, arr)) {\n      return value;\n    }\n  }\n  return null;\n};\n\n\n/**\n * @param {Array|Uint8ClampedArray} arr1 The first array to compare.\n * @param {Array|Uint8ClampedArray} arr2 The second array to compare.\n * @return {boolean} Whether the two arrays are equal.\n */\n_ol_array_.equals = function(arr1, arr2) {\n  var len1 = arr1.length;\n  if (len1 !== arr2.length) {\n    return false;\n  }\n  for (var i = 0; i < len1; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * @param {Array.<*>} arr The array to sort (modifies original).\n * @param {Function} compareFnc Comparison function.\n */\n_ol_array_.stableSort = function(arr, compareFnc) {\n  var length = arr.length;\n  var tmp = Array(arr.length);\n  var i;\n  for (i = 0; i < length; i++) {\n    tmp[i] = {index: i, value: arr[i]};\n  }\n  tmp.sort(function(a, b) {\n    return compareFnc(a.value, b.value) || a.index - b.index;\n  });\n  for (i = 0; i < arr.length; i++) {\n    arr[i] = tmp[i].value;\n  }\n};\n\n\n/**\n * @param {Array.<*>} arr The array to search in.\n * @param {Function} func Comparison function.\n * @return {number} Return index.\n */\n_ol_array_.findIndex = function(arr, func) {\n  var index;\n  var found = !arr.every(function(el, idx) {\n    index = idx;\n    return !func(el, idx, arr);\n  });\n  return found ? index : -1;\n};\n\n\n/**\n * @param {Array.<*>} arr The array to test.\n * @param {Function=} opt_func Comparison function.\n * @param {boolean=} opt_strict Strictly sorted (default false).\n * @return {boolean} Return index.\n */\n_ol_array_.isSorted = function(arr, opt_func, opt_strict) {\n  var compare = opt_func || _ol_array_.numberSafeCompareFunction;\n  return arr.every(function(currentVal, index) {\n    if (index === 0) {\n      return true;\n    }\n    var res = compare(arr[index - 1], currentVal);\n    return !(res > 0 || opt_strict && res === 0);\n  });\n};\nexport default _ol_array_;\n"]},"metadata":{},"sourceType":"module"}