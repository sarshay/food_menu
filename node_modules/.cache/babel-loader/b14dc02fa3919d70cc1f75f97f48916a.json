{"ast":null,"code":"import _ol_ from './index.js';\nimport _ol_webgl_ from './webgl.js';\nvar _ol_has_ = {};\nvar ua = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase() : '';\n/**\n * User agent string says we are dealing with Firefox as browser.\n * @type {boolean}\n */\n\n_ol_has_.FIREFOX = ua.indexOf('firefox') !== -1;\n/**\n * User agent string says we are dealing with Safari as browser.\n * @type {boolean}\n */\n\n_ol_has_.SAFARI = ua.indexOf('safari') !== -1 && ua.indexOf('chrom') == -1;\n/**\n * User agent string says we are dealing with a WebKit engine.\n * @type {boolean}\n */\n\n_ol_has_.WEBKIT = ua.indexOf('webkit') !== -1 && ua.indexOf('edge') == -1;\n/**\n * User agent string says we are dealing with a Mac as platform.\n * @type {boolean}\n */\n\n_ol_has_.MAC = ua.indexOf('macintosh') !== -1;\n/**\n * The ratio between physical pixels and device-independent pixels\n * (dips) on the device (`window.devicePixelRatio`).\n * @const\n * @type {number}\n * @api\n */\n\n_ol_has_.DEVICE_PIXEL_RATIO = window.devicePixelRatio || 1;\n/**\n * True if the browser's Canvas implementation implements {get,set}LineDash.\n * @type {boolean}\n */\n\n_ol_has_.CANVAS_LINE_DASH = false;\n/**\n * True if both the library and browser support Canvas.  Always `false`\n * if `ol.ENABLE_CANVAS` is set to `false` at compile time.\n * @const\n * @type {boolean}\n * @api\n */\n\n_ol_has_.CANVAS = _ol_.ENABLE_CANVAS &&\n/**\n * @return {boolean} Canvas supported.\n */\nfunction () {\n  if (!('HTMLCanvasElement' in window)) {\n    return false;\n  }\n\n  try {\n    var context = document.createElement('CANVAS').getContext('2d');\n\n    if (!context) {\n      return false;\n    } else {\n      if (context.setLineDash !== undefined) {\n        _ol_has_.CANVAS_LINE_DASH = true;\n      }\n\n      return true;\n    }\n  } catch (e) {\n    return false;\n  }\n}();\n/**\n * Indicates if DeviceOrientation is supported in the user's browser.\n * @const\n * @type {boolean}\n * @api\n */\n\n\n_ol_has_.DEVICE_ORIENTATION = 'DeviceOrientationEvent' in window;\n/**\n * Is HTML5 geolocation supported in the current browser?\n * @const\n * @type {boolean}\n * @api\n */\n\n_ol_has_.GEOLOCATION = 'geolocation' in navigator;\n/**\n * True if browser supports touch events.\n * @const\n * @type {boolean}\n * @api\n */\n\n_ol_has_.TOUCH = _ol_.ASSUME_TOUCH || 'ontouchstart' in window;\n/**\n * True if browser supports pointer events.\n * @const\n * @type {boolean}\n */\n\n_ol_has_.POINTER = 'PointerEvent' in window;\n/**\n * True if browser supports ms pointer events (IE 10).\n * @const\n * @type {boolean}\n */\n\n_ol_has_.MSPOINTER = !!navigator.msPointerEnabled;\n/**\n * True if both OpenLayers and browser support WebGL.  Always `false`\n * if `ol.ENABLE_WEBGL` is set to `false` at compile time.\n * @const\n * @type {boolean}\n * @api\n */\n\n_ol_has_.WEBGL;\n\n(function () {\n  if (_ol_.ENABLE_WEBGL) {\n    var hasWebGL = false;\n    var textureSize;\n    var\n    /** @type {Array.<string>} */\n    extensions = [];\n\n    if ('WebGLRenderingContext' in window) {\n      try {\n        var canvas =\n        /** @type {HTMLCanvasElement} */\n        document.createElement('CANVAS');\n\n        var gl = _ol_webgl_.getContext(canvas, {\n          failIfMajorPerformanceCaveat: true\n        });\n\n        if (gl) {\n          hasWebGL = true;\n          textureSize =\n          /** @type {number} */\n          gl.getParameter(gl.MAX_TEXTURE_SIZE);\n          extensions = gl.getSupportedExtensions();\n        }\n      } catch (e) {// pass\n      }\n    }\n\n    _ol_has_.WEBGL = hasWebGL;\n    _ol_.WEBGL_EXTENSIONS = extensions;\n    _ol_.WEBGL_MAX_TEXTURE_SIZE = textureSize;\n  }\n})();\n\nexport default _ol_has_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/has.js"],"names":["_ol_","_ol_webgl_","_ol_has_","ua","navigator","userAgent","toLowerCase","FIREFOX","indexOf","SAFARI","WEBKIT","MAC","DEVICE_PIXEL_RATIO","window","devicePixelRatio","CANVAS_LINE_DASH","CANVAS","ENABLE_CANVAS","context","document","createElement","getContext","setLineDash","undefined","e","DEVICE_ORIENTATION","GEOLOCATION","TOUCH","ASSUME_TOUCH","POINTER","MSPOINTER","msPointerEnabled","WEBGL","ENABLE_WEBGL","hasWebGL","textureSize","extensions","canvas","gl","failIfMajorPerformanceCaveat","getParameter","MAX_TEXTURE_SIZE","getSupportedExtensions","WEBGL_EXTENSIONS","WEBGL_MAX_TEXTURE_SIZE"],"mappings":"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","sourcesContent":["import _ol_ from './index.js';\nimport _ol_webgl_ from './webgl.js';\nvar _ol_has_ = {};\n\nvar ua = typeof navigator !== 'undefined' ?\n  navigator.userAgent.toLowerCase() : '';\n\n/**\n * User agent string says we are dealing with Firefox as browser.\n * @type {boolean}\n */\n_ol_has_.FIREFOX = ua.indexOf('firefox') !== -1;\n\n/**\n * User agent string says we are dealing with Safari as browser.\n * @type {boolean}\n */\n_ol_has_.SAFARI = ua.indexOf('safari') !== -1 && ua.indexOf('chrom') == -1;\n\n/**\n * User agent string says we are dealing with a WebKit engine.\n * @type {boolean}\n */\n_ol_has_.WEBKIT = ua.indexOf('webkit') !== -1 && ua.indexOf('edge') == -1;\n\n/**\n * User agent string says we are dealing with a Mac as platform.\n * @type {boolean}\n */\n_ol_has_.MAC = ua.indexOf('macintosh') !== -1;\n\n\n/**\n * The ratio between physical pixels and device-independent pixels\n * (dips) on the device (`window.devicePixelRatio`).\n * @const\n * @type {number}\n * @api\n */\n_ol_has_.DEVICE_PIXEL_RATIO = window.devicePixelRatio || 1;\n\n\n/**\n * True if the browser's Canvas implementation implements {get,set}LineDash.\n * @type {boolean}\n */\n_ol_has_.CANVAS_LINE_DASH = false;\n\n\n/**\n * True if both the library and browser support Canvas.  Always `false`\n * if `ol.ENABLE_CANVAS` is set to `false` at compile time.\n * @const\n * @type {boolean}\n * @api\n */\n_ol_has_.CANVAS = _ol_.ENABLE_CANVAS && (\n  /**\n   * @return {boolean} Canvas supported.\n   */\n  function() {\n    if (!('HTMLCanvasElement' in window)) {\n      return false;\n    }\n    try {\n      var context = document.createElement('CANVAS').getContext('2d');\n      if (!context) {\n        return false;\n      } else {\n        if (context.setLineDash !== undefined) {\n          _ol_has_.CANVAS_LINE_DASH = true;\n        }\n        return true;\n      }\n    } catch (e) {\n      return false;\n    }\n  })();\n\n\n/**\n * Indicates if DeviceOrientation is supported in the user's browser.\n * @const\n * @type {boolean}\n * @api\n */\n_ol_has_.DEVICE_ORIENTATION = 'DeviceOrientationEvent' in window;\n\n\n/**\n * Is HTML5 geolocation supported in the current browser?\n * @const\n * @type {boolean}\n * @api\n */\n_ol_has_.GEOLOCATION = 'geolocation' in navigator;\n\n\n/**\n * True if browser supports touch events.\n * @const\n * @type {boolean}\n * @api\n */\n_ol_has_.TOUCH = _ol_.ASSUME_TOUCH || 'ontouchstart' in window;\n\n\n/**\n * True if browser supports pointer events.\n * @const\n * @type {boolean}\n */\n_ol_has_.POINTER = 'PointerEvent' in window;\n\n\n/**\n * True if browser supports ms pointer events (IE 10).\n * @const\n * @type {boolean}\n */\n_ol_has_.MSPOINTER = !!(navigator.msPointerEnabled);\n\n\n/**\n * True if both OpenLayers and browser support WebGL.  Always `false`\n * if `ol.ENABLE_WEBGL` is set to `false` at compile time.\n * @const\n * @type {boolean}\n * @api\n */\n_ol_has_.WEBGL;\n\n\n(function() {\n  if (_ol_.ENABLE_WEBGL) {\n    var hasWebGL = false;\n    var textureSize;\n    var /** @type {Array.<string>} */ extensions = [];\n\n    if ('WebGLRenderingContext' in window) {\n      try {\n        var canvas = /** @type {HTMLCanvasElement} */\n            (document.createElement('CANVAS'));\n        var gl = _ol_webgl_.getContext(canvas, {\n          failIfMajorPerformanceCaveat: true\n        });\n        if (gl) {\n          hasWebGL = true;\n          textureSize = /** @type {number} */\n            (gl.getParameter(gl.MAX_TEXTURE_SIZE));\n          extensions = gl.getSupportedExtensions();\n        }\n      } catch (e) {\n        // pass\n      }\n    }\n    _ol_has_.WEBGL = hasWebGL;\n    _ol_.WEBGL_EXTENSIONS = extensions;\n    _ol_.WEBGL_MAX_TEXTURE_SIZE = textureSize;\n  }\n})();\nexport default _ol_has_;\n"]},"metadata":{},"sourceType":"module"}