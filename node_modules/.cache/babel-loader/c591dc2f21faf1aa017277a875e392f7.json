{"ast":null,"code":"import _ol_ from '../../index.js';\nimport _ol_colorlike_ from '../../colorlike.js';\nimport _ol_dom_ from '../../dom.js';\nimport _ol_extent_ from '../../extent.js';\nimport _ol_geom_flat_straightchunk_ from '../../geom/flat/straightchunk.js';\nimport _ol_geom_GeometryType_ from '../../geom/geometrytype.js';\nimport _ol_has_ from '../../has.js';\nimport _ol_render_canvas_ from '../canvas.js';\nimport _ol_render_canvas_Instruction_ from '../canvas/instruction.js';\nimport _ol_render_canvas_Replay_ from '../canvas/replay.js';\nimport _ol_render_replay_ from '../replay.js';\nimport _ol_style_TextPlacement_ from '../../style/textplacement.js';\n/**\n * @constructor\n * @extends {ol.render.canvas.Replay}\n * @param {number} tolerance Tolerance.\n * @param {ol.Extent} maxExtent Maximum extent.\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {boolean} overlaps The replay can have overlapping geometries.\n * @param {?} declutterTree Declutter tree.\n * @struct\n */\n\nvar _ol_render_canvas_TextReplay_ = function (tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {\n  _ol_render_canvas_Replay_.call(this, tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);\n  /**\n   * @private\n   * @type {ol.DeclutterGroup}\n   */\n\n\n  this.declutterGroup_;\n  /**\n   * @private\n   * @type {Array.<HTMLCanvasElement>}\n   */\n\n  this.labels_ = null;\n  /**\n   * @private\n   * @type {string}\n   */\n\n  this.text_ = '';\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.textOffsetX_ = 0;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.textOffsetY_ = 0;\n  /**\n   * @private\n   * @type {boolean|undefined}\n   */\n\n  this.textRotateWithView_ = undefined;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.textRotation_ = 0;\n  /**\n   * @private\n   * @type {?ol.CanvasFillState}\n   */\n\n  this.textFillState_ = null;\n  /**\n   * @type {Object.<string, ol.CanvasFillState>}\n   */\n\n  this.fillStates = {};\n  /**\n   * @private\n   * @type {?ol.CanvasStrokeState}\n   */\n\n  this.textStrokeState_ = null;\n  /**\n   * @type {Object.<string, ol.CanvasStrokeState>}\n   */\n\n  this.strokeStates = {};\n  /**\n   * @private\n   * @type {ol.CanvasTextState}\n   */\n\n  this.textState_ =\n  /** @type {ol.CanvasTextState} */\n  {};\n  /**\n   * @type {Object.<string, ol.CanvasTextState>}\n   */\n\n  this.textStates = {};\n  /**\n   * @private\n   * @type {string}\n   */\n\n  this.textKey_ = '';\n  /**\n   * @private\n   * @type {string}\n   */\n\n  this.fillKey_ = '';\n  /**\n   * @private\n   * @type {string}\n   */\n\n  this.strokeKey_ = '';\n  /**\n   * @private\n   * @type {Object.<string, Object.<string, number>>}\n   */\n\n  this.widths_ = {};\n  var labelCache = _ol_render_canvas_.labelCache;\n  labelCache.prune();\n};\n\n_ol_.inherits(_ol_render_canvas_TextReplay_, _ol_render_canvas_Replay_);\n/**\n * @param {string} font Font to use for measuring.\n * @param {Array.<string>} lines Lines to measure.\n * @param {Array.<number>} widths Array will be populated with the widths of\n * each line.\n * @return {number} Width of the whole text.\n */\n\n\n_ol_render_canvas_TextReplay_.measureTextWidths = function (font, lines, widths) {\n  var numLines = lines.length;\n  var width = 0;\n  var currentWidth, i;\n\n  for (i = 0; i < numLines; ++i) {\n    currentWidth = _ol_render_canvas_.measureTextWidth(font, lines[i]);\n    width = Math.max(width, currentWidth);\n    widths.push(currentWidth);\n  }\n\n  return width;\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_render_canvas_TextReplay_.prototype.drawText = function (geometry, feature) {\n  var fillState = this.textFillState_;\n  var strokeState = this.textStrokeState_;\n  var textState = this.textState_;\n\n  if (this.text_ === '' || !textState || !fillState && !strokeState) {\n    return;\n  }\n\n  var begin = this.coordinates.length;\n  var geometryType = geometry.getType();\n  var flatCoordinates = null;\n  var end = 2;\n  var stride = 2;\n  var i, ii;\n\n  if (textState.placement === _ol_style_TextPlacement_.LINE) {\n    if (!_ol_extent_.intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {\n      return;\n    }\n\n    var ends;\n    flatCoordinates = geometry.getFlatCoordinates();\n    stride = geometry.getStride();\n\n    if (geometryType == _ol_geom_GeometryType_.LINE_STRING) {\n      ends = [flatCoordinates.length];\n    } else if (geometryType == _ol_geom_GeometryType_.MULTI_LINE_STRING) {\n      ends = geometry.getEnds();\n    } else if (geometryType == _ol_geom_GeometryType_.POLYGON) {\n      ends = geometry.getEnds().slice(0, 1);\n    } else if (geometryType == _ol_geom_GeometryType_.MULTI_POLYGON) {\n      var endss = geometry.getEndss();\n      ends = [];\n\n      for (i = 0, ii = endss.length; i < ii; ++i) {\n        ends.push(endss[i][0]);\n      }\n    }\n\n    this.beginGeometry(geometry, feature);\n    var textAlign = textState.textAlign;\n    var flatOffset = 0;\n    var flatEnd;\n\n    for (var o = 0, oo = ends.length; o < oo; ++o) {\n      if (textAlign == undefined) {\n        var range = _ol_geom_flat_straightchunk_.lineString(textState.maxAngle, flatCoordinates, flatOffset, ends[o], stride);\n\n        flatOffset = range[0];\n        flatEnd = range[1];\n      } else {\n        flatEnd = ends[o];\n      }\n\n      for (i = flatOffset; i < flatEnd; i += stride) {\n        this.coordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);\n      }\n\n      end = this.coordinates.length;\n      flatOffset = ends[o];\n      this.drawChars_(begin, end, this.declutterGroup_);\n      begin = end;\n    }\n\n    this.endGeometry(geometry, feature);\n  } else {\n    var label = this.getImage(this.text_, this.textKey_, this.fillKey_, this.strokeKey_);\n    var width = label.width / this.pixelRatio;\n\n    switch (geometryType) {\n      case _ol_geom_GeometryType_.POINT:\n      case _ol_geom_GeometryType_.MULTI_POINT:\n        flatCoordinates = geometry.getFlatCoordinates();\n        end = flatCoordinates.length;\n        break;\n\n      case _ol_geom_GeometryType_.LINE_STRING:\n        flatCoordinates =\n        /** @type {ol.geom.LineString} */\n        geometry.getFlatMidpoint();\n        break;\n\n      case _ol_geom_GeometryType_.CIRCLE:\n        flatCoordinates =\n        /** @type {ol.geom.Circle} */\n        geometry.getCenter();\n        break;\n\n      case _ol_geom_GeometryType_.MULTI_LINE_STRING:\n        flatCoordinates =\n        /** @type {ol.geom.MultiLineString} */\n        geometry.getFlatMidpoints();\n        end = flatCoordinates.length;\n        break;\n\n      case _ol_geom_GeometryType_.POLYGON:\n        flatCoordinates =\n        /** @type {ol.geom.Polygon} */\n        geometry.getFlatInteriorPoint();\n\n        if (!textState.overflow && flatCoordinates[2] / this.resolution < width) {\n          return;\n        }\n\n        stride = 3;\n        break;\n\n      case _ol_geom_GeometryType_.MULTI_POLYGON:\n        var interiorPoints =\n        /** @type {ol.geom.MultiPolygon} */\n        geometry.getFlatInteriorPoints();\n        flatCoordinates = [];\n\n        for (i = 0, ii = interiorPoints.length; i < ii; i += 3) {\n          if (textState.overflow || interiorPoints[i + 2] / this.resolution >= width) {\n            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\n          }\n        }\n\n        end = flatCoordinates.length;\n\n        if (end == 0) {\n          return;\n        }\n\n        break;\n\n      default:\n    }\n\n    end = this.appendFlatCoordinates(flatCoordinates, 0, end, stride, false, false);\n    this.beginGeometry(geometry, feature);\n\n    if (textState.backgroundFill || textState.backgroundStroke) {\n      this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);\n      this.updateFillStyle(this.state, this.applyFill, geometry);\n      this.updateStrokeStyle(this.state, this.applyStroke);\n    }\n\n    this.drawTextImage_(label, begin, end);\n    this.endGeometry(geometry, feature);\n  }\n};\n/**\n * @param {string} text Text.\n * @param {string} textKey Text style key.\n * @param {string} fillKey Fill style key.\n * @param {string} strokeKey Stroke style key.\n * @return {HTMLCanvasElement} Image.\n */\n\n\n_ol_render_canvas_TextReplay_.prototype.getImage = function (text, textKey, fillKey, strokeKey) {\n  var label;\n  var key = strokeKey + textKey + text + fillKey + this.pixelRatio;\n  var labelCache = _ol_render_canvas_.labelCache;\n\n  if (!labelCache.containsKey(key)) {\n    var strokeState = strokeKey ? this.strokeStates[strokeKey] || this.textStrokeState_ : null;\n    var fillState = fillKey ? this.fillStates[fillKey] || this.textFillState_ : null;\n    var textState = this.textStates[textKey] || this.textState_;\n    var pixelRatio = this.pixelRatio;\n    var scale = textState.scale * pixelRatio;\n    var align = _ol_render_replay_.TEXT_ALIGN[textState.textAlign || _ol_render_canvas_.defaultTextAlign];\n    var strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;\n    var lines = text.split('\\n');\n    var numLines = lines.length;\n    var widths = [];\n\n    var width = _ol_render_canvas_TextReplay_.measureTextWidths(textState.font, lines, widths);\n\n    var lineHeight = _ol_render_canvas_.measureTextHeight(textState.font);\n\n    var height = lineHeight * numLines;\n    var renderWidth = width + strokeWidth;\n\n    var context = _ol_dom_.createCanvasContext2D(Math.ceil(renderWidth * scale), Math.ceil((height + strokeWidth) * scale));\n\n    label = context.canvas;\n    labelCache.set(key, label);\n\n    if (scale != 1) {\n      context.scale(scale, scale);\n    }\n\n    context.font = textState.font;\n\n    if (strokeKey) {\n      context.strokeStyle = strokeState.strokeStyle;\n      context.lineWidth = strokeWidth * (_ol_has_.SAFARI ? scale : 1);\n      context.lineCap = strokeState.lineCap;\n      context.lineJoin = strokeState.lineJoin;\n      context.miterLimit = strokeState.miterLimit;\n\n      if (_ol_has_.CANVAS_LINE_DASH && strokeState.lineDash.length) {\n        context.setLineDash(strokeState.lineDash);\n        context.lineDashOffset = strokeState.lineDashOffset;\n      }\n    }\n\n    if (fillKey) {\n      context.fillStyle = fillState.fillStyle;\n    }\n\n    context.textBaseline = 'middle';\n    context.textAlign = 'center';\n    var leftRight = 0.5 - align;\n    var x = align * label.width / scale + leftRight * strokeWidth;\n    var i;\n\n    if (strokeKey) {\n      for (i = 0; i < numLines; ++i) {\n        context.strokeText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);\n      }\n    }\n\n    if (fillKey) {\n      for (i = 0; i < numLines; ++i) {\n        context.fillText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);\n      }\n    }\n  }\n\n  return labelCache.get(key);\n};\n/**\n * @private\n * @param {HTMLCanvasElement} label Label.\n * @param {number} begin Begin.\n * @param {number} end End.\n */\n\n\n_ol_render_canvas_TextReplay_.prototype.drawTextImage_ = function (label, begin, end) {\n  var textState = this.textState_;\n  var strokeState = this.textStrokeState_;\n  var pixelRatio = this.pixelRatio;\n  var align = _ol_render_replay_.TEXT_ALIGN[textState.textAlign || _ol_render_canvas_.defaultTextAlign];\n  var baseline = _ol_render_replay_.TEXT_ALIGN[textState.textBaseline];\n  var strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;\n  var anchorX = align * label.width / pixelRatio + 2 * (0.5 - align) * strokeWidth;\n  var anchorY = baseline * label.height / pixelRatio + 2 * (0.5 - baseline) * strokeWidth;\n  this.instructions.push([_ol_render_canvas_Instruction_.DRAW_IMAGE, begin, end, label, (anchorX - this.textOffsetX_) * pixelRatio, (anchorY - this.textOffsetY_) * pixelRatio, this.declutterGroup_, label.height, 1, 0, 0, this.textRotateWithView_, this.textRotation_, 1, true, label.width, textState.padding == _ol_render_canvas_.defaultPadding ? _ol_render_canvas_.defaultPadding : textState.padding.map(function (p) {\n    return p * pixelRatio;\n  }), !!textState.backgroundFill, !!textState.backgroundStroke]);\n  this.hitDetectionInstructions.push([_ol_render_canvas_Instruction_.DRAW_IMAGE, begin, end, label, (anchorX - this.textOffsetX_) * pixelRatio, (anchorY - this.textOffsetY_) * pixelRatio, this.declutterGroup_, label.height, 1, 0, 0, this.textRotateWithView_, this.textRotation_, 1 / pixelRatio, true, label.width, textState.padding, !!textState.backgroundFill, !!textState.backgroundStroke]);\n};\n/**\n * @private\n * @param {number} begin Begin.\n * @param {number} end End.\n * @param {ol.DeclutterGroup} declutterGroup Declutter group.\n */\n\n\n_ol_render_canvas_TextReplay_.prototype.drawChars_ = function (begin, end, declutterGroup) {\n  var strokeState = this.textStrokeState_;\n  var textState = this.textState_;\n  var fillState = this.textFillState_;\n  var strokeKey = this.strokeKey_;\n\n  if (strokeState) {\n    if (!(strokeKey in this.strokeStates)) {\n      this.strokeStates[strokeKey] =\n      /** @type {ol.CanvasStrokeState} */\n      {\n        strokeStyle: strokeState.strokeStyle,\n        lineCap: strokeState.lineCap,\n        lineDashOffset: strokeState.lineDashOffset,\n        lineWidth: strokeState.lineWidth,\n        lineJoin: strokeState.lineJoin,\n        miterLimit: strokeState.miterLimit,\n        lineDash: strokeState.lineDash\n      };\n    }\n  }\n\n  var textKey = this.textKey_;\n\n  if (!(this.textKey_ in this.textStates)) {\n    this.textStates[this.textKey_] =\n    /** @type {ol.CanvasTextState} */\n    {\n      font: textState.font,\n      textAlign: textState.textAlign || _ol_render_canvas_.defaultTextAlign,\n      scale: textState.scale\n    };\n  }\n\n  var fillKey = this.fillKey_;\n\n  if (fillState) {\n    if (!(fillKey in this.fillStates)) {\n      this.fillStates[fillKey] =\n      /** @type {ol.CanvasFillState} */\n      {\n        fillStyle: fillState.fillStyle\n      };\n    }\n  }\n\n  var pixelRatio = this.pixelRatio;\n  var baseline = _ol_render_replay_.TEXT_ALIGN[textState.textBaseline];\n  var offsetY = this.textOffsetY_ * pixelRatio;\n  var text = this.text_;\n  var font = textState.font;\n  var textScale = textState.scale;\n  var strokeWidth = strokeState ? strokeState.lineWidth * textScale / 2 : 0;\n  var widths = this.widths_[font];\n\n  if (!widths) {\n    this.widths_[font] = widths = {};\n  }\n\n  this.instructions.push([_ol_render_canvas_Instruction_.DRAW_CHARS, begin, end, baseline, declutterGroup, textState.overflow, fillKey, textState.maxAngle, function (text) {\n    var width = widths[text];\n\n    if (!width) {\n      width = widths[text] = _ol_render_canvas_.measureTextWidth(font, text);\n    }\n\n    return width * textScale * pixelRatio;\n  }, offsetY, strokeKey, strokeWidth * pixelRatio, text, textKey, 1]);\n  this.hitDetectionInstructions.push([_ol_render_canvas_Instruction_.DRAW_CHARS, begin, end, baseline, declutterGroup, textState.overflow, fillKey, textState.maxAngle, function (text) {\n    var width = widths[text];\n\n    if (!width) {\n      width = widths[text] = _ol_render_canvas_.measureTextWidth(font, text);\n    }\n\n    return width * textScale;\n  }, offsetY, strokeKey, strokeWidth, text, textKey, 1 / pixelRatio]);\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_render_canvas_TextReplay_.prototype.setTextStyle = function (textStyle, declutterGroup) {\n  var textState, fillState, strokeState;\n\n  if (!textStyle) {\n    this.text_ = '';\n  } else {\n    this.declutterGroup_ =\n    /** @type {ol.DeclutterGroup} */\n    declutterGroup;\n    var textFillStyle = textStyle.getFill();\n\n    if (!textFillStyle) {\n      fillState = this.textFillState_ = null;\n    } else {\n      fillState = this.textFillState_;\n\n      if (!fillState) {\n        fillState = this.textFillState_ =\n        /** @type {ol.CanvasFillState} */\n        {};\n      }\n\n      fillState.fillStyle = _ol_colorlike_.asColorLike(textFillStyle.getColor() || _ol_render_canvas_.defaultFillStyle);\n    }\n\n    var textStrokeStyle = textStyle.getStroke();\n\n    if (!textStrokeStyle) {\n      strokeState = this.textStrokeState_ = null;\n    } else {\n      strokeState = this.textStrokeState_;\n\n      if (!strokeState) {\n        strokeState = this.textStrokeState_ =\n        /** @type {ol.CanvasStrokeState} */\n        {};\n      }\n\n      var lineDash = textStrokeStyle.getLineDash();\n      var lineDashOffset = textStrokeStyle.getLineDashOffset();\n      var lineWidth = textStrokeStyle.getWidth();\n      var miterLimit = textStrokeStyle.getMiterLimit();\n      strokeState.lineCap = textStrokeStyle.getLineCap() || _ol_render_canvas_.defaultLineCap;\n      strokeState.lineDash = lineDash ? lineDash.slice() : _ol_render_canvas_.defaultLineDash;\n      strokeState.lineDashOffset = lineDashOffset === undefined ? _ol_render_canvas_.defaultLineDashOffset : lineDashOffset;\n      strokeState.lineJoin = textStrokeStyle.getLineJoin() || _ol_render_canvas_.defaultLineJoin;\n      strokeState.lineWidth = lineWidth === undefined ? _ol_render_canvas_.defaultLineWidth : lineWidth;\n      strokeState.miterLimit = miterLimit === undefined ? _ol_render_canvas_.defaultMiterLimit : miterLimit;\n      strokeState.strokeStyle = _ol_colorlike_.asColorLike(textStrokeStyle.getColor() || _ol_render_canvas_.defaultStrokeStyle);\n    }\n\n    textState = this.textState_;\n\n    var font = textStyle.getFont() || _ol_render_canvas_.defaultFont;\n\n    _ol_render_canvas_.checkFont(font);\n\n    var textScale = textStyle.getScale();\n    textState.overflow = textStyle.getOverflow();\n    textState.font = font;\n    textState.maxAngle = textStyle.getMaxAngle();\n    textState.placement = textStyle.getPlacement();\n    textState.textAlign = textStyle.getTextAlign();\n    textState.textBaseline = textStyle.getTextBaseline() || _ol_render_canvas_.defaultTextBaseline;\n    textState.backgroundFill = textStyle.getBackgroundFill();\n    textState.backgroundStroke = textStyle.getBackgroundStroke();\n    textState.padding = textStyle.getPadding() || _ol_render_canvas_.defaultPadding;\n    textState.scale = textScale === undefined ? 1 : textScale;\n    var textOffsetX = textStyle.getOffsetX();\n    var textOffsetY = textStyle.getOffsetY();\n    var textRotateWithView = textStyle.getRotateWithView();\n    var textRotation = textStyle.getRotation();\n    this.text_ = textStyle.getText() || '';\n    this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\n    this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\n    this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;\n    this.textRotation_ = textRotation === undefined ? 0 : textRotation;\n    this.strokeKey_ = strokeState ? (typeof strokeState.strokeStyle == 'string' ? strokeState.strokeStyle : _ol_.getUid(strokeState.strokeStyle)) + strokeState.lineCap + strokeState.lineDashOffset + '|' + strokeState.lineWidth + strokeState.lineJoin + strokeState.miterLimit + '[' + strokeState.lineDash.join() + ']' : '';\n    this.textKey_ = textState.font + textState.scale + (textState.textAlign || '?');\n    this.fillKey_ = fillState ? typeof fillState.fillStyle == 'string' ? fillState.fillStyle : '|' + _ol_.getUid(fillState.fillStyle) : '';\n  }\n};\n\nexport default _ol_render_canvas_TextReplay_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/render/canvas/textreplay.js"],"names":["_ol_","_ol_colorlike_","_ol_dom_","_ol_extent_","_ol_geom_flat_straightchunk_","_ol_geom_GeometryType_","_ol_has_","_ol_render_canvas_","_ol_render_canvas_Instruction_","_ol_render_canvas_Replay_","_ol_render_replay_","_ol_style_TextPlacement_","_ol_render_canvas_TextReplay_","tolerance","maxExtent","resolution","pixelRatio","overlaps","declutterTree","call","declutterGroup_","labels_","text_","textOffsetX_","textOffsetY_","textRotateWithView_","undefined","textRotation_","textFillState_","fillStates","textStrokeState_","strokeStates","textState_","textStates","textKey_","fillKey_","strokeKey_","widths_","labelCache","prune","inherits","measureTextWidths","font","lines","widths","numLines","length","width","currentWidth","i","measureTextWidth","Math","max","push","prototype","drawText","geometry","feature","fillState","strokeState","textState","begin","coordinates","geometryType","getType","flatCoordinates","end","stride","ii","placement","LINE","intersects","getBufferedMaxExtent","getExtent","ends","getFlatCoordinates","getStride","LINE_STRING","MULTI_LINE_STRING","getEnds","POLYGON","slice","MULTI_POLYGON","endss","getEndss","beginGeometry","textAlign","flatOffset","flatEnd","o","oo","range","lineString","maxAngle","drawChars_","endGeometry","label","getImage","POINT","MULTI_POINT","getFlatMidpoint","CIRCLE","getCenter","getFlatMidpoints","getFlatInteriorPoint","overflow","interiorPoints","getFlatInteriorPoints","appendFlatCoordinates","backgroundFill","backgroundStroke","setFillStrokeStyle","updateFillStyle","state","applyFill","updateStrokeStyle","applyStroke","drawTextImage_","text","textKey","fillKey","strokeKey","key","containsKey","scale","align","TEXT_ALIGN","defaultTextAlign","strokeWidth","lineWidth","split","lineHeight","measureTextHeight","height","renderWidth","context","createCanvasContext2D","ceil","canvas","set","strokeStyle","SAFARI","lineCap","lineJoin","miterLimit","CANVAS_LINE_DASH","lineDash","setLineDash","lineDashOffset","fillStyle","textBaseline","leftRight","x","strokeText","fillText","get","baseline","anchorX","anchorY","instructions","DRAW_IMAGE","padding","defaultPadding","map","p","hitDetectionInstructions","declutterGroup","offsetY","textScale","DRAW_CHARS","setTextStyle","textStyle","textFillStyle","getFill","asColorLike","getColor","defaultFillStyle","textStrokeStyle","getStroke","getLineDash","getLineDashOffset","getWidth","getMiterLimit","getLineCap","defaultLineCap","defaultLineDash","defaultLineDashOffset","getLineJoin","defaultLineJoin","defaultLineWidth","defaultMiterLimit","defaultStrokeStyle","getFont","defaultFont","checkFont","getScale","getOverflow","getMaxAngle","getPlacement","getTextAlign","getTextBaseline","defaultTextBaseline","getBackgroundFill","getBackgroundStroke","getPadding","textOffsetX","getOffsetX","textOffsetY","getOffsetY","textRotateWithView","getRotateWithView","textRotation","getRotation","getText","getUid","join"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,gBAAjB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,4BAAP,MAAyC,kCAAzC;AACA,OAAOC,sBAAP,MAAmC,4BAAnC;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,kBAAP,MAA+B,cAA/B;AACA,OAAOC,8BAAP,MAA2C,0BAA3C;AACA,OAAOC,yBAAP,MAAsC,qBAAtC;AACA,OAAOC,kBAAP,MAA+B,cAA/B;AACA,OAAOC,wBAAP,MAAqC,8BAArC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,6BAA6B,GAAG,UAChCC,SADgC,EACrBC,SADqB,EACVC,UADU,EACEC,UADF,EACcC,QADd,EACwBC,aADxB,EACuC;AACzET,EAAAA,yBAAyB,CAACU,IAA1B,CAA+B,IAA/B,EACIN,SADJ,EACeC,SADf,EAC0BC,UAD1B,EACsCC,UADtC,EACkDC,QADlD,EAC4DC,aAD5D;AAGA;AACF;AACA;AACA;;;AACE,OAAKE,eAAL;AAEA;AACF;AACA;AACA;;AACE,OAAKC,OAAL,GAAe,IAAf;AAEA;AACF;AACA;AACA;;AACE,OAAKC,KAAL,GAAa,EAAb;AAEA;AACF;AACA;AACA;;AACE,OAAKC,YAAL,GAAoB,CAApB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,YAAL,GAAoB,CAApB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2BC,SAA3B;AAEA;AACF;AACA;AACA;;AACE,OAAKC,aAAL,GAAqB,CAArB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,cAAL,GAAsB,IAAtB;AAEA;AACF;AACA;;AACE,OAAKC,UAAL,GAAkB,EAAlB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,gBAAL,GAAwB,IAAxB;AAEA;AACF;AACA;;AACE,OAAKC,YAAL,GAAoB,EAApB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,UAAL;AAAkB;AAAmC,IAArD;AAEA;AACF;AACA;;AACE,OAAKC,UAAL,GAAkB,EAAlB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,QAAL,GAAgB,EAAhB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,QAAL,GAAgB,EAAhB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,UAAL,GAAkB,EAAlB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,OAAL,GAAe,EAAf;AAEA,MAAIC,UAAU,GAAG/B,kBAAkB,CAAC+B,UAApC;AACAA,EAAAA,UAAU,CAACC,KAAX;AAED,CA3GD;;AA6GAvC,IAAI,CAACwC,QAAL,CAAc5B,6BAAd,EAA6CH,yBAA7C;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAG,6BAA6B,CAAC6B,iBAA9B,GAAkD,UAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,EAA8B;AAC9E,MAAIC,QAAQ,GAAGF,KAAK,CAACG,MAArB;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,YAAJ,EAAkBC,CAAlB;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGJ,QAAhB,EAA0B,EAAEI,CAA5B,EAA+B;AAC7BD,IAAAA,YAAY,GAAGzC,kBAAkB,CAAC2C,gBAAnB,CAAoCR,IAApC,EAA0CC,KAAK,CAACM,CAAD,CAA/C,CAAf;AACAF,IAAAA,KAAK,GAAGI,IAAI,CAACC,GAAL,CAASL,KAAT,EAAgBC,YAAhB,CAAR;AACAJ,IAAAA,MAAM,CAACS,IAAP,CAAYL,YAAZ;AACD;;AACD,SAAOD,KAAP;AACD,CAVD;AAaA;AACA;AACA;;;AACAnC,6BAA6B,CAAC0C,SAA9B,CAAwCC,QAAxC,GAAmD,UAASC,QAAT,EAAmBC,OAAnB,EAA4B;AAC7E,MAAIC,SAAS,GAAG,KAAK9B,cAArB;AACA,MAAI+B,WAAW,GAAG,KAAK7B,gBAAvB;AACA,MAAI8B,SAAS,GAAG,KAAK5B,UAArB;;AACA,MAAI,KAAKV,KAAL,KAAe,EAAf,IAAqB,CAACsC,SAAtB,IAAoC,CAACF,SAAD,IAAc,CAACC,WAAvD,EAAqE;AACnE;AACD;;AAED,MAAIE,KAAK,GAAG,KAAKC,WAAL,CAAiBhB,MAA7B;AAEA,MAAIiB,YAAY,GAAGP,QAAQ,CAACQ,OAAT,EAAnB;AACA,MAAIC,eAAe,GAAG,IAAtB;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIlB,CAAJ,EAAOmB,EAAP;;AAEA,MAAIR,SAAS,CAACS,SAAV,KAAwB1D,wBAAwB,CAAC2D,IAArD,EAA2D;AACzD,QAAI,CAACnE,WAAW,CAACoE,UAAZ,CAAuB,KAAKC,oBAAL,EAAvB,EAAoDhB,QAAQ,CAACiB,SAAT,EAApD,CAAL,EAAgF;AAC9E;AACD;;AACD,QAAIC,IAAJ;AACAT,IAAAA,eAAe,GAAGT,QAAQ,CAACmB,kBAAT,EAAlB;AACAR,IAAAA,MAAM,GAAGX,QAAQ,CAACoB,SAAT,EAAT;;AACA,QAAIb,YAAY,IAAI1D,sBAAsB,CAACwE,WAA3C,EAAwD;AACtDH,MAAAA,IAAI,GAAG,CAACT,eAAe,CAACnB,MAAjB,CAAP;AACD,KAFD,MAEO,IAAIiB,YAAY,IAAI1D,sBAAsB,CAACyE,iBAA3C,EAA8D;AACnEJ,MAAAA,IAAI,GAAGlB,QAAQ,CAACuB,OAAT,EAAP;AACD,KAFM,MAEA,IAAIhB,YAAY,IAAI1D,sBAAsB,CAAC2E,OAA3C,EAAoD;AACzDN,MAAAA,IAAI,GAAGlB,QAAQ,CAACuB,OAAT,GAAmBE,KAAnB,CAAyB,CAAzB,EAA4B,CAA5B,CAAP;AACD,KAFM,MAEA,IAAIlB,YAAY,IAAI1D,sBAAsB,CAAC6E,aAA3C,EAA0D;AAC/D,UAAIC,KAAK,GAAG3B,QAAQ,CAAC4B,QAAT,EAAZ;AACAV,MAAAA,IAAI,GAAG,EAAP;;AACA,WAAKzB,CAAC,GAAG,CAAJ,EAAOmB,EAAE,GAAGe,KAAK,CAACrC,MAAvB,EAA+BG,CAAC,GAAGmB,EAAnC,EAAuC,EAAEnB,CAAzC,EAA4C;AAC1CyB,QAAAA,IAAI,CAACrB,IAAL,CAAU8B,KAAK,CAAClC,CAAD,CAAL,CAAS,CAAT,CAAV;AACD;AACF;;AACD,SAAKoC,aAAL,CAAmB7B,QAAnB,EAA6BC,OAA7B;AACA,QAAI6B,SAAS,GAAG1B,SAAS,CAAC0B,SAA1B;AACA,QAAIC,UAAU,GAAG,CAAjB;AACA,QAAIC,OAAJ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGhB,IAAI,CAAC5B,MAA1B,EAAkC2C,CAAC,GAAGC,EAAtC,EAA0C,EAAED,CAA5C,EAA+C;AAC7C,UAAIH,SAAS,IAAI5D,SAAjB,EAA4B;AAC1B,YAAIiE,KAAK,GAAGvF,4BAA4B,CAACwF,UAA7B,CACRhC,SAAS,CAACiC,QADF,EACY5B,eADZ,EAC6BsB,UAD7B,EACyCb,IAAI,CAACe,CAAD,CAD7C,EACkDtB,MADlD,CAAZ;;AAEAoB,QAAAA,UAAU,GAAGI,KAAK,CAAC,CAAD,CAAlB;AACAH,QAAAA,OAAO,GAAGG,KAAK,CAAC,CAAD,CAAf;AACD,OALD,MAKO;AACLH,QAAAA,OAAO,GAAGd,IAAI,CAACe,CAAD,CAAd;AACD;;AACD,WAAKxC,CAAC,GAAGsC,UAAT,EAAqBtC,CAAC,GAAGuC,OAAzB,EAAkCvC,CAAC,IAAIkB,MAAvC,EAA+C;AAC7C,aAAKL,WAAL,CAAiBT,IAAjB,CAAsBY,eAAe,CAAChB,CAAD,CAArC,EAA0CgB,eAAe,CAAChB,CAAC,GAAG,CAAL,CAAzD;AACD;;AACDiB,MAAAA,GAAG,GAAG,KAAKJ,WAAL,CAAiBhB,MAAvB;AACAyC,MAAAA,UAAU,GAAGb,IAAI,CAACe,CAAD,CAAjB;AACA,WAAKK,UAAL,CAAgBjC,KAAhB,EAAuBK,GAAvB,EAA4B,KAAK9C,eAAjC;AACAyC,MAAAA,KAAK,GAAGK,GAAR;AACD;;AACD,SAAK6B,WAAL,CAAiBvC,QAAjB,EAA2BC,OAA3B;AAED,GA3CD,MA2CO;AACL,QAAIuC,KAAK,GAAG,KAAKC,QAAL,CAAc,KAAK3E,KAAnB,EAA0B,KAAKY,QAA/B,EAAyC,KAAKC,QAA9C,EAAwD,KAAKC,UAA7D,CAAZ;AACA,QAAIW,KAAK,GAAGiD,KAAK,CAACjD,KAAN,GAAc,KAAK/B,UAA/B;;AACA,YAAQ+C,YAAR;AACE,WAAK1D,sBAAsB,CAAC6F,KAA5B;AACA,WAAK7F,sBAAsB,CAAC8F,WAA5B;AACElC,QAAAA,eAAe,GAAGT,QAAQ,CAACmB,kBAAT,EAAlB;AACAT,QAAAA,GAAG,GAAGD,eAAe,CAACnB,MAAtB;AACA;;AACF,WAAKzC,sBAAsB,CAACwE,WAA5B;AACEZ,QAAAA,eAAe;AAAG;AAAmCT,QAAAA,QAAD,CAAW4C,eAAX,EAApD;AACA;;AACF,WAAK/F,sBAAsB,CAACgG,MAA5B;AACEpC,QAAAA,eAAe;AAAG;AAA+BT,QAAAA,QAAD,CAAW8C,SAAX,EAAhD;AACA;;AACF,WAAKjG,sBAAsB,CAACyE,iBAA5B;AACEb,QAAAA,eAAe;AAAG;AAAwCT,QAAAA,QAAD,CAAW+C,gBAAX,EAAzD;AACArC,QAAAA,GAAG,GAAGD,eAAe,CAACnB,MAAtB;AACA;;AACF,WAAKzC,sBAAsB,CAAC2E,OAA5B;AACEf,QAAAA,eAAe;AAAG;AAAgCT,QAAAA,QAAD,CAAWgD,oBAAX,EAAjD;;AACA,YAAI,CAAC5C,SAAS,CAAC6C,QAAX,IAAuBxC,eAAe,CAAC,CAAD,CAAf,GAAqB,KAAKlD,UAA1B,GAAuCgC,KAAlE,EAAyE;AACvE;AACD;;AACDoB,QAAAA,MAAM,GAAG,CAAT;AACA;;AACF,WAAK9D,sBAAsB,CAAC6E,aAA5B;AACE,YAAIwB,cAAc;AAAG;AAAqClD,QAAAA,QAAD,CAAWmD,qBAAX,EAAzD;AACA1C,QAAAA,eAAe,GAAG,EAAlB;;AACA,aAAKhB,CAAC,GAAG,CAAJ,EAAOmB,EAAE,GAAGsC,cAAc,CAAC5D,MAAhC,EAAwCG,CAAC,GAAGmB,EAA5C,EAAgDnB,CAAC,IAAI,CAArD,EAAwD;AACtD,cAAIW,SAAS,CAAC6C,QAAV,IAAsBC,cAAc,CAACzD,CAAC,GAAG,CAAL,CAAd,GAAwB,KAAKlC,UAA7B,IAA2CgC,KAArE,EAA4E;AAC1EkB,YAAAA,eAAe,CAACZ,IAAhB,CAAqBqD,cAAc,CAACzD,CAAD,CAAnC,EAAwCyD,cAAc,CAACzD,CAAC,GAAG,CAAL,CAAtD;AACD;AACF;;AACDiB,QAAAA,GAAG,GAAGD,eAAe,CAACnB,MAAtB;;AACA,YAAIoB,GAAG,IAAI,CAAX,EAAc;AACZ;AACD;;AACD;;AACF;AApCF;;AAsCAA,IAAAA,GAAG,GAAG,KAAK0C,qBAAL,CAA2B3C,eAA3B,EAA4C,CAA5C,EAA+CC,GAA/C,EAAoDC,MAApD,EAA4D,KAA5D,EAAmE,KAAnE,CAAN;AACA,SAAKkB,aAAL,CAAmB7B,QAAnB,EAA6BC,OAA7B;;AACA,QAAIG,SAAS,CAACiD,cAAV,IAA4BjD,SAAS,CAACkD,gBAA1C,EAA4D;AAC1D,WAAKC,kBAAL,CAAwBnD,SAAS,CAACiD,cAAlC,EAAkDjD,SAAS,CAACkD,gBAA5D;AACA,WAAKE,eAAL,CAAqB,KAAKC,KAA1B,EAAiC,KAAKC,SAAtC,EAAiD1D,QAAjD;AACA,WAAK2D,iBAAL,CAAuB,KAAKF,KAA5B,EAAmC,KAAKG,WAAxC;AACD;;AACD,SAAKC,cAAL,CAAoBrB,KAApB,EAA2BnC,KAA3B,EAAkCK,GAAlC;AACA,SAAK6B,WAAL,CAAiBvC,QAAjB,EAA2BC,OAA3B;AACD;AACF,CA9GD;AAiHA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA7C,6BAA6B,CAAC0C,SAA9B,CAAwC2C,QAAxC,GAAmD,UAASqB,IAAT,EAAeC,OAAf,EAAwBC,OAAxB,EAAiCC,SAAjC,EAA4C;AAC7F,MAAIzB,KAAJ;AACA,MAAI0B,GAAG,GAAGD,SAAS,GAAGF,OAAZ,GAAsBD,IAAtB,GAA6BE,OAA7B,GAAuC,KAAKxG,UAAtD;AAEA,MAAIsB,UAAU,GAAG/B,kBAAkB,CAAC+B,UAApC;;AACA,MAAI,CAACA,UAAU,CAACqF,WAAX,CAAuBD,GAAvB,CAAL,EAAkC;AAChC,QAAI/D,WAAW,GAAG8D,SAAS,GAAG,KAAK1F,YAAL,CAAkB0F,SAAlB,KAAgC,KAAK3F,gBAAxC,GAA2D,IAAtF;AACA,QAAI4B,SAAS,GAAG8D,OAAO,GAAG,KAAK3F,UAAL,CAAgB2F,OAAhB,KAA4B,KAAK5F,cAApC,GAAqD,IAA5E;AACA,QAAIgC,SAAS,GAAG,KAAK3B,UAAL,CAAgBsF,OAAhB,KAA4B,KAAKvF,UAAjD;AACA,QAAIhB,UAAU,GAAG,KAAKA,UAAtB;AACA,QAAI4G,KAAK,GAAGhE,SAAS,CAACgE,KAAV,GAAkB5G,UAA9B;AACA,QAAI6G,KAAK,GAAInH,kBAAkB,CAACoH,UAAnB,CAA8BlE,SAAS,CAAC0B,SAAV,IAAuB/E,kBAAkB,CAACwH,gBAAxE,CAAb;AACA,QAAIC,WAAW,GAAGP,SAAS,IAAI9D,WAAW,CAACsE,SAAzB,GAAqCtE,WAAW,CAACsE,SAAjD,GAA6D,CAA/E;AAEA,QAAItF,KAAK,GAAG2E,IAAI,CAACY,KAAL,CAAW,IAAX,CAAZ;AACA,QAAIrF,QAAQ,GAAGF,KAAK,CAACG,MAArB;AACA,QAAIF,MAAM,GAAG,EAAb;;AACA,QAAIG,KAAK,GAAGnC,6BAA6B,CAAC6B,iBAA9B,CAAgDmB,SAAS,CAAClB,IAA1D,EAAgEC,KAAhE,EAAuEC,MAAvE,CAAZ;;AACA,QAAIuF,UAAU,GAAG5H,kBAAkB,CAAC6H,iBAAnB,CAAqCxE,SAAS,CAAClB,IAA/C,CAAjB;;AACA,QAAI2F,MAAM,GAAGF,UAAU,GAAGtF,QAA1B;AACA,QAAIyF,WAAW,GAAIvF,KAAK,GAAGiF,WAA3B;;AACA,QAAIO,OAAO,GAAGrI,QAAQ,CAACsI,qBAAT,CACVrF,IAAI,CAACsF,IAAL,CAAUH,WAAW,GAAGV,KAAxB,CADU,EAEVzE,IAAI,CAACsF,IAAL,CAAU,CAACJ,MAAM,GAAGL,WAAV,IAAyBJ,KAAnC,CAFU,CAAd;;AAGA5B,IAAAA,KAAK,GAAGuC,OAAO,CAACG,MAAhB;AACApG,IAAAA,UAAU,CAACqG,GAAX,CAAejB,GAAf,EAAoB1B,KAApB;;AACA,QAAI4B,KAAK,IAAI,CAAb,EAAgB;AACdW,MAAAA,OAAO,CAACX,KAAR,CAAcA,KAAd,EAAqBA,KAArB;AACD;;AACDW,IAAAA,OAAO,CAAC7F,IAAR,GAAekB,SAAS,CAAClB,IAAzB;;AACA,QAAI+E,SAAJ,EAAe;AACbc,MAAAA,OAAO,CAACK,WAAR,GAAsBjF,WAAW,CAACiF,WAAlC;AACAL,MAAAA,OAAO,CAACN,SAAR,GAAoBD,WAAW,IAAI1H,QAAQ,CAACuI,MAAT,GAAkBjB,KAAlB,GAA0B,CAA9B,CAA/B;AACAW,MAAAA,OAAO,CAACO,OAAR,GAAkBnF,WAAW,CAACmF,OAA9B;AACAP,MAAAA,OAAO,CAACQ,QAAR,GAAmBpF,WAAW,CAACoF,QAA/B;AACAR,MAAAA,OAAO,CAACS,UAAR,GAAqBrF,WAAW,CAACqF,UAAjC;;AACA,UAAI1I,QAAQ,CAAC2I,gBAAT,IAA6BtF,WAAW,CAACuF,QAAZ,CAAqBpG,MAAtD,EAA8D;AAC5DyF,QAAAA,OAAO,CAACY,WAAR,CAAoBxF,WAAW,CAACuF,QAAhC;AACAX,QAAAA,OAAO,CAACa,cAAR,GAAyBzF,WAAW,CAACyF,cAArC;AACD;AACF;;AACD,QAAI5B,OAAJ,EAAa;AACXe,MAAAA,OAAO,CAACc,SAAR,GAAoB3F,SAAS,CAAC2F,SAA9B;AACD;;AACDd,IAAAA,OAAO,CAACe,YAAR,GAAuB,QAAvB;AACAf,IAAAA,OAAO,CAACjD,SAAR,GAAoB,QAApB;AACA,QAAIiE,SAAS,GAAI,MAAM1B,KAAvB;AACA,QAAI2B,CAAC,GAAG3B,KAAK,GAAG7B,KAAK,CAACjD,KAAd,GAAsB6E,KAAtB,GAA8B2B,SAAS,GAAGvB,WAAlD;AACA,QAAI/E,CAAJ;;AACA,QAAIwE,SAAJ,EAAe;AACb,WAAKxE,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGJ,QAAhB,EAA0B,EAAEI,CAA5B,EAA+B;AAC7BsF,QAAAA,OAAO,CAACkB,UAAR,CAAmB9G,KAAK,CAACM,CAAD,CAAxB,EAA6BuG,CAAC,GAAGD,SAAS,GAAG3G,MAAM,CAACK,CAAD,CAAnD,EAAwD,OAAO+E,WAAW,GAAGG,UAArB,IAAmClF,CAAC,GAAGkF,UAA/F;AACD;AACF;;AACD,QAAIX,OAAJ,EAAa;AACX,WAAKvE,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGJ,QAAhB,EAA0B,EAAEI,CAA5B,EAA+B;AAC7BsF,QAAAA,OAAO,CAACmB,QAAR,CAAiB/G,KAAK,CAACM,CAAD,CAAtB,EAA2BuG,CAAC,GAAGD,SAAS,GAAG3G,MAAM,CAACK,CAAD,CAAjD,EAAsD,OAAO+E,WAAW,GAAGG,UAArB,IAAmClF,CAAC,GAAGkF,UAA7F;AACD;AACF;AACF;;AACD,SAAO7F,UAAU,CAACqH,GAAX,CAAejC,GAAf,CAAP;AACD,CA7DD;AAgEA;AACA;AACA;AACA;AACA;AACA;;;AACA9G,6BAA6B,CAAC0C,SAA9B,CAAwC+D,cAAxC,GAAyD,UAASrB,KAAT,EAAgBnC,KAAhB,EAAuBK,GAAvB,EAA4B;AACnF,MAAIN,SAAS,GAAG,KAAK5B,UAArB;AACA,MAAI2B,WAAW,GAAG,KAAK7B,gBAAvB;AACA,MAAId,UAAU,GAAG,KAAKA,UAAtB;AACA,MAAI6G,KAAK,GAAGnH,kBAAkB,CAACoH,UAAnB,CAA8BlE,SAAS,CAAC0B,SAAV,IAAuB/E,kBAAkB,CAACwH,gBAAxE,CAAZ;AACA,MAAI6B,QAAQ,GAAGlJ,kBAAkB,CAACoH,UAAnB,CAA8BlE,SAAS,CAAC0F,YAAxC,CAAf;AACA,MAAItB,WAAW,GAAGrE,WAAW,IAAIA,WAAW,CAACsE,SAA3B,GAAuCtE,WAAW,CAACsE,SAAnD,GAA+D,CAAjF;AAEA,MAAI4B,OAAO,GAAGhC,KAAK,GAAG7B,KAAK,CAACjD,KAAd,GAAsB/B,UAAtB,GAAmC,KAAK,MAAM6G,KAAX,IAAoBG,WAArE;AACA,MAAI8B,OAAO,GAAGF,QAAQ,GAAG5D,KAAK,CAACqC,MAAjB,GAA0BrH,UAA1B,GAAuC,KAAK,MAAM4I,QAAX,IAAuB5B,WAA5E;AACA,OAAK+B,YAAL,CAAkB1G,IAAlB,CAAuB,CAAC7C,8BAA8B,CAACwJ,UAAhC,EAA4CnG,KAA5C,EAAmDK,GAAnD,EACrB8B,KADqB,EACd,CAAC6D,OAAO,GAAG,KAAKtI,YAAhB,IAAgCP,UADlB,EAC8B,CAAC8I,OAAO,GAAG,KAAKtI,YAAhB,IAAgCR,UAD9D,EAErB,KAAKI,eAFgB,EAEC4E,KAAK,CAACqC,MAFP,EAEe,CAFf,EAEkB,CAFlB,EAEqB,CAFrB,EAEwB,KAAK5G,mBAF7B,EAEkD,KAAKE,aAFvD,EAGrB,CAHqB,EAGlB,IAHkB,EAGZqE,KAAK,CAACjD,KAHM,EAIrBa,SAAS,CAACqG,OAAV,IAAqB1J,kBAAkB,CAAC2J,cAAxC,GACE3J,kBAAkB,CAAC2J,cADrB,GACsCtG,SAAS,CAACqG,OAAV,CAAkBE,GAAlB,CAAsB,UAASC,CAAT,EAAY;AACpE,WAAOA,CAAC,GAAGpJ,UAAX;AACD,GAFmC,CALjB,EAQrB,CAAC,CAAC4C,SAAS,CAACiD,cARS,EAQO,CAAC,CAACjD,SAAS,CAACkD,gBARnB,CAAvB;AAUA,OAAKuD,wBAAL,CAA8BhH,IAA9B,CAAmC,CAAC7C,8BAA8B,CAACwJ,UAAhC,EAA4CnG,KAA5C,EAAmDK,GAAnD,EACjC8B,KADiC,EAC1B,CAAC6D,OAAO,GAAG,KAAKtI,YAAhB,IAAgCP,UADN,EACkB,CAAC8I,OAAO,GAAG,KAAKtI,YAAhB,IAAgCR,UADlD,EAEjC,KAAKI,eAF4B,EAEX4E,KAAK,CAACqC,MAFK,EAEG,CAFH,EAEM,CAFN,EAES,CAFT,EAEY,KAAK5G,mBAFjB,EAEsC,KAAKE,aAF3C,EAGjC,IAAIX,UAH6B,EAGjB,IAHiB,EAGXgF,KAAK,CAACjD,KAHK,EAGEa,SAAS,CAACqG,OAHZ,EAIjC,CAAC,CAACrG,SAAS,CAACiD,cAJqB,EAIL,CAAC,CAACjD,SAAS,CAACkD,gBAJP,CAAnC;AAMD,CA1BD;AA6BA;AACA;AACA;AACA;AACA;AACA;;;AACAlG,6BAA6B,CAAC0C,SAA9B,CAAwCwC,UAAxC,GAAqD,UAASjC,KAAT,EAAgBK,GAAhB,EAAqBoG,cAArB,EAAqC;AACxF,MAAI3G,WAAW,GAAG,KAAK7B,gBAAvB;AACA,MAAI8B,SAAS,GAAG,KAAK5B,UAArB;AACA,MAAI0B,SAAS,GAAG,KAAK9B,cAArB;AAEA,MAAI6F,SAAS,GAAG,KAAKrF,UAArB;;AACA,MAAIuB,WAAJ,EAAiB;AACf,QAAI,EAAE8D,SAAS,IAAI,KAAK1F,YAApB,CAAJ,EAAuC;AACrC,WAAKA,YAAL,CAAkB0F,SAAlB;AAA+B;AAAqC;AAClEmB,QAAAA,WAAW,EAAEjF,WAAW,CAACiF,WADyC;AAElEE,QAAAA,OAAO,EAAEnF,WAAW,CAACmF,OAF6C;AAGlEM,QAAAA,cAAc,EAAEzF,WAAW,CAACyF,cAHsC;AAIlEnB,QAAAA,SAAS,EAAEtE,WAAW,CAACsE,SAJ2C;AAKlEc,QAAAA,QAAQ,EAAEpF,WAAW,CAACoF,QAL4C;AAMlEC,QAAAA,UAAU,EAAErF,WAAW,CAACqF,UAN0C;AAOlEE,QAAAA,QAAQ,EAAEvF,WAAW,CAACuF;AAP4C,OAApE;AASD;AACF;;AACD,MAAI3B,OAAO,GAAG,KAAKrF,QAAnB;;AACA,MAAI,EAAE,KAAKA,QAAL,IAAiB,KAAKD,UAAxB,CAAJ,EAAyC;AACvC,SAAKA,UAAL,CAAgB,KAAKC,QAArB;AAAiC;AAAmC;AAClEQ,MAAAA,IAAI,EAAEkB,SAAS,CAAClB,IADkD;AAElE4C,MAAAA,SAAS,EAAE1B,SAAS,CAAC0B,SAAV,IAAuB/E,kBAAkB,CAACwH,gBAFa;AAGlEH,MAAAA,KAAK,EAAEhE,SAAS,CAACgE;AAHiD,KAApE;AAKD;;AACD,MAAIJ,OAAO,GAAG,KAAKrF,QAAnB;;AACA,MAAIuB,SAAJ,EAAe;AACb,QAAI,EAAE8D,OAAO,IAAI,KAAK3F,UAAlB,CAAJ,EAAmC;AACjC,WAAKA,UAAL,CAAgB2F,OAAhB;AAA2B;AAAmC;AAC5D6B,QAAAA,SAAS,EAAE3F,SAAS,CAAC2F;AADuC,OAA9D;AAGD;AACF;;AAED,MAAIrI,UAAU,GAAG,KAAKA,UAAtB;AACA,MAAI4I,QAAQ,GAAGlJ,kBAAkB,CAACoH,UAAnB,CAA8BlE,SAAS,CAAC0F,YAAxC,CAAf;AAEA,MAAIiB,OAAO,GAAG,KAAK/I,YAAL,GAAoBR,UAAlC;AACA,MAAIsG,IAAI,GAAG,KAAKhG,KAAhB;AACA,MAAIoB,IAAI,GAAGkB,SAAS,CAAClB,IAArB;AACA,MAAI8H,SAAS,GAAG5G,SAAS,CAACgE,KAA1B;AACA,MAAII,WAAW,GAAGrE,WAAW,GAAGA,WAAW,CAACsE,SAAZ,GAAwBuC,SAAxB,GAAoC,CAAvC,GAA2C,CAAxE;AACA,MAAI5H,MAAM,GAAG,KAAKP,OAAL,CAAaK,IAAb,CAAb;;AACA,MAAI,CAACE,MAAL,EAAa;AACX,SAAKP,OAAL,CAAaK,IAAb,IAAqBE,MAAM,GAAG,EAA9B;AACD;;AACD,OAAKmH,YAAL,CAAkB1G,IAAlB,CAAuB,CAAC7C,8BAA8B,CAACiK,UAAhC,EACrB5G,KADqB,EACdK,GADc,EACT0F,QADS,EACCU,cADD,EAErB1G,SAAS,CAAC6C,QAFW,EAEDe,OAFC,EAEQ5D,SAAS,CAACiC,QAFlB,EAGrB,UAASyB,IAAT,EAAe;AACb,QAAIvE,KAAK,GAAGH,MAAM,CAAC0E,IAAD,CAAlB;;AACA,QAAI,CAACvE,KAAL,EAAY;AACVA,MAAAA,KAAK,GAAGH,MAAM,CAAC0E,IAAD,CAAN,GAAe/G,kBAAkB,CAAC2C,gBAAnB,CAAoCR,IAApC,EAA0C4E,IAA1C,CAAvB;AACD;;AACD,WAAOvE,KAAK,GAAGyH,SAAR,GAAoBxJ,UAA3B;AACD,GAToB,EAUrBuJ,OAVqB,EAUZ9C,SAVY,EAUDO,WAAW,GAAGhH,UAVb,EAUyBsG,IAVzB,EAU+BC,OAV/B,EAUwC,CAVxC,CAAvB;AAYA,OAAK8C,wBAAL,CAA8BhH,IAA9B,CAAmC,CAAC7C,8BAA8B,CAACiK,UAAhC,EACjC5G,KADiC,EAC1BK,GAD0B,EACrB0F,QADqB,EACXU,cADW,EAEjC1G,SAAS,CAAC6C,QAFuB,EAEbe,OAFa,EAEJ5D,SAAS,CAACiC,QAFN,EAGjC,UAASyB,IAAT,EAAe;AACb,QAAIvE,KAAK,GAAGH,MAAM,CAAC0E,IAAD,CAAlB;;AACA,QAAI,CAACvE,KAAL,EAAY;AACVA,MAAAA,KAAK,GAAGH,MAAM,CAAC0E,IAAD,CAAN,GAAe/G,kBAAkB,CAAC2C,gBAAnB,CAAoCR,IAApC,EAA0C4E,IAA1C,CAAvB;AACD;;AACD,WAAOvE,KAAK,GAAGyH,SAAf;AACD,GATgC,EAUjCD,OAViC,EAUxB9C,SAVwB,EAUbO,WAVa,EAUAV,IAVA,EAUMC,OAVN,EAUe,IAAIvG,UAVnB,CAAnC;AAYD,CAxED;AA2EA;AACA;AACA;;;AACAJ,6BAA6B,CAAC0C,SAA9B,CAAwCoH,YAAxC,GAAuD,UAASC,SAAT,EAAoBL,cAApB,EAAoC;AACzF,MAAI1G,SAAJ,EAAeF,SAAf,EAA0BC,WAA1B;;AACA,MAAI,CAACgH,SAAL,EAAgB;AACd,SAAKrJ,KAAL,GAAa,EAAb;AACD,GAFD,MAEO;AACL,SAAKF,eAAL;AAAuB;AAAkCkJ,IAAAA,cAAzD;AAEA,QAAIM,aAAa,GAAGD,SAAS,CAACE,OAAV,EAApB;;AACA,QAAI,CAACD,aAAL,EAAoB;AAClBlH,MAAAA,SAAS,GAAG,KAAK9B,cAAL,GAAsB,IAAlC;AACD,KAFD,MAEO;AACL8B,MAAAA,SAAS,GAAG,KAAK9B,cAAjB;;AACA,UAAI,CAAC8B,SAAL,EAAgB;AACdA,QAAAA,SAAS,GAAG,KAAK9B,cAAL;AAAsB;AAAmC,UAArE;AACD;;AACD8B,MAAAA,SAAS,CAAC2F,SAAV,GAAsBpJ,cAAc,CAAC6K,WAAf,CAClBF,aAAa,CAACG,QAAd,MAA4BxK,kBAAkB,CAACyK,gBAD7B,CAAtB;AAED;;AAED,QAAIC,eAAe,GAAGN,SAAS,CAACO,SAAV,EAAtB;;AACA,QAAI,CAACD,eAAL,EAAsB;AACpBtH,MAAAA,WAAW,GAAG,KAAK7B,gBAAL,GAAwB,IAAtC;AACD,KAFD,MAEO;AACL6B,MAAAA,WAAW,GAAG,KAAK7B,gBAAnB;;AACA,UAAI,CAAC6B,WAAL,EAAkB;AAChBA,QAAAA,WAAW,GAAG,KAAK7B,gBAAL;AAAwB;AAAqC,UAA3E;AACD;;AACD,UAAIoH,QAAQ,GAAG+B,eAAe,CAACE,WAAhB,EAAf;AACA,UAAI/B,cAAc,GAAG6B,eAAe,CAACG,iBAAhB,EAArB;AACA,UAAInD,SAAS,GAAGgD,eAAe,CAACI,QAAhB,EAAhB;AACA,UAAIrC,UAAU,GAAGiC,eAAe,CAACK,aAAhB,EAAjB;AACA3H,MAAAA,WAAW,CAACmF,OAAZ,GAAsBmC,eAAe,CAACM,UAAhB,MAAgChL,kBAAkB,CAACiL,cAAzE;AACA7H,MAAAA,WAAW,CAACuF,QAAZ,GAAuBA,QAAQ,GAAGA,QAAQ,CAACjE,KAAT,EAAH,GAAsB1E,kBAAkB,CAACkL,eAAxE;AACA9H,MAAAA,WAAW,CAACyF,cAAZ,GACIA,cAAc,KAAK1H,SAAnB,GAA+BnB,kBAAkB,CAACmL,qBAAlD,GAA0EtC,cAD9E;AAEAzF,MAAAA,WAAW,CAACoF,QAAZ,GAAuBkC,eAAe,CAACU,WAAhB,MAAiCpL,kBAAkB,CAACqL,eAA3E;AACAjI,MAAAA,WAAW,CAACsE,SAAZ,GACIA,SAAS,KAAKvG,SAAd,GAA0BnB,kBAAkB,CAACsL,gBAA7C,GAAgE5D,SADpE;AAEAtE,MAAAA,WAAW,CAACqF,UAAZ,GACIA,UAAU,KAAKtH,SAAf,GAA2BnB,kBAAkB,CAACuL,iBAA9C,GAAkE9C,UADtE;AAEArF,MAAAA,WAAW,CAACiF,WAAZ,GAA0B3I,cAAc,CAAC6K,WAAf,CACtBG,eAAe,CAACF,QAAhB,MAA8BxK,kBAAkB,CAACwL,kBAD3B,CAA1B;AAED;;AAEDnI,IAAAA,SAAS,GAAG,KAAK5B,UAAjB;;AACA,QAAIU,IAAI,GAAGiI,SAAS,CAACqB,OAAV,MAAuBzL,kBAAkB,CAAC0L,WAArD;;AACA1L,IAAAA,kBAAkB,CAAC2L,SAAnB,CAA6BxJ,IAA7B;;AACA,QAAI8H,SAAS,GAAGG,SAAS,CAACwB,QAAV,EAAhB;AACAvI,IAAAA,SAAS,CAAC6C,QAAV,GAAqBkE,SAAS,CAACyB,WAAV,EAArB;AACAxI,IAAAA,SAAS,CAAClB,IAAV,GAAiBA,IAAjB;AACAkB,IAAAA,SAAS,CAACiC,QAAV,GAAqB8E,SAAS,CAAC0B,WAAV,EAArB;AACAzI,IAAAA,SAAS,CAACS,SAAV,GAAsBsG,SAAS,CAAC2B,YAAV,EAAtB;AACA1I,IAAAA,SAAS,CAAC0B,SAAV,GAAsBqF,SAAS,CAAC4B,YAAV,EAAtB;AACA3I,IAAAA,SAAS,CAAC0F,YAAV,GAAyBqB,SAAS,CAAC6B,eAAV,MAA+BjM,kBAAkB,CAACkM,mBAA3E;AACA7I,IAAAA,SAAS,CAACiD,cAAV,GAA2B8D,SAAS,CAAC+B,iBAAV,EAA3B;AACA9I,IAAAA,SAAS,CAACkD,gBAAV,GAA6B6D,SAAS,CAACgC,mBAAV,EAA7B;AACA/I,IAAAA,SAAS,CAACqG,OAAV,GAAoBU,SAAS,CAACiC,UAAV,MAA0BrM,kBAAkB,CAAC2J,cAAjE;AACAtG,IAAAA,SAAS,CAACgE,KAAV,GAAkB4C,SAAS,KAAK9I,SAAd,GAA0B,CAA1B,GAA8B8I,SAAhD;AAEA,QAAIqC,WAAW,GAAGlC,SAAS,CAACmC,UAAV,EAAlB;AACA,QAAIC,WAAW,GAAGpC,SAAS,CAACqC,UAAV,EAAlB;AACA,QAAIC,kBAAkB,GAAGtC,SAAS,CAACuC,iBAAV,EAAzB;AACA,QAAIC,YAAY,GAAGxC,SAAS,CAACyC,WAAV,EAAnB;AACA,SAAK9L,KAAL,GAAaqJ,SAAS,CAAC0C,OAAV,MAAuB,EAApC;AACA,SAAK9L,YAAL,GAAoBsL,WAAW,KAAKnL,SAAhB,GAA4B,CAA5B,GAAgCmL,WAApD;AACA,SAAKrL,YAAL,GAAoBuL,WAAW,KAAKrL,SAAhB,GAA4B,CAA5B,GAAgCqL,WAApD;AACA,SAAKtL,mBAAL,GAA2BwL,kBAAkB,KAAKvL,SAAvB,GAAmC,KAAnC,GAA2CuL,kBAAtE;AACA,SAAKtL,aAAL,GAAqBwL,YAAY,KAAKzL,SAAjB,GAA6B,CAA7B,GAAiCyL,YAAtD;AAEA,SAAK/K,UAAL,GAAkBuB,WAAW,GAC3B,CAAC,OAAOA,WAAW,CAACiF,WAAnB,IAAkC,QAAlC,GAA6CjF,WAAW,CAACiF,WAAzD,GAAuE5I,IAAI,CAACsN,MAAL,CAAY3J,WAAW,CAACiF,WAAxB,CAAxE,IACAjF,WAAW,CAACmF,OADZ,GACsBnF,WAAW,CAACyF,cADlC,GACmD,GADnD,GACyDzF,WAAW,CAACsE,SADrE,GAEAtE,WAAW,CAACoF,QAFZ,GAEuBpF,WAAW,CAACqF,UAFnC,GAEgD,GAFhD,GAEsDrF,WAAW,CAACuF,QAAZ,CAAqBqE,IAArB,EAFtD,GAEoF,GAHzD,GAI3B,EAJF;AAKA,SAAKrL,QAAL,GAAgB0B,SAAS,CAAClB,IAAV,GAAiBkB,SAAS,CAACgE,KAA3B,IAAoChE,SAAS,CAAC0B,SAAV,IAAuB,GAA3D,CAAhB;AACA,SAAKnD,QAAL,GAAgBuB,SAAS,GACtB,OAAOA,SAAS,CAAC2F,SAAjB,IAA8B,QAA9B,GAAyC3F,SAAS,CAAC2F,SAAnD,GAAgE,MAAMrJ,IAAI,CAACsN,MAAL,CAAY5J,SAAS,CAAC2F,SAAtB,CADhD,GAEvB,EAFF;AAGD;AACF,CA/ED;;AAgFA,eAAezI,6BAAf","sourcesContent":["import _ol_ from '../../index.js';\nimport _ol_colorlike_ from '../../colorlike.js';\nimport _ol_dom_ from '../../dom.js';\nimport _ol_extent_ from '../../extent.js';\nimport _ol_geom_flat_straightchunk_ from '../../geom/flat/straightchunk.js';\nimport _ol_geom_GeometryType_ from '../../geom/geometrytype.js';\nimport _ol_has_ from '../../has.js';\nimport _ol_render_canvas_ from '../canvas.js';\nimport _ol_render_canvas_Instruction_ from '../canvas/instruction.js';\nimport _ol_render_canvas_Replay_ from '../canvas/replay.js';\nimport _ol_render_replay_ from '../replay.js';\nimport _ol_style_TextPlacement_ from '../../style/textplacement.js';\n\n/**\n * @constructor\n * @extends {ol.render.canvas.Replay}\n * @param {number} tolerance Tolerance.\n * @param {ol.Extent} maxExtent Maximum extent.\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {boolean} overlaps The replay can have overlapping geometries.\n * @param {?} declutterTree Declutter tree.\n * @struct\n */\nvar _ol_render_canvas_TextReplay_ = function(\n    tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {\n  _ol_render_canvas_Replay_.call(this,\n      tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);\n\n  /**\n   * @private\n   * @type {ol.DeclutterGroup}\n   */\n  this.declutterGroup_;\n\n  /**\n   * @private\n   * @type {Array.<HTMLCanvasElement>}\n   */\n  this.labels_ = null;\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.text_ = '';\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.textOffsetX_ = 0;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.textOffsetY_ = 0;\n\n  /**\n   * @private\n   * @type {boolean|undefined}\n   */\n  this.textRotateWithView_ = undefined;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.textRotation_ = 0;\n\n  /**\n   * @private\n   * @type {?ol.CanvasFillState}\n   */\n  this.textFillState_ = null;\n\n  /**\n   * @type {Object.<string, ol.CanvasFillState>}\n   */\n  this.fillStates = {};\n\n  /**\n   * @private\n   * @type {?ol.CanvasStrokeState}\n   */\n  this.textStrokeState_ = null;\n\n  /**\n   * @type {Object.<string, ol.CanvasStrokeState>}\n   */\n  this.strokeStates = {};\n\n  /**\n   * @private\n   * @type {ol.CanvasTextState}\n   */\n  this.textState_ = /** @type {ol.CanvasTextState} */ ({});\n\n  /**\n   * @type {Object.<string, ol.CanvasTextState>}\n   */\n  this.textStates = {};\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.textKey_ = '';\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.fillKey_ = '';\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.strokeKey_ = '';\n\n  /**\n   * @private\n   * @type {Object.<string, Object.<string, number>>}\n   */\n  this.widths_ = {};\n\n  var labelCache = _ol_render_canvas_.labelCache;\n  labelCache.prune();\n\n};\n\n_ol_.inherits(_ol_render_canvas_TextReplay_, _ol_render_canvas_Replay_);\n\n\n/**\n * @param {string} font Font to use for measuring.\n * @param {Array.<string>} lines Lines to measure.\n * @param {Array.<number>} widths Array will be populated with the widths of\n * each line.\n * @return {number} Width of the whole text.\n */\n_ol_render_canvas_TextReplay_.measureTextWidths = function(font, lines, widths) {\n  var numLines = lines.length;\n  var width = 0;\n  var currentWidth, i;\n  for (i = 0; i < numLines; ++i) {\n    currentWidth = _ol_render_canvas_.measureTextWidth(font, lines[i]);\n    width = Math.max(width, currentWidth);\n    widths.push(currentWidth);\n  }\n  return width;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_render_canvas_TextReplay_.prototype.drawText = function(geometry, feature) {\n  var fillState = this.textFillState_;\n  var strokeState = this.textStrokeState_;\n  var textState = this.textState_;\n  if (this.text_ === '' || !textState || (!fillState && !strokeState)) {\n    return;\n  }\n\n  var begin = this.coordinates.length;\n\n  var geometryType = geometry.getType();\n  var flatCoordinates = null;\n  var end = 2;\n  var stride = 2;\n  var i, ii;\n\n  if (textState.placement === _ol_style_TextPlacement_.LINE) {\n    if (!_ol_extent_.intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {\n      return;\n    }\n    var ends;\n    flatCoordinates = geometry.getFlatCoordinates();\n    stride = geometry.getStride();\n    if (geometryType == _ol_geom_GeometryType_.LINE_STRING) {\n      ends = [flatCoordinates.length];\n    } else if (geometryType == _ol_geom_GeometryType_.MULTI_LINE_STRING) {\n      ends = geometry.getEnds();\n    } else if (geometryType == _ol_geom_GeometryType_.POLYGON) {\n      ends = geometry.getEnds().slice(0, 1);\n    } else if (geometryType == _ol_geom_GeometryType_.MULTI_POLYGON) {\n      var endss = geometry.getEndss();\n      ends = [];\n      for (i = 0, ii = endss.length; i < ii; ++i) {\n        ends.push(endss[i][0]);\n      }\n    }\n    this.beginGeometry(geometry, feature);\n    var textAlign = textState.textAlign;\n    var flatOffset = 0;\n    var flatEnd;\n    for (var o = 0, oo = ends.length; o < oo; ++o) {\n      if (textAlign == undefined) {\n        var range = _ol_geom_flat_straightchunk_.lineString(\n            textState.maxAngle, flatCoordinates, flatOffset, ends[o], stride);\n        flatOffset = range[0];\n        flatEnd = range[1];\n      } else {\n        flatEnd = ends[o];\n      }\n      for (i = flatOffset; i < flatEnd; i += stride) {\n        this.coordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);\n      }\n      end = this.coordinates.length;\n      flatOffset = ends[o];\n      this.drawChars_(begin, end, this.declutterGroup_);\n      begin = end;\n    }\n    this.endGeometry(geometry, feature);\n\n  } else {\n    var label = this.getImage(this.text_, this.textKey_, this.fillKey_, this.strokeKey_);\n    var width = label.width / this.pixelRatio;\n    switch (geometryType) {\n      case _ol_geom_GeometryType_.POINT:\n      case _ol_geom_GeometryType_.MULTI_POINT:\n        flatCoordinates = geometry.getFlatCoordinates();\n        end = flatCoordinates.length;\n        break;\n      case _ol_geom_GeometryType_.LINE_STRING:\n        flatCoordinates = /** @type {ol.geom.LineString} */ (geometry).getFlatMidpoint();\n        break;\n      case _ol_geom_GeometryType_.CIRCLE:\n        flatCoordinates = /** @type {ol.geom.Circle} */ (geometry).getCenter();\n        break;\n      case _ol_geom_GeometryType_.MULTI_LINE_STRING:\n        flatCoordinates = /** @type {ol.geom.MultiLineString} */ (geometry).getFlatMidpoints();\n        end = flatCoordinates.length;\n        break;\n      case _ol_geom_GeometryType_.POLYGON:\n        flatCoordinates = /** @type {ol.geom.Polygon} */ (geometry).getFlatInteriorPoint();\n        if (!textState.overflow && flatCoordinates[2] / this.resolution < width) {\n          return;\n        }\n        stride = 3;\n        break;\n      case _ol_geom_GeometryType_.MULTI_POLYGON:\n        var interiorPoints = /** @type {ol.geom.MultiPolygon} */ (geometry).getFlatInteriorPoints();\n        flatCoordinates = [];\n        for (i = 0, ii = interiorPoints.length; i < ii; i += 3) {\n          if (textState.overflow || interiorPoints[i + 2] / this.resolution >= width) {\n            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\n          }\n        }\n        end = flatCoordinates.length;\n        if (end == 0) {\n          return;\n        }\n        break;\n      default:\n    }\n    end = this.appendFlatCoordinates(flatCoordinates, 0, end, stride, false, false);\n    this.beginGeometry(geometry, feature);\n    if (textState.backgroundFill || textState.backgroundStroke) {\n      this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);\n      this.updateFillStyle(this.state, this.applyFill, geometry);\n      this.updateStrokeStyle(this.state, this.applyStroke);\n    }\n    this.drawTextImage_(label, begin, end);\n    this.endGeometry(geometry, feature);\n  }\n};\n\n\n/**\n * @param {string} text Text.\n * @param {string} textKey Text style key.\n * @param {string} fillKey Fill style key.\n * @param {string} strokeKey Stroke style key.\n * @return {HTMLCanvasElement} Image.\n */\n_ol_render_canvas_TextReplay_.prototype.getImage = function(text, textKey, fillKey, strokeKey) {\n  var label;\n  var key = strokeKey + textKey + text + fillKey + this.pixelRatio;\n\n  var labelCache = _ol_render_canvas_.labelCache;\n  if (!labelCache.containsKey(key)) {\n    var strokeState = strokeKey ? this.strokeStates[strokeKey] || this.textStrokeState_ : null;\n    var fillState = fillKey ? this.fillStates[fillKey] || this.textFillState_ : null;\n    var textState = this.textStates[textKey] || this.textState_;\n    var pixelRatio = this.pixelRatio;\n    var scale = textState.scale * pixelRatio;\n    var align =  _ol_render_replay_.TEXT_ALIGN[textState.textAlign || _ol_render_canvas_.defaultTextAlign];\n    var strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;\n\n    var lines = text.split('\\n');\n    var numLines = lines.length;\n    var widths = [];\n    var width = _ol_render_canvas_TextReplay_.measureTextWidths(textState.font, lines, widths);\n    var lineHeight = _ol_render_canvas_.measureTextHeight(textState.font);\n    var height = lineHeight * numLines;\n    var renderWidth = (width + strokeWidth);\n    var context = _ol_dom_.createCanvasContext2D(\n        Math.ceil(renderWidth * scale),\n        Math.ceil((height + strokeWidth) * scale));\n    label = context.canvas;\n    labelCache.set(key, label);\n    if (scale != 1) {\n      context.scale(scale, scale);\n    }\n    context.font = textState.font;\n    if (strokeKey) {\n      context.strokeStyle = strokeState.strokeStyle;\n      context.lineWidth = strokeWidth * (_ol_has_.SAFARI ? scale : 1);\n      context.lineCap = strokeState.lineCap;\n      context.lineJoin = strokeState.lineJoin;\n      context.miterLimit = strokeState.miterLimit;\n      if (_ol_has_.CANVAS_LINE_DASH && strokeState.lineDash.length) {\n        context.setLineDash(strokeState.lineDash);\n        context.lineDashOffset = strokeState.lineDashOffset;\n      }\n    }\n    if (fillKey) {\n      context.fillStyle = fillState.fillStyle;\n    }\n    context.textBaseline = 'middle';\n    context.textAlign = 'center';\n    var leftRight = (0.5 - align);\n    var x = align * label.width / scale + leftRight * strokeWidth;\n    var i;\n    if (strokeKey) {\n      for (i = 0; i < numLines; ++i) {\n        context.strokeText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);\n      }\n    }\n    if (fillKey) {\n      for (i = 0; i < numLines; ++i) {\n        context.fillText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);\n      }\n    }\n  }\n  return labelCache.get(key);\n};\n\n\n/**\n * @private\n * @param {HTMLCanvasElement} label Label.\n * @param {number} begin Begin.\n * @param {number} end End.\n */\n_ol_render_canvas_TextReplay_.prototype.drawTextImage_ = function(label, begin, end) {\n  var textState = this.textState_;\n  var strokeState = this.textStrokeState_;\n  var pixelRatio = this.pixelRatio;\n  var align = _ol_render_replay_.TEXT_ALIGN[textState.textAlign || _ol_render_canvas_.defaultTextAlign];\n  var baseline = _ol_render_replay_.TEXT_ALIGN[textState.textBaseline];\n  var strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;\n\n  var anchorX = align * label.width / pixelRatio + 2 * (0.5 - align) * strokeWidth;\n  var anchorY = baseline * label.height / pixelRatio + 2 * (0.5 - baseline) * strokeWidth;\n  this.instructions.push([_ol_render_canvas_Instruction_.DRAW_IMAGE, begin, end,\n    label, (anchorX - this.textOffsetX_) * pixelRatio, (anchorY - this.textOffsetY_) * pixelRatio,\n    this.declutterGroup_, label.height, 1, 0, 0, this.textRotateWithView_, this.textRotation_,\n    1, true, label.width,\n    textState.padding == _ol_render_canvas_.defaultPadding ?\n      _ol_render_canvas_.defaultPadding : textState.padding.map(function(p) {\n        return p * pixelRatio;\n      }),\n    !!textState.backgroundFill, !!textState.backgroundStroke\n  ]);\n  this.hitDetectionInstructions.push([_ol_render_canvas_Instruction_.DRAW_IMAGE, begin, end,\n    label, (anchorX - this.textOffsetX_) * pixelRatio, (anchorY - this.textOffsetY_) * pixelRatio,\n    this.declutterGroup_, label.height, 1, 0, 0, this.textRotateWithView_, this.textRotation_,\n    1 / pixelRatio, true, label.width, textState.padding,\n    !!textState.backgroundFill, !!textState.backgroundStroke\n  ]);\n};\n\n\n/**\n * @private\n * @param {number} begin Begin.\n * @param {number} end End.\n * @param {ol.DeclutterGroup} declutterGroup Declutter group.\n */\n_ol_render_canvas_TextReplay_.prototype.drawChars_ = function(begin, end, declutterGroup) {\n  var strokeState = this.textStrokeState_;\n  var textState = this.textState_;\n  var fillState = this.textFillState_;\n\n  var strokeKey = this.strokeKey_;\n  if (strokeState) {\n    if (!(strokeKey in this.strokeStates)) {\n      this.strokeStates[strokeKey] = /** @type {ol.CanvasStrokeState} */ ({\n        strokeStyle: strokeState.strokeStyle,\n        lineCap: strokeState.lineCap,\n        lineDashOffset: strokeState.lineDashOffset,\n        lineWidth: strokeState.lineWidth,\n        lineJoin: strokeState.lineJoin,\n        miterLimit: strokeState.miterLimit,\n        lineDash: strokeState.lineDash\n      });\n    }\n  }\n  var textKey = this.textKey_;\n  if (!(this.textKey_ in this.textStates)) {\n    this.textStates[this.textKey_] = /** @type {ol.CanvasTextState} */ ({\n      font: textState.font,\n      textAlign: textState.textAlign || _ol_render_canvas_.defaultTextAlign,\n      scale: textState.scale\n    });\n  }\n  var fillKey = this.fillKey_;\n  if (fillState) {\n    if (!(fillKey in this.fillStates)) {\n      this.fillStates[fillKey] = /** @type {ol.CanvasFillState} */ ({\n        fillStyle: fillState.fillStyle\n      });\n    }\n  }\n\n  var pixelRatio = this.pixelRatio;\n  var baseline = _ol_render_replay_.TEXT_ALIGN[textState.textBaseline];\n\n  var offsetY = this.textOffsetY_ * pixelRatio;\n  var text = this.text_;\n  var font = textState.font;\n  var textScale = textState.scale;\n  var strokeWidth = strokeState ? strokeState.lineWidth * textScale / 2 : 0;\n  var widths = this.widths_[font];\n  if (!widths) {\n    this.widths_[font] = widths = {};\n  }\n  this.instructions.push([_ol_render_canvas_Instruction_.DRAW_CHARS,\n    begin, end, baseline, declutterGroup,\n    textState.overflow, fillKey, textState.maxAngle,\n    function(text) {\n      var width = widths[text];\n      if (!width) {\n        width = widths[text] = _ol_render_canvas_.measureTextWidth(font, text);\n      }\n      return width * textScale * pixelRatio;\n    },\n    offsetY, strokeKey, strokeWidth * pixelRatio, text, textKey, 1\n  ]);\n  this.hitDetectionInstructions.push([_ol_render_canvas_Instruction_.DRAW_CHARS,\n    begin, end, baseline, declutterGroup,\n    textState.overflow, fillKey, textState.maxAngle,\n    function(text) {\n      var width = widths[text];\n      if (!width) {\n        width = widths[text] = _ol_render_canvas_.measureTextWidth(font, text);\n      }\n      return width * textScale;\n    },\n    offsetY, strokeKey, strokeWidth, text, textKey, 1 / pixelRatio\n  ]);\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_render_canvas_TextReplay_.prototype.setTextStyle = function(textStyle, declutterGroup) {\n  var textState, fillState, strokeState;\n  if (!textStyle) {\n    this.text_ = '';\n  } else {\n    this.declutterGroup_ = /** @type {ol.DeclutterGroup} */ (declutterGroup);\n\n    var textFillStyle = textStyle.getFill();\n    if (!textFillStyle) {\n      fillState = this.textFillState_ = null;\n    } else {\n      fillState = this.textFillState_;\n      if (!fillState) {\n        fillState = this.textFillState_ = /** @type {ol.CanvasFillState} */ ({});\n      }\n      fillState.fillStyle = _ol_colorlike_.asColorLike(\n          textFillStyle.getColor() || _ol_render_canvas_.defaultFillStyle);\n    }\n\n    var textStrokeStyle = textStyle.getStroke();\n    if (!textStrokeStyle) {\n      strokeState = this.textStrokeState_ = null;\n    } else {\n      strokeState = this.textStrokeState_;\n      if (!strokeState) {\n        strokeState = this.textStrokeState_ = /** @type {ol.CanvasStrokeState} */ ({});\n      }\n      var lineDash = textStrokeStyle.getLineDash();\n      var lineDashOffset = textStrokeStyle.getLineDashOffset();\n      var lineWidth = textStrokeStyle.getWidth();\n      var miterLimit = textStrokeStyle.getMiterLimit();\n      strokeState.lineCap = textStrokeStyle.getLineCap() || _ol_render_canvas_.defaultLineCap;\n      strokeState.lineDash = lineDash ? lineDash.slice() : _ol_render_canvas_.defaultLineDash;\n      strokeState.lineDashOffset =\n          lineDashOffset === undefined ? _ol_render_canvas_.defaultLineDashOffset : lineDashOffset;\n      strokeState.lineJoin = textStrokeStyle.getLineJoin() || _ol_render_canvas_.defaultLineJoin;\n      strokeState.lineWidth =\n          lineWidth === undefined ? _ol_render_canvas_.defaultLineWidth : lineWidth;\n      strokeState.miterLimit =\n          miterLimit === undefined ? _ol_render_canvas_.defaultMiterLimit : miterLimit;\n      strokeState.strokeStyle = _ol_colorlike_.asColorLike(\n          textStrokeStyle.getColor() || _ol_render_canvas_.defaultStrokeStyle);\n    }\n\n    textState = this.textState_;\n    var font = textStyle.getFont() || _ol_render_canvas_.defaultFont;\n    _ol_render_canvas_.checkFont(font);\n    var textScale = textStyle.getScale();\n    textState.overflow = textStyle.getOverflow();\n    textState.font = font;\n    textState.maxAngle = textStyle.getMaxAngle();\n    textState.placement = textStyle.getPlacement();\n    textState.textAlign = textStyle.getTextAlign();\n    textState.textBaseline = textStyle.getTextBaseline() || _ol_render_canvas_.defaultTextBaseline;\n    textState.backgroundFill = textStyle.getBackgroundFill();\n    textState.backgroundStroke = textStyle.getBackgroundStroke();\n    textState.padding = textStyle.getPadding() || _ol_render_canvas_.defaultPadding;\n    textState.scale = textScale === undefined ? 1 : textScale;\n\n    var textOffsetX = textStyle.getOffsetX();\n    var textOffsetY = textStyle.getOffsetY();\n    var textRotateWithView = textStyle.getRotateWithView();\n    var textRotation = textStyle.getRotation();\n    this.text_ = textStyle.getText() || '';\n    this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\n    this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\n    this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;\n    this.textRotation_ = textRotation === undefined ? 0 : textRotation;\n\n    this.strokeKey_ = strokeState ?\n      (typeof strokeState.strokeStyle == 'string' ? strokeState.strokeStyle : _ol_.getUid(strokeState.strokeStyle)) +\n      strokeState.lineCap + strokeState.lineDashOffset + '|' + strokeState.lineWidth +\n      strokeState.lineJoin + strokeState.miterLimit + '[' + strokeState.lineDash.join() + ']' :\n      '';\n    this.textKey_ = textState.font + textState.scale + (textState.textAlign || '?');\n    this.fillKey_ = fillState ?\n      (typeof fillState.fillStyle == 'string' ? fillState.fillStyle : ('|' + _ol_.getUid(fillState.fillStyle))) :\n      '';\n  }\n};\nexport default _ol_render_canvas_TextReplay_;\n"]},"metadata":{},"sourceType":"module"}