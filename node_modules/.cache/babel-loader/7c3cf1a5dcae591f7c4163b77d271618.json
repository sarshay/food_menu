{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_RotationConstraint_ from '../rotationconstraint.js';\nimport _ol_ViewHint_ from '../viewhint.js';\nimport _ol_events_condition_ from '../events/condition.js';\nimport _ol_functions_ from '../functions.js';\nimport _ol_interaction_Interaction_ from '../interaction/interaction.js';\nimport _ol_interaction_Pointer_ from '../interaction/pointer.js';\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link ol.events.condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n *\n * @constructor\n * @extends {ol.interaction.Pointer}\n * @param {olx.interaction.DragRotateOptions=} opt_options Options.\n * @api\n */\n\nvar _ol_interaction_DragRotate_ = function (opt_options) {\n  var options = opt_options ? opt_options : {};\n\n  _ol_interaction_Pointer_.call(this, {\n    handleDownEvent: _ol_interaction_DragRotate_.handleDownEvent_,\n    handleDragEvent: _ol_interaction_DragRotate_.handleDragEvent_,\n    handleUpEvent: _ol_interaction_DragRotate_.handleUpEvent_\n  });\n  /**\n   * @private\n   * @type {ol.EventsConditionType}\n   */\n\n\n  this.condition_ = options.condition ? options.condition : _ol_events_condition_.altShiftKeysOnly;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.lastAngle_ = undefined;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.duration_ = options.duration !== undefined ? options.duration : 250;\n};\n\n_ol_.inherits(_ol_interaction_DragRotate_, _ol_interaction_Pointer_);\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {ol.interaction.DragRotate}\n * @private\n */\n\n\n_ol_interaction_DragRotate_.handleDragEvent_ = function (mapBrowserEvent) {\n  if (!_ol_events_condition_.mouseOnly(mapBrowserEvent)) {\n    return;\n  }\n\n  var map = mapBrowserEvent.map;\n  var view = map.getView();\n\n  if (view.getConstraints().rotation === _ol_RotationConstraint_.disable) {\n    return;\n  }\n\n  var size = map.getSize();\n  var offset = mapBrowserEvent.pixel;\n  var theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n\n  if (this.lastAngle_ !== undefined) {\n    var delta = theta - this.lastAngle_;\n    var rotation = view.getRotation();\n\n    _ol_interaction_Interaction_.rotateWithoutConstraints(view, rotation - delta);\n  }\n\n  this.lastAngle_ = theta;\n};\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Stop drag sequence?\n * @this {ol.interaction.DragRotate}\n * @private\n */\n\n\n_ol_interaction_DragRotate_.handleUpEvent_ = function (mapBrowserEvent) {\n  if (!_ol_events_condition_.mouseOnly(mapBrowserEvent)) {\n    return true;\n  }\n\n  var map = mapBrowserEvent.map;\n  var view = map.getView();\n  view.setHint(_ol_ViewHint_.INTERACTING, -1);\n  var rotation = view.getRotation();\n\n  _ol_interaction_Interaction_.rotate(view, rotation, undefined, this.duration_);\n\n  return false;\n};\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Start drag sequence?\n * @this {ol.interaction.DragRotate}\n * @private\n */\n\n\n_ol_interaction_DragRotate_.handleDownEvent_ = function (mapBrowserEvent) {\n  if (!_ol_events_condition_.mouseOnly(mapBrowserEvent)) {\n    return false;\n  }\n\n  if (_ol_events_condition_.mouseActionButton(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {\n    var map = mapBrowserEvent.map;\n    map.getView().setHint(_ol_ViewHint_.INTERACTING, 1);\n    this.lastAngle_ = undefined;\n    return true;\n  } else {\n    return false;\n  }\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_interaction_DragRotate_.prototype.shouldStopEvent = _ol_functions_.FALSE;\nexport default _ol_interaction_DragRotate_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/interaction/dragrotate.js"],"names":["_ol_","_ol_RotationConstraint_","_ol_ViewHint_","_ol_events_condition_","_ol_functions_","_ol_interaction_Interaction_","_ol_interaction_Pointer_","_ol_interaction_DragRotate_","opt_options","options","call","handleDownEvent","handleDownEvent_","handleDragEvent","handleDragEvent_","handleUpEvent","handleUpEvent_","condition_","condition","altShiftKeysOnly","lastAngle_","undefined","duration_","duration","inherits","mapBrowserEvent","mouseOnly","map","view","getView","getConstraints","rotation","disable","size","getSize","offset","pixel","theta","Math","atan2","delta","getRotation","rotateWithoutConstraints","setHint","INTERACTING","rotate","mouseActionButton","prototype","shouldStopEvent","FALSE"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,uBAAP,MAAoC,0BAApC;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,qBAAP,MAAkC,wBAAlC;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,4BAAP,MAAyC,+BAAzC;AACA,OAAOC,wBAAP,MAAqC,2BAArC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,2BAA2B,GAAG,UAASC,WAAT,EAAsB;AAEtD,MAAIC,OAAO,GAAGD,WAAW,GAAGA,WAAH,GAAiB,EAA1C;;AAEAF,EAAAA,wBAAwB,CAACI,IAAzB,CAA8B,IAA9B,EAAoC;AAClCC,IAAAA,eAAe,EAAEJ,2BAA2B,CAACK,gBADX;AAElCC,IAAAA,eAAe,EAAEN,2BAA2B,CAACO,gBAFX;AAGlCC,IAAAA,aAAa,EAAER,2BAA2B,CAACS;AAHT,GAApC;AAMA;AACF;AACA;AACA;;;AACE,OAAKC,UAAL,GAAkBR,OAAO,CAACS,SAAR,GAChBT,OAAO,CAACS,SADQ,GACIf,qBAAqB,CAACgB,gBAD5C;AAGA;AACF;AACA;AACA;;AACE,OAAKC,UAAL,GAAkBC,SAAlB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,SAAL,GAAiBb,OAAO,CAACc,QAAR,KAAqBF,SAArB,GAAiCZ,OAAO,CAACc,QAAzC,GAAoD,GAArE;AACD,CA5BD;;AA8BAvB,IAAI,CAACwB,QAAL,CAAcjB,2BAAd,EAA2CD,wBAA3C;AAGA;AACA;AACA;AACA;AACA;;;AACAC,2BAA2B,CAACO,gBAA5B,GAA+C,UAASW,eAAT,EAA0B;AACvE,MAAI,CAACtB,qBAAqB,CAACuB,SAAtB,CAAgCD,eAAhC,CAAL,EAAuD;AACrD;AACD;;AAED,MAAIE,GAAG,GAAGF,eAAe,CAACE,GAA1B;AACA,MAAIC,IAAI,GAAGD,GAAG,CAACE,OAAJ,EAAX;;AACA,MAAID,IAAI,CAACE,cAAL,GAAsBC,QAAtB,KAAmC9B,uBAAuB,CAAC+B,OAA/D,EAAwE;AACtE;AACD;;AACD,MAAIC,IAAI,GAAGN,GAAG,CAACO,OAAJ,EAAX;AACA,MAAIC,MAAM,GAAGV,eAAe,CAACW,KAA7B;AACA,MAAIC,KAAK,GACLC,IAAI,CAACC,KAAL,CAAWN,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,GAAcE,MAAM,CAAC,CAAD,CAA/B,EAAoCA,MAAM,CAAC,CAAD,CAAN,GAAYF,IAAI,CAAC,CAAD,CAAJ,GAAU,CAA1D,CADJ;;AAEA,MAAI,KAAKb,UAAL,KAAoBC,SAAxB,EAAmC;AACjC,QAAImB,KAAK,GAAGH,KAAK,GAAG,KAAKjB,UAAzB;AACA,QAAIW,QAAQ,GAAGH,IAAI,CAACa,WAAL,EAAf;;AACApC,IAAAA,4BAA4B,CAACqC,wBAA7B,CACId,IADJ,EACUG,QAAQ,GAAGS,KADrB;AAED;;AACD,OAAKpB,UAAL,GAAkBiB,KAAlB;AACD,CArBD;AAwBA;AACA;AACA;AACA;AACA;AACA;;;AACA9B,2BAA2B,CAACS,cAA5B,GAA6C,UAASS,eAAT,EAA0B;AACrE,MAAI,CAACtB,qBAAqB,CAACuB,SAAtB,CAAgCD,eAAhC,CAAL,EAAuD;AACrD,WAAO,IAAP;AACD;;AAED,MAAIE,GAAG,GAAGF,eAAe,CAACE,GAA1B;AACA,MAAIC,IAAI,GAAGD,GAAG,CAACE,OAAJ,EAAX;AACAD,EAAAA,IAAI,CAACe,OAAL,CAAazC,aAAa,CAAC0C,WAA3B,EAAwC,CAAC,CAAzC;AACA,MAAIb,QAAQ,GAAGH,IAAI,CAACa,WAAL,EAAf;;AACApC,EAAAA,4BAA4B,CAACwC,MAA7B,CAAoCjB,IAApC,EAA0CG,QAA1C,EACIV,SADJ,EACe,KAAKC,SADpB;;AAEA,SAAO,KAAP;AACD,CAZD;AAeA;AACA;AACA;AACA;AACA;AACA;;;AACAf,2BAA2B,CAACK,gBAA5B,GAA+C,UAASa,eAAT,EAA0B;AACvE,MAAI,CAACtB,qBAAqB,CAACuB,SAAtB,CAAgCD,eAAhC,CAAL,EAAuD;AACrD,WAAO,KAAP;AACD;;AAED,MAAItB,qBAAqB,CAAC2C,iBAAtB,CAAwCrB,eAAxC,KACA,KAAKR,UAAL,CAAgBQ,eAAhB,CADJ,EACsC;AACpC,QAAIE,GAAG,GAAGF,eAAe,CAACE,GAA1B;AACAA,IAAAA,GAAG,CAACE,OAAJ,GAAcc,OAAd,CAAsBzC,aAAa,CAAC0C,WAApC,EAAiD,CAAjD;AACA,SAAKxB,UAAL,GAAkBC,SAAlB;AACA,WAAO,IAAP;AACD,GAND,MAMO;AACL,WAAO,KAAP;AACD;AACF,CAdD;AAiBA;AACA;AACA;;;AACAd,2BAA2B,CAACwC,SAA5B,CAAsCC,eAAtC,GAAwD5C,cAAc,CAAC6C,KAAvE;AACA,eAAe1C,2BAAf","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_RotationConstraint_ from '../rotationconstraint.js';\nimport _ol_ViewHint_ from '../viewhint.js';\nimport _ol_events_condition_ from '../events/condition.js';\nimport _ol_functions_ from '../functions.js';\nimport _ol_interaction_Interaction_ from '../interaction/interaction.js';\nimport _ol_interaction_Pointer_ from '../interaction/pointer.js';\n\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link ol.events.condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n *\n * @constructor\n * @extends {ol.interaction.Pointer}\n * @param {olx.interaction.DragRotateOptions=} opt_options Options.\n * @api\n */\nvar _ol_interaction_DragRotate_ = function(opt_options) {\n\n  var options = opt_options ? opt_options : {};\n\n  _ol_interaction_Pointer_.call(this, {\n    handleDownEvent: _ol_interaction_DragRotate_.handleDownEvent_,\n    handleDragEvent: _ol_interaction_DragRotate_.handleDragEvent_,\n    handleUpEvent: _ol_interaction_DragRotate_.handleUpEvent_\n  });\n\n  /**\n   * @private\n   * @type {ol.EventsConditionType}\n   */\n  this.condition_ = options.condition ?\n    options.condition : _ol_events_condition_.altShiftKeysOnly;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.lastAngle_ = undefined;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.duration_ = options.duration !== undefined ? options.duration : 250;\n};\n\n_ol_.inherits(_ol_interaction_DragRotate_, _ol_interaction_Pointer_);\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {ol.interaction.DragRotate}\n * @private\n */\n_ol_interaction_DragRotate_.handleDragEvent_ = function(mapBrowserEvent) {\n  if (!_ol_events_condition_.mouseOnly(mapBrowserEvent)) {\n    return;\n  }\n\n  var map = mapBrowserEvent.map;\n  var view = map.getView();\n  if (view.getConstraints().rotation === _ol_RotationConstraint_.disable) {\n    return;\n  }\n  var size = map.getSize();\n  var offset = mapBrowserEvent.pixel;\n  var theta =\n      Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n  if (this.lastAngle_ !== undefined) {\n    var delta = theta - this.lastAngle_;\n    var rotation = view.getRotation();\n    _ol_interaction_Interaction_.rotateWithoutConstraints(\n        view, rotation - delta);\n  }\n  this.lastAngle_ = theta;\n};\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Stop drag sequence?\n * @this {ol.interaction.DragRotate}\n * @private\n */\n_ol_interaction_DragRotate_.handleUpEvent_ = function(mapBrowserEvent) {\n  if (!_ol_events_condition_.mouseOnly(mapBrowserEvent)) {\n    return true;\n  }\n\n  var map = mapBrowserEvent.map;\n  var view = map.getView();\n  view.setHint(_ol_ViewHint_.INTERACTING, -1);\n  var rotation = view.getRotation();\n  _ol_interaction_Interaction_.rotate(view, rotation,\n      undefined, this.duration_);\n  return false;\n};\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Start drag sequence?\n * @this {ol.interaction.DragRotate}\n * @private\n */\n_ol_interaction_DragRotate_.handleDownEvent_ = function(mapBrowserEvent) {\n  if (!_ol_events_condition_.mouseOnly(mapBrowserEvent)) {\n    return false;\n  }\n\n  if (_ol_events_condition_.mouseActionButton(mapBrowserEvent) &&\n      this.condition_(mapBrowserEvent)) {\n    var map = mapBrowserEvent.map;\n    map.getView().setHint(_ol_ViewHint_.INTERACTING, 1);\n    this.lastAngle_ = undefined;\n    return true;\n  } else {\n    return false;\n  }\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_interaction_DragRotate_.prototype.shouldStopEvent = _ol_functions_.FALSE;\nexport default _ol_interaction_DragRotate_;\n"]},"metadata":{},"sourceType":"module"}