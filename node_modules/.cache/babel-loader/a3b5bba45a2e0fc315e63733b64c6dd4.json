{"ast":null,"code":"import _ol_ from './index.js';\nimport _ol_size_ from './size.js';\nimport _ol_extent_ from './extent.js';\nimport _ol_extent_Corner_ from './extent/corner.js';\nimport _ol_obj_ from './obj.js';\nimport _ol_proj_ from './proj.js';\nimport _ol_proj_Units_ from './proj/units.js';\nimport _ol_tilegrid_TileGrid_ from './tilegrid/tilegrid.js';\nvar _ol_tilegrid_ = {};\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @return {!ol.tilegrid.TileGrid} Default tile grid for the passed projection.\n */\n\n_ol_tilegrid_.getForProjection = function (projection) {\n  var tileGrid = projection.getDefaultTileGrid();\n\n  if (!tileGrid) {\n    tileGrid = _ol_tilegrid_.createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n\n  return tileGrid;\n};\n/**\n * @param {ol.tilegrid.TileGrid} tileGrid Tile grid.\n * @param {ol.TileCoord} tileCoord Tile coordinate.\n * @param {ol.proj.Projection} projection Projection.\n * @return {ol.TileCoord} Tile coordinate.\n */\n\n\n_ol_tilegrid_.wrapX = function (tileGrid, tileCoord, projection) {\n  var z = tileCoord[0];\n  var center = tileGrid.getTileCoordCenter(tileCoord);\n\n  var projectionExtent = _ol_tilegrid_.extentFromProjection(projection);\n\n  if (!_ol_extent_.containsCoordinate(projectionExtent, center)) {\n    var worldWidth = _ol_extent_.getWidth(projectionExtent);\n\n    var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  } else {\n    return tileCoord;\n  }\n};\n/**\n * @param {ol.Extent} extent Extent.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     ol.DEFAULT_MAX_ZOOM).\n * @param {number|ol.Size=} opt_tileSize Tile size (default uses\n *     ol.DEFAULT_TILE_SIZE).\n * @param {ol.extent.Corner=} opt_corner Extent corner (default is\n *     ol.extent.Corner.TOP_LEFT).\n * @return {!ol.tilegrid.TileGrid} TileGrid instance.\n */\n\n\n_ol_tilegrid_.createForExtent = function (extent, opt_maxZoom, opt_tileSize, opt_corner) {\n  var corner = opt_corner !== undefined ? opt_corner : _ol_extent_Corner_.TOP_LEFT;\n\n  var resolutions = _ol_tilegrid_.resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);\n\n  return new _ol_tilegrid_TileGrid_({\n    extent: extent,\n    origin: _ol_extent_.getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: opt_tileSize\n  });\n};\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {olx.tilegrid.XYZOptions=} opt_options Tile grid options.\n * @return {!ol.tilegrid.TileGrid} Tile grid instance.\n * @api\n */\n\n\n_ol_tilegrid_.createXYZ = function (opt_options) {\n  var options =\n  /** @type {olx.tilegrid.TileGridOptions} */\n  {};\n\n  _ol_obj_.assign(options, opt_options !== undefined ? opt_options :\n  /** @type {olx.tilegrid.XYZOptions} */\n  {});\n\n  if (options.extent === undefined) {\n    options.extent = _ol_proj_.get('EPSG:3857').getExtent();\n  }\n\n  options.resolutions = _ol_tilegrid_.resolutionsFromExtent(options.extent, options.maxZoom, options.tileSize);\n  delete options.maxZoom;\n  return new _ol_tilegrid_TileGrid_(options);\n};\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {ol.Extent} extent Extent.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     ol.DEFAULT_MAX_ZOOM).\n * @param {number|ol.Size=} opt_tileSize Tile size (default uses\n *     ol.DEFAULT_TILE_SIZE).\n * @return {!Array.<number>} Resolutions array.\n */\n\n\n_ol_tilegrid_.resolutionsFromExtent = function (extent, opt_maxZoom, opt_tileSize) {\n  var maxZoom = opt_maxZoom !== undefined ? opt_maxZoom : _ol_.DEFAULT_MAX_ZOOM;\n\n  var height = _ol_extent_.getHeight(extent);\n\n  var width = _ol_extent_.getWidth(extent);\n\n  var tileSize = _ol_size_.toSize(opt_tileSize !== undefined ? opt_tileSize : _ol_.DEFAULT_TILE_SIZE);\n\n  var maxResolution = Math.max(width / tileSize[0], height / tileSize[1]);\n  var length = maxZoom + 1;\n  var resolutions = new Array(length);\n\n  for (var z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n\n  return resolutions;\n};\n/**\n * @param {ol.ProjectionLike} projection Projection.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     ol.DEFAULT_MAX_ZOOM).\n * @param {number|ol.Size=} opt_tileSize Tile size (default uses\n *     ol.DEFAULT_TILE_SIZE).\n * @param {ol.extent.Corner=} opt_corner Extent corner (default is\n *     ol.extent.Corner.BOTTOM_LEFT).\n * @return {!ol.tilegrid.TileGrid} TileGrid instance.\n */\n\n\n_ol_tilegrid_.createForProjection = function (projection, opt_maxZoom, opt_tileSize, opt_corner) {\n  var extent = _ol_tilegrid_.extentFromProjection(projection);\n\n  return _ol_tilegrid_.createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);\n};\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {ol.ProjectionLike} projection Projection.\n * @return {ol.Extent} Extent.\n */\n\n\n_ol_tilegrid_.extentFromProjection = function (projection) {\n  projection = _ol_proj_.get(projection);\n  var extent = projection.getExtent();\n\n  if (!extent) {\n    var half = 180 * _ol_proj_.METERS_PER_UNIT[_ol_proj_Units_.DEGREES] / projection.getMetersPerUnit();\n    extent = _ol_extent_.createOrUpdate(-half, -half, half, half);\n  }\n\n  return extent;\n};\n\nexport default _ol_tilegrid_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/tilegrid.js"],"names":["_ol_","_ol_size_","_ol_extent_","_ol_extent_Corner_","_ol_obj_","_ol_proj_","_ol_proj_Units_","_ol_tilegrid_TileGrid_","_ol_tilegrid_","getForProjection","projection","tileGrid","getDefaultTileGrid","createForProjection","setDefaultTileGrid","wrapX","tileCoord","z","center","getTileCoordCenter","projectionExtent","extentFromProjection","containsCoordinate","worldWidth","getWidth","worldsAway","Math","ceil","getTileCoordForCoordAndZ","createForExtent","extent","opt_maxZoom","opt_tileSize","opt_corner","corner","undefined","TOP_LEFT","resolutions","resolutionsFromExtent","origin","getCorner","tileSize","createXYZ","opt_options","options","assign","get","getExtent","maxZoom","DEFAULT_MAX_ZOOM","height","getHeight","width","toSize","DEFAULT_TILE_SIZE","maxResolution","max","length","Array","pow","half","METERS_PER_UNIT","DEGREES","getMetersPerUnit","createOrUpdate"],"mappings":"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","sourcesContent":["import _ol_ from './index.js';\nimport _ol_size_ from './size.js';\nimport _ol_extent_ from './extent.js';\nimport _ol_extent_Corner_ from './extent/corner.js';\nimport _ol_obj_ from './obj.js';\nimport _ol_proj_ from './proj.js';\nimport _ol_proj_Units_ from './proj/units.js';\nimport _ol_tilegrid_TileGrid_ from './tilegrid/tilegrid.js';\nvar _ol_tilegrid_ = {};\n\n\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @return {!ol.tilegrid.TileGrid} Default tile grid for the passed projection.\n */\n_ol_tilegrid_.getForProjection = function(projection) {\n  var tileGrid = projection.getDefaultTileGrid();\n  if (!tileGrid) {\n    tileGrid = _ol_tilegrid_.createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n  return tileGrid;\n};\n\n\n/**\n * @param {ol.tilegrid.TileGrid} tileGrid Tile grid.\n * @param {ol.TileCoord} tileCoord Tile coordinate.\n * @param {ol.proj.Projection} projection Projection.\n * @return {ol.TileCoord} Tile coordinate.\n */\n_ol_tilegrid_.wrapX = function(tileGrid, tileCoord, projection) {\n  var z = tileCoord[0];\n  var center = tileGrid.getTileCoordCenter(tileCoord);\n  var projectionExtent = _ol_tilegrid_.extentFromProjection(projection);\n  if (!_ol_extent_.containsCoordinate(projectionExtent, center)) {\n    var worldWidth = _ol_extent_.getWidth(projectionExtent);\n    var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  } else {\n    return tileCoord;\n  }\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     ol.DEFAULT_MAX_ZOOM).\n * @param {number|ol.Size=} opt_tileSize Tile size (default uses\n *     ol.DEFAULT_TILE_SIZE).\n * @param {ol.extent.Corner=} opt_corner Extent corner (default is\n *     ol.extent.Corner.TOP_LEFT).\n * @return {!ol.tilegrid.TileGrid} TileGrid instance.\n */\n_ol_tilegrid_.createForExtent = function(extent, opt_maxZoom, opt_tileSize, opt_corner) {\n  var corner = opt_corner !== undefined ?\n    opt_corner : _ol_extent_Corner_.TOP_LEFT;\n\n  var resolutions = _ol_tilegrid_.resolutionsFromExtent(\n      extent, opt_maxZoom, opt_tileSize);\n\n  return new _ol_tilegrid_TileGrid_({\n    extent: extent,\n    origin: _ol_extent_.getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: opt_tileSize\n  });\n};\n\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {olx.tilegrid.XYZOptions=} opt_options Tile grid options.\n * @return {!ol.tilegrid.TileGrid} Tile grid instance.\n * @api\n */\n_ol_tilegrid_.createXYZ = function(opt_options) {\n  var options = /** @type {olx.tilegrid.TileGridOptions} */ ({});\n  _ol_obj_.assign(options, opt_options !== undefined ?\n    opt_options : /** @type {olx.tilegrid.XYZOptions} */ ({}));\n  if (options.extent === undefined) {\n    options.extent = _ol_proj_.get('EPSG:3857').getExtent();\n  }\n  options.resolutions = _ol_tilegrid_.resolutionsFromExtent(\n      options.extent, options.maxZoom, options.tileSize);\n  delete options.maxZoom;\n\n  return new _ol_tilegrid_TileGrid_(options);\n};\n\n\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {ol.Extent} extent Extent.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     ol.DEFAULT_MAX_ZOOM).\n * @param {number|ol.Size=} opt_tileSize Tile size (default uses\n *     ol.DEFAULT_TILE_SIZE).\n * @return {!Array.<number>} Resolutions array.\n */\n_ol_tilegrid_.resolutionsFromExtent = function(extent, opt_maxZoom, opt_tileSize) {\n  var maxZoom = opt_maxZoom !== undefined ?\n    opt_maxZoom : _ol_.DEFAULT_MAX_ZOOM;\n\n  var height = _ol_extent_.getHeight(extent);\n  var width = _ol_extent_.getWidth(extent);\n\n  var tileSize = _ol_size_.toSize(opt_tileSize !== undefined ?\n    opt_tileSize : _ol_.DEFAULT_TILE_SIZE);\n  var maxResolution = Math.max(\n      width / tileSize[0], height / tileSize[1]);\n\n  var length = maxZoom + 1;\n  var resolutions = new Array(length);\n  for (var z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n  return resolutions;\n};\n\n\n/**\n * @param {ol.ProjectionLike} projection Projection.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     ol.DEFAULT_MAX_ZOOM).\n * @param {number|ol.Size=} opt_tileSize Tile size (default uses\n *     ol.DEFAULT_TILE_SIZE).\n * @param {ol.extent.Corner=} opt_corner Extent corner (default is\n *     ol.extent.Corner.BOTTOM_LEFT).\n * @return {!ol.tilegrid.TileGrid} TileGrid instance.\n */\n_ol_tilegrid_.createForProjection = function(projection, opt_maxZoom, opt_tileSize, opt_corner) {\n  var extent = _ol_tilegrid_.extentFromProjection(projection);\n  return _ol_tilegrid_.createForExtent(\n      extent, opt_maxZoom, opt_tileSize, opt_corner);\n};\n\n\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {ol.ProjectionLike} projection Projection.\n * @return {ol.Extent} Extent.\n */\n_ol_tilegrid_.extentFromProjection = function(projection) {\n  projection = _ol_proj_.get(projection);\n  var extent = projection.getExtent();\n  if (!extent) {\n    var half = 180 * _ol_proj_.METERS_PER_UNIT[_ol_proj_Units_.DEGREES] /\n        projection.getMetersPerUnit();\n    extent = _ol_extent_.createOrUpdate(-half, -half, half, half);\n  }\n  return extent;\n};\nexport default _ol_tilegrid_;\n"]},"metadata":{},"sourceType":"module"}