{"ast":null,"code":"import _ol_ from './index.js';\nimport _ol_events_ from './events.js';\nimport _ol_events_EventTarget_ from './events/eventtarget.js';\nimport _ol_events_EventType_ from './events/eventtype.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link ol.Observable#changed}.\n *\n * @constructor\n * @extends {ol.events.EventTarget}\n * @fires ol.events.Event\n * @struct\n * @api\n */\n\nvar _ol_Observable_ = function () {\n  _ol_events_EventTarget_.call(this);\n  /**\n   * @private\n   * @type {number}\n   */\n\n\n  this.revision_ = 0;\n};\n\n_ol_.inherits(_ol_Observable_, _ol_events_EventTarget_);\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {ol.EventsKey|Array.<ol.EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\n\n\n_ol_Observable_.unByKey = function (key) {\n  if (Array.isArray(key)) {\n    for (var i = 0, ii = key.length; i < ii; ++i) {\n      _ol_events_.unlistenByKey(key[i]);\n    }\n  } else {\n    _ol_events_.unlistenByKey(\n    /** @type {ol.EventsKey} */\n    key);\n  }\n};\n/**\n * Increases the revision counter and dispatches a 'change' event.\n * @api\n */\n\n\n_ol_Observable_.prototype.changed = function () {\n  ++this.revision_;\n  this.dispatchEvent(_ol_events_EventType_.CHANGE);\n};\n/**\n * Dispatches an event and calls all listeners listening for events\n * of this type. The event parameter can either be a string or an\n * Object with a `type` property.\n *\n * @param {{type: string,\n *     target: (EventTarget|ol.events.EventTarget|undefined)}|ol.events.Event|\n *     string} event Event object.\n * @function\n * @api\n */\n\n\n_ol_Observable_.prototype.dispatchEvent;\n/**\n * Get the version number for this object.  Each time the object is modified,\n * its version number will be incremented.\n * @return {number} Revision.\n * @api\n */\n\n_ol_Observable_.prototype.getRevision = function () {\n  return this.revision_;\n};\n/**\n * Listen for a certain type of event.\n * @param {string|Array.<string>} type The event type or array of event types.\n * @param {function(?): ?} listener The listener function.\n * @param {Object=} opt_this The object to use as `this` in `listener`.\n * @return {ol.EventsKey|Array.<ol.EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\n\n\n_ol_Observable_.prototype.on = function (type, listener, opt_this) {\n  if (Array.isArray(type)) {\n    var len = type.length;\n    var keys = new Array(len);\n\n    for (var i = 0; i < len; ++i) {\n      keys[i] = _ol_events_.listen(this, type[i], listener, opt_this);\n    }\n\n    return keys;\n  } else {\n    return _ol_events_.listen(this,\n    /** @type {string} */\n    type, listener, opt_this);\n  }\n};\n/**\n * Listen once for a certain type of event.\n * @param {string|Array.<string>} type The event type or array of event types.\n * @param {function(?): ?} listener The listener function.\n * @param {Object=} opt_this The object to use as `this` in `listener`.\n * @return {ol.EventsKey|Array.<ol.EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\n\n\n_ol_Observable_.prototype.once = function (type, listener, opt_this) {\n  if (Array.isArray(type)) {\n    var len = type.length;\n    var keys = new Array(len);\n\n    for (var i = 0; i < len; ++i) {\n      keys[i] = _ol_events_.listenOnce(this, type[i], listener, opt_this);\n    }\n\n    return keys;\n  } else {\n    return _ol_events_.listenOnce(this,\n    /** @type {string} */\n    type, listener, opt_this);\n  }\n};\n/**\n * Unlisten for a certain type of event.\n * @param {string|Array.<string>} type The event type or array of event types.\n * @param {function(?): ?} listener The listener function.\n * @param {Object=} opt_this The object which was used as `this` by the\n * `listener`.\n * @api\n */\n\n\n_ol_Observable_.prototype.un = function (type, listener, opt_this) {\n  if (Array.isArray(type)) {\n    for (var i = 0, ii = type.length; i < ii; ++i) {\n      _ol_events_.unlisten(this, type[i], listener, opt_this);\n    }\n\n    return;\n  } else {\n    _ol_events_.unlisten(this,\n    /** @type {string} */\n    type, listener, opt_this);\n  }\n};\n\nexport default _ol_Observable_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/observable.js"],"names":["_ol_","_ol_events_","_ol_events_EventTarget_","_ol_events_EventType_","_ol_Observable_","call","revision_","inherits","unByKey","key","Array","isArray","i","ii","length","unlistenByKey","prototype","changed","dispatchEvent","CHANGE","getRevision","on","type","listener","opt_this","len","keys","listen","once","listenOnce","un","unlisten"],"mappings":"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","sourcesContent":["import _ol_ from './index.js';\nimport _ol_events_ from './events.js';\nimport _ol_events_EventTarget_ from './events/eventtarget.js';\nimport _ol_events_EventType_ from './events/eventtype.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link ol.Observable#changed}.\n *\n * @constructor\n * @extends {ol.events.EventTarget}\n * @fires ol.events.Event\n * @struct\n * @api\n */\nvar _ol_Observable_ = function() {\n\n  _ol_events_EventTarget_.call(this);\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.revision_ = 0;\n\n};\n\n_ol_.inherits(_ol_Observable_, _ol_events_EventTarget_);\n\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {ol.EventsKey|Array.<ol.EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\n_ol_Observable_.unByKey = function(key) {\n  if (Array.isArray(key)) {\n    for (var i = 0, ii = key.length; i < ii; ++i) {\n      _ol_events_.unlistenByKey(key[i]);\n    }\n  } else {\n    _ol_events_.unlistenByKey(/** @type {ol.EventsKey} */ (key));\n  }\n};\n\n\n/**\n * Increases the revision counter and dispatches a 'change' event.\n * @api\n */\n_ol_Observable_.prototype.changed = function() {\n  ++this.revision_;\n  this.dispatchEvent(_ol_events_EventType_.CHANGE);\n};\n\n\n/**\n * Dispatches an event and calls all listeners listening for events\n * of this type. The event parameter can either be a string or an\n * Object with a `type` property.\n *\n * @param {{type: string,\n *     target: (EventTarget|ol.events.EventTarget|undefined)}|ol.events.Event|\n *     string} event Event object.\n * @function\n * @api\n */\n_ol_Observable_.prototype.dispatchEvent;\n\n\n/**\n * Get the version number for this object.  Each time the object is modified,\n * its version number will be incremented.\n * @return {number} Revision.\n * @api\n */\n_ol_Observable_.prototype.getRevision = function() {\n  return this.revision_;\n};\n\n\n/**\n * Listen for a certain type of event.\n * @param {string|Array.<string>} type The event type or array of event types.\n * @param {function(?): ?} listener The listener function.\n * @param {Object=} opt_this The object to use as `this` in `listener`.\n * @return {ol.EventsKey|Array.<ol.EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\n_ol_Observable_.prototype.on = function(type, listener, opt_this) {\n  if (Array.isArray(type)) {\n    var len = type.length;\n    var keys = new Array(len);\n    for (var i = 0; i < len; ++i) {\n      keys[i] = _ol_events_.listen(this, type[i], listener, opt_this);\n    }\n    return keys;\n  } else {\n    return _ol_events_.listen(\n        this, /** @type {string} */ (type), listener, opt_this);\n  }\n};\n\n\n/**\n * Listen once for a certain type of event.\n * @param {string|Array.<string>} type The event type or array of event types.\n * @param {function(?): ?} listener The listener function.\n * @param {Object=} opt_this The object to use as `this` in `listener`.\n * @return {ol.EventsKey|Array.<ol.EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\n_ol_Observable_.prototype.once = function(type, listener, opt_this) {\n  if (Array.isArray(type)) {\n    var len = type.length;\n    var keys = new Array(len);\n    for (var i = 0; i < len; ++i) {\n      keys[i] = _ol_events_.listenOnce(this, type[i], listener, opt_this);\n    }\n    return keys;\n  } else {\n    return _ol_events_.listenOnce(\n        this, /** @type {string} */ (type), listener, opt_this);\n  }\n};\n\n\n/**\n * Unlisten for a certain type of event.\n * @param {string|Array.<string>} type The event type or array of event types.\n * @param {function(?): ?} listener The listener function.\n * @param {Object=} opt_this The object which was used as `this` by the\n * `listener`.\n * @api\n */\n_ol_Observable_.prototype.un = function(type, listener, opt_this) {\n  if (Array.isArray(type)) {\n    for (var i = 0, ii = type.length; i < ii; ++i) {\n      _ol_events_.unlisten(this, type[i], listener, opt_this);\n    }\n    return;\n  } else {\n    _ol_events_.unlisten(this, /** @type {string} */ (type), listener, opt_this);\n  }\n};\nexport default _ol_Observable_;\n"]},"metadata":{},"sourceType":"module"}