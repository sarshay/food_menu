{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_math_ from '../math.js';\nimport _ol_proj_Projection_ from '../proj/projection.js';\nimport _ol_proj_Units_ from '../proj/units.js';\nvar _ol_proj_EPSG3857_ = {};\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n *\n * @constructor\n * @extends {ol.proj.Projection}\n * @param {string} code Code.\n * @private\n */\n\n_ol_proj_EPSG3857_.Projection_ = function (code) {\n  _ol_proj_Projection_.call(this, {\n    code: code,\n    units: _ol_proj_Units_.METERS,\n    extent: _ol_proj_EPSG3857_.EXTENT,\n    global: true,\n    worldExtent: _ol_proj_EPSG3857_.WORLD_EXTENT,\n    getPointResolution: function (resolution, point) {\n      return resolution / _ol_math_.cosh(point[1] / _ol_proj_EPSG3857_.RADIUS);\n    }\n  });\n};\n\n_ol_.inherits(_ol_proj_EPSG3857_.Projection_, _ol_proj_Projection_);\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\n\n\n_ol_proj_EPSG3857_.RADIUS = 6378137;\n/**\n * @const\n * @type {number}\n */\n\n_ol_proj_EPSG3857_.HALF_SIZE = Math.PI * _ol_proj_EPSG3857_.RADIUS;\n/**\n * @const\n * @type {ol.Extent}\n */\n\n_ol_proj_EPSG3857_.EXTENT = [-_ol_proj_EPSG3857_.HALF_SIZE, -_ol_proj_EPSG3857_.HALF_SIZE, _ol_proj_EPSG3857_.HALF_SIZE, _ol_proj_EPSG3857_.HALF_SIZE];\n/**\n * @const\n * @type {ol.Extent}\n */\n\n_ol_proj_EPSG3857_.WORLD_EXTENT = [-180, -85, 180, 85];\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array.<ol.proj.Projection>}\n */\n\n_ol_proj_EPSG3857_.PROJECTIONS = [new _ol_proj_EPSG3857_.Projection_('EPSG:3857'), new _ol_proj_EPSG3857_.Projection_('EPSG:102100'), new _ol_proj_EPSG3857_.Projection_('EPSG:102113'), new _ol_proj_EPSG3857_.Projection_('EPSG:900913'), new _ol_proj_EPSG3857_.Projection_('urn:ogc:def:crs:EPSG:6.18:3:3857'), new _ol_proj_EPSG3857_.Projection_('urn:ogc:def:crs:EPSG::3857'), new _ol_proj_EPSG3857_.Projection_('http://www.opengis.net/gml/srs/epsg.xml#3857')];\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array.<number>} input Input array of coordinate values.\n * @param {Array.<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array.<number>} Output array of coordinate values.\n */\n\n_ol_proj_EPSG3857_.fromEPSG4326 = function (input, opt_output, opt_dimension) {\n  var length = input.length,\n      dimension = opt_dimension > 1 ? opt_dimension : 2,\n      output = opt_output;\n\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n\n  var halfSize = _ol_proj_EPSG3857_.HALF_SIZE;\n\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = halfSize * input[i] / 180;\n    var y = _ol_proj_EPSG3857_.RADIUS * Math.log(Math.tan(Math.PI * (input[i + 1] + 90) / 360));\n\n    if (y > halfSize) {\n      y = halfSize;\n    } else if (y < -halfSize) {\n      y = -halfSize;\n    }\n\n    output[i + 1] = y;\n  }\n\n  return output;\n};\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array.<number>} input Input array of coordinate values.\n * @param {Array.<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array.<number>} Output array of coordinate values.\n */\n\n\n_ol_proj_EPSG3857_.toEPSG4326 = function (input, opt_output, opt_dimension) {\n  var length = input.length,\n      dimension = opt_dimension > 1 ? opt_dimension : 2,\n      output = opt_output;\n\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = 180 * input[i] / _ol_proj_EPSG3857_.HALF_SIZE;\n    output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / _ol_proj_EPSG3857_.RADIUS)) / Math.PI - 90;\n  }\n\n  return output;\n};\n\nexport default _ol_proj_EPSG3857_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/proj/epsg3857.js"],"names":["_ol_","_ol_math_","_ol_proj_Projection_","_ol_proj_Units_","_ol_proj_EPSG3857_","Projection_","code","call","units","METERS","extent","EXTENT","global","worldExtent","WORLD_EXTENT","getPointResolution","resolution","point","cosh","RADIUS","inherits","HALF_SIZE","Math","PI","PROJECTIONS","fromEPSG4326","input","opt_output","opt_dimension","length","dimension","output","undefined","slice","Array","halfSize","i","y","log","tan","toEPSG4326","atan","exp"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,oBAAP,MAAiC,uBAAjC;AACA,OAAOC,eAAP,MAA4B,kBAA5B;AACA,IAAIC,kBAAkB,GAAG,EAAzB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,kBAAkB,CAACC,WAAnB,GAAiC,UAASC,IAAT,EAAe;AAC9CJ,EAAAA,oBAAoB,CAACK,IAArB,CAA0B,IAA1B,EAAgC;AAC9BD,IAAAA,IAAI,EAAEA,IADwB;AAE9BE,IAAAA,KAAK,EAAEL,eAAe,CAACM,MAFO;AAG9BC,IAAAA,MAAM,EAAEN,kBAAkB,CAACO,MAHG;AAI9BC,IAAAA,MAAM,EAAE,IAJsB;AAK9BC,IAAAA,WAAW,EAAET,kBAAkB,CAACU,YALF;AAM9BC,IAAAA,kBAAkB,EAAE,UAASC,UAAT,EAAqBC,KAArB,EAA4B;AAC9C,aAAOD,UAAU,GAAGf,SAAS,CAACiB,IAAV,CAAeD,KAAK,CAAC,CAAD,CAAL,GAAWb,kBAAkB,CAACe,MAA7C,CAApB;AACD;AAR6B,GAAhC;AAUD,CAXD;;AAYAnB,IAAI,CAACoB,QAAL,CAAchB,kBAAkB,CAACC,WAAjC,EAA8CH,oBAA9C;AAGA;AACA;AACA;AACA;AACA;AACA;;;AACAE,kBAAkB,CAACe,MAAnB,GAA4B,OAA5B;AAGA;AACA;AACA;AACA;;AACAf,kBAAkB,CAACiB,SAAnB,GAA+BC,IAAI,CAACC,EAAL,GAAUnB,kBAAkB,CAACe,MAA5D;AAGA;AACA;AACA;AACA;;AACAf,kBAAkB,CAACO,MAAnB,GAA4B,CAC1B,CAACP,kBAAkB,CAACiB,SADM,EACK,CAACjB,kBAAkB,CAACiB,SADzB,EAE1BjB,kBAAkB,CAACiB,SAFO,EAEIjB,kBAAkB,CAACiB,SAFvB,CAA5B;AAMA;AACA;AACA;AACA;;AACAjB,kBAAkB,CAACU,YAAnB,GAAkC,CAAC,CAAC,GAAF,EAAO,CAAC,EAAR,EAAY,GAAZ,EAAiB,EAAjB,CAAlC;AAGA;AACA;AACA;AACA;AACA;AACA;;AACAV,kBAAkB,CAACoB,WAAnB,GAAiC,CAC/B,IAAIpB,kBAAkB,CAACC,WAAvB,CAAmC,WAAnC,CAD+B,EAE/B,IAAID,kBAAkB,CAACC,WAAvB,CAAmC,aAAnC,CAF+B,EAG/B,IAAID,kBAAkB,CAACC,WAAvB,CAAmC,aAAnC,CAH+B,EAI/B,IAAID,kBAAkB,CAACC,WAAvB,CAAmC,aAAnC,CAJ+B,EAK/B,IAAID,kBAAkB,CAACC,WAAvB,CAAmC,kCAAnC,CAL+B,EAM/B,IAAID,kBAAkB,CAACC,WAAvB,CAAmC,4BAAnC,CAN+B,EAO/B,IAAID,kBAAkB,CAACC,WAAvB,CAAmC,8CAAnC,CAP+B,CAAjC;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,kBAAkB,CAACqB,YAAnB,GAAkC,UAASC,KAAT,EAAgBC,UAAhB,EAA4BC,aAA5B,EAA2C;AAC3E,MAAIC,MAAM,GAAGH,KAAK,CAACG,MAAnB;AAAA,MACIC,SAAS,GAAGF,aAAa,GAAG,CAAhB,GAAoBA,aAApB,GAAoC,CADpD;AAAA,MAEIG,MAAM,GAAGJ,UAFb;;AAGA,MAAII,MAAM,KAAKC,SAAf,EAA0B;AACxB,QAAIF,SAAS,GAAG,CAAhB,EAAmB;AACjB;AACAC,MAAAA,MAAM,GAAGL,KAAK,CAACO,KAAN,EAAT;AACD,KAHD,MAGO;AACLF,MAAAA,MAAM,GAAG,IAAIG,KAAJ,CAAUL,MAAV,CAAT;AACD;AACF;;AACD,MAAIM,QAAQ,GAAG/B,kBAAkB,CAACiB,SAAlC;;AACA,OAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,MAApB,EAA4BO,CAAC,IAAIN,SAAjC,EAA4C;AAC1CC,IAAAA,MAAM,CAACK,CAAD,CAAN,GAAYD,QAAQ,GAAGT,KAAK,CAACU,CAAD,CAAhB,GAAsB,GAAlC;AACA,QAAIC,CAAC,GAAGjC,kBAAkB,CAACe,MAAnB,GACJG,IAAI,CAACgB,GAAL,CAAShB,IAAI,CAACiB,GAAL,CAASjB,IAAI,CAACC,EAAL,IAAWG,KAAK,CAACU,CAAC,GAAG,CAAL,CAAL,GAAe,EAA1B,IAAgC,GAAzC,CAAT,CADJ;;AAEA,QAAIC,CAAC,GAAGF,QAAR,EAAkB;AAChBE,MAAAA,CAAC,GAAGF,QAAJ;AACD,KAFD,MAEO,IAAIE,CAAC,GAAG,CAACF,QAAT,EAAmB;AACxBE,MAAAA,CAAC,GAAG,CAACF,QAAL;AACD;;AACDJ,IAAAA,MAAM,CAACK,CAAC,GAAG,CAAL,CAAN,GAAgBC,CAAhB;AACD;;AACD,SAAON,MAAP;AACD,CAzBD;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA3B,kBAAkB,CAACoC,UAAnB,GAAgC,UAASd,KAAT,EAAgBC,UAAhB,EAA4BC,aAA5B,EAA2C;AACzE,MAAIC,MAAM,GAAGH,KAAK,CAACG,MAAnB;AAAA,MACIC,SAAS,GAAGF,aAAa,GAAG,CAAhB,GAAoBA,aAApB,GAAoC,CADpD;AAAA,MAEIG,MAAM,GAAGJ,UAFb;;AAGA,MAAII,MAAM,KAAKC,SAAf,EAA0B;AACxB,QAAIF,SAAS,GAAG,CAAhB,EAAmB;AACjB;AACAC,MAAAA,MAAM,GAAGL,KAAK,CAACO,KAAN,EAAT;AACD,KAHD,MAGO;AACLF,MAAAA,MAAM,GAAG,IAAIG,KAAJ,CAAUL,MAAV,CAAT;AACD;AACF;;AACD,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,MAApB,EAA4BO,CAAC,IAAIN,SAAjC,EAA4C;AAC1CC,IAAAA,MAAM,CAACK,CAAD,CAAN,GAAY,MAAMV,KAAK,CAACU,CAAD,CAAX,GAAiBhC,kBAAkB,CAACiB,SAAhD;AACAU,IAAAA,MAAM,CAACK,CAAC,GAAG,CAAL,CAAN,GAAgB,MAAMd,IAAI,CAACmB,IAAL,CAClBnB,IAAI,CAACoB,GAAL,CAAShB,KAAK,CAACU,CAAC,GAAG,CAAL,CAAL,GAAehC,kBAAkB,CAACe,MAA3C,CADkB,CAAN,GAC0CG,IAAI,CAACC,EAD/C,GACoD,EADpE;AAED;;AACD,SAAOQ,MAAP;AACD,CAlBD;;AAmBA,eAAe3B,kBAAf","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_math_ from '../math.js';\nimport _ol_proj_Projection_ from '../proj/projection.js';\nimport _ol_proj_Units_ from '../proj/units.js';\nvar _ol_proj_EPSG3857_ = {};\n\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n *\n * @constructor\n * @extends {ol.proj.Projection}\n * @param {string} code Code.\n * @private\n */\n_ol_proj_EPSG3857_.Projection_ = function(code) {\n  _ol_proj_Projection_.call(this, {\n    code: code,\n    units: _ol_proj_Units_.METERS,\n    extent: _ol_proj_EPSG3857_.EXTENT,\n    global: true,\n    worldExtent: _ol_proj_EPSG3857_.WORLD_EXTENT,\n    getPointResolution: function(resolution, point) {\n      return resolution / _ol_math_.cosh(point[1] / _ol_proj_EPSG3857_.RADIUS);\n    }\n  });\n};\n_ol_.inherits(_ol_proj_EPSG3857_.Projection_, _ol_proj_Projection_);\n\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\n_ol_proj_EPSG3857_.RADIUS = 6378137;\n\n\n/**\n * @const\n * @type {number}\n */\n_ol_proj_EPSG3857_.HALF_SIZE = Math.PI * _ol_proj_EPSG3857_.RADIUS;\n\n\n/**\n * @const\n * @type {ol.Extent}\n */\n_ol_proj_EPSG3857_.EXTENT = [\n  -_ol_proj_EPSG3857_.HALF_SIZE, -_ol_proj_EPSG3857_.HALF_SIZE,\n  _ol_proj_EPSG3857_.HALF_SIZE, _ol_proj_EPSG3857_.HALF_SIZE\n];\n\n\n/**\n * @const\n * @type {ol.Extent}\n */\n_ol_proj_EPSG3857_.WORLD_EXTENT = [-180, -85, 180, 85];\n\n\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array.<ol.proj.Projection>}\n */\n_ol_proj_EPSG3857_.PROJECTIONS = [\n  new _ol_proj_EPSG3857_.Projection_('EPSG:3857'),\n  new _ol_proj_EPSG3857_.Projection_('EPSG:102100'),\n  new _ol_proj_EPSG3857_.Projection_('EPSG:102113'),\n  new _ol_proj_EPSG3857_.Projection_('EPSG:900913'),\n  new _ol_proj_EPSG3857_.Projection_('urn:ogc:def:crs:EPSG:6.18:3:3857'),\n  new _ol_proj_EPSG3857_.Projection_('urn:ogc:def:crs:EPSG::3857'),\n  new _ol_proj_EPSG3857_.Projection_('http://www.opengis.net/gml/srs/epsg.xml#3857')\n];\n\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array.<number>} input Input array of coordinate values.\n * @param {Array.<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array.<number>} Output array of coordinate values.\n */\n_ol_proj_EPSG3857_.fromEPSG4326 = function(input, opt_output, opt_dimension) {\n  var length = input.length,\n      dimension = opt_dimension > 1 ? opt_dimension : 2,\n      output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  var halfSize = _ol_proj_EPSG3857_.HALF_SIZE;\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = halfSize * input[i] / 180;\n    var y = _ol_proj_EPSG3857_.RADIUS *\n        Math.log(Math.tan(Math.PI * (input[i + 1] + 90) / 360));\n    if (y > halfSize) {\n      y = halfSize;\n    } else if (y < -halfSize) {\n      y = -halfSize;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n};\n\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array.<number>} input Input array of coordinate values.\n * @param {Array.<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array.<number>} Output array of coordinate values.\n */\n_ol_proj_EPSG3857_.toEPSG4326 = function(input, opt_output, opt_dimension) {\n  var length = input.length,\n      dimension = opt_dimension > 1 ? opt_dimension : 2,\n      output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = 180 * input[i] / _ol_proj_EPSG3857_.HALF_SIZE;\n    output[i + 1] = 360 * Math.atan(\n        Math.exp(input[i + 1] / _ol_proj_EPSG3857_.RADIUS)) / Math.PI - 90;\n  }\n  return output;\n};\nexport default _ol_proj_EPSG3857_;\n"]},"metadata":{},"sourceType":"module"}