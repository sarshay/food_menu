{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_ViewHint_ from '../viewhint.js';\nimport _ol_functions_ from '../functions.js';\nimport _ol_interaction_Interaction_ from '../interaction/interaction.js';\nimport _ol_interaction_Pointer_ from '../interaction/pointer.js';\n/**\n * @classdesc\n * Allows the user to zoom the map by pinching with two fingers\n * on a touch screen.\n *\n * @constructor\n * @extends {ol.interaction.Pointer}\n * @param {olx.interaction.PinchZoomOptions=} opt_options Options.\n * @api\n */\n\nvar _ol_interaction_PinchZoom_ = function (opt_options) {\n  _ol_interaction_Pointer_.call(this, {\n    handleDownEvent: _ol_interaction_PinchZoom_.handleDownEvent_,\n    handleDragEvent: _ol_interaction_PinchZoom_.handleDragEvent_,\n    handleUpEvent: _ol_interaction_PinchZoom_.handleUpEvent_\n  });\n\n  var options = opt_options ? opt_options : {};\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.constrainResolution_ = options.constrainResolution || false;\n  /**\n   * @private\n   * @type {ol.Coordinate}\n   */\n\n  this.anchor_ = null;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.duration_ = options.duration !== undefined ? options.duration : 400;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.lastDistance_ = undefined;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.lastScaleDelta_ = 1;\n};\n\n_ol_.inherits(_ol_interaction_PinchZoom_, _ol_interaction_Pointer_);\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {ol.interaction.PinchZoom}\n * @private\n */\n\n\n_ol_interaction_PinchZoom_.handleDragEvent_ = function (mapBrowserEvent) {\n  var scaleDelta = 1.0;\n  var touch0 = this.targetPointers[0];\n  var touch1 = this.targetPointers[1];\n  var dx = touch0.clientX - touch1.clientX;\n  var dy = touch0.clientY - touch1.clientY; // distance between touches\n\n  var distance = Math.sqrt(dx * dx + dy * dy);\n\n  if (this.lastDistance_ !== undefined) {\n    scaleDelta = this.lastDistance_ / distance;\n  }\n\n  this.lastDistance_ = distance;\n  var map = mapBrowserEvent.map;\n  var view = map.getView();\n  var resolution = view.getResolution();\n  var maxResolution = view.getMaxResolution();\n  var minResolution = view.getMinResolution();\n  var newResolution = resolution * scaleDelta;\n\n  if (newResolution > maxResolution) {\n    scaleDelta = maxResolution / resolution;\n    newResolution = maxResolution;\n  } else if (newResolution < minResolution) {\n    scaleDelta = minResolution / resolution;\n    newResolution = minResolution;\n  }\n\n  if (scaleDelta != 1.0) {\n    this.lastScaleDelta_ = scaleDelta;\n  } // scale anchor point.\n\n\n  var viewportPosition = map.getViewport().getBoundingClientRect();\n\n  var centroid = _ol_interaction_Pointer_.centroid(this.targetPointers);\n\n  centroid[0] -= viewportPosition.left;\n  centroid[1] -= viewportPosition.top;\n  this.anchor_ = map.getCoordinateFromPixel(centroid); // scale, bypass the resolution constraint\n\n  map.render();\n\n  _ol_interaction_Interaction_.zoomWithoutConstraints(view, newResolution, this.anchor_);\n};\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Stop drag sequence?\n * @this {ol.interaction.PinchZoom}\n * @private\n */\n\n\n_ol_interaction_PinchZoom_.handleUpEvent_ = function (mapBrowserEvent) {\n  if (this.targetPointers.length < 2) {\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    view.setHint(_ol_ViewHint_.INTERACTING, -1);\n    var resolution = view.getResolution();\n\n    if (this.constrainResolution_ || resolution < view.getMinResolution() || resolution > view.getMaxResolution()) {\n      // Zoom to final resolution, with an animation, and provide a\n      // direction not to zoom out/in if user was pinching in/out.\n      // Direction is > 0 if pinching out, and < 0 if pinching in.\n      var direction = this.lastScaleDelta_ - 1;\n\n      _ol_interaction_Interaction_.zoom(view, resolution, this.anchor_, this.duration_, direction);\n    }\n\n    return false;\n  } else {\n    return true;\n  }\n};\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Start drag sequence?\n * @this {ol.interaction.PinchZoom}\n * @private\n */\n\n\n_ol_interaction_PinchZoom_.handleDownEvent_ = function (mapBrowserEvent) {\n  if (this.targetPointers.length >= 2) {\n    var map = mapBrowserEvent.map;\n    this.anchor_ = null;\n    this.lastDistance_ = undefined;\n    this.lastScaleDelta_ = 1;\n\n    if (!this.handlingDownUpSequence) {\n      map.getView().setHint(_ol_ViewHint_.INTERACTING, 1);\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_interaction_PinchZoom_.prototype.shouldStopEvent = _ol_functions_.FALSE;\nexport default _ol_interaction_PinchZoom_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/interaction/pinchzoom.js"],"names":["_ol_","_ol_ViewHint_","_ol_functions_","_ol_interaction_Interaction_","_ol_interaction_Pointer_","_ol_interaction_PinchZoom_","opt_options","call","handleDownEvent","handleDownEvent_","handleDragEvent","handleDragEvent_","handleUpEvent","handleUpEvent_","options","constrainResolution_","constrainResolution","anchor_","duration_","duration","undefined","lastDistance_","lastScaleDelta_","inherits","mapBrowserEvent","scaleDelta","touch0","targetPointers","touch1","dx","clientX","dy","clientY","distance","Math","sqrt","map","view","getView","resolution","getResolution","maxResolution","getMaxResolution","minResolution","getMinResolution","newResolution","viewportPosition","getViewport","getBoundingClientRect","centroid","left","top","getCoordinateFromPixel","render","zoomWithoutConstraints","length","setHint","INTERACTING","direction","zoom","handlingDownUpSequence","prototype","shouldStopEvent","FALSE"],"mappings":"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","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_ViewHint_ from '../viewhint.js';\nimport _ol_functions_ from '../functions.js';\nimport _ol_interaction_Interaction_ from '../interaction/interaction.js';\nimport _ol_interaction_Pointer_ from '../interaction/pointer.js';\n\n/**\n * @classdesc\n * Allows the user to zoom the map by pinching with two fingers\n * on a touch screen.\n *\n * @constructor\n * @extends {ol.interaction.Pointer}\n * @param {olx.interaction.PinchZoomOptions=} opt_options Options.\n * @api\n */\nvar _ol_interaction_PinchZoom_ = function(opt_options) {\n\n  _ol_interaction_Pointer_.call(this, {\n    handleDownEvent: _ol_interaction_PinchZoom_.handleDownEvent_,\n    handleDragEvent: _ol_interaction_PinchZoom_.handleDragEvent_,\n    handleUpEvent: _ol_interaction_PinchZoom_.handleUpEvent_\n  });\n\n  var options = opt_options ? opt_options : {};\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.constrainResolution_ = options.constrainResolution || false;\n\n  /**\n   * @private\n   * @type {ol.Coordinate}\n   */\n  this.anchor_ = null;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.duration_ = options.duration !== undefined ? options.duration : 400;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.lastDistance_ = undefined;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.lastScaleDelta_ = 1;\n\n};\n\n_ol_.inherits(_ol_interaction_PinchZoom_, _ol_interaction_Pointer_);\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {ol.interaction.PinchZoom}\n * @private\n */\n_ol_interaction_PinchZoom_.handleDragEvent_ = function(mapBrowserEvent) {\n  var scaleDelta = 1.0;\n\n  var touch0 = this.targetPointers[0];\n  var touch1 = this.targetPointers[1];\n  var dx = touch0.clientX - touch1.clientX;\n  var dy = touch0.clientY - touch1.clientY;\n\n  // distance between touches\n  var distance = Math.sqrt(dx * dx + dy * dy);\n\n  if (this.lastDistance_ !== undefined) {\n    scaleDelta = this.lastDistance_ / distance;\n  }\n  this.lastDistance_ = distance;\n\n\n  var map = mapBrowserEvent.map;\n  var view = map.getView();\n  var resolution = view.getResolution();\n  var maxResolution = view.getMaxResolution();\n  var minResolution = view.getMinResolution();\n  var newResolution = resolution * scaleDelta;\n  if (newResolution > maxResolution) {\n    scaleDelta = maxResolution / resolution;\n    newResolution = maxResolution;\n  } else if (newResolution < minResolution) {\n    scaleDelta = minResolution / resolution;\n    newResolution = minResolution;\n  }\n\n  if (scaleDelta != 1.0) {\n    this.lastScaleDelta_ = scaleDelta;\n  }\n\n  // scale anchor point.\n  var viewportPosition = map.getViewport().getBoundingClientRect();\n  var centroid = _ol_interaction_Pointer_.centroid(this.targetPointers);\n  centroid[0] -= viewportPosition.left;\n  centroid[1] -= viewportPosition.top;\n  this.anchor_ = map.getCoordinateFromPixel(centroid);\n\n  // scale, bypass the resolution constraint\n  map.render();\n  _ol_interaction_Interaction_.zoomWithoutConstraints(view, newResolution, this.anchor_);\n};\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Stop drag sequence?\n * @this {ol.interaction.PinchZoom}\n * @private\n */\n_ol_interaction_PinchZoom_.handleUpEvent_ = function(mapBrowserEvent) {\n  if (this.targetPointers.length < 2) {\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    view.setHint(_ol_ViewHint_.INTERACTING, -1);\n    var resolution = view.getResolution();\n    if (this.constrainResolution_ ||\n        resolution < view.getMinResolution() ||\n        resolution > view.getMaxResolution()) {\n      // Zoom to final resolution, with an animation, and provide a\n      // direction not to zoom out/in if user was pinching in/out.\n      // Direction is > 0 if pinching out, and < 0 if pinching in.\n      var direction = this.lastScaleDelta_ - 1;\n      _ol_interaction_Interaction_.zoom(view, resolution,\n          this.anchor_, this.duration_, direction);\n    }\n    return false;\n  } else {\n    return true;\n  }\n};\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Start drag sequence?\n * @this {ol.interaction.PinchZoom}\n * @private\n */\n_ol_interaction_PinchZoom_.handleDownEvent_ = function(mapBrowserEvent) {\n  if (this.targetPointers.length >= 2) {\n    var map = mapBrowserEvent.map;\n    this.anchor_ = null;\n    this.lastDistance_ = undefined;\n    this.lastScaleDelta_ = 1;\n    if (!this.handlingDownUpSequence) {\n      map.getView().setHint(_ol_ViewHint_.INTERACTING, 1);\n    }\n    return true;\n  } else {\n    return false;\n  }\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_interaction_PinchZoom_.prototype.shouldStopEvent = _ol_functions_.FALSE;\nexport default _ol_interaction_PinchZoom_;\n"]},"metadata":{},"sourceType":"module"}