{"ast":null,"code":"import _ol_asserts_ from './asserts.js';\nimport _ol_math_ from './math.js';\nvar _ol_color_ = {};\n/**\n * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.\n * @const\n * @type {RegExp}\n * @private\n */\n\n_ol_color_.HEX_COLOR_RE_ = /^#(?:[0-9a-f]{3,4}){1,2}$/i;\n/**\n * Regular expression for matching potential named color style strings.\n * @const\n * @type {RegExp}\n * @private\n */\n\n_ol_color_.NAMED_COLOR_RE_ = /^([a-z]*)$/i;\n/**\n * Return the color as an array. This function maintains a cache of calculated\n * arrays which means the result should not be modified.\n * @param {ol.Color|string} color Color.\n * @return {ol.Color} Color.\n * @api\n */\n\n_ol_color_.asArray = function (color) {\n  if (Array.isArray(color)) {\n    return color;\n  } else {\n    return _ol_color_.fromString(\n    /** @type {string} */\n    color);\n  }\n};\n/**\n * Return the color as an rgba string.\n * @param {ol.Color|string} color Color.\n * @return {string} Rgba string.\n * @api\n */\n\n\n_ol_color_.asString = function (color) {\n  if (typeof color === 'string') {\n    return color;\n  } else {\n    return _ol_color_.toString(color);\n  }\n};\n/**\n * Return named color as an rgba string.\n * @param {string} color Named color.\n * @return {string} Rgb string.\n */\n\n\n_ol_color_.fromNamed = function (color) {\n  var el = document.createElement('div');\n  el.style.color = color;\n  document.body.appendChild(el);\n  var rgb = getComputedStyle(el).color;\n  document.body.removeChild(el);\n  return rgb;\n};\n/**\n * @param {string} s String.\n * @return {ol.Color} Color.\n */\n\n\n_ol_color_.fromString = function () {\n  // We maintain a small cache of parsed strings.  To provide cheap LRU-like\n  // semantics, whenever the cache grows too large we simply delete an\n  // arbitrary 25% of the entries.\n\n  /**\n   * @const\n   * @type {number}\n   */\n  var MAX_CACHE_SIZE = 1024;\n  /**\n   * @type {Object.<string, ol.Color>}\n   */\n\n  var cache = {};\n  /**\n   * @type {number}\n   */\n\n  var cacheSize = 0;\n  return (\n    /**\n     * @param {string} s String.\n     * @return {ol.Color} Color.\n     */\n    function (s) {\n      var color;\n\n      if (cache.hasOwnProperty(s)) {\n        color = cache[s];\n      } else {\n        if (cacheSize >= MAX_CACHE_SIZE) {\n          var i = 0;\n          var key;\n\n          for (key in cache) {\n            if ((i++ & 3) === 0) {\n              delete cache[key];\n              --cacheSize;\n            }\n          }\n        }\n\n        color = _ol_color_.fromStringInternal_(s);\n        cache[s] = color;\n        ++cacheSize;\n      }\n\n      return color;\n    }\n  );\n}();\n/**\n * @param {string} s String.\n * @private\n * @return {ol.Color} Color.\n */\n\n\n_ol_color_.fromStringInternal_ = function (s) {\n  var r, g, b, a, color, parts;\n\n  if (_ol_color_.NAMED_COLOR_RE_.exec(s)) {\n    s = _ol_color_.fromNamed(s);\n  }\n\n  if (_ol_color_.HEX_COLOR_RE_.exec(s)) {\n    // hex\n    var n = s.length - 1; // number of hex digits\n\n    var d; // number of digits per channel\n\n    if (n <= 4) {\n      d = 1;\n    } else {\n      d = 2;\n    }\n\n    var hasAlpha = n === 4 || n === 8;\n    r = parseInt(s.substr(1 + 0 * d, d), 16);\n    g = parseInt(s.substr(1 + 1 * d, d), 16);\n    b = parseInt(s.substr(1 + 2 * d, d), 16);\n\n    if (hasAlpha) {\n      a = parseInt(s.substr(1 + 3 * d, d), 16);\n    } else {\n      a = 255;\n    }\n\n    if (d == 1) {\n      r = (r << 4) + r;\n      g = (g << 4) + g;\n      b = (b << 4) + b;\n\n      if (hasAlpha) {\n        a = (a << 4) + a;\n      }\n    }\n\n    color = [r, g, b, a / 255];\n  } else if (s.indexOf('rgba(') == 0) {\n    // rgba()\n    parts = s.slice(5, -1).split(',').map(Number);\n    color = _ol_color_.normalize(parts);\n  } else if (s.indexOf('rgb(') == 0) {\n    // rgb()\n    parts = s.slice(4, -1).split(',').map(Number);\n    parts.push(1);\n    color = _ol_color_.normalize(parts);\n  } else {\n    _ol_asserts_.assert(false, 14); // Invalid color\n\n  }\n\n  return (\n    /** @type {ol.Color} */\n    color\n  );\n};\n/**\n * @param {ol.Color} color Color.\n * @param {ol.Color=} opt_color Color.\n * @return {ol.Color} Clamped color.\n */\n\n\n_ol_color_.normalize = function (color, opt_color) {\n  var result = opt_color || [];\n  result[0] = _ol_math_.clamp(color[0] + 0.5 | 0, 0, 255);\n  result[1] = _ol_math_.clamp(color[1] + 0.5 | 0, 0, 255);\n  result[2] = _ol_math_.clamp(color[2] + 0.5 | 0, 0, 255);\n  result[3] = _ol_math_.clamp(color[3], 0, 1);\n  return result;\n};\n/**\n * @param {ol.Color} color Color.\n * @return {string} String.\n */\n\n\n_ol_color_.toString = function (color) {\n  var r = color[0];\n\n  if (r != (r | 0)) {\n    r = r + 0.5 | 0;\n  }\n\n  var g = color[1];\n\n  if (g != (g | 0)) {\n    g = g + 0.5 | 0;\n  }\n\n  var b = color[2];\n\n  if (b != (b | 0)) {\n    b = b + 0.5 | 0;\n  }\n\n  var a = color[3] === undefined ? 1 : color[3];\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n};\n\nexport default _ol_color_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/color.js"],"names":["_ol_asserts_","_ol_math_","_ol_color_","HEX_COLOR_RE_","NAMED_COLOR_RE_","asArray","color","Array","isArray","fromString","asString","toString","fromNamed","el","document","createElement","style","body","appendChild","rgb","getComputedStyle","removeChild","MAX_CACHE_SIZE","cache","cacheSize","s","hasOwnProperty","i","key","fromStringInternal_","r","g","b","a","parts","exec","n","length","d","hasAlpha","parseInt","substr","indexOf","slice","split","map","Number","normalize","push","assert","opt_color","result","clamp","undefined"],"mappings":"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","sourcesContent":["import _ol_asserts_ from './asserts.js';\nimport _ol_math_ from './math.js';\nvar _ol_color_ = {};\n\n\n/**\n * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.\n * @const\n * @type {RegExp}\n * @private\n */\n_ol_color_.HEX_COLOR_RE_ = /^#(?:[0-9a-f]{3,4}){1,2}$/i;\n\n\n/**\n * Regular expression for matching potential named color style strings.\n * @const\n * @type {RegExp}\n * @private\n */\n_ol_color_.NAMED_COLOR_RE_ = /^([a-z]*)$/i;\n\n\n/**\n * Return the color as an array. This function maintains a cache of calculated\n * arrays which means the result should not be modified.\n * @param {ol.Color|string} color Color.\n * @return {ol.Color} Color.\n * @api\n */\n_ol_color_.asArray = function(color) {\n  if (Array.isArray(color)) {\n    return color;\n  } else {\n    return _ol_color_.fromString(/** @type {string} */ (color));\n  }\n};\n\n\n/**\n * Return the color as an rgba string.\n * @param {ol.Color|string} color Color.\n * @return {string} Rgba string.\n * @api\n */\n_ol_color_.asString = function(color) {\n  if (typeof color === 'string') {\n    return color;\n  } else {\n    return _ol_color_.toString(color);\n  }\n};\n\n/**\n * Return named color as an rgba string.\n * @param {string} color Named color.\n * @return {string} Rgb string.\n */\n_ol_color_.fromNamed = function(color) {\n  var el = document.createElement('div');\n  el.style.color = color;\n  document.body.appendChild(el);\n  var rgb = getComputedStyle(el).color;\n  document.body.removeChild(el);\n  return rgb;\n};\n\n\n/**\n * @param {string} s String.\n * @return {ol.Color} Color.\n */\n_ol_color_.fromString = (\n  function() {\n\n    // We maintain a small cache of parsed strings.  To provide cheap LRU-like\n    // semantics, whenever the cache grows too large we simply delete an\n    // arbitrary 25% of the entries.\n\n    /**\n     * @const\n     * @type {number}\n     */\n    var MAX_CACHE_SIZE = 1024;\n\n    /**\n     * @type {Object.<string, ol.Color>}\n     */\n    var cache = {};\n\n    /**\n     * @type {number}\n     */\n    var cacheSize = 0;\n\n    return (\n      /**\n       * @param {string} s String.\n       * @return {ol.Color} Color.\n       */\n      function(s) {\n        var color;\n        if (cache.hasOwnProperty(s)) {\n          color = cache[s];\n        } else {\n          if (cacheSize >= MAX_CACHE_SIZE) {\n            var i = 0;\n            var key;\n            for (key in cache) {\n              if ((i++ & 3) === 0) {\n                delete cache[key];\n                --cacheSize;\n              }\n            }\n          }\n          color = _ol_color_.fromStringInternal_(s);\n          cache[s] = color;\n          ++cacheSize;\n        }\n        return color;\n      }\n    );\n\n  })();\n\n\n/**\n * @param {string} s String.\n * @private\n * @return {ol.Color} Color.\n */\n_ol_color_.fromStringInternal_ = function(s) {\n  var r, g, b, a, color, parts;\n\n  if (_ol_color_.NAMED_COLOR_RE_.exec(s)) {\n    s = _ol_color_.fromNamed(s);\n  }\n\n  if (_ol_color_.HEX_COLOR_RE_.exec(s)) { // hex\n    var n = s.length - 1; // number of hex digits\n    var d; // number of digits per channel\n    if (n <= 4) {\n      d = 1;\n    } else {\n      d = 2;\n    }\n    var hasAlpha = n === 4 || n === 8;\n    r = parseInt(s.substr(1 + 0 * d, d), 16);\n    g = parseInt(s.substr(1 + 1 * d, d), 16);\n    b = parseInt(s.substr(1 + 2 * d, d), 16);\n    if (hasAlpha) {\n      a = parseInt(s.substr(1 + 3 * d, d), 16);\n    } else {\n      a = 255;\n    }\n    if (d == 1) {\n      r = (r << 4) + r;\n      g = (g << 4) + g;\n      b = (b << 4) + b;\n      if (hasAlpha) {\n        a = (a << 4) + a;\n      }\n    }\n    color = [r, g, b, a / 255];\n  } else if (s.indexOf('rgba(') == 0) { // rgba()\n    parts = s.slice(5, -1).split(',').map(Number);\n    color = _ol_color_.normalize(parts);\n  } else if (s.indexOf('rgb(') == 0) { // rgb()\n    parts = s.slice(4, -1).split(',').map(Number);\n    parts.push(1);\n    color = _ol_color_.normalize(parts);\n  } else {\n    _ol_asserts_.assert(false, 14); // Invalid color\n  }\n  return /** @type {ol.Color} */ (color);\n};\n\n\n/**\n * @param {ol.Color} color Color.\n * @param {ol.Color=} opt_color Color.\n * @return {ol.Color} Clamped color.\n */\n_ol_color_.normalize = function(color, opt_color) {\n  var result = opt_color || [];\n  result[0] = _ol_math_.clamp((color[0] + 0.5) | 0, 0, 255);\n  result[1] = _ol_math_.clamp((color[1] + 0.5) | 0, 0, 255);\n  result[2] = _ol_math_.clamp((color[2] + 0.5) | 0, 0, 255);\n  result[3] = _ol_math_.clamp(color[3], 0, 1);\n  return result;\n};\n\n\n/**\n * @param {ol.Color} color Color.\n * @return {string} String.\n */\n_ol_color_.toString = function(color) {\n  var r = color[0];\n  if (r != (r | 0)) {\n    r = (r + 0.5) | 0;\n  }\n  var g = color[1];\n  if (g != (g | 0)) {\n    g = (g + 0.5) | 0;\n  }\n  var b = color[2];\n  if (b != (b | 0)) {\n    b = (b + 0.5) | 0;\n  }\n  var a = color[3] === undefined ? 1 : color[3];\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n};\nexport default _ol_color_;\n"]},"metadata":{},"sourceType":"module"}