{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_functions_ from '../functions.js';\nimport _ol_MapBrowserEventType_ from '../mapbrowsereventtype.js';\nimport _ol_MapBrowserPointerEvent_ from '../mapbrowserpointerevent.js';\nimport _ol_interaction_Interaction_ from '../interaction/interaction.js';\nimport _ol_obj_ from '../obj.js';\n/**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n *\n * @constructor\n * @param {olx.interaction.PointerOptions=} opt_options Options.\n * @extends {ol.interaction.Interaction}\n * @api\n */\n\nvar _ol_interaction_Pointer_ = function (opt_options) {\n  var options = opt_options ? opt_options : {};\n  var handleEvent = options.handleEvent ? options.handleEvent : _ol_interaction_Pointer_.handleEvent;\n\n  _ol_interaction_Interaction_.call(this, {\n    handleEvent: handleEvent\n  });\n  /**\n   * @type {function(ol.MapBrowserPointerEvent):boolean}\n   * @private\n   */\n\n\n  this.handleDownEvent_ = options.handleDownEvent ? options.handleDownEvent : _ol_interaction_Pointer_.handleDownEvent;\n  /**\n   * @type {function(ol.MapBrowserPointerEvent)}\n   * @private\n   */\n\n  this.handleDragEvent_ = options.handleDragEvent ? options.handleDragEvent : _ol_interaction_Pointer_.handleDragEvent;\n  /**\n   * @type {function(ol.MapBrowserPointerEvent)}\n   * @private\n   */\n\n  this.handleMoveEvent_ = options.handleMoveEvent ? options.handleMoveEvent : _ol_interaction_Pointer_.handleMoveEvent;\n  /**\n   * @type {function(ol.MapBrowserPointerEvent):boolean}\n   * @private\n   */\n\n  this.handleUpEvent_ = options.handleUpEvent ? options.handleUpEvent : _ol_interaction_Pointer_.handleUpEvent;\n  /**\n   * @type {boolean}\n   * @protected\n   */\n\n  this.handlingDownUpSequence = false;\n  /**\n   * @type {Object.<string, ol.pointer.PointerEvent>}\n   * @private\n   */\n\n  this.trackedPointers_ = {};\n  /**\n   * @type {Array.<ol.pointer.PointerEvent>}\n   * @protected\n   */\n\n  this.targetPointers = [];\n};\n\n_ol_.inherits(_ol_interaction_Pointer_, _ol_interaction_Interaction_);\n/**\n * @param {Array.<ol.pointer.PointerEvent>} pointerEvents List of events.\n * @return {ol.Pixel} Centroid pixel.\n */\n\n\n_ol_interaction_Pointer_.centroid = function (pointerEvents) {\n  var length = pointerEvents.length;\n  var clientX = 0;\n  var clientY = 0;\n\n  for (var i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n\n  return [clientX / length, clientY / length];\n};\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Whether the event is a pointerdown, pointerdrag\n *     or pointerup event.\n * @private\n */\n\n\n_ol_interaction_Pointer_.prototype.isPointerDraggingEvent_ = function (mapBrowserEvent) {\n  var type = mapBrowserEvent.type;\n  return type === _ol_MapBrowserEventType_.POINTERDOWN || type === _ol_MapBrowserEventType_.POINTERDRAG || type === _ol_MapBrowserEventType_.POINTERUP;\n};\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @private\n */\n\n\n_ol_interaction_Pointer_.prototype.updateTrackedPointers_ = function (mapBrowserEvent) {\n  if (this.isPointerDraggingEvent_(mapBrowserEvent)) {\n    var event = mapBrowserEvent.pointerEvent;\n    var id = event.pointerId.toString();\n\n    if (mapBrowserEvent.type == _ol_MapBrowserEventType_.POINTERUP) {\n      delete this.trackedPointers_[id];\n    } else if (mapBrowserEvent.type == _ol_MapBrowserEventType_.POINTERDOWN) {\n      this.trackedPointers_[id] = event;\n    } else if (id in this.trackedPointers_) {\n      // update only when there was a pointerdown event for this pointer\n      this.trackedPointers_[id] = event;\n    }\n\n    this.targetPointers = _ol_obj_.getValues(this.trackedPointers_);\n  }\n};\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {ol.interaction.Pointer}\n */\n\n\n_ol_interaction_Pointer_.handleDragEvent = _ol_.nullFunction;\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Capture dragging.\n * @this {ol.interaction.Pointer}\n */\n\n_ol_interaction_Pointer_.handleUpEvent = _ol_functions_.FALSE;\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Capture dragging.\n * @this {ol.interaction.Pointer}\n */\n\n_ol_interaction_Pointer_.handleDownEvent = _ol_functions_.FALSE;\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {ol.interaction.Pointer}\n */\n\n_ol_interaction_Pointer_.handleMoveEvent = _ol_.nullFunction;\n/**\n * Handles the {@link ol.MapBrowserEvent map browser event} and may call into\n * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n * detected.\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {ol.interaction.Pointer}\n * @api\n */\n\n_ol_interaction_Pointer_.handleEvent = function (mapBrowserEvent) {\n  if (!(mapBrowserEvent instanceof _ol_MapBrowserPointerEvent_)) {\n    return true;\n  }\n\n  var stopEvent = false;\n  this.updateTrackedPointers_(mapBrowserEvent);\n\n  if (this.handlingDownUpSequence) {\n    if (mapBrowserEvent.type == _ol_MapBrowserEventType_.POINTERDRAG) {\n      this.handleDragEvent_(mapBrowserEvent);\n    } else if (mapBrowserEvent.type == _ol_MapBrowserEventType_.POINTERUP) {\n      var handledUp = this.handleUpEvent_(mapBrowserEvent);\n      this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;\n    }\n  } else {\n    if (mapBrowserEvent.type == _ol_MapBrowserEventType_.POINTERDOWN) {\n      var handled = this.handleDownEvent_(mapBrowserEvent);\n      this.handlingDownUpSequence = handled;\n      stopEvent = this.shouldStopEvent(handled);\n    } else if (mapBrowserEvent.type == _ol_MapBrowserEventType_.POINTERMOVE) {\n      this.handleMoveEvent_(mapBrowserEvent);\n    }\n  }\n\n  return !stopEvent;\n};\n/**\n * This method is used to determine if \"down\" events should be propagated to\n * other interactions or should be stopped.\n *\n * The method receives the return code of the \"handleDownEvent\" function.\n *\n * By default this function is the \"identity\" function. It's overidden in\n * child classes.\n *\n * @param {boolean} handled Was the event handled by the interaction?\n * @return {boolean} Should the event be stopped?\n * @protected\n */\n\n\n_ol_interaction_Pointer_.prototype.shouldStopEvent = function (handled) {\n  return handled;\n};\n\nexport default _ol_interaction_Pointer_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/interaction/pointer.js"],"names":["_ol_","_ol_functions_","_ol_MapBrowserEventType_","_ol_MapBrowserPointerEvent_","_ol_interaction_Interaction_","_ol_obj_","_ol_interaction_Pointer_","opt_options","options","handleEvent","call","handleDownEvent_","handleDownEvent","handleDragEvent_","handleDragEvent","handleMoveEvent_","handleMoveEvent","handleUpEvent_","handleUpEvent","handlingDownUpSequence","trackedPointers_","targetPointers","inherits","centroid","pointerEvents","length","clientX","clientY","i","prototype","isPointerDraggingEvent_","mapBrowserEvent","type","POINTERDOWN","POINTERDRAG","POINTERUP","updateTrackedPointers_","event","pointerEvent","id","pointerId","toString","getValues","nullFunction","FALSE","stopEvent","handledUp","handled","shouldStopEvent","POINTERMOVE"],"mappings":"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","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_functions_ from '../functions.js';\nimport _ol_MapBrowserEventType_ from '../mapbrowsereventtype.js';\nimport _ol_MapBrowserPointerEvent_ from '../mapbrowserpointerevent.js';\nimport _ol_interaction_Interaction_ from '../interaction/interaction.js';\nimport _ol_obj_ from '../obj.js';\n\n/**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n *\n * @constructor\n * @param {olx.interaction.PointerOptions=} opt_options Options.\n * @extends {ol.interaction.Interaction}\n * @api\n */\nvar _ol_interaction_Pointer_ = function(opt_options) {\n\n  var options = opt_options ? opt_options : {};\n\n  var handleEvent = options.handleEvent ?\n    options.handleEvent : _ol_interaction_Pointer_.handleEvent;\n\n  _ol_interaction_Interaction_.call(this, {\n    handleEvent: handleEvent\n  });\n\n  /**\n   * @type {function(ol.MapBrowserPointerEvent):boolean}\n   * @private\n   */\n  this.handleDownEvent_ = options.handleDownEvent ?\n    options.handleDownEvent : _ol_interaction_Pointer_.handleDownEvent;\n\n  /**\n   * @type {function(ol.MapBrowserPointerEvent)}\n   * @private\n   */\n  this.handleDragEvent_ = options.handleDragEvent ?\n    options.handleDragEvent : _ol_interaction_Pointer_.handleDragEvent;\n\n  /**\n   * @type {function(ol.MapBrowserPointerEvent)}\n   * @private\n   */\n  this.handleMoveEvent_ = options.handleMoveEvent ?\n    options.handleMoveEvent : _ol_interaction_Pointer_.handleMoveEvent;\n\n  /**\n   * @type {function(ol.MapBrowserPointerEvent):boolean}\n   * @private\n   */\n  this.handleUpEvent_ = options.handleUpEvent ?\n    options.handleUpEvent : _ol_interaction_Pointer_.handleUpEvent;\n\n  /**\n   * @type {boolean}\n   * @protected\n   */\n  this.handlingDownUpSequence = false;\n\n  /**\n   * @type {Object.<string, ol.pointer.PointerEvent>}\n   * @private\n   */\n  this.trackedPointers_ = {};\n\n  /**\n   * @type {Array.<ol.pointer.PointerEvent>}\n   * @protected\n   */\n  this.targetPointers = [];\n\n};\n\n_ol_.inherits(_ol_interaction_Pointer_, _ol_interaction_Interaction_);\n\n\n/**\n * @param {Array.<ol.pointer.PointerEvent>} pointerEvents List of events.\n * @return {ol.Pixel} Centroid pixel.\n */\n_ol_interaction_Pointer_.centroid = function(pointerEvents) {\n  var length = pointerEvents.length;\n  var clientX = 0;\n  var clientY = 0;\n  for (var i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n  return [clientX / length, clientY / length];\n};\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Whether the event is a pointerdown, pointerdrag\n *     or pointerup event.\n * @private\n */\n_ol_interaction_Pointer_.prototype.isPointerDraggingEvent_ = function(mapBrowserEvent) {\n  var type = mapBrowserEvent.type;\n  return type === _ol_MapBrowserEventType_.POINTERDOWN ||\n    type === _ol_MapBrowserEventType_.POINTERDRAG ||\n    type === _ol_MapBrowserEventType_.POINTERUP;\n};\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @private\n */\n_ol_interaction_Pointer_.prototype.updateTrackedPointers_ = function(mapBrowserEvent) {\n  if (this.isPointerDraggingEvent_(mapBrowserEvent)) {\n    var event = mapBrowserEvent.pointerEvent;\n\n    var id = event.pointerId.toString();\n    if (mapBrowserEvent.type == _ol_MapBrowserEventType_.POINTERUP) {\n      delete this.trackedPointers_[id];\n    } else if (mapBrowserEvent.type ==\n        _ol_MapBrowserEventType_.POINTERDOWN) {\n      this.trackedPointers_[id] = event;\n    } else if (id in this.trackedPointers_) {\n      // update only when there was a pointerdown event for this pointer\n      this.trackedPointers_[id] = event;\n    }\n    this.targetPointers = _ol_obj_.getValues(this.trackedPointers_);\n  }\n};\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {ol.interaction.Pointer}\n */\n_ol_interaction_Pointer_.handleDragEvent = _ol_.nullFunction;\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Capture dragging.\n * @this {ol.interaction.Pointer}\n */\n_ol_interaction_Pointer_.handleUpEvent = _ol_functions_.FALSE;\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Capture dragging.\n * @this {ol.interaction.Pointer}\n */\n_ol_interaction_Pointer_.handleDownEvent = _ol_functions_.FALSE;\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {ol.interaction.Pointer}\n */\n_ol_interaction_Pointer_.handleMoveEvent = _ol_.nullFunction;\n\n\n/**\n * Handles the {@link ol.MapBrowserEvent map browser event} and may call into\n * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n * detected.\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {ol.interaction.Pointer}\n * @api\n */\n_ol_interaction_Pointer_.handleEvent = function(mapBrowserEvent) {\n  if (!(mapBrowserEvent instanceof _ol_MapBrowserPointerEvent_)) {\n    return true;\n  }\n\n  var stopEvent = false;\n  this.updateTrackedPointers_(mapBrowserEvent);\n  if (this.handlingDownUpSequence) {\n    if (mapBrowserEvent.type == _ol_MapBrowserEventType_.POINTERDRAG) {\n      this.handleDragEvent_(mapBrowserEvent);\n    } else if (mapBrowserEvent.type == _ol_MapBrowserEventType_.POINTERUP) {\n      var handledUp = this.handleUpEvent_(mapBrowserEvent);\n      this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;\n    }\n  } else {\n    if (mapBrowserEvent.type == _ol_MapBrowserEventType_.POINTERDOWN) {\n      var handled = this.handleDownEvent_(mapBrowserEvent);\n      this.handlingDownUpSequence = handled;\n      stopEvent = this.shouldStopEvent(handled);\n    } else if (mapBrowserEvent.type == _ol_MapBrowserEventType_.POINTERMOVE) {\n      this.handleMoveEvent_(mapBrowserEvent);\n    }\n  }\n  return !stopEvent;\n};\n\n\n/**\n * This method is used to determine if \"down\" events should be propagated to\n * other interactions or should be stopped.\n *\n * The method receives the return code of the \"handleDownEvent\" function.\n *\n * By default this function is the \"identity\" function. It's overidden in\n * child classes.\n *\n * @param {boolean} handled Was the event handled by the interaction?\n * @return {boolean} Should the event be stopped?\n * @protected\n */\n_ol_interaction_Pointer_.prototype.shouldStopEvent = function(handled) {\n  return handled;\n};\nexport default _ol_interaction_Pointer_;\n"]},"metadata":{},"sourceType":"module"}