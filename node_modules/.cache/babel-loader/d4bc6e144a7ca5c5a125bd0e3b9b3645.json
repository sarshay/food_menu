{"ast":null,"code":"/**\n * Creates an empty linked list structure.\n *\n * @constructor\n * @struct\n * @param {boolean=} opt_circular The last item is connected to the first one,\n * and the first item to the last one. Default is true.\n */\nvar _ol_structs_LinkedList_ = function (opt_circular) {\n  /**\n   * @private\n   * @type {ol.LinkedListItem|undefined}\n   */\n  this.first_ = undefined;\n  /**\n   * @private\n   * @type {ol.LinkedListItem|undefined}\n   */\n\n  this.last_ = undefined;\n  /**\n   * @private\n   * @type {ol.LinkedListItem|undefined}\n   */\n\n  this.head_ = undefined;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.circular_ = opt_circular === undefined ? true : opt_circular;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.length_ = 0;\n};\n/**\n * Inserts an item into the linked list right after the current one.\n *\n * @param {?} data Item data.\n */\n\n\n_ol_structs_LinkedList_.prototype.insertItem = function (data) {\n  /** @type {ol.LinkedListItem} */\n  var item = {\n    prev: undefined,\n    next: undefined,\n    data: data\n  };\n  var head = this.head_; //Initialize the list.\n\n  if (!head) {\n    this.first_ = item;\n    this.last_ = item;\n\n    if (this.circular_) {\n      item.next = item;\n      item.prev = item;\n    }\n  } else {\n    //Link the new item to the adjacent ones.\n    var next = head.next;\n    item.prev = head;\n    item.next = next;\n    head.next = item;\n\n    if (next) {\n      next.prev = item;\n    }\n\n    if (head === this.last_) {\n      this.last_ = item;\n    }\n  }\n\n  this.head_ = item;\n  this.length_++;\n};\n/**\n * Removes the current item from the list. Sets the cursor to the next item,\n * if possible.\n */\n\n\n_ol_structs_LinkedList_.prototype.removeItem = function () {\n  var head = this.head_;\n\n  if (head) {\n    var next = head.next;\n    var prev = head.prev;\n\n    if (next) {\n      next.prev = prev;\n    }\n\n    if (prev) {\n      prev.next = next;\n    }\n\n    this.head_ = next || prev;\n\n    if (this.first_ === this.last_) {\n      this.head_ = undefined;\n      this.first_ = undefined;\n      this.last_ = undefined;\n    } else if (this.first_ === head) {\n      this.first_ = this.head_;\n    } else if (this.last_ === head) {\n      this.last_ = prev ? this.head_.prev : this.head_;\n    }\n\n    this.length_--;\n  }\n};\n/**\n * Sets the cursor to the first item, and returns the associated data.\n *\n * @return {?} Item data.\n */\n\n\n_ol_structs_LinkedList_.prototype.firstItem = function () {\n  this.head_ = this.first_;\n\n  if (this.head_) {\n    return this.head_.data;\n  }\n\n  return undefined;\n};\n/**\n* Sets the cursor to the last item, and returns the associated data.\n*\n* @return {?} Item data.\n*/\n\n\n_ol_structs_LinkedList_.prototype.lastItem = function () {\n  this.head_ = this.last_;\n\n  if (this.head_) {\n    return this.head_.data;\n  }\n\n  return undefined;\n};\n/**\n * Sets the cursor to the next item, and returns the associated data.\n *\n * @return {?} Item data.\n */\n\n\n_ol_structs_LinkedList_.prototype.nextItem = function () {\n  if (this.head_ && this.head_.next) {\n    this.head_ = this.head_.next;\n    return this.head_.data;\n  }\n\n  return undefined;\n};\n/**\n * Returns the next item's data without moving the cursor.\n *\n * @return {?} Item data.\n */\n\n\n_ol_structs_LinkedList_.prototype.getNextItem = function () {\n  if (this.head_ && this.head_.next) {\n    return this.head_.next.data;\n  }\n\n  return undefined;\n};\n/**\n * Sets the cursor to the previous item, and returns the associated data.\n *\n * @return {?} Item data.\n */\n\n\n_ol_structs_LinkedList_.prototype.prevItem = function () {\n  if (this.head_ && this.head_.prev) {\n    this.head_ = this.head_.prev;\n    return this.head_.data;\n  }\n\n  return undefined;\n};\n/**\n * Returns the previous item's data without moving the cursor.\n *\n * @return {?} Item data.\n */\n\n\n_ol_structs_LinkedList_.prototype.getPrevItem = function () {\n  if (this.head_ && this.head_.prev) {\n    return this.head_.prev.data;\n  }\n\n  return undefined;\n};\n/**\n * Returns the current item's data.\n *\n * @return {?} Item data.\n */\n\n\n_ol_structs_LinkedList_.prototype.getCurrItem = function () {\n  if (this.head_) {\n    return this.head_.data;\n  }\n\n  return undefined;\n};\n/**\n * Sets the first item of the list. This only works for circular lists, and sets\n * the last item accordingly.\n */\n\n\n_ol_structs_LinkedList_.prototype.setFirstItem = function () {\n  if (this.circular_ && this.head_) {\n    this.first_ = this.head_;\n    this.last_ = this.head_.prev;\n  }\n};\n/**\n * Concatenates two lists.\n * @param {ol.structs.LinkedList} list List to merge into the current list.\n */\n\n\n_ol_structs_LinkedList_.prototype.concat = function (list) {\n  if (list.head_) {\n    if (this.head_) {\n      var end = this.head_.next;\n      this.head_.next = list.first_;\n      list.first_.prev = this.head_;\n      end.prev = list.last_;\n      list.last_.next = end;\n      this.length_ += list.length_;\n    } else {\n      this.head_ = list.head_;\n      this.first_ = list.first_;\n      this.last_ = list.last_;\n      this.length_ = list.length_;\n    }\n\n    list.head_ = undefined;\n    list.first_ = undefined;\n    list.last_ = undefined;\n    list.length_ = 0;\n  }\n};\n/**\n * Returns the current length of the list.\n *\n * @return {number} Length.\n */\n\n\n_ol_structs_LinkedList_.prototype.getLength = function () {\n  return this.length_;\n};\n\nexport default _ol_structs_LinkedList_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/structs/linkedlist.js"],"names":["_ol_structs_LinkedList_","opt_circular","first_","undefined","last_","head_","circular_","length_","prototype","insertItem","data","item","prev","next","head","removeItem","firstItem","lastItem","nextItem","getNextItem","prevItem","getPrevItem","getCurrItem","setFirstItem","concat","list","end","getLength"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,uBAAuB,GAAG,UAASC,YAAT,EAAuB;AAEnD;AACF;AACA;AACA;AACE,OAAKC,MAAL,GAAcC,SAAd;AAEA;AACF;AACA;AACA;;AACE,OAAKC,KAAL,GAAaD,SAAb;AAEA;AACF;AACA;AACA;;AACE,OAAKE,KAAL,GAAaF,SAAb;AAEA;AACF;AACA;AACA;;AACE,OAAKG,SAAL,GAAiBL,YAAY,KAAKE,SAAjB,GAA6B,IAA7B,GAAoCF,YAArD;AAEA;AACF;AACA;AACA;;AACE,OAAKM,OAAL,GAAe,CAAf;AACD,CA/BD;AAiCA;AACA;AACA;AACA;AACA;;;AACAP,uBAAuB,CAACQ,SAAxB,CAAkCC,UAAlC,GAA+C,UAASC,IAAT,EAAe;AAE5D;AACA,MAAIC,IAAI,GAAG;AACTC,IAAAA,IAAI,EAAET,SADG;AAETU,IAAAA,IAAI,EAAEV,SAFG;AAGTO,IAAAA,IAAI,EAAEA;AAHG,GAAX;AAMA,MAAII,IAAI,GAAG,KAAKT,KAAhB,CAT4D,CAW5D;;AACA,MAAI,CAACS,IAAL,EAAW;AACT,SAAKZ,MAAL,GAAcS,IAAd;AACA,SAAKP,KAAL,GAAaO,IAAb;;AACA,QAAI,KAAKL,SAAT,EAAoB;AAClBK,MAAAA,IAAI,CAACE,IAAL,GAAYF,IAAZ;AACAA,MAAAA,IAAI,CAACC,IAAL,GAAYD,IAAZ;AACD;AACF,GAPD,MAOO;AACL;AACA,QAAIE,IAAI,GAAGC,IAAI,CAACD,IAAhB;AACAF,IAAAA,IAAI,CAACC,IAAL,GAAYE,IAAZ;AACAH,IAAAA,IAAI,CAACE,IAAL,GAAYA,IAAZ;AACAC,IAAAA,IAAI,CAACD,IAAL,GAAYF,IAAZ;;AACA,QAAIE,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACD,IAAL,GAAYD,IAAZ;AACD;;AAED,QAAIG,IAAI,KAAK,KAAKV,KAAlB,EAAyB;AACvB,WAAKA,KAAL,GAAaO,IAAb;AACD;AACF;;AACD,OAAKN,KAAL,GAAaM,IAAb;AACA,OAAKJ,OAAL;AACD,CAnCD;AAqCA;AACA;AACA;AACA;;;AACAP,uBAAuB,CAACQ,SAAxB,CAAkCO,UAAlC,GAA+C,YAAW;AACxD,MAAID,IAAI,GAAG,KAAKT,KAAhB;;AACA,MAAIS,IAAJ,EAAU;AACR,QAAID,IAAI,GAAGC,IAAI,CAACD,IAAhB;AACA,QAAID,IAAI,GAAGE,IAAI,CAACF,IAAhB;;AACA,QAAIC,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACD,IAAL,GAAYA,IAAZ;AACD;;AACD,QAAIA,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACC,IAAL,GAAYA,IAAZ;AACD;;AACD,SAAKR,KAAL,GAAaQ,IAAI,IAAID,IAArB;;AAEA,QAAI,KAAKV,MAAL,KAAgB,KAAKE,KAAzB,EAAgC;AAC9B,WAAKC,KAAL,GAAaF,SAAb;AACA,WAAKD,MAAL,GAAcC,SAAd;AACA,WAAKC,KAAL,GAAaD,SAAb;AACD,KAJD,MAIO,IAAI,KAAKD,MAAL,KAAgBY,IAApB,EAA0B;AAC/B,WAAKZ,MAAL,GAAc,KAAKG,KAAnB;AACD,KAFM,MAEA,IAAI,KAAKD,KAAL,KAAeU,IAAnB,EAAyB;AAC9B,WAAKV,KAAL,GAAaQ,IAAI,GAAG,KAAKP,KAAL,CAAWO,IAAd,GAAqB,KAAKP,KAA3C;AACD;;AACD,SAAKE,OAAL;AACD;AACF,CAxBD;AA0BA;AACA;AACA;AACA;AACA;;;AACAP,uBAAuB,CAACQ,SAAxB,CAAkCQ,SAAlC,GAA8C,YAAW;AACvD,OAAKX,KAAL,GAAa,KAAKH,MAAlB;;AACA,MAAI,KAAKG,KAAT,EAAgB;AACd,WAAO,KAAKA,KAAL,CAAWK,IAAlB;AACD;;AACD,SAAOP,SAAP;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;;;AACAH,uBAAuB,CAACQ,SAAxB,CAAkCS,QAAlC,GAA6C,YAAW;AACtD,OAAKZ,KAAL,GAAa,KAAKD,KAAlB;;AACA,MAAI,KAAKC,KAAT,EAAgB;AACd,WAAO,KAAKA,KAAL,CAAWK,IAAlB;AACD;;AACD,SAAOP,SAAP;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;;;AACAH,uBAAuB,CAACQ,SAAxB,CAAkCU,QAAlC,GAA6C,YAAW;AACtD,MAAI,KAAKb,KAAL,IAAc,KAAKA,KAAL,CAAWQ,IAA7B,EAAmC;AACjC,SAAKR,KAAL,GAAa,KAAKA,KAAL,CAAWQ,IAAxB;AACA,WAAO,KAAKR,KAAL,CAAWK,IAAlB;AACD;;AACD,SAAOP,SAAP;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;;;AACAH,uBAAuB,CAACQ,SAAxB,CAAkCW,WAAlC,GAAgD,YAAW;AACzD,MAAI,KAAKd,KAAL,IAAc,KAAKA,KAAL,CAAWQ,IAA7B,EAAmC;AACjC,WAAO,KAAKR,KAAL,CAAWQ,IAAX,CAAgBH,IAAvB;AACD;;AACD,SAAOP,SAAP;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;;;AACAH,uBAAuB,CAACQ,SAAxB,CAAkCY,QAAlC,GAA6C,YAAW;AACtD,MAAI,KAAKf,KAAL,IAAc,KAAKA,KAAL,CAAWO,IAA7B,EAAmC;AACjC,SAAKP,KAAL,GAAa,KAAKA,KAAL,CAAWO,IAAxB;AACA,WAAO,KAAKP,KAAL,CAAWK,IAAlB;AACD;;AACD,SAAOP,SAAP;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;;;AACAH,uBAAuB,CAACQ,SAAxB,CAAkCa,WAAlC,GAAgD,YAAW;AACzD,MAAI,KAAKhB,KAAL,IAAc,KAAKA,KAAL,CAAWO,IAA7B,EAAmC;AACjC,WAAO,KAAKP,KAAL,CAAWO,IAAX,CAAgBF,IAAvB;AACD;;AACD,SAAOP,SAAP;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;;;AACAH,uBAAuB,CAACQ,SAAxB,CAAkCc,WAAlC,GAAgD,YAAW;AACzD,MAAI,KAAKjB,KAAT,EAAgB;AACd,WAAO,KAAKA,KAAL,CAAWK,IAAlB;AACD;;AACD,SAAOP,SAAP;AACD,CALD;AAOA;AACA;AACA;AACA;;;AACAH,uBAAuB,CAACQ,SAAxB,CAAkCe,YAAlC,GAAiD,YAAW;AAC1D,MAAI,KAAKjB,SAAL,IAAkB,KAAKD,KAA3B,EAAkC;AAChC,SAAKH,MAAL,GAAc,KAAKG,KAAnB;AACA,SAAKD,KAAL,GAAa,KAAKC,KAAL,CAAWO,IAAxB;AACD;AACF,CALD;AAOA;AACA;AACA;AACA;;;AACAZ,uBAAuB,CAACQ,SAAxB,CAAkCgB,MAAlC,GAA2C,UAASC,IAAT,EAAe;AACxD,MAAIA,IAAI,CAACpB,KAAT,EAAgB;AACd,QAAI,KAAKA,KAAT,EAAgB;AACd,UAAIqB,GAAG,GAAG,KAAKrB,KAAL,CAAWQ,IAArB;AACA,WAAKR,KAAL,CAAWQ,IAAX,GAAkBY,IAAI,CAACvB,MAAvB;AACAuB,MAAAA,IAAI,CAACvB,MAAL,CAAYU,IAAZ,GAAmB,KAAKP,KAAxB;AACAqB,MAAAA,GAAG,CAACd,IAAJ,GAAWa,IAAI,CAACrB,KAAhB;AACAqB,MAAAA,IAAI,CAACrB,KAAL,CAAWS,IAAX,GAAkBa,GAAlB;AACA,WAAKnB,OAAL,IAAgBkB,IAAI,CAAClB,OAArB;AACD,KAPD,MAOO;AACL,WAAKF,KAAL,GAAaoB,IAAI,CAACpB,KAAlB;AACA,WAAKH,MAAL,GAAcuB,IAAI,CAACvB,MAAnB;AACA,WAAKE,KAAL,GAAaqB,IAAI,CAACrB,KAAlB;AACA,WAAKG,OAAL,GAAekB,IAAI,CAAClB,OAApB;AACD;;AACDkB,IAAAA,IAAI,CAACpB,KAAL,GAAaF,SAAb;AACAsB,IAAAA,IAAI,CAACvB,MAAL,GAAcC,SAAd;AACAsB,IAAAA,IAAI,CAACrB,KAAL,GAAaD,SAAb;AACAsB,IAAAA,IAAI,CAAClB,OAAL,GAAe,CAAf;AACD;AACF,CApBD;AAsBA;AACA;AACA;AACA;AACA;;;AACAP,uBAAuB,CAACQ,SAAxB,CAAkCmB,SAAlC,GAA8C,YAAW;AACvD,SAAO,KAAKpB,OAAZ;AACD,CAFD;;AAGA,eAAeP,uBAAf","sourcesContent":["/**\n * Creates an empty linked list structure.\n *\n * @constructor\n * @struct\n * @param {boolean=} opt_circular The last item is connected to the first one,\n * and the first item to the last one. Default is true.\n */\nvar _ol_structs_LinkedList_ = function(opt_circular) {\n\n  /**\n   * @private\n   * @type {ol.LinkedListItem|undefined}\n   */\n  this.first_ = undefined;\n\n  /**\n   * @private\n   * @type {ol.LinkedListItem|undefined}\n   */\n  this.last_ = undefined;\n\n  /**\n   * @private\n   * @type {ol.LinkedListItem|undefined}\n   */\n  this.head_ = undefined;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.circular_ = opt_circular === undefined ? true : opt_circular;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.length_ = 0;\n};\n\n/**\n * Inserts an item into the linked list right after the current one.\n *\n * @param {?} data Item data.\n */\n_ol_structs_LinkedList_.prototype.insertItem = function(data) {\n\n  /** @type {ol.LinkedListItem} */\n  var item = {\n    prev: undefined,\n    next: undefined,\n    data: data\n  };\n\n  var head = this.head_;\n\n  //Initialize the list.\n  if (!head) {\n    this.first_ = item;\n    this.last_ = item;\n    if (this.circular_) {\n      item.next = item;\n      item.prev = item;\n    }\n  } else {\n    //Link the new item to the adjacent ones.\n    var next = head.next;\n    item.prev = head;\n    item.next = next;\n    head.next = item;\n    if (next) {\n      next.prev = item;\n    }\n\n    if (head === this.last_) {\n      this.last_ = item;\n    }\n  }\n  this.head_ = item;\n  this.length_++;\n};\n\n/**\n * Removes the current item from the list. Sets the cursor to the next item,\n * if possible.\n */\n_ol_structs_LinkedList_.prototype.removeItem = function() {\n  var head = this.head_;\n  if (head) {\n    var next = head.next;\n    var prev = head.prev;\n    if (next) {\n      next.prev = prev;\n    }\n    if (prev) {\n      prev.next = next;\n    }\n    this.head_ = next || prev;\n\n    if (this.first_ === this.last_) {\n      this.head_ = undefined;\n      this.first_ = undefined;\n      this.last_ = undefined;\n    } else if (this.first_ === head) {\n      this.first_ = this.head_;\n    } else if (this.last_ === head) {\n      this.last_ = prev ? this.head_.prev : this.head_;\n    }\n    this.length_--;\n  }\n};\n\n/**\n * Sets the cursor to the first item, and returns the associated data.\n *\n * @return {?} Item data.\n */\n_ol_structs_LinkedList_.prototype.firstItem = function() {\n  this.head_ = this.first_;\n  if (this.head_) {\n    return this.head_.data;\n  }\n  return undefined;\n};\n\n/**\n* Sets the cursor to the last item, and returns the associated data.\n*\n* @return {?} Item data.\n*/\n_ol_structs_LinkedList_.prototype.lastItem = function() {\n  this.head_ = this.last_;\n  if (this.head_) {\n    return this.head_.data;\n  }\n  return undefined;\n};\n\n/**\n * Sets the cursor to the next item, and returns the associated data.\n *\n * @return {?} Item data.\n */\n_ol_structs_LinkedList_.prototype.nextItem = function() {\n  if (this.head_ && this.head_.next) {\n    this.head_ = this.head_.next;\n    return this.head_.data;\n  }\n  return undefined;\n};\n\n/**\n * Returns the next item's data without moving the cursor.\n *\n * @return {?} Item data.\n */\n_ol_structs_LinkedList_.prototype.getNextItem = function() {\n  if (this.head_ && this.head_.next) {\n    return this.head_.next.data;\n  }\n  return undefined;\n};\n\n/**\n * Sets the cursor to the previous item, and returns the associated data.\n *\n * @return {?} Item data.\n */\n_ol_structs_LinkedList_.prototype.prevItem = function() {\n  if (this.head_ && this.head_.prev) {\n    this.head_ = this.head_.prev;\n    return this.head_.data;\n  }\n  return undefined;\n};\n\n/**\n * Returns the previous item's data without moving the cursor.\n *\n * @return {?} Item data.\n */\n_ol_structs_LinkedList_.prototype.getPrevItem = function() {\n  if (this.head_ && this.head_.prev) {\n    return this.head_.prev.data;\n  }\n  return undefined;\n};\n\n/**\n * Returns the current item's data.\n *\n * @return {?} Item data.\n */\n_ol_structs_LinkedList_.prototype.getCurrItem = function() {\n  if (this.head_) {\n    return this.head_.data;\n  }\n  return undefined;\n};\n\n/**\n * Sets the first item of the list. This only works for circular lists, and sets\n * the last item accordingly.\n */\n_ol_structs_LinkedList_.prototype.setFirstItem = function() {\n  if (this.circular_ && this.head_) {\n    this.first_ = this.head_;\n    this.last_ = this.head_.prev;\n  }\n};\n\n/**\n * Concatenates two lists.\n * @param {ol.structs.LinkedList} list List to merge into the current list.\n */\n_ol_structs_LinkedList_.prototype.concat = function(list) {\n  if (list.head_) {\n    if (this.head_) {\n      var end = this.head_.next;\n      this.head_.next = list.first_;\n      list.first_.prev = this.head_;\n      end.prev = list.last_;\n      list.last_.next = end;\n      this.length_ += list.length_;\n    } else {\n      this.head_ = list.head_;\n      this.first_ = list.first_;\n      this.last_ = list.last_;\n      this.length_ = list.length_;\n    }\n    list.head_ = undefined;\n    list.first_ = undefined;\n    list.last_ = undefined;\n    list.length_ = 0;\n  }\n};\n\n/**\n * Returns the current length of the list.\n *\n * @return {number} Length.\n */\n_ol_structs_LinkedList_.prototype.getLength = function() {\n  return this.length_;\n};\nexport default _ol_structs_LinkedList_;\n"]},"metadata":{},"sourceType":"module"}