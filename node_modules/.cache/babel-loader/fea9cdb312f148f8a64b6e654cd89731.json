{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_events_EventType_ from '../events/eventtype.js';\nimport _ol_events_condition_ from '../events/condition.js';\nimport _ol_interaction_Interaction_ from '../interaction/interaction.js';\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link ol.Map}. `document` never loses focus but, for any other element,\n * focus will have to be on, and returned to, this element if the keys are to\n * function.\n * See also {@link ol.interaction.KeyboardPan}.\n *\n * @constructor\n * @param {olx.interaction.KeyboardZoomOptions=} opt_options Options.\n * @extends {ol.interaction.Interaction}\n * @api\n */\n\nvar _ol_interaction_KeyboardZoom_ = function (opt_options) {\n  _ol_interaction_Interaction_.call(this, {\n    handleEvent: _ol_interaction_KeyboardZoom_.handleEvent\n  });\n\n  var options = opt_options ? opt_options : {};\n  /**\n   * @private\n   * @type {ol.EventsConditionType}\n   */\n\n  this.condition_ = options.condition ? options.condition : _ol_events_condition_.targetNotEditable;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.delta_ = options.delta ? options.delta : 1;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.duration_ = options.duration !== undefined ? options.duration : 100;\n};\n\n_ol_.inherits(_ol_interaction_KeyboardZoom_, _ol_interaction_Interaction_);\n/**\n * Handles the {@link ol.MapBrowserEvent map browser event} if it was a\n * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n * key pressed was '+' or '-').\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {ol.interaction.KeyboardZoom}\n * @api\n */\n\n\n_ol_interaction_KeyboardZoom_.handleEvent = function (mapBrowserEvent) {\n  var stopEvent = false;\n\n  if (mapBrowserEvent.type == _ol_events_EventType_.KEYDOWN || mapBrowserEvent.type == _ol_events_EventType_.KEYPRESS) {\n    var keyEvent = mapBrowserEvent.originalEvent;\n    var charCode = keyEvent.charCode;\n\n    if (this.condition_(mapBrowserEvent) && (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {\n      var map = mapBrowserEvent.map;\n      var delta = charCode == '+'.charCodeAt(0) ? this.delta_ : -this.delta_;\n      var view = map.getView();\n\n      _ol_interaction_Interaction_.zoomByDelta(view, delta, undefined, this.duration_);\n\n      mapBrowserEvent.preventDefault();\n      stopEvent = true;\n    }\n  }\n\n  return !stopEvent;\n};\n\nexport default _ol_interaction_KeyboardZoom_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/interaction/keyboardzoom.js"],"names":["_ol_","_ol_events_EventType_","_ol_events_condition_","_ol_interaction_Interaction_","_ol_interaction_KeyboardZoom_","opt_options","call","handleEvent","options","condition_","condition","targetNotEditable","delta_","delta","duration_","duration","undefined","inherits","mapBrowserEvent","stopEvent","type","KEYDOWN","KEYPRESS","keyEvent","originalEvent","charCode","charCodeAt","map","view","getView","zoomByDelta","preventDefault"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,qBAAP,MAAkC,wBAAlC;AACA,OAAOC,qBAAP,MAAkC,wBAAlC;AACA,OAAOC,4BAAP,MAAyC,+BAAzC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,6BAA6B,GAAG,UAASC,WAAT,EAAsB;AAExDF,EAAAA,4BAA4B,CAACG,IAA7B,CAAkC,IAAlC,EAAwC;AACtCC,IAAAA,WAAW,EAAEH,6BAA6B,CAACG;AADL,GAAxC;;AAIA,MAAIC,OAAO,GAAGH,WAAW,GAAGA,WAAH,GAAiB,EAA1C;AAEA;AACF;AACA;AACA;;AACE,OAAKI,UAAL,GAAkBD,OAAO,CAACE,SAAR,GAAoBF,OAAO,CAACE,SAA5B,GAChBR,qBAAqB,CAACS,iBADxB;AAGA;AACF;AACA;AACA;;AACE,OAAKC,MAAL,GAAcJ,OAAO,CAACK,KAAR,GAAgBL,OAAO,CAACK,KAAxB,GAAgC,CAA9C;AAEA;AACF;AACA;AACA;;AACE,OAAKC,SAAL,GAAiBN,OAAO,CAACO,QAAR,KAAqBC,SAArB,GAAiCR,OAAO,CAACO,QAAzC,GAAoD,GAArE;AAED,CA3BD;;AA6BAf,IAAI,CAACiB,QAAL,CAAcb,6BAAd,EAA6CD,4BAA7C;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,6BAA6B,CAACG,WAA9B,GAA4C,UAASW,eAAT,EAA0B;AACpE,MAAIC,SAAS,GAAG,KAAhB;;AACA,MAAID,eAAe,CAACE,IAAhB,IAAwBnB,qBAAqB,CAACoB,OAA9C,IACAH,eAAe,CAACE,IAAhB,IAAwBnB,qBAAqB,CAACqB,QADlD,EAC4D;AAC1D,QAAIC,QAAQ,GAAGL,eAAe,CAACM,aAA/B;AACA,QAAIC,QAAQ,GAAGF,QAAQ,CAACE,QAAxB;;AACA,QAAI,KAAKhB,UAAL,CAAgBS,eAAhB,MACCO,QAAQ,IAAI,IAAIC,UAAJ,CAAe,CAAf,CAAZ,IAAiCD,QAAQ,IAAI,IAAIC,UAAJ,CAAe,CAAf,CAD9C,CAAJ,EACsE;AACpE,UAAIC,GAAG,GAAGT,eAAe,CAACS,GAA1B;AACA,UAAId,KAAK,GAAIY,QAAQ,IAAI,IAAIC,UAAJ,CAAe,CAAf,CAAb,GAAkC,KAAKd,MAAvC,GAAgD,CAAC,KAAKA,MAAlE;AACA,UAAIgB,IAAI,GAAGD,GAAG,CAACE,OAAJ,EAAX;;AACA1B,MAAAA,4BAA4B,CAAC2B,WAA7B,CACIF,IADJ,EACUf,KADV,EACiBG,SADjB,EAC4B,KAAKF,SADjC;;AAEAI,MAAAA,eAAe,CAACa,cAAhB;AACAZ,MAAAA,SAAS,GAAG,IAAZ;AACD;AACF;;AACD,SAAO,CAACA,SAAR;AACD,CAlBD;;AAmBA,eAAef,6BAAf","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_events_EventType_ from '../events/eventtype.js';\nimport _ol_events_condition_ from '../events/condition.js';\nimport _ol_interaction_Interaction_ from '../interaction/interaction.js';\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link ol.Map}. `document` never loses focus but, for any other element,\n * focus will have to be on, and returned to, this element if the keys are to\n * function.\n * See also {@link ol.interaction.KeyboardPan}.\n *\n * @constructor\n * @param {olx.interaction.KeyboardZoomOptions=} opt_options Options.\n * @extends {ol.interaction.Interaction}\n * @api\n */\nvar _ol_interaction_KeyboardZoom_ = function(opt_options) {\n\n  _ol_interaction_Interaction_.call(this, {\n    handleEvent: _ol_interaction_KeyboardZoom_.handleEvent\n  });\n\n  var options = opt_options ? opt_options : {};\n\n  /**\n   * @private\n   * @type {ol.EventsConditionType}\n   */\n  this.condition_ = options.condition ? options.condition :\n    _ol_events_condition_.targetNotEditable;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.delta_ = options.delta ? options.delta : 1;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.duration_ = options.duration !== undefined ? options.duration : 100;\n\n};\n\n_ol_.inherits(_ol_interaction_KeyboardZoom_, _ol_interaction_Interaction_);\n\n\n/**\n * Handles the {@link ol.MapBrowserEvent map browser event} if it was a\n * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n * key pressed was '+' or '-').\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {ol.interaction.KeyboardZoom}\n * @api\n */\n_ol_interaction_KeyboardZoom_.handleEvent = function(mapBrowserEvent) {\n  var stopEvent = false;\n  if (mapBrowserEvent.type == _ol_events_EventType_.KEYDOWN ||\n      mapBrowserEvent.type == _ol_events_EventType_.KEYPRESS) {\n    var keyEvent = mapBrowserEvent.originalEvent;\n    var charCode = keyEvent.charCode;\n    if (this.condition_(mapBrowserEvent) &&\n        (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {\n      var map = mapBrowserEvent.map;\n      var delta = (charCode == '+'.charCodeAt(0)) ? this.delta_ : -this.delta_;\n      var view = map.getView();\n      _ol_interaction_Interaction_.zoomByDelta(\n          view, delta, undefined, this.duration_);\n      mapBrowserEvent.preventDefault();\n      stopEvent = true;\n    }\n  }\n  return !stopEvent;\n};\nexport default _ol_interaction_KeyboardZoom_;\n"]},"metadata":{},"sourceType":"module"}