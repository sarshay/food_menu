{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\food_menu\\\\src\\\\map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\"; // import \"./Map.css\";\n\nimport MapContext from \"./MapContext\";\nimport * as ol from \"ol\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Map = ({\n  children,\n  zoom,\n  center\n}) => {\n  _s();\n\n  const mapRef = useRef();\n  const [map, setMap] = useState(null); // on component mount\n\n  useEffect(() => {\n    let options = {\n      view: new ol.View({\n        zoom,\n        center\n      }),\n      layers: [],\n      controls: [],\n      overlays: []\n    };\n    let mapObject = new ol.Map(options);\n    mapObject.setTarget(mapRef.current);\n    setMap(mapObject);\n    return () => mapObject.setTarget(undefined);\n  }, []); // zoom change handler\n\n  useEffect(() => {\n    if (!map) return;\n    map.getView().setZoom(zoom);\n  }, [zoom]); // center change handler\n\n  useEffect(() => {\n    if (!map) return;\n    map.getView().setCenter(center);\n  }, [center]);\n  return /*#__PURE__*/_jsxDEV(MapContext.Provider, {\n    value: {\n      map\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      className: \"ol-map\",\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"Hq8Bpy2UaQ6aFwSTxod1eSq68gU=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/src/map.js"],"names":["React","useRef","useState","useEffect","MapContext","ol","Map","children","zoom","center","mapRef","map","setMap","options","view","View","layers","controls","overlays","mapObject","setTarget","current","undefined","getView","setZoom","setCenter"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD,C,CACA;;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA;AAAlB,CAAD,KAAgC;AAAA;;AAC1C,QAAMC,MAAM,GAAGT,MAAM,EAArB;AACA,QAAM,CAACU,GAAD,EAAMC,MAAN,IAAgBV,QAAQ,CAAC,IAAD,CAA9B,CAF0C,CAG1C;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,OAAO,GAAG;AACZC,MAAAA,IAAI,EAAE,IAAIT,EAAE,CAACU,IAAP,CAAY;AAAEP,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAZ,CADM;AAEZO,MAAAA,MAAM,EAAE,EAFI;AAGZC,MAAAA,QAAQ,EAAE,EAHE;AAIZC,MAAAA,QAAQ,EAAE;AAJE,KAAd;AAMA,QAAIC,SAAS,GAAG,IAAId,EAAE,CAACC,GAAP,CAAWO,OAAX,CAAhB;AACAM,IAAAA,SAAS,CAACC,SAAV,CAAoBV,MAAM,CAACW,OAA3B;AACAT,IAAAA,MAAM,CAACO,SAAD,CAAN;AACA,WAAO,MAAMA,SAAS,CAACC,SAAV,CAAoBE,SAApB,CAAb;AACD,GAXQ,EAWN,EAXM,CAAT,CAJ0C,CAgB1C;;AACAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACQ,GAAL,EAAU;AACVA,IAAAA,GAAG,CAACY,OAAJ,GAAcC,OAAd,CAAsBhB,IAAtB;AACD,GAHQ,EAGN,CAACA,IAAD,CAHM,CAAT,CAjB0C,CAqB1C;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACQ,GAAL,EAAU;AACVA,IAAAA,GAAG,CAACY,OAAJ,GAAcE,SAAd,CAAwBhB,MAAxB;AACD,GAHQ,EAGN,CAACA,MAAD,CAHM,CAAT;AAIA,sBACE,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAEE,MAAAA;AAAF,KAA5B;AAAA,2BACE;AAAK,MAAA,GAAG,EAAED,MAAV;AAAkB,MAAA,SAAS,EAAC,QAA5B;AAAA,gBACGH;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAjCD;;GAAMD,G;;KAAAA,G;AAkCN,eAAeA,GAAf","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\"\r\n// import \"./Map.css\";\r\nimport MapContext from \"./MapContext\";\r\nimport * as ol from \"ol\";\r\n\r\nconst Map = ({ children, zoom, center }) => {\r\n  const mapRef = useRef();\r\n  const [map, setMap] = useState(null);\r\n  // on component mount\r\n  useEffect(() => {\r\n    let options = {\r\n      view: new ol.View({ zoom, center }),\r\n      layers: [],\r\n      controls: [],\r\n      overlays: []\r\n    };\r\n    let mapObject = new ol.Map(options);\r\n    mapObject.setTarget(mapRef.current);\r\n    setMap(mapObject);\r\n    return () => mapObject.setTarget(undefined);\r\n  }, []);\r\n  // zoom change handler\r\n  useEffect(() => {\r\n    if (!map) return;\r\n    map.getView().setZoom(zoom);\r\n  }, [zoom]);\r\n  // center change handler\r\n  useEffect(() => {\r\n    if (!map) return;\r\n    map.getView().setCenter(center)\r\n  }, [center])\r\n  return (\r\n    <MapContext.Provider value={{ map }}>\r\n      <div ref={mapRef} className=\"ol-map\">\r\n        {children}\r\n      </div>\r\n    </MapContext.Provider>\r\n  )\r\n}\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}