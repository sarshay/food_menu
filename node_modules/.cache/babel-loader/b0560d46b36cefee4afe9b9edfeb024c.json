{"ast":null,"code":"import _ol_obj_ from '../obj.js';\nvar _ol_proj_transforms_ = {};\n/**\n * @private\n * @type {Object.<string, Object.<string, ol.TransformFunction>>}\n */\n\n_ol_proj_transforms_.cache_ = {};\n/**\n * Clear the transform cache.\n */\n\n_ol_proj_transforms_.clear = function () {\n  _ol_proj_transforms_.cache_ = {};\n};\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {ol.proj.Projection} source Source.\n * @param {ol.proj.Projection} destination Destination.\n * @param {ol.TransformFunction} transformFn Transform.\n */\n\n\n_ol_proj_transforms_.add = function (source, destination, transformFn) {\n  var sourceCode = source.getCode();\n  var destinationCode = destination.getCode();\n  var transforms = _ol_proj_transforms_.cache_;\n\n  if (!(sourceCode in transforms)) {\n    transforms[sourceCode] = {};\n  }\n\n  transforms[sourceCode][destinationCode] = transformFn;\n};\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {ol.proj.Projection} source Source projection.\n * @param {ol.proj.Projection} destination Destination projection.\n * @return {ol.TransformFunction} transformFn The unregistered transform.\n */\n\n\n_ol_proj_transforms_.remove = function (source, destination) {\n  var sourceCode = source.getCode();\n  var destinationCode = destination.getCode();\n  var transforms = _ol_proj_transforms_.cache_;\n  var transform = transforms[sourceCode][destinationCode];\n  delete transforms[sourceCode][destinationCode];\n\n  if (_ol_obj_.isEmpty(transforms[sourceCode])) {\n    delete transforms[sourceCode];\n  }\n\n  return transform;\n};\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {ol.TransformFunction|undefined} The transform function (if found).\n */\n\n\n_ol_proj_transforms_.get = function (sourceCode, destinationCode) {\n  var transform;\n  var transforms = _ol_proj_transforms_.cache_;\n\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n    transform = transforms[sourceCode][destinationCode];\n  }\n\n  return transform;\n};\n\nexport default _ol_proj_transforms_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/proj/transforms.js"],"names":["_ol_obj_","_ol_proj_transforms_","cache_","clear","add","source","destination","transformFn","sourceCode","getCode","destinationCode","transforms","remove","transform","isEmpty","get"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,IAAIC,oBAAoB,GAAG,EAA3B;AAGA;AACA;AACA;AACA;;AACAA,oBAAoB,CAACC,MAArB,GAA8B,EAA9B;AAGA;AACA;AACA;;AACAD,oBAAoB,CAACE,KAArB,GAA6B,YAAW;AACtCF,EAAAA,oBAAoB,CAACC,MAArB,GAA8B,EAA9B;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAD,oBAAoB,CAACG,GAArB,GAA2B,UAASC,MAAT,EAAiBC,WAAjB,EAA8BC,WAA9B,EAA2C;AACpE,MAAIC,UAAU,GAAGH,MAAM,CAACI,OAAP,EAAjB;AACA,MAAIC,eAAe,GAAGJ,WAAW,CAACG,OAAZ,EAAtB;AACA,MAAIE,UAAU,GAAGV,oBAAoB,CAACC,MAAtC;;AACA,MAAI,EAAEM,UAAU,IAAIG,UAAhB,CAAJ,EAAiC;AAC/BA,IAAAA,UAAU,CAACH,UAAD,CAAV,GAAyB,EAAzB;AACD;;AACDG,EAAAA,UAAU,CAACH,UAAD,CAAV,CAAuBE,eAAvB,IAA0CH,WAA1C;AACD,CARD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAN,oBAAoB,CAACW,MAArB,GAA8B,UAASP,MAAT,EAAiBC,WAAjB,EAA8B;AAC1D,MAAIE,UAAU,GAAGH,MAAM,CAACI,OAAP,EAAjB;AACA,MAAIC,eAAe,GAAGJ,WAAW,CAACG,OAAZ,EAAtB;AACA,MAAIE,UAAU,GAAGV,oBAAoB,CAACC,MAAtC;AACA,MAAIW,SAAS,GAAGF,UAAU,CAACH,UAAD,CAAV,CAAuBE,eAAvB,CAAhB;AACA,SAAOC,UAAU,CAACH,UAAD,CAAV,CAAuBE,eAAvB,CAAP;;AACA,MAAIV,QAAQ,CAACc,OAAT,CAAiBH,UAAU,CAACH,UAAD,CAA3B,CAAJ,EAA8C;AAC5C,WAAOG,UAAU,CAACH,UAAD,CAAjB;AACD;;AACD,SAAOK,SAAP;AACD,CAVD;AAaA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,oBAAoB,CAACc,GAArB,GAA2B,UAASP,UAAT,EAAqBE,eAArB,EAAsC;AAC/D,MAAIG,SAAJ;AACA,MAAIF,UAAU,GAAGV,oBAAoB,CAACC,MAAtC;;AACA,MAAIM,UAAU,IAAIG,UAAd,IAA4BD,eAAe,IAAIC,UAAU,CAACH,UAAD,CAA7D,EAA2E;AACzEK,IAAAA,SAAS,GAAGF,UAAU,CAACH,UAAD,CAAV,CAAuBE,eAAvB,CAAZ;AACD;;AACD,SAAOG,SAAP;AACD,CAPD;;AAQA,eAAeZ,oBAAf","sourcesContent":["import _ol_obj_ from '../obj.js';\nvar _ol_proj_transforms_ = {};\n\n\n/**\n * @private\n * @type {Object.<string, Object.<string, ol.TransformFunction>>}\n */\n_ol_proj_transforms_.cache_ = {};\n\n\n/**\n * Clear the transform cache.\n */\n_ol_proj_transforms_.clear = function() {\n  _ol_proj_transforms_.cache_ = {};\n};\n\n\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {ol.proj.Projection} source Source.\n * @param {ol.proj.Projection} destination Destination.\n * @param {ol.TransformFunction} transformFn Transform.\n */\n_ol_proj_transforms_.add = function(source, destination, transformFn) {\n  var sourceCode = source.getCode();\n  var destinationCode = destination.getCode();\n  var transforms = _ol_proj_transforms_.cache_;\n  if (!(sourceCode in transforms)) {\n    transforms[sourceCode] = {};\n  }\n  transforms[sourceCode][destinationCode] = transformFn;\n};\n\n\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {ol.proj.Projection} source Source projection.\n * @param {ol.proj.Projection} destination Destination projection.\n * @return {ol.TransformFunction} transformFn The unregistered transform.\n */\n_ol_proj_transforms_.remove = function(source, destination) {\n  var sourceCode = source.getCode();\n  var destinationCode = destination.getCode();\n  var transforms = _ol_proj_transforms_.cache_;\n  var transform = transforms[sourceCode][destinationCode];\n  delete transforms[sourceCode][destinationCode];\n  if (_ol_obj_.isEmpty(transforms[sourceCode])) {\n    delete transforms[sourceCode];\n  }\n  return transform;\n};\n\n\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {ol.TransformFunction|undefined} The transform function (if found).\n */\n_ol_proj_transforms_.get = function(sourceCode, destinationCode) {\n  var transform;\n  var transforms = _ol_proj_transforms_.cache_;\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n    transform = transforms[sourceCode][destinationCode];\n  }\n  return transform;\n};\nexport default _ol_proj_transforms_;\n"]},"metadata":{},"sourceType":"module"}