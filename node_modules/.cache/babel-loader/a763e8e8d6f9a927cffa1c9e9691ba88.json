{"ast":null,"code":"// Based on https://github.com/Polymer/PointerEvents\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nimport _ol_ from '../index.js';\nimport _ol_pointer_EventSource_ from '../pointer/eventsource.js';\n/**\n * @param {ol.pointer.PointerEventHandler} dispatcher Event handler.\n * @constructor\n * @extends {ol.pointer.EventSource}\n */\n\nvar _ol_pointer_MsSource_ = function (dispatcher) {\n  var mapping = {\n    'MSPointerDown': this.msPointerDown,\n    'MSPointerMove': this.msPointerMove,\n    'MSPointerUp': this.msPointerUp,\n    'MSPointerOut': this.msPointerOut,\n    'MSPointerOver': this.msPointerOver,\n    'MSPointerCancel': this.msPointerCancel,\n    'MSGotPointerCapture': this.msGotPointerCapture,\n    'MSLostPointerCapture': this.msLostPointerCapture\n  };\n\n  _ol_pointer_EventSource_.call(this, dispatcher, mapping);\n  /**\n   * @const\n   * @type {!Object.<string, Event|Object>}\n   */\n\n\n  this.pointerMap = dispatcher.pointerMap;\n  /**\n   * @const\n   * @type {Array.<string>}\n   */\n\n  this.POINTER_TYPES = ['', 'unavailable', 'touch', 'pen', 'mouse'];\n};\n\n_ol_.inherits(_ol_pointer_MsSource_, _ol_pointer_EventSource_);\n/**\n * Creates a copy of the original event that will be used\n * for the fake pointer event.\n *\n * @private\n * @param {Event} inEvent The in event.\n * @return {Object} The copied event.\n */\n\n\n_ol_pointer_MsSource_.prototype.prepareEvent_ = function (inEvent) {\n  var e = inEvent;\n\n  if (typeof inEvent.pointerType === 'number') {\n    e = this.dispatcher.cloneEvent(inEvent, inEvent);\n    e.pointerType = this.POINTER_TYPES[inEvent.pointerType];\n  }\n\n  return e;\n};\n/**\n * Remove this pointer from the list of active pointers.\n * @param {number} pointerId Pointer identifier.\n */\n\n\n_ol_pointer_MsSource_.prototype.cleanup = function (pointerId) {\n  delete this.pointerMap[pointerId.toString()];\n};\n/**\n * Handler for `msPointerDown`.\n *\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_MsSource_.prototype.msPointerDown = function (inEvent) {\n  this.pointerMap[inEvent.pointerId.toString()] = inEvent;\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.down(e, inEvent);\n};\n/**\n * Handler for `msPointerMove`.\n *\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_MsSource_.prototype.msPointerMove = function (inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.move(e, inEvent);\n};\n/**\n * Handler for `msPointerUp`.\n *\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_MsSource_.prototype.msPointerUp = function (inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.up(e, inEvent);\n  this.cleanup(inEvent.pointerId);\n};\n/**\n * Handler for `msPointerOut`.\n *\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_MsSource_.prototype.msPointerOut = function (inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.leaveOut(e, inEvent);\n};\n/**\n * Handler for `msPointerOver`.\n *\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_MsSource_.prototype.msPointerOver = function (inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.enterOver(e, inEvent);\n};\n/**\n * Handler for `msPointerCancel`.\n *\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_MsSource_.prototype.msPointerCancel = function (inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.cancel(e, inEvent);\n  this.cleanup(inEvent.pointerId);\n};\n/**\n * Handler for `msLostPointerCapture`.\n *\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_MsSource_.prototype.msLostPointerCapture = function (inEvent) {\n  var e = this.dispatcher.makeEvent('lostpointercapture', inEvent, inEvent);\n  this.dispatcher.dispatchEvent(e);\n};\n/**\n * Handler for `msGotPointerCapture`.\n *\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_MsSource_.prototype.msGotPointerCapture = function (inEvent) {\n  var e = this.dispatcher.makeEvent('gotpointercapture', inEvent, inEvent);\n  this.dispatcher.dispatchEvent(e);\n};\n\nexport default _ol_pointer_MsSource_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/pointer/mssource.js"],"names":["_ol_","_ol_pointer_EventSource_","_ol_pointer_MsSource_","dispatcher","mapping","msPointerDown","msPointerMove","msPointerUp","msPointerOut","msPointerOver","msPointerCancel","msGotPointerCapture","msLostPointerCapture","call","pointerMap","POINTER_TYPES","inherits","prototype","prepareEvent_","inEvent","e","pointerType","cloneEvent","cleanup","pointerId","toString","down","move","up","leaveOut","enterOver","cancel","makeEvent","dispatchEvent"],"mappings":"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","sourcesContent":["// Based on https://github.com/Polymer/PointerEvents\n\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport _ol_ from '../index.js';\nimport _ol_pointer_EventSource_ from '../pointer/eventsource.js';\n\n/**\n * @param {ol.pointer.PointerEventHandler} dispatcher Event handler.\n * @constructor\n * @extends {ol.pointer.EventSource}\n */\nvar _ol_pointer_MsSource_ = function(dispatcher) {\n  var mapping = {\n    'MSPointerDown': this.msPointerDown,\n    'MSPointerMove': this.msPointerMove,\n    'MSPointerUp': this.msPointerUp,\n    'MSPointerOut': this.msPointerOut,\n    'MSPointerOver': this.msPointerOver,\n    'MSPointerCancel': this.msPointerCancel,\n    'MSGotPointerCapture': this.msGotPointerCapture,\n    'MSLostPointerCapture': this.msLostPointerCapture\n  };\n  _ol_pointer_EventSource_.call(this, dispatcher, mapping);\n\n  /**\n   * @const\n   * @type {!Object.<string, Event|Object>}\n   */\n  this.pointerMap = dispatcher.pointerMap;\n\n  /**\n   * @const\n   * @type {Array.<string>}\n   */\n  this.POINTER_TYPES = [\n    '',\n    'unavailable',\n    'touch',\n    'pen',\n    'mouse'\n  ];\n};\n\n_ol_.inherits(_ol_pointer_MsSource_, _ol_pointer_EventSource_);\n\n\n/**\n * Creates a copy of the original event that will be used\n * for the fake pointer event.\n *\n * @private\n * @param {Event} inEvent The in event.\n * @return {Object} The copied event.\n */\n_ol_pointer_MsSource_.prototype.prepareEvent_ = function(inEvent) {\n  var e = inEvent;\n  if (typeof inEvent.pointerType === 'number') {\n    e = this.dispatcher.cloneEvent(inEvent, inEvent);\n    e.pointerType = this.POINTER_TYPES[inEvent.pointerType];\n  }\n\n  return e;\n};\n\n\n/**\n * Remove this pointer from the list of active pointers.\n * @param {number} pointerId Pointer identifier.\n */\n_ol_pointer_MsSource_.prototype.cleanup = function(pointerId) {\n  delete this.pointerMap[pointerId.toString()];\n};\n\n\n/**\n * Handler for `msPointerDown`.\n *\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_MsSource_.prototype.msPointerDown = function(inEvent) {\n  this.pointerMap[inEvent.pointerId.toString()] = inEvent;\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.down(e, inEvent);\n};\n\n\n/**\n * Handler for `msPointerMove`.\n *\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_MsSource_.prototype.msPointerMove = function(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.move(e, inEvent);\n};\n\n\n/**\n * Handler for `msPointerUp`.\n *\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_MsSource_.prototype.msPointerUp = function(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.up(e, inEvent);\n  this.cleanup(inEvent.pointerId);\n};\n\n\n/**\n * Handler for `msPointerOut`.\n *\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_MsSource_.prototype.msPointerOut = function(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.leaveOut(e, inEvent);\n};\n\n\n/**\n * Handler for `msPointerOver`.\n *\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_MsSource_.prototype.msPointerOver = function(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.enterOver(e, inEvent);\n};\n\n\n/**\n * Handler for `msPointerCancel`.\n *\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_MsSource_.prototype.msPointerCancel = function(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.cancel(e, inEvent);\n  this.cleanup(inEvent.pointerId);\n};\n\n\n/**\n * Handler for `msLostPointerCapture`.\n *\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_MsSource_.prototype.msLostPointerCapture = function(inEvent) {\n  var e = this.dispatcher.makeEvent('lostpointercapture',\n      inEvent, inEvent);\n  this.dispatcher.dispatchEvent(e);\n};\n\n\n/**\n * Handler for `msGotPointerCapture`.\n *\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_MsSource_.prototype.msGotPointerCapture = function(inEvent) {\n  var e = this.dispatcher.makeEvent('gotpointercapture',\n      inEvent, inEvent);\n  this.dispatcher.dispatchEvent(e);\n};\nexport default _ol_pointer_MsSource_;\n"]},"metadata":{},"sourceType":"module"}