{"ast":null,"code":"// Based on https://github.com/Polymer/PointerEvents\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nimport _ol_ from '../index.js';\nimport _ol_array_ from '../array.js';\nimport _ol_pointer_EventSource_ from '../pointer/eventsource.js';\nimport _ol_pointer_MouseSource_ from '../pointer/mousesource.js';\n/**\n * @constructor\n * @param {ol.pointer.PointerEventHandler} dispatcher The event handler.\n * @param {ol.pointer.MouseSource} mouseSource Mouse source.\n * @extends {ol.pointer.EventSource}\n */\n\nvar _ol_pointer_TouchSource_ = function (dispatcher, mouseSource) {\n  var mapping = {\n    'touchstart': this.touchstart,\n    'touchmove': this.touchmove,\n    'touchend': this.touchend,\n    'touchcancel': this.touchcancel\n  };\n\n  _ol_pointer_EventSource_.call(this, dispatcher, mapping);\n  /**\n   * @const\n   * @type {!Object.<string, Event|Object>}\n   */\n\n\n  this.pointerMap = dispatcher.pointerMap;\n  /**\n   * @const\n   * @type {ol.pointer.MouseSource}\n   */\n\n  this.mouseSource = mouseSource;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.firstTouchId_ = undefined;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.clickCount_ = 0;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.resetId_ = undefined;\n};\n\n_ol_.inherits(_ol_pointer_TouchSource_, _ol_pointer_EventSource_);\n/**\n * Mouse event timeout: This should be long enough to\n * ignore compat mouse events made by touch.\n * @const\n * @type {number}\n */\n\n\n_ol_pointer_TouchSource_.DEDUP_TIMEOUT = 2500;\n/**\n * @const\n * @type {number}\n */\n\n_ol_pointer_TouchSource_.CLICK_COUNT_TIMEOUT = 200;\n/**\n * @const\n * @type {string}\n */\n\n_ol_pointer_TouchSource_.POINTER_TYPE = 'touch';\n/**\n * @private\n * @param {Touch} inTouch The in touch.\n * @return {boolean} True, if this is the primary touch.\n */\n\n_ol_pointer_TouchSource_.prototype.isPrimaryTouch_ = function (inTouch) {\n  return this.firstTouchId_ === inTouch.identifier;\n};\n/**\n * Set primary touch if there are no pointers, or the only pointer is the mouse.\n * @param {Touch} inTouch The in touch.\n * @private\n */\n\n\n_ol_pointer_TouchSource_.prototype.setPrimaryTouch_ = function (inTouch) {\n  var count = Object.keys(this.pointerMap).length;\n\n  if (count === 0 || count === 1 && _ol_pointer_MouseSource_.POINTER_ID.toString() in this.pointerMap) {\n    this.firstTouchId_ = inTouch.identifier;\n    this.cancelResetClickCount_();\n  }\n};\n/**\n * @private\n * @param {Object} inPointer The in pointer object.\n */\n\n\n_ol_pointer_TouchSource_.prototype.removePrimaryPointer_ = function (inPointer) {\n  if (inPointer.isPrimary) {\n    this.firstTouchId_ = undefined;\n    this.resetClickCount_();\n  }\n};\n/**\n * @private\n */\n\n\n_ol_pointer_TouchSource_.prototype.resetClickCount_ = function () {\n  this.resetId_ = setTimeout(this.resetClickCountHandler_.bind(this), _ol_pointer_TouchSource_.CLICK_COUNT_TIMEOUT);\n};\n/**\n * @private\n */\n\n\n_ol_pointer_TouchSource_.prototype.resetClickCountHandler_ = function () {\n  this.clickCount_ = 0;\n  this.resetId_ = undefined;\n};\n/**\n * @private\n */\n\n\n_ol_pointer_TouchSource_.prototype.cancelResetClickCount_ = function () {\n  if (this.resetId_ !== undefined) {\n    clearTimeout(this.resetId_);\n  }\n};\n/**\n * @private\n * @param {Event} browserEvent Browser event\n * @param {Touch} inTouch Touch event\n * @return {Object} A pointer object.\n */\n\n\n_ol_pointer_TouchSource_.prototype.touchToPointer_ = function (browserEvent, inTouch) {\n  var e = this.dispatcher.cloneEvent(browserEvent, inTouch); // Spec specifies that pointerId 1 is reserved for Mouse.\n  // Touch identifiers can start at 0.\n  // Add 2 to the touch identifier for compatibility.\n\n  e.pointerId = inTouch.identifier + 2; // TODO: check if this is necessary?\n  //e.target = findTarget(e);\n\n  e.bubbles = true;\n  e.cancelable = true;\n  e.detail = this.clickCount_;\n  e.button = 0;\n  e.buttons = 1;\n  e.width = inTouch.webkitRadiusX || inTouch.radiusX || 0;\n  e.height = inTouch.webkitRadiusY || inTouch.radiusY || 0;\n  e.pressure = inTouch.webkitForce || inTouch.force || 0.5;\n  e.isPrimary = this.isPrimaryTouch_(inTouch);\n  e.pointerType = _ol_pointer_TouchSource_.POINTER_TYPE; // make sure that the properties that are different for\n  // each `Touch` object are not copied from the BrowserEvent object\n\n  e.clientX = inTouch.clientX;\n  e.clientY = inTouch.clientY;\n  e.screenX = inTouch.screenX;\n  e.screenY = inTouch.screenY;\n  return e;\n};\n/**\n * @private\n * @param {Event} inEvent Touch event\n * @param {function(Event, Object)} inFunction In function.\n */\n\n\n_ol_pointer_TouchSource_.prototype.processTouches_ = function (inEvent, inFunction) {\n  var touches = Array.prototype.slice.call(inEvent.changedTouches);\n  var count = touches.length;\n\n  function preventDefault() {\n    inEvent.preventDefault();\n  }\n\n  var i, pointer;\n\n  for (i = 0; i < count; ++i) {\n    pointer = this.touchToPointer_(inEvent, touches[i]); // forward touch preventDefaults\n\n    pointer.preventDefault = preventDefault;\n    inFunction.call(this, inEvent, pointer);\n  }\n};\n/**\n * @private\n * @param {TouchList} touchList The touch list.\n * @param {number} searchId Search identifier.\n * @return {boolean} True, if the `Touch` with the given id is in the list.\n */\n\n\n_ol_pointer_TouchSource_.prototype.findTouch_ = function (touchList, searchId) {\n  var l = touchList.length;\n  var touch;\n\n  for (var i = 0; i < l; i++) {\n    touch = touchList[i];\n\n    if (touch.identifier === searchId) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * In some instances, a touchstart can happen without a touchend. This\n * leaves the pointermap in a broken state.\n * Therefore, on every touchstart, we remove the touches that did not fire a\n * touchend event.\n * To keep state globally consistent, we fire a pointercancel for\n * this \"abandoned\" touch\n *\n * @private\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_TouchSource_.prototype.vacuumTouches_ = function (inEvent) {\n  var touchList = inEvent.touches; // pointerMap.getCount() should be < touchList.length here,\n  // as the touchstart has not been processed yet.\n\n  var keys = Object.keys(this.pointerMap);\n  var count = keys.length;\n\n  if (count >= touchList.length) {\n    var d = [];\n    var i, key, value;\n\n    for (i = 0; i < count; ++i) {\n      key = keys[i];\n      value = this.pointerMap[key]; // Never remove pointerId == 1, which is mouse.\n      // Touch identifiers are 2 smaller than their pointerId, which is the\n      // index in pointermap.\n\n      if (key != _ol_pointer_MouseSource_.POINTER_ID && !this.findTouch_(touchList, key - 2)) {\n        d.push(value.out);\n      }\n    }\n\n    for (i = 0; i < d.length; ++i) {\n      this.cancelOut_(inEvent, d[i]);\n    }\n  }\n};\n/**\n * Handler for `touchstart`, triggers `pointerover`,\n * `pointerenter` and `pointerdown` events.\n *\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_TouchSource_.prototype.touchstart = function (inEvent) {\n  this.vacuumTouches_(inEvent);\n  this.setPrimaryTouch_(inEvent.changedTouches[0]);\n  this.dedupSynthMouse_(inEvent);\n  this.clickCount_++;\n  this.processTouches_(inEvent, this.overDown_);\n};\n/**\n * @private\n * @param {Event} browserEvent The event.\n * @param {Object} inPointer The in pointer object.\n */\n\n\n_ol_pointer_TouchSource_.prototype.overDown_ = function (browserEvent, inPointer) {\n  this.pointerMap[inPointer.pointerId] = {\n    target: inPointer.target,\n    out: inPointer,\n    outTarget: inPointer.target\n  };\n  this.dispatcher.over(inPointer, browserEvent);\n  this.dispatcher.enter(inPointer, browserEvent);\n  this.dispatcher.down(inPointer, browserEvent);\n};\n/**\n * Handler for `touchmove`.\n *\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_TouchSource_.prototype.touchmove = function (inEvent) {\n  inEvent.preventDefault();\n  this.processTouches_(inEvent, this.moveOverOut_);\n};\n/**\n * @private\n * @param {Event} browserEvent The event.\n * @param {Object} inPointer The in pointer.\n */\n\n\n_ol_pointer_TouchSource_.prototype.moveOverOut_ = function (browserEvent, inPointer) {\n  var event = inPointer;\n  var pointer = this.pointerMap[event.pointerId]; // a finger drifted off the screen, ignore it\n\n  if (!pointer) {\n    return;\n  }\n\n  var outEvent = pointer.out;\n  var outTarget = pointer.outTarget;\n  this.dispatcher.move(event, browserEvent);\n\n  if (outEvent && outTarget !== event.target) {\n    outEvent.relatedTarget = event.target;\n    event.relatedTarget = outTarget; // recover from retargeting by shadow\n\n    outEvent.target = outTarget;\n\n    if (event.target) {\n      this.dispatcher.leaveOut(outEvent, browserEvent);\n      this.dispatcher.enterOver(event, browserEvent);\n    } else {\n      // clean up case when finger leaves the screen\n      event.target = outTarget;\n      event.relatedTarget = null;\n      this.cancelOut_(browserEvent, event);\n    }\n  }\n\n  pointer.out = event;\n  pointer.outTarget = event.target;\n};\n/**\n * Handler for `touchend`, triggers `pointerup`,\n * `pointerout` and `pointerleave` events.\n *\n * @param {Event} inEvent The event.\n */\n\n\n_ol_pointer_TouchSource_.prototype.touchend = function (inEvent) {\n  this.dedupSynthMouse_(inEvent);\n  this.processTouches_(inEvent, this.upOut_);\n};\n/**\n * @private\n * @param {Event} browserEvent An event.\n * @param {Object} inPointer The inPointer object.\n */\n\n\n_ol_pointer_TouchSource_.prototype.upOut_ = function (browserEvent, inPointer) {\n  this.dispatcher.up(inPointer, browserEvent);\n  this.dispatcher.out(inPointer, browserEvent);\n  this.dispatcher.leave(inPointer, browserEvent);\n  this.cleanUpPointer_(inPointer);\n};\n/**\n * Handler for `touchcancel`, triggers `pointercancel`,\n * `pointerout` and `pointerleave` events.\n *\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_TouchSource_.prototype.touchcancel = function (inEvent) {\n  this.processTouches_(inEvent, this.cancelOut_);\n};\n/**\n * @private\n * @param {Event} browserEvent The event.\n * @param {Object} inPointer The in pointer.\n */\n\n\n_ol_pointer_TouchSource_.prototype.cancelOut_ = function (browserEvent, inPointer) {\n  this.dispatcher.cancel(inPointer, browserEvent);\n  this.dispatcher.out(inPointer, browserEvent);\n  this.dispatcher.leave(inPointer, browserEvent);\n  this.cleanUpPointer_(inPointer);\n};\n/**\n * @private\n * @param {Object} inPointer The inPointer object.\n */\n\n\n_ol_pointer_TouchSource_.prototype.cleanUpPointer_ = function (inPointer) {\n  delete this.pointerMap[inPointer.pointerId];\n  this.removePrimaryPointer_(inPointer);\n};\n/**\n * Prevent synth mouse events from creating pointer events.\n *\n * @private\n * @param {Event} inEvent The in event.\n */\n\n\n_ol_pointer_TouchSource_.prototype.dedupSynthMouse_ = function (inEvent) {\n  var lts = this.mouseSource.lastTouches;\n  var t = inEvent.changedTouches[0]; // only the primary finger will synth mouse events\n\n  if (this.isPrimaryTouch_(t)) {\n    // remember x/y of last touch\n    var lt = [t.clientX, t.clientY];\n    lts.push(lt);\n    setTimeout(function () {\n      // remove touch after timeout\n      _ol_array_.remove(lts, lt);\n    }, _ol_pointer_TouchSource_.DEDUP_TIMEOUT);\n  }\n};\n\nexport default _ol_pointer_TouchSource_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/pointer/touchsource.js"],"names":["_ol_","_ol_array_","_ol_pointer_EventSource_","_ol_pointer_MouseSource_","_ol_pointer_TouchSource_","dispatcher","mouseSource","mapping","touchstart","touchmove","touchend","touchcancel","call","pointerMap","firstTouchId_","undefined","clickCount_","resetId_","inherits","DEDUP_TIMEOUT","CLICK_COUNT_TIMEOUT","POINTER_TYPE","prototype","isPrimaryTouch_","inTouch","identifier","setPrimaryTouch_","count","Object","keys","length","POINTER_ID","toString","cancelResetClickCount_","removePrimaryPointer_","inPointer","isPrimary","resetClickCount_","setTimeout","resetClickCountHandler_","bind","clearTimeout","touchToPointer_","browserEvent","e","cloneEvent","pointerId","bubbles","cancelable","detail","button","buttons","width","webkitRadiusX","radiusX","height","webkitRadiusY","radiusY","pressure","webkitForce","force","pointerType","clientX","clientY","screenX","screenY","processTouches_","inEvent","inFunction","touches","Array","slice","changedTouches","preventDefault","i","pointer","findTouch_","touchList","searchId","l","touch","vacuumTouches_","d","key","value","push","out","cancelOut_","dedupSynthMouse_","overDown_","target","outTarget","over","enter","down","moveOverOut_","event","outEvent","move","relatedTarget","leaveOut","enterOver","upOut_","up","leave","cleanUpPointer_","cancel","lts","lastTouches","t","lt","remove"],"mappings":"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","sourcesContent":["// Based on https://github.com/Polymer/PointerEvents\n\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport _ol_ from '../index.js';\nimport _ol_array_ from '../array.js';\nimport _ol_pointer_EventSource_ from '../pointer/eventsource.js';\nimport _ol_pointer_MouseSource_ from '../pointer/mousesource.js';\n\n/**\n * @constructor\n * @param {ol.pointer.PointerEventHandler} dispatcher The event handler.\n * @param {ol.pointer.MouseSource} mouseSource Mouse source.\n * @extends {ol.pointer.EventSource}\n */\nvar _ol_pointer_TouchSource_ = function(dispatcher, mouseSource) {\n  var mapping = {\n    'touchstart': this.touchstart,\n    'touchmove': this.touchmove,\n    'touchend': this.touchend,\n    'touchcancel': this.touchcancel\n  };\n  _ol_pointer_EventSource_.call(this, dispatcher, mapping);\n\n  /**\n   * @const\n   * @type {!Object.<string, Event|Object>}\n   */\n  this.pointerMap = dispatcher.pointerMap;\n\n  /**\n   * @const\n   * @type {ol.pointer.MouseSource}\n   */\n  this.mouseSource = mouseSource;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.firstTouchId_ = undefined;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.clickCount_ = 0;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.resetId_ = undefined;\n};\n\n_ol_.inherits(_ol_pointer_TouchSource_, _ol_pointer_EventSource_);\n\n\n/**\n * Mouse event timeout: This should be long enough to\n * ignore compat mouse events made by touch.\n * @const\n * @type {number}\n */\n_ol_pointer_TouchSource_.DEDUP_TIMEOUT = 2500;\n\n\n/**\n * @const\n * @type {number}\n */\n_ol_pointer_TouchSource_.CLICK_COUNT_TIMEOUT = 200;\n\n\n/**\n * @const\n * @type {string}\n */\n_ol_pointer_TouchSource_.POINTER_TYPE = 'touch';\n\n\n/**\n * @private\n * @param {Touch} inTouch The in touch.\n * @return {boolean} True, if this is the primary touch.\n */\n_ol_pointer_TouchSource_.prototype.isPrimaryTouch_ = function(inTouch) {\n  return this.firstTouchId_ === inTouch.identifier;\n};\n\n\n/**\n * Set primary touch if there are no pointers, or the only pointer is the mouse.\n * @param {Touch} inTouch The in touch.\n * @private\n */\n_ol_pointer_TouchSource_.prototype.setPrimaryTouch_ = function(inTouch) {\n  var count = Object.keys(this.pointerMap).length;\n  if (count === 0 || (count === 1 &&\n      _ol_pointer_MouseSource_.POINTER_ID.toString() in this.pointerMap)) {\n    this.firstTouchId_ = inTouch.identifier;\n    this.cancelResetClickCount_();\n  }\n};\n\n\n/**\n * @private\n * @param {Object} inPointer The in pointer object.\n */\n_ol_pointer_TouchSource_.prototype.removePrimaryPointer_ = function(inPointer) {\n  if (inPointer.isPrimary) {\n    this.firstTouchId_ = undefined;\n    this.resetClickCount_();\n  }\n};\n\n\n/**\n * @private\n */\n_ol_pointer_TouchSource_.prototype.resetClickCount_ = function() {\n  this.resetId_ = setTimeout(\n      this.resetClickCountHandler_.bind(this),\n      _ol_pointer_TouchSource_.CLICK_COUNT_TIMEOUT);\n};\n\n\n/**\n * @private\n */\n_ol_pointer_TouchSource_.prototype.resetClickCountHandler_ = function() {\n  this.clickCount_ = 0;\n  this.resetId_ = undefined;\n};\n\n\n/**\n * @private\n */\n_ol_pointer_TouchSource_.prototype.cancelResetClickCount_ = function() {\n  if (this.resetId_ !== undefined) {\n    clearTimeout(this.resetId_);\n  }\n};\n\n\n/**\n * @private\n * @param {Event} browserEvent Browser event\n * @param {Touch} inTouch Touch event\n * @return {Object} A pointer object.\n */\n_ol_pointer_TouchSource_.prototype.touchToPointer_ = function(browserEvent, inTouch) {\n  var e = this.dispatcher.cloneEvent(browserEvent, inTouch);\n  // Spec specifies that pointerId 1 is reserved for Mouse.\n  // Touch identifiers can start at 0.\n  // Add 2 to the touch identifier for compatibility.\n  e.pointerId = inTouch.identifier + 2;\n  // TODO: check if this is necessary?\n  //e.target = findTarget(e);\n  e.bubbles = true;\n  e.cancelable = true;\n  e.detail = this.clickCount_;\n  e.button = 0;\n  e.buttons = 1;\n  e.width = inTouch.webkitRadiusX || inTouch.radiusX || 0;\n  e.height = inTouch.webkitRadiusY || inTouch.radiusY || 0;\n  e.pressure = inTouch.webkitForce || inTouch.force || 0.5;\n  e.isPrimary = this.isPrimaryTouch_(inTouch);\n  e.pointerType = _ol_pointer_TouchSource_.POINTER_TYPE;\n\n  // make sure that the properties that are different for\n  // each `Touch` object are not copied from the BrowserEvent object\n  e.clientX = inTouch.clientX;\n  e.clientY = inTouch.clientY;\n  e.screenX = inTouch.screenX;\n  e.screenY = inTouch.screenY;\n\n  return e;\n};\n\n\n/**\n * @private\n * @param {Event} inEvent Touch event\n * @param {function(Event, Object)} inFunction In function.\n */\n_ol_pointer_TouchSource_.prototype.processTouches_ = function(inEvent, inFunction) {\n  var touches = Array.prototype.slice.call(\n      inEvent.changedTouches);\n  var count = touches.length;\n  function preventDefault() {\n    inEvent.preventDefault();\n  }\n  var i, pointer;\n  for (i = 0; i < count; ++i) {\n    pointer = this.touchToPointer_(inEvent, touches[i]);\n    // forward touch preventDefaults\n    pointer.preventDefault = preventDefault;\n    inFunction.call(this, inEvent, pointer);\n  }\n};\n\n\n/**\n * @private\n * @param {TouchList} touchList The touch list.\n * @param {number} searchId Search identifier.\n * @return {boolean} True, if the `Touch` with the given id is in the list.\n */\n_ol_pointer_TouchSource_.prototype.findTouch_ = function(touchList, searchId) {\n  var l = touchList.length;\n  var touch;\n  for (var i = 0; i < l; i++) {\n    touch = touchList[i];\n    if (touch.identifier === searchId) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * In some instances, a touchstart can happen without a touchend. This\n * leaves the pointermap in a broken state.\n * Therefore, on every touchstart, we remove the touches that did not fire a\n * touchend event.\n * To keep state globally consistent, we fire a pointercancel for\n * this \"abandoned\" touch\n *\n * @private\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_TouchSource_.prototype.vacuumTouches_ = function(inEvent) {\n  var touchList = inEvent.touches;\n  // pointerMap.getCount() should be < touchList.length here,\n  // as the touchstart has not been processed yet.\n  var keys = Object.keys(this.pointerMap);\n  var count = keys.length;\n  if (count >= touchList.length) {\n    var d = [];\n    var i, key, value;\n    for (i = 0; i < count; ++i) {\n      key = keys[i];\n      value = this.pointerMap[key];\n      // Never remove pointerId == 1, which is mouse.\n      // Touch identifiers are 2 smaller than their pointerId, which is the\n      // index in pointermap.\n      if (key != _ol_pointer_MouseSource_.POINTER_ID &&\n          !this.findTouch_(touchList, key - 2)) {\n        d.push(value.out);\n      }\n    }\n    for (i = 0; i < d.length; ++i) {\n      this.cancelOut_(inEvent, d[i]);\n    }\n  }\n};\n\n\n/**\n * Handler for `touchstart`, triggers `pointerover`,\n * `pointerenter` and `pointerdown` events.\n *\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_TouchSource_.prototype.touchstart = function(inEvent) {\n  this.vacuumTouches_(inEvent);\n  this.setPrimaryTouch_(inEvent.changedTouches[0]);\n  this.dedupSynthMouse_(inEvent);\n  this.clickCount_++;\n  this.processTouches_(inEvent, this.overDown_);\n};\n\n\n/**\n * @private\n * @param {Event} browserEvent The event.\n * @param {Object} inPointer The in pointer object.\n */\n_ol_pointer_TouchSource_.prototype.overDown_ = function(browserEvent, inPointer) {\n  this.pointerMap[inPointer.pointerId] = {\n    target: inPointer.target,\n    out: inPointer,\n    outTarget: inPointer.target\n  };\n  this.dispatcher.over(inPointer, browserEvent);\n  this.dispatcher.enter(inPointer, browserEvent);\n  this.dispatcher.down(inPointer, browserEvent);\n};\n\n\n/**\n * Handler for `touchmove`.\n *\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_TouchSource_.prototype.touchmove = function(inEvent) {\n  inEvent.preventDefault();\n  this.processTouches_(inEvent, this.moveOverOut_);\n};\n\n\n/**\n * @private\n * @param {Event} browserEvent The event.\n * @param {Object} inPointer The in pointer.\n */\n_ol_pointer_TouchSource_.prototype.moveOverOut_ = function(browserEvent, inPointer) {\n  var event = inPointer;\n  var pointer = this.pointerMap[event.pointerId];\n  // a finger drifted off the screen, ignore it\n  if (!pointer) {\n    return;\n  }\n  var outEvent = pointer.out;\n  var outTarget = pointer.outTarget;\n  this.dispatcher.move(event, browserEvent);\n  if (outEvent && outTarget !== event.target) {\n    outEvent.relatedTarget = event.target;\n    event.relatedTarget = outTarget;\n    // recover from retargeting by shadow\n    outEvent.target = outTarget;\n    if (event.target) {\n      this.dispatcher.leaveOut(outEvent, browserEvent);\n      this.dispatcher.enterOver(event, browserEvent);\n    } else {\n      // clean up case when finger leaves the screen\n      event.target = outTarget;\n      event.relatedTarget = null;\n      this.cancelOut_(browserEvent, event);\n    }\n  }\n  pointer.out = event;\n  pointer.outTarget = event.target;\n};\n\n\n/**\n * Handler for `touchend`, triggers `pointerup`,\n * `pointerout` and `pointerleave` events.\n *\n * @param {Event} inEvent The event.\n */\n_ol_pointer_TouchSource_.prototype.touchend = function(inEvent) {\n  this.dedupSynthMouse_(inEvent);\n  this.processTouches_(inEvent, this.upOut_);\n};\n\n\n/**\n * @private\n * @param {Event} browserEvent An event.\n * @param {Object} inPointer The inPointer object.\n */\n_ol_pointer_TouchSource_.prototype.upOut_ = function(browserEvent, inPointer) {\n  this.dispatcher.up(inPointer, browserEvent);\n  this.dispatcher.out(inPointer, browserEvent);\n  this.dispatcher.leave(inPointer, browserEvent);\n  this.cleanUpPointer_(inPointer);\n};\n\n\n/**\n * Handler for `touchcancel`, triggers `pointercancel`,\n * `pointerout` and `pointerleave` events.\n *\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_TouchSource_.prototype.touchcancel = function(inEvent) {\n  this.processTouches_(inEvent, this.cancelOut_);\n};\n\n\n/**\n * @private\n * @param {Event} browserEvent The event.\n * @param {Object} inPointer The in pointer.\n */\n_ol_pointer_TouchSource_.prototype.cancelOut_ = function(browserEvent, inPointer) {\n  this.dispatcher.cancel(inPointer, browserEvent);\n  this.dispatcher.out(inPointer, browserEvent);\n  this.dispatcher.leave(inPointer, browserEvent);\n  this.cleanUpPointer_(inPointer);\n};\n\n\n/**\n * @private\n * @param {Object} inPointer The inPointer object.\n */\n_ol_pointer_TouchSource_.prototype.cleanUpPointer_ = function(inPointer) {\n  delete this.pointerMap[inPointer.pointerId];\n  this.removePrimaryPointer_(inPointer);\n};\n\n\n/**\n * Prevent synth mouse events from creating pointer events.\n *\n * @private\n * @param {Event} inEvent The in event.\n */\n_ol_pointer_TouchSource_.prototype.dedupSynthMouse_ = function(inEvent) {\n  var lts = this.mouseSource.lastTouches;\n  var t = inEvent.changedTouches[0];\n  // only the primary finger will synth mouse events\n  if (this.isPrimaryTouch_(t)) {\n    // remember x/y of last touch\n    var lt = [t.clientX, t.clientY];\n    lts.push(lt);\n\n    setTimeout(function() {\n      // remove touch after timeout\n      _ol_array_.remove(lts, lt);\n    }, _ol_pointer_TouchSource_.DEDUP_TIMEOUT);\n  }\n};\nexport default _ol_pointer_TouchSource_;\n"]},"metadata":{},"sourceType":"module"}