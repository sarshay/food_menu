{"ast":null,"code":"var _ol_geom_flat_transform_ = {};\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {ol.Transform} transform Transform.\n * @param {Array.<number>=} opt_dest Destination.\n * @return {Array.<number>} Transformed coordinates.\n */\n\n_ol_geom_flat_transform_.transform2D = function (flatCoordinates, offset, end, stride, transform, opt_dest) {\n  var dest = opt_dest ? opt_dest : [];\n  var i = 0;\n  var j;\n\n  for (j = offset; j < end; j += stride) {\n    var x = flatCoordinates[j];\n    var y = flatCoordinates[j + 1];\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n  }\n\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n\n  return dest;\n};\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array.<number>} anchor Rotation anchor point.\n * @param {Array.<number>=} opt_dest Destination.\n * @return {Array.<number>} Transformed coordinates.\n */\n\n\n_ol_geom_flat_transform_.rotate = function (flatCoordinates, offset, end, stride, angle, anchor, opt_dest) {\n  var dest = opt_dest ? opt_dest : [];\n  var cos = Math.cos(angle);\n  var sin = Math.sin(angle);\n  var anchorX = anchor[0];\n  var anchorY = anchor[1];\n  var i = 0;\n\n  for (var j = offset; j < end; j += stride) {\n    var deltaX = flatCoordinates[j] - anchorX;\n    var deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n\n    for (var k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n\n  return dest;\n};\n/**\n * Scale the coordinates.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array.<number>} anchor Scale anchor point.\n * @param {Array.<number>=} opt_dest Destination.\n * @return {Array.<number>} Transformed coordinates.\n */\n\n\n_ol_geom_flat_transform_.scale = function (flatCoordinates, offset, end, stride, sx, sy, anchor, opt_dest) {\n  var dest = opt_dest ? opt_dest : [];\n  var anchorX = anchor[0];\n  var anchorY = anchor[1];\n  var i = 0;\n\n  for (var j = offset; j < end; j += stride) {\n    var deltaX = flatCoordinates[j] - anchorX;\n    var deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + sx * deltaX;\n    dest[i++] = anchorY + sy * deltaY;\n\n    for (var k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n\n  return dest;\n};\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array.<number>=} opt_dest Destination.\n * @return {Array.<number>} Transformed coordinates.\n */\n\n\n_ol_geom_flat_transform_.translate = function (flatCoordinates, offset, end, stride, deltaX, deltaY, opt_dest) {\n  var dest = opt_dest ? opt_dest : [];\n  var i = 0;\n  var j, k;\n\n  for (j = offset; j < end; j += stride) {\n    dest[i++] = flatCoordinates[j] + deltaX;\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\n\n    for (k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n\n  return dest;\n};\n\nexport default _ol_geom_flat_transform_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/geom/flat/transform.js"],"names":["_ol_geom_flat_transform_","transform2D","flatCoordinates","offset","end","stride","transform","opt_dest","dest","i","j","x","y","length","rotate","angle","anchor","cos","Math","sin","anchorX","anchorY","deltaX","deltaY","k","scale","sx","sy","translate"],"mappings":"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","sourcesContent":["var _ol_geom_flat_transform_ = {};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {ol.Transform} transform Transform.\n * @param {Array.<number>=} opt_dest Destination.\n * @return {Array.<number>} Transformed coordinates.\n */\n_ol_geom_flat_transform_.transform2D = function(flatCoordinates, offset, end, stride, transform, opt_dest) {\n  var dest = opt_dest ? opt_dest : [];\n  var i = 0;\n  var j;\n  for (j = offset; j < end; j += stride) {\n    var x = flatCoordinates[j];\n    var y = flatCoordinates[j + 1];\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n  }\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array.<number>} anchor Rotation anchor point.\n * @param {Array.<number>=} opt_dest Destination.\n * @return {Array.<number>} Transformed coordinates.\n */\n_ol_geom_flat_transform_.rotate = function(flatCoordinates, offset, end, stride, angle, anchor, opt_dest) {\n  var dest = opt_dest ? opt_dest : [];\n  var cos = Math.cos(angle);\n  var sin = Math.sin(angle);\n  var anchorX = anchor[0];\n  var anchorY = anchor[1];\n  var i = 0;\n  for (var j = offset; j < end; j += stride) {\n    var deltaX = flatCoordinates[j] - anchorX;\n    var deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n    for (var k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n};\n\n\n/**\n * Scale the coordinates.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array.<number>} anchor Scale anchor point.\n * @param {Array.<number>=} opt_dest Destination.\n * @return {Array.<number>} Transformed coordinates.\n */\n_ol_geom_flat_transform_.scale = function(flatCoordinates, offset, end, stride, sx, sy, anchor, opt_dest) {\n  var dest = opt_dest ? opt_dest : [];\n  var anchorX = anchor[0];\n  var anchorY = anchor[1];\n  var i = 0;\n  for (var j = offset; j < end; j += stride) {\n    var deltaX = flatCoordinates[j] - anchorX;\n    var deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + sx * deltaX;\n    dest[i++] = anchorY + sy * deltaY;\n    for (var k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array.<number>=} opt_dest Destination.\n * @return {Array.<number>} Transformed coordinates.\n */\n_ol_geom_flat_transform_.translate = function(flatCoordinates, offset, end, stride, deltaX, deltaY, opt_dest) {\n  var dest = opt_dest ? opt_dest : [];\n  var i = 0;\n  var j, k;\n  for (j = offset; j < end; j += stride) {\n    dest[i++] = flatCoordinates[j] + deltaX;\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\n    for (k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n};\nexport default _ol_geom_flat_transform_;\n"]},"metadata":{},"sourceType":"module"}