{"ast":null,"code":"import _ol_ from './index.js';\nimport _ol_TileState_ from './tilestate.js';\nimport _ol_events_ from './events.js';\nimport _ol_events_EventType_ from './events/eventtype.js';\nimport _ol_structs_PriorityQueue_ from './structs/priorityqueue.js';\n/**\n * @constructor\n * @extends {ol.structs.PriorityQueue.<Array>}\n * @param {ol.TilePriorityFunction} tilePriorityFunction\n *     Tile priority function.\n * @param {function(): ?} tileChangeCallback\n *     Function called on each tile change event.\n * @struct\n */\n\nvar _ol_TileQueue_ = function (tilePriorityFunction, tileChangeCallback) {\n  _ol_structs_PriorityQueue_.call(this,\n  /**\n   * @param {Array} element Element.\n   * @return {number} Priority.\n   */\n  function (element) {\n    return tilePriorityFunction.apply(null, element);\n  },\n  /**\n   * @param {Array} element Element.\n   * @return {string} Key.\n   */\n  function (element) {\n    return (\n      /** @type {ol.Tile} */\n      element[0].getKey()\n    );\n  });\n  /**\n   * @private\n   * @type {function(): ?}\n   */\n\n\n  this.tileChangeCallback_ = tileChangeCallback;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.tilesLoading_ = 0;\n  /**\n   * @private\n   * @type {!Object.<string,boolean>}\n   */\n\n  this.tilesLoadingKeys_ = {};\n};\n\n_ol_.inherits(_ol_TileQueue_, _ol_structs_PriorityQueue_);\n/**\n * @inheritDoc\n */\n\n\n_ol_TileQueue_.prototype.enqueue = function (element) {\n  var added = _ol_structs_PriorityQueue_.prototype.enqueue.call(this, element);\n\n  if (added) {\n    var tile = element[0];\n\n    _ol_events_.listen(tile, _ol_events_EventType_.CHANGE, this.handleTileChange, this);\n  }\n\n  return added;\n};\n/**\n * @return {number} Number of tiles loading.\n */\n\n\n_ol_TileQueue_.prototype.getTilesLoading = function () {\n  return this.tilesLoading_;\n};\n/**\n * @param {ol.events.Event} event Event.\n * @protected\n */\n\n\n_ol_TileQueue_.prototype.handleTileChange = function (event) {\n  var tile =\n  /** @type {ol.Tile} */\n  event.target;\n  var state = tile.getState();\n\n  if (state === _ol_TileState_.LOADED || state === _ol_TileState_.ERROR || state === _ol_TileState_.EMPTY || state === _ol_TileState_.ABORT) {\n    _ol_events_.unlisten(tile, _ol_events_EventType_.CHANGE, this.handleTileChange, this);\n\n    var tileKey = tile.getKey();\n\n    if (tileKey in this.tilesLoadingKeys_) {\n      delete this.tilesLoadingKeys_[tileKey];\n      --this.tilesLoading_;\n    }\n\n    this.tileChangeCallback_();\n  }\n};\n/**\n * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\n * @param {number} maxNewLoads Maximum number of new tiles to load.\n */\n\n\n_ol_TileQueue_.prototype.loadMoreTiles = function (maxTotalLoading, maxNewLoads) {\n  var newLoads = 0;\n  var abortedTiles = false;\n  var state, tile, tileKey;\n\n  while (this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads && this.getCount() > 0) {\n    tile =\n    /** @type {ol.Tile} */\n    this.dequeue()[0];\n    tileKey = tile.getKey();\n    state = tile.getState();\n\n    if (state === _ol_TileState_.ABORT) {\n      abortedTiles = true;\n    } else if (state === _ol_TileState_.IDLE && !(tileKey in this.tilesLoadingKeys_)) {\n      this.tilesLoadingKeys_[tileKey] = true;\n      ++this.tilesLoading_;\n      ++newLoads;\n      tile.load();\n    }\n  }\n\n  if (newLoads === 0 && abortedTiles) {\n    // Do not stop the render loop when all wanted tiles were aborted due to\n    // a small, saturated tile cache.\n    this.tileChangeCallback_();\n  }\n};\n\nexport default _ol_TileQueue_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/tilequeue.js"],"names":["_ol_","_ol_TileState_","_ol_events_","_ol_events_EventType_","_ol_structs_PriorityQueue_","_ol_TileQueue_","tilePriorityFunction","tileChangeCallback","call","element","apply","getKey","tileChangeCallback_","tilesLoading_","tilesLoadingKeys_","inherits","prototype","enqueue","added","tile","listen","CHANGE","handleTileChange","getTilesLoading","event","target","state","getState","LOADED","ERROR","EMPTY","ABORT","unlisten","tileKey","loadMoreTiles","maxTotalLoading","maxNewLoads","newLoads","abortedTiles","getCount","dequeue","IDLE","load"],"mappings":"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","sourcesContent":["import _ol_ from './index.js';\nimport _ol_TileState_ from './tilestate.js';\nimport _ol_events_ from './events.js';\nimport _ol_events_EventType_ from './events/eventtype.js';\nimport _ol_structs_PriorityQueue_ from './structs/priorityqueue.js';\n\n/**\n * @constructor\n * @extends {ol.structs.PriorityQueue.<Array>}\n * @param {ol.TilePriorityFunction} tilePriorityFunction\n *     Tile priority function.\n * @param {function(): ?} tileChangeCallback\n *     Function called on each tile change event.\n * @struct\n */\nvar _ol_TileQueue_ = function(tilePriorityFunction, tileChangeCallback) {\n\n  _ol_structs_PriorityQueue_.call(\n      this,\n      /**\n       * @param {Array} element Element.\n       * @return {number} Priority.\n       */\n      function(element) {\n        return tilePriorityFunction.apply(null, element);\n      },\n      /**\n       * @param {Array} element Element.\n       * @return {string} Key.\n       */\n      function(element) {\n        return /** @type {ol.Tile} */ (element[0]).getKey();\n      });\n\n  /**\n   * @private\n   * @type {function(): ?}\n   */\n  this.tileChangeCallback_ = tileChangeCallback;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.tilesLoading_ = 0;\n\n  /**\n   * @private\n   * @type {!Object.<string,boolean>}\n   */\n  this.tilesLoadingKeys_ = {};\n\n};\n\n_ol_.inherits(_ol_TileQueue_, _ol_structs_PriorityQueue_);\n\n\n/**\n * @inheritDoc\n */\n_ol_TileQueue_.prototype.enqueue = function(element) {\n  var added = _ol_structs_PriorityQueue_.prototype.enqueue.call(this, element);\n  if (added) {\n    var tile = element[0];\n    _ol_events_.listen(tile, _ol_events_EventType_.CHANGE,\n        this.handleTileChange, this);\n  }\n  return added;\n};\n\n\n/**\n * @return {number} Number of tiles loading.\n */\n_ol_TileQueue_.prototype.getTilesLoading = function() {\n  return this.tilesLoading_;\n};\n\n\n/**\n * @param {ol.events.Event} event Event.\n * @protected\n */\n_ol_TileQueue_.prototype.handleTileChange = function(event) {\n  var tile = /** @type {ol.Tile} */ (event.target);\n  var state = tile.getState();\n  if (state === _ol_TileState_.LOADED || state === _ol_TileState_.ERROR ||\n      state === _ol_TileState_.EMPTY || state === _ol_TileState_.ABORT) {\n    _ol_events_.unlisten(tile, _ol_events_EventType_.CHANGE,\n        this.handleTileChange, this);\n    var tileKey = tile.getKey();\n    if (tileKey in this.tilesLoadingKeys_) {\n      delete this.tilesLoadingKeys_[tileKey];\n      --this.tilesLoading_;\n    }\n    this.tileChangeCallback_();\n  }\n};\n\n\n/**\n * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\n * @param {number} maxNewLoads Maximum number of new tiles to load.\n */\n_ol_TileQueue_.prototype.loadMoreTiles = function(maxTotalLoading, maxNewLoads) {\n  var newLoads = 0;\n  var abortedTiles = false;\n  var state, tile, tileKey;\n  while (this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads &&\n         this.getCount() > 0) {\n    tile = /** @type {ol.Tile} */ (this.dequeue()[0]);\n    tileKey = tile.getKey();\n    state = tile.getState();\n    if (state === _ol_TileState_.ABORT) {\n      abortedTiles = true;\n    } else if (state === _ol_TileState_.IDLE && !(tileKey in this.tilesLoadingKeys_)) {\n      this.tilesLoadingKeys_[tileKey] = true;\n      ++this.tilesLoading_;\n      ++newLoads;\n      tile.load();\n    }\n  }\n  if (newLoads === 0 && abortedTiles) {\n    // Do not stop the render loop when all wanted tiles were aborted due to\n    // a small, saturated tile cache.\n    this.tileChangeCallback_();\n  }\n};\nexport default _ol_TileQueue_;\n"]},"metadata":{},"sourceType":"module"}