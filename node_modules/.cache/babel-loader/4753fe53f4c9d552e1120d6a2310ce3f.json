{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_proj_Units_ from '../proj/units.js';\nimport _ol_proj_proj4_ from '../proj/proj4.js';\n/**\n * @classdesc\n * Projection definition class. One of these is created for each projection\n * supported in the application and stored in the {@link ol.proj} namespace.\n * You can use these in applications, but this is not required, as API params\n * and options use {@link ol.ProjectionLike} which means the simple string\n * code will suffice.\n *\n * You can use {@link ol.proj.get} to retrieve the object for a particular\n * projection.\n *\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\n * with the following aliases:\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\n *     urn:x-ogc:def:crs:EPSG:4326\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\n *\n * If you use proj4js, aliases can be added using `proj4.defs()`; see\n * [documentation](https://github.com/proj4js/proj4js). To set an alternative\n * namespace for proj4, use {@link ol.proj.setProj4}.\n *\n * @constructor\n * @param {olx.ProjectionOptions} options Projection options.\n * @struct\n * @api\n */\n\nvar _ol_proj_Projection_ = function (options) {\n  /**\n   * @private\n   * @type {string}\n   */\n  this.code_ = options.code;\n  /**\n   * Units of projected coordinates. When set to `ol.proj.Units.TILE_PIXELS`, a\n   * `this.extent_` and `this.worldExtent_` must be configured properly for each\n   * tile.\n   * @private\n   * @type {ol.proj.Units}\n   */\n\n  this.units_ =\n  /** @type {ol.proj.Units} */\n  options.units;\n  /**\n   * Validity extent of the projection in projected coordinates. For projections\n   * with `ol.proj.Units.TILE_PIXELS` units, this is the extent of the tile in\n   * tile pixel space.\n   * @private\n   * @type {ol.Extent}\n   */\n\n  this.extent_ = options.extent !== undefined ? options.extent : null;\n  /**\n   * Extent of the world in EPSG:4326. For projections with\n   * `ol.proj.Units.TILE_PIXELS` units, this is the extent of the tile in\n   * projected coordinate space.\n   * @private\n   * @type {ol.Extent}\n   */\n\n  this.worldExtent_ = options.worldExtent !== undefined ? options.worldExtent : null;\n  /**\n   * @private\n   * @type {string}\n   */\n\n  this.axisOrientation_ = options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.global_ = options.global !== undefined ? options.global : false;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.canWrapX_ = !!(this.global_ && this.extent_);\n  /**\n   * @private\n   * @type {function(number, ol.Coordinate):number|undefined}\n   */\n\n  this.getPointResolutionFunc_ = options.getPointResolution;\n  /**\n   * @private\n   * @type {ol.tilegrid.TileGrid}\n   */\n\n  this.defaultTileGrid_ = null;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.metersPerUnit_ = options.metersPerUnit;\n  var code = options.code;\n\n  if (_ol_.ENABLE_PROJ4JS) {\n    var proj4js = _ol_proj_proj4_.get();\n\n    if (typeof proj4js == 'function') {\n      var def = proj4js.defs(code);\n\n      if (def !== undefined) {\n        if (def.axis !== undefined && options.axisOrientation === undefined) {\n          this.axisOrientation_ = def.axis;\n        }\n\n        if (options.metersPerUnit === undefined) {\n          this.metersPerUnit_ = def.to_meter;\n        }\n\n        if (options.units === undefined) {\n          this.units_ = def.units;\n        }\n      }\n    }\n  }\n};\n/**\n * @return {boolean} The projection is suitable for wrapping the x-axis\n */\n\n\n_ol_proj_Projection_.prototype.canWrapX = function () {\n  return this.canWrapX_;\n};\n/**\n * Get the code for this projection, e.g. 'EPSG:4326'.\n * @return {string} Code.\n * @api\n */\n\n\n_ol_proj_Projection_.prototype.getCode = function () {\n  return this.code_;\n};\n/**\n * Get the validity extent for this projection.\n * @return {ol.Extent} Extent.\n * @api\n */\n\n\n_ol_proj_Projection_.prototype.getExtent = function () {\n  return this.extent_;\n};\n/**\n * Get the units of this projection.\n * @return {ol.proj.Units} Units.\n * @api\n */\n\n\n_ol_proj_Projection_.prototype.getUnits = function () {\n  return this.units_;\n};\n/**\n * Get the amount of meters per unit of this projection.  If the projection is\n * not configured with `metersPerUnit` or a units identifier, the return is\n * `undefined`.\n * @return {number|undefined} Meters.\n * @api\n */\n\n\n_ol_proj_Projection_.prototype.getMetersPerUnit = function () {\n  return this.metersPerUnit_ || _ol_proj_Units_.METERS_PER_UNIT[this.units_];\n};\n/**\n * Get the world extent for this projection.\n * @return {ol.Extent} Extent.\n * @api\n */\n\n\n_ol_proj_Projection_.prototype.getWorldExtent = function () {\n  return this.worldExtent_;\n};\n/**\n * Get the axis orientation of this projection.\n * Example values are:\n * enu - the default easting, northing, elevation.\n * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n *     or south orientated transverse mercator.\n * wnu - westing, northing, up - some planetary coordinate systems have\n *     \"west positive\" coordinate systems\n * @return {string} Axis orientation.\n * @api\n */\n\n\n_ol_proj_Projection_.prototype.getAxisOrientation = function () {\n  return this.axisOrientation_;\n};\n/**\n * Is this projection a global projection which spans the whole world?\n * @return {boolean} Whether the projection is global.\n * @api\n */\n\n\n_ol_proj_Projection_.prototype.isGlobal = function () {\n  return this.global_;\n};\n/**\n* Set if the projection is a global projection which spans the whole world\n* @param {boolean} global Whether the projection is global.\n* @api\n*/\n\n\n_ol_proj_Projection_.prototype.setGlobal = function (global) {\n  this.global_ = global;\n  this.canWrapX_ = !!(global && this.extent_);\n};\n/**\n * @return {ol.tilegrid.TileGrid} The default tile grid.\n */\n\n\n_ol_proj_Projection_.prototype.getDefaultTileGrid = function () {\n  return this.defaultTileGrid_;\n};\n/**\n * @param {ol.tilegrid.TileGrid} tileGrid The default tile grid.\n */\n\n\n_ol_proj_Projection_.prototype.setDefaultTileGrid = function (tileGrid) {\n  this.defaultTileGrid_ = tileGrid;\n};\n/**\n * Set the validity extent for this projection.\n * @param {ol.Extent} extent Extent.\n * @api\n */\n\n\n_ol_proj_Projection_.prototype.setExtent = function (extent) {\n  this.extent_ = extent;\n  this.canWrapX_ = !!(this.global_ && extent);\n};\n/**\n * Set the world extent for this projection.\n * @param {ol.Extent} worldExtent World extent\n *     [minlon, minlat, maxlon, maxlat].\n * @api\n */\n\n\n_ol_proj_Projection_.prototype.setWorldExtent = function (worldExtent) {\n  this.worldExtent_ = worldExtent;\n};\n/**\n * Set the getPointResolution function (see {@link ol.proj#getPointResolution}\n * for this projection.\n * @param {function(number, ol.Coordinate):number} func Function\n * @api\n */\n\n\n_ol_proj_Projection_.prototype.setGetPointResolution = function (func) {\n  this.getPointResolutionFunc_ = func;\n};\n/**\n * Get the custom point resolution function for this projection (if set).\n * @return {function(number, ol.Coordinate):number|undefined} The custom point\n * resolution function (if set).\n */\n\n\n_ol_proj_Projection_.prototype.getPointResolutionFunc = function () {\n  return this.getPointResolutionFunc_;\n};\n\nexport default _ol_proj_Projection_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/proj/projection.js"],"names":["_ol_","_ol_proj_Units_","_ol_proj_proj4_","_ol_proj_Projection_","options","code_","code","units_","units","extent_","extent","undefined","worldExtent_","worldExtent","axisOrientation_","axisOrientation","global_","global","canWrapX_","getPointResolutionFunc_","getPointResolution","defaultTileGrid_","metersPerUnit_","metersPerUnit","ENABLE_PROJ4JS","proj4js","get","def","defs","axis","to_meter","prototype","canWrapX","getCode","getExtent","getUnits","getMetersPerUnit","METERS_PER_UNIT","getWorldExtent","getAxisOrientation","isGlobal","setGlobal","getDefaultTileGrid","setDefaultTileGrid","tileGrid","setExtent","setWorldExtent","setGetPointResolution","func","getPointResolutionFunc"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,eAAP,MAA4B,kBAA5B;AACA,OAAOC,eAAP,MAA4B,kBAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,oBAAoB,GAAG,UAASC,OAAT,EAAkB;AAC3C;AACF;AACA;AACA;AACE,OAAKC,KAAL,GAAaD,OAAO,CAACE,IAArB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,MAAL;AAAc;AAA8BH,EAAAA,OAAO,CAACI,KAApD;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,OAAL,GAAeL,OAAO,CAACM,MAAR,KAAmBC,SAAnB,GAA+BP,OAAO,CAACM,MAAvC,GAAgD,IAA/D;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKE,YAAL,GAAoBR,OAAO,CAACS,WAAR,KAAwBF,SAAxB,GAClBP,OAAO,CAACS,WADU,GACI,IADxB;AAGA;AACF;AACA;AACA;;AACE,OAAKC,gBAAL,GAAwBV,OAAO,CAACW,eAAR,KAA4BJ,SAA5B,GACtBP,OAAO,CAACW,eADc,GACI,KAD5B;AAGA;AACF;AACA;AACA;;AACE,OAAKC,OAAL,GAAeZ,OAAO,CAACa,MAAR,KAAmBN,SAAnB,GAA+BP,OAAO,CAACa,MAAvC,GAAgD,KAA/D;AAEA;AACF;AACA;AACA;;AACE,OAAKC,SAAL,GAAiB,CAAC,EAAE,KAAKF,OAAL,IAAgB,KAAKP,OAAvB,CAAlB;AAEA;AACF;AACA;AACA;;AACE,OAAKU,uBAAL,GAA+Bf,OAAO,CAACgB,kBAAvC;AAEA;AACF;AACA;AACA;;AACE,OAAKC,gBAAL,GAAwB,IAAxB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,cAAL,GAAsBlB,OAAO,CAACmB,aAA9B;AAEA,MAAIjB,IAAI,GAAGF,OAAO,CAACE,IAAnB;;AACA,MAAIN,IAAI,CAACwB,cAAT,EAAyB;AACvB,QAAIC,OAAO,GAAGvB,eAAe,CAACwB,GAAhB,EAAd;;AACA,QAAI,OAAOD,OAAP,IAAkB,UAAtB,EAAkC;AAChC,UAAIE,GAAG,GAAGF,OAAO,CAACG,IAAR,CAAatB,IAAb,CAAV;;AACA,UAAIqB,GAAG,KAAKhB,SAAZ,EAAuB;AACrB,YAAIgB,GAAG,CAACE,IAAJ,KAAalB,SAAb,IAA0BP,OAAO,CAACW,eAAR,KAA4BJ,SAA1D,EAAqE;AACnE,eAAKG,gBAAL,GAAwBa,GAAG,CAACE,IAA5B;AACD;;AACD,YAAIzB,OAAO,CAACmB,aAAR,KAA0BZ,SAA9B,EAAyC;AACvC,eAAKW,cAAL,GAAsBK,GAAG,CAACG,QAA1B;AACD;;AACD,YAAI1B,OAAO,CAACI,KAAR,KAAkBG,SAAtB,EAAiC;AAC/B,eAAKJ,MAAL,GAAcoB,GAAG,CAACnB,KAAlB;AACD;AACF;AACF;AACF;AACF,CA1FD;AA6FA;AACA;AACA;;;AACAL,oBAAoB,CAAC4B,SAArB,CAA+BC,QAA/B,GAA0C,YAAW;AACnD,SAAO,KAAKd,SAAZ;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAf,oBAAoB,CAAC4B,SAArB,CAA+BE,OAA/B,GAAyC,YAAW;AAClD,SAAO,KAAK5B,KAAZ;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAF,oBAAoB,CAAC4B,SAArB,CAA+BG,SAA/B,GAA2C,YAAW;AACpD,SAAO,KAAKzB,OAAZ;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAN,oBAAoB,CAAC4B,SAArB,CAA+BI,QAA/B,GAA0C,YAAW;AACnD,SAAO,KAAK5B,MAAZ;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,oBAAoB,CAAC4B,SAArB,CAA+BK,gBAA/B,GAAkD,YAAW;AAC3D,SAAO,KAAKd,cAAL,IAAuBrB,eAAe,CAACoC,eAAhB,CAAgC,KAAK9B,MAArC,CAA9B;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAJ,oBAAoB,CAAC4B,SAArB,CAA+BO,cAA/B,GAAgD,YAAW;AACzD,SAAO,KAAK1B,YAAZ;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAT,oBAAoB,CAAC4B,SAArB,CAA+BQ,kBAA/B,GAAoD,YAAW;AAC7D,SAAO,KAAKzB,gBAAZ;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAX,oBAAoB,CAAC4B,SAArB,CAA+BS,QAA/B,GAA0C,YAAW;AACnD,SAAO,KAAKxB,OAAZ;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAb,oBAAoB,CAAC4B,SAArB,CAA+BU,SAA/B,GAA2C,UAASxB,MAAT,EAAiB;AAC1D,OAAKD,OAAL,GAAeC,MAAf;AACA,OAAKC,SAAL,GAAiB,CAAC,EAAED,MAAM,IAAI,KAAKR,OAAjB,CAAlB;AACD,CAHD;AAMA;AACA;AACA;;;AACAN,oBAAoB,CAAC4B,SAArB,CAA+BW,kBAA/B,GAAoD,YAAW;AAC7D,SAAO,KAAKrB,gBAAZ;AACD,CAFD;AAKA;AACA;AACA;;;AACAlB,oBAAoB,CAAC4B,SAArB,CAA+BY,kBAA/B,GAAoD,UAASC,QAAT,EAAmB;AACrE,OAAKvB,gBAAL,GAAwBuB,QAAxB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAzC,oBAAoB,CAAC4B,SAArB,CAA+Bc,SAA/B,GAA2C,UAASnC,MAAT,EAAiB;AAC1D,OAAKD,OAAL,GAAeC,MAAf;AACA,OAAKQ,SAAL,GAAiB,CAAC,EAAE,KAAKF,OAAL,IAAgBN,MAAlB,CAAlB;AACD,CAHD;AAMA;AACA;AACA;AACA;AACA;AACA;;;AACAP,oBAAoB,CAAC4B,SAArB,CAA+Be,cAA/B,GAAgD,UAASjC,WAAT,EAAsB;AACpE,OAAKD,YAAL,GAAoBC,WAApB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AACAV,oBAAoB,CAAC4B,SAArB,CAA+BgB,qBAA/B,GAAuD,UAASC,IAAT,EAAe;AACpE,OAAK7B,uBAAL,GAA+B6B,IAA/B;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACA7C,oBAAoB,CAAC4B,SAArB,CAA+BkB,sBAA/B,GAAwD,YAAW;AACjE,SAAO,KAAK9B,uBAAZ;AACD,CAFD;;AAGA,eAAehB,oBAAf","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_proj_Units_ from '../proj/units.js';\nimport _ol_proj_proj4_ from '../proj/proj4.js';\n\n/**\n * @classdesc\n * Projection definition class. One of these is created for each projection\n * supported in the application and stored in the {@link ol.proj} namespace.\n * You can use these in applications, but this is not required, as API params\n * and options use {@link ol.ProjectionLike} which means the simple string\n * code will suffice.\n *\n * You can use {@link ol.proj.get} to retrieve the object for a particular\n * projection.\n *\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\n * with the following aliases:\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\n *     urn:x-ogc:def:crs:EPSG:4326\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\n *\n * If you use proj4js, aliases can be added using `proj4.defs()`; see\n * [documentation](https://github.com/proj4js/proj4js). To set an alternative\n * namespace for proj4, use {@link ol.proj.setProj4}.\n *\n * @constructor\n * @param {olx.ProjectionOptions} options Projection options.\n * @struct\n * @api\n */\nvar _ol_proj_Projection_ = function(options) {\n  /**\n   * @private\n   * @type {string}\n   */\n  this.code_ = options.code;\n\n  /**\n   * Units of projected coordinates. When set to `ol.proj.Units.TILE_PIXELS`, a\n   * `this.extent_` and `this.worldExtent_` must be configured properly for each\n   * tile.\n   * @private\n   * @type {ol.proj.Units}\n   */\n  this.units_ = /** @type {ol.proj.Units} */ (options.units);\n\n  /**\n   * Validity extent of the projection in projected coordinates. For projections\n   * with `ol.proj.Units.TILE_PIXELS` units, this is the extent of the tile in\n   * tile pixel space.\n   * @private\n   * @type {ol.Extent}\n   */\n  this.extent_ = options.extent !== undefined ? options.extent : null;\n\n  /**\n   * Extent of the world in EPSG:4326. For projections with\n   * `ol.proj.Units.TILE_PIXELS` units, this is the extent of the tile in\n   * projected coordinate space.\n   * @private\n   * @type {ol.Extent}\n   */\n  this.worldExtent_ = options.worldExtent !== undefined ?\n    options.worldExtent : null;\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.axisOrientation_ = options.axisOrientation !== undefined ?\n    options.axisOrientation : 'enu';\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.global_ = options.global !== undefined ? options.global : false;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.canWrapX_ = !!(this.global_ && this.extent_);\n\n  /**\n   * @private\n   * @type {function(number, ol.Coordinate):number|undefined}\n   */\n  this.getPointResolutionFunc_ = options.getPointResolution;\n\n  /**\n   * @private\n   * @type {ol.tilegrid.TileGrid}\n   */\n  this.defaultTileGrid_ = null;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.metersPerUnit_ = options.metersPerUnit;\n\n  var code = options.code;\n  if (_ol_.ENABLE_PROJ4JS) {\n    var proj4js = _ol_proj_proj4_.get();\n    if (typeof proj4js == 'function') {\n      var def = proj4js.defs(code);\n      if (def !== undefined) {\n        if (def.axis !== undefined && options.axisOrientation === undefined) {\n          this.axisOrientation_ = def.axis;\n        }\n        if (options.metersPerUnit === undefined) {\n          this.metersPerUnit_ = def.to_meter;\n        }\n        if (options.units === undefined) {\n          this.units_ = def.units;\n        }\n      }\n    }\n  }\n};\n\n\n/**\n * @return {boolean} The projection is suitable for wrapping the x-axis\n */\n_ol_proj_Projection_.prototype.canWrapX = function() {\n  return this.canWrapX_;\n};\n\n\n/**\n * Get the code for this projection, e.g. 'EPSG:4326'.\n * @return {string} Code.\n * @api\n */\n_ol_proj_Projection_.prototype.getCode = function() {\n  return this.code_;\n};\n\n\n/**\n * Get the validity extent for this projection.\n * @return {ol.Extent} Extent.\n * @api\n */\n_ol_proj_Projection_.prototype.getExtent = function() {\n  return this.extent_;\n};\n\n\n/**\n * Get the units of this projection.\n * @return {ol.proj.Units} Units.\n * @api\n */\n_ol_proj_Projection_.prototype.getUnits = function() {\n  return this.units_;\n};\n\n\n/**\n * Get the amount of meters per unit of this projection.  If the projection is\n * not configured with `metersPerUnit` or a units identifier, the return is\n * `undefined`.\n * @return {number|undefined} Meters.\n * @api\n */\n_ol_proj_Projection_.prototype.getMetersPerUnit = function() {\n  return this.metersPerUnit_ || _ol_proj_Units_.METERS_PER_UNIT[this.units_];\n};\n\n\n/**\n * Get the world extent for this projection.\n * @return {ol.Extent} Extent.\n * @api\n */\n_ol_proj_Projection_.prototype.getWorldExtent = function() {\n  return this.worldExtent_;\n};\n\n\n/**\n * Get the axis orientation of this projection.\n * Example values are:\n * enu - the default easting, northing, elevation.\n * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n *     or south orientated transverse mercator.\n * wnu - westing, northing, up - some planetary coordinate systems have\n *     \"west positive\" coordinate systems\n * @return {string} Axis orientation.\n * @api\n */\n_ol_proj_Projection_.prototype.getAxisOrientation = function() {\n  return this.axisOrientation_;\n};\n\n\n/**\n * Is this projection a global projection which spans the whole world?\n * @return {boolean} Whether the projection is global.\n * @api\n */\n_ol_proj_Projection_.prototype.isGlobal = function() {\n  return this.global_;\n};\n\n\n/**\n* Set if the projection is a global projection which spans the whole world\n* @param {boolean} global Whether the projection is global.\n* @api\n*/\n_ol_proj_Projection_.prototype.setGlobal = function(global) {\n  this.global_ = global;\n  this.canWrapX_ = !!(global && this.extent_);\n};\n\n\n/**\n * @return {ol.tilegrid.TileGrid} The default tile grid.\n */\n_ol_proj_Projection_.prototype.getDefaultTileGrid = function() {\n  return this.defaultTileGrid_;\n};\n\n\n/**\n * @param {ol.tilegrid.TileGrid} tileGrid The default tile grid.\n */\n_ol_proj_Projection_.prototype.setDefaultTileGrid = function(tileGrid) {\n  this.defaultTileGrid_ = tileGrid;\n};\n\n\n/**\n * Set the validity extent for this projection.\n * @param {ol.Extent} extent Extent.\n * @api\n */\n_ol_proj_Projection_.prototype.setExtent = function(extent) {\n  this.extent_ = extent;\n  this.canWrapX_ = !!(this.global_ && extent);\n};\n\n\n/**\n * Set the world extent for this projection.\n * @param {ol.Extent} worldExtent World extent\n *     [minlon, minlat, maxlon, maxlat].\n * @api\n */\n_ol_proj_Projection_.prototype.setWorldExtent = function(worldExtent) {\n  this.worldExtent_ = worldExtent;\n};\n\n\n/**\n * Set the getPointResolution function (see {@link ol.proj#getPointResolution}\n * for this projection.\n * @param {function(number, ol.Coordinate):number} func Function\n * @api\n */\n_ol_proj_Projection_.prototype.setGetPointResolution = function(func) {\n  this.getPointResolutionFunc_ = func;\n};\n\n\n/**\n * Get the custom point resolution function for this projection (if set).\n * @return {function(number, ol.Coordinate):number|undefined} The custom point\n * resolution function (if set).\n */\n_ol_proj_Projection_.prototype.getPointResolutionFunc = function() {\n  return this.getPointResolutionFunc_;\n};\nexport default _ol_proj_Projection_;\n"]},"metadata":{},"sourceType":"module"}