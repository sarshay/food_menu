{"ast":null,"code":"import _ol_array_ from './array.js';\nimport _ol_math_ from './math.js';\nvar _ol_ResolutionConstraint_ = {};\n/**\n * @param {Array.<number>} resolutions Resolutions.\n * @return {ol.ResolutionConstraintType} Zoom function.\n */\n\n_ol_ResolutionConstraint_.createSnapToResolutions = function (resolutions) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} delta Delta.\n     * @param {number} direction Direction.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, delta, direction) {\n      if (resolution !== undefined) {\n        var z = _ol_array_.linearFindNearest(resolutions, resolution, direction);\n\n        z = _ol_math_.clamp(z + delta, 0, resolutions.length - 1);\n        var index = Math.floor(z);\n\n        if (z != index && index < resolutions.length - 1) {\n          var power = resolutions[index] / resolutions[index + 1];\n          return resolutions[index] / Math.pow(power, z - index);\n        } else {\n          return resolutions[index];\n        }\n      } else {\n        return undefined;\n      }\n    }\n  );\n};\n/**\n * @param {number} power Power.\n * @param {number} maxResolution Maximum resolution.\n * @param {number=} opt_maxLevel Maximum level.\n * @return {ol.ResolutionConstraintType} Zoom function.\n */\n\n\n_ol_ResolutionConstraint_.createSnapToPower = function (power, maxResolution, opt_maxLevel) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} delta Delta.\n     * @param {number} direction Direction.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, delta, direction) {\n      if (resolution !== undefined) {\n        var offset = -direction / 2 + 0.5;\n        var oldLevel = Math.floor(Math.log(maxResolution / resolution) / Math.log(power) + offset);\n        var newLevel = Math.max(oldLevel + delta, 0);\n\n        if (opt_maxLevel !== undefined) {\n          newLevel = Math.min(newLevel, opt_maxLevel);\n        }\n\n        return maxResolution / Math.pow(power, newLevel);\n      } else {\n        return undefined;\n      }\n    }\n  );\n};\n\nexport default _ol_ResolutionConstraint_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/resolutionconstraint.js"],"names":["_ol_array_","_ol_math_","_ol_ResolutionConstraint_","createSnapToResolutions","resolutions","resolution","delta","direction","undefined","z","linearFindNearest","clamp","length","index","Math","floor","power","pow","createSnapToPower","maxResolution","opt_maxLevel","offset","oldLevel","log","newLevel","max","min"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,IAAIC,yBAAyB,GAAG,EAAhC;AAGA;AACA;AACA;AACA;;AACAA,yBAAyB,CAACC,uBAA1B,GAAoD,UAASC,WAAT,EAAsB;AACxE;AACE;AACJ;AACA;AACA;AACA;AACA;AACI,cAASC,UAAT,EAAqBC,KAArB,EAA4BC,SAA5B,EAAuC;AACrC,UAAIF,UAAU,KAAKG,SAAnB,EAA8B;AAC5B,YAAIC,CAAC,GACCT,UAAU,CAACU,iBAAX,CAA6BN,WAA7B,EAA0CC,UAA1C,EAAsDE,SAAtD,CADN;;AAEAE,QAAAA,CAAC,GAAGR,SAAS,CAACU,KAAV,CAAgBF,CAAC,GAAGH,KAApB,EAA2B,CAA3B,EAA8BF,WAAW,CAACQ,MAAZ,GAAqB,CAAnD,CAAJ;AACA,YAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWN,CAAX,CAAZ;;AACA,YAAIA,CAAC,IAAII,KAAL,IAAcA,KAAK,GAAGT,WAAW,CAACQ,MAAZ,GAAqB,CAA/C,EAAkD;AAChD,cAAII,KAAK,GAAGZ,WAAW,CAACS,KAAD,CAAX,GAAqBT,WAAW,CAACS,KAAK,GAAG,CAAT,CAA5C;AACA,iBAAOT,WAAW,CAACS,KAAD,CAAX,GAAqBC,IAAI,CAACG,GAAL,CAASD,KAAT,EAAgBP,CAAC,GAAGI,KAApB,CAA5B;AACD,SAHD,MAGO;AACL,iBAAOT,WAAW,CAACS,KAAD,CAAlB;AACD;AACF,OAXD,MAWO;AACL,eAAOL,SAAP;AACD;AACF;AAtBH;AAwBD,CAzBD;AA4BA;AACA;AACA;AACA;AACA;AACA;;;AACAN,yBAAyB,CAACgB,iBAA1B,GAA8C,UAASF,KAAT,EAAgBG,aAAhB,EAA+BC,YAA/B,EAA6C;AACzF;AACE;AACJ;AACA;AACA;AACA;AACA;AACI,cAASf,UAAT,EAAqBC,KAArB,EAA4BC,SAA5B,EAAuC;AACrC,UAAIF,UAAU,KAAKG,SAAnB,EAA8B;AAC5B,YAAIa,MAAM,GAAG,CAACd,SAAD,GAAa,CAAb,GAAiB,GAA9B;AACA,YAAIe,QAAQ,GAAGR,IAAI,CAACC,KAAL,CACXD,IAAI,CAACS,GAAL,CAASJ,aAAa,GAAGd,UAAzB,IAAuCS,IAAI,CAACS,GAAL,CAASP,KAAT,CAAvC,GAAyDK,MAD9C,CAAf;AAEA,YAAIG,QAAQ,GAAGV,IAAI,CAACW,GAAL,CAASH,QAAQ,GAAGhB,KAApB,EAA2B,CAA3B,CAAf;;AACA,YAAIc,YAAY,KAAKZ,SAArB,EAAgC;AAC9BgB,UAAAA,QAAQ,GAAGV,IAAI,CAACY,GAAL,CAASF,QAAT,EAAmBJ,YAAnB,CAAX;AACD;;AACD,eAAOD,aAAa,GAAGL,IAAI,CAACG,GAAL,CAASD,KAAT,EAAgBQ,QAAhB,CAAvB;AACD,OATD,MASO;AACL,eAAOhB,SAAP;AACD;AACF;AApBH;AAqBD,CAtBD;;AAuBA,eAAeN,yBAAf","sourcesContent":["import _ol_array_ from './array.js';\nimport _ol_math_ from './math.js';\nvar _ol_ResolutionConstraint_ = {};\n\n\n/**\n * @param {Array.<number>} resolutions Resolutions.\n * @return {ol.ResolutionConstraintType} Zoom function.\n */\n_ol_ResolutionConstraint_.createSnapToResolutions = function(resolutions) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} delta Delta.\n     * @param {number} direction Direction.\n     * @return {number|undefined} Resolution.\n     */\n    function(resolution, delta, direction) {\n      if (resolution !== undefined) {\n        var z =\n              _ol_array_.linearFindNearest(resolutions, resolution, direction);\n        z = _ol_math_.clamp(z + delta, 0, resolutions.length - 1);\n        var index = Math.floor(z);\n        if (z != index && index < resolutions.length - 1) {\n          var power = resolutions[index] / resolutions[index + 1];\n          return resolutions[index] / Math.pow(power, z - index);\n        } else {\n          return resolutions[index];\n        }\n      } else {\n        return undefined;\n      }\n    }\n  );\n};\n\n\n/**\n * @param {number} power Power.\n * @param {number} maxResolution Maximum resolution.\n * @param {number=} opt_maxLevel Maximum level.\n * @return {ol.ResolutionConstraintType} Zoom function.\n */\n_ol_ResolutionConstraint_.createSnapToPower = function(power, maxResolution, opt_maxLevel) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} delta Delta.\n     * @param {number} direction Direction.\n     * @return {number|undefined} Resolution.\n     */\n    function(resolution, delta, direction) {\n      if (resolution !== undefined) {\n        var offset = -direction / 2 + 0.5;\n        var oldLevel = Math.floor(\n            Math.log(maxResolution / resolution) / Math.log(power) + offset);\n        var newLevel = Math.max(oldLevel + delta, 0);\n        if (opt_maxLevel !== undefined) {\n          newLevel = Math.min(newLevel, opt_maxLevel);\n        }\n        return maxResolution / Math.pow(power, newLevel);\n      } else {\n        return undefined;\n      }\n    });\n};\nexport default _ol_ResolutionConstraint_;\n"]},"metadata":{},"sourceType":"module"}