{"ast":null,"code":"import _ol_geom_flat_reverse_ from '../flat/reverse.js';\nvar _ol_geom_flat_orient_ = {};\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {boolean} Is clockwise.\n */\n\n_ol_geom_flat_orient_.linearRingIsClockwise = function (flatCoordinates, offset, end, stride) {\n  // http://tinyurl.com/clockwise-method\n  // https://github.com/OSGeo/gdal/blob/trunk/gdal/ogr/ogrlinearring.cpp\n  var edge = 0;\n  var x1 = flatCoordinates[end - stride];\n  var y1 = flatCoordinates[end - stride + 1];\n\n  for (; offset < end; offset += stride) {\n    var x2 = flatCoordinates[offset];\n    var y2 = flatCoordinates[offset + 1];\n    edge += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n\n  return edge > 0;\n};\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `opt_right` argument.\n *\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean=} opt_right Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\n\n\n_ol_geom_flat_orient_.linearRingsAreOriented = function (flatCoordinates, offset, ends, stride, opt_right) {\n  var right = opt_right !== undefined ? opt_right : false;\n  var i, ii;\n\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n\n    var isClockwise = _ol_geom_flat_orient_.linearRingIsClockwise(flatCoordinates, offset, end, stride);\n\n    if (i === 0) {\n      if (right && isClockwise || !right && !isClockwise) {\n        return false;\n      }\n    } else {\n      if (right && !isClockwise || !right && isClockwise) {\n        return false;\n      }\n    }\n\n    offset = end;\n  }\n\n  return true;\n};\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `opt_right` argument.\n *\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<Array.<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean=} opt_right Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\n\n\n_ol_geom_flat_orient_.linearRingssAreOriented = function (flatCoordinates, offset, endss, stride, opt_right) {\n  var i, ii;\n\n  for (i = 0, ii = endss.length; i < ii; ++i) {\n    if (!_ol_geom_flat_orient_.linearRingsAreOriented(flatCoordinates, offset, endss[i], stride, opt_right)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `opt_right` argument.\n *\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {boolean=} opt_right Follow the right-hand rule for orientation.\n * @return {number} End.\n */\n\n\n_ol_geom_flat_orient_.orientLinearRings = function (flatCoordinates, offset, ends, stride, opt_right) {\n  var right = opt_right !== undefined ? opt_right : false;\n  var i, ii;\n\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n\n    var isClockwise = _ol_geom_flat_orient_.linearRingIsClockwise(flatCoordinates, offset, end, stride);\n\n    var reverse = i === 0 ? right && isClockwise || !right && !isClockwise : right && !isClockwise || !right && isClockwise;\n\n    if (reverse) {\n      _ol_geom_flat_reverse_.coordinates(flatCoordinates, offset, end, stride);\n    }\n\n    offset = end;\n  }\n\n  return offset;\n};\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `opt_right` argument.\n *\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<Array.<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean=} opt_right Follow the right-hand rule for orientation.\n * @return {number} End.\n */\n\n\n_ol_geom_flat_orient_.orientLinearRingss = function (flatCoordinates, offset, endss, stride, opt_right) {\n  var i, ii;\n\n  for (i = 0, ii = endss.length; i < ii; ++i) {\n    offset = _ol_geom_flat_orient_.orientLinearRings(flatCoordinates, offset, endss[i], stride, opt_right);\n  }\n\n  return offset;\n};\n\nexport default _ol_geom_flat_orient_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/geom/flat/orient.js"],"names":["_ol_geom_flat_reverse_","_ol_geom_flat_orient_","linearRingIsClockwise","flatCoordinates","offset","end","stride","edge","x1","y1","x2","y2","linearRingsAreOriented","ends","opt_right","right","undefined","i","ii","length","isClockwise","linearRingssAreOriented","endss","orientLinearRings","reverse","coordinates","orientLinearRingss"],"mappings":"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","sourcesContent":["import _ol_geom_flat_reverse_ from '../flat/reverse.js';\nvar _ol_geom_flat_orient_ = {};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {boolean} Is clockwise.\n */\n_ol_geom_flat_orient_.linearRingIsClockwise = function(flatCoordinates, offset, end, stride) {\n  // http://tinyurl.com/clockwise-method\n  // https://github.com/OSGeo/gdal/blob/trunk/gdal/ogr/ogrlinearring.cpp\n  var edge = 0;\n  var x1 = flatCoordinates[end - stride];\n  var y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    var x2 = flatCoordinates[offset];\n    var y2 = flatCoordinates[offset + 1];\n    edge += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n  return edge > 0;\n};\n\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `opt_right` argument.\n *\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean=} opt_right Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\n_ol_geom_flat_orient_.linearRingsAreOriented = function(flatCoordinates, offset, ends, stride, opt_right) {\n  var right = opt_right !== undefined ? opt_right : false;\n  var i, ii;\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    var isClockwise = _ol_geom_flat_orient_.linearRingIsClockwise(\n        flatCoordinates, offset, end, stride);\n    if (i === 0) {\n      if ((right && isClockwise) || (!right && !isClockwise)) {\n        return false;\n      }\n    } else {\n      if ((right && !isClockwise) || (!right && isClockwise)) {\n        return false;\n      }\n    }\n    offset = end;\n  }\n  return true;\n};\n\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `opt_right` argument.\n *\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<Array.<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean=} opt_right Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\n_ol_geom_flat_orient_.linearRingssAreOriented = function(flatCoordinates, offset, endss, stride, opt_right) {\n  var i, ii;\n  for (i = 0, ii = endss.length; i < ii; ++i) {\n    if (!_ol_geom_flat_orient_.linearRingsAreOriented(\n        flatCoordinates, offset, endss[i], stride, opt_right)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `opt_right` argument.\n *\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {boolean=} opt_right Follow the right-hand rule for orientation.\n * @return {number} End.\n */\n_ol_geom_flat_orient_.orientLinearRings = function(flatCoordinates, offset, ends, stride, opt_right) {\n  var right = opt_right !== undefined ? opt_right : false;\n  var i, ii;\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    var isClockwise = _ol_geom_flat_orient_.linearRingIsClockwise(\n        flatCoordinates, offset, end, stride);\n    var reverse = i === 0 ?\n      (right && isClockwise) || (!right && !isClockwise) :\n      (right && !isClockwise) || (!right && isClockwise);\n    if (reverse) {\n      _ol_geom_flat_reverse_.coordinates(flatCoordinates, offset, end, stride);\n    }\n    offset = end;\n  }\n  return offset;\n};\n\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `opt_right` argument.\n *\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<Array.<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean=} opt_right Follow the right-hand rule for orientation.\n * @return {number} End.\n */\n_ol_geom_flat_orient_.orientLinearRingss = function(flatCoordinates, offset, endss, stride, opt_right) {\n  var i, ii;\n  for (i = 0, ii = endss.length; i < ii; ++i) {\n    offset = _ol_geom_flat_orient_.orientLinearRings(\n        flatCoordinates, offset, endss[i], stride, opt_right);\n  }\n  return offset;\n};\nexport default _ol_geom_flat_orient_;\n"]},"metadata":{},"sourceType":"module"}