{"ast":null,"code":"import _ol_ from './index.js';\nimport _ol_ObjectEventType_ from './objecteventtype.js';\nimport _ol_Observable_ from './observable.js';\nimport _ol_events_Event_ from './events/event.js';\nimport _ol_obj_ from './obj.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link ol.Observable} with observable properties, where each\n * property is observable as well as the object as a whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link ol.Map} has a `target` property, accessed with `getTarget()`  and\n * changed with `setTarget()`. Not all properties are however settable. There\n * are also general-purpose accessors `get()` and `set()`. For example,\n * `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link ol.View} has a `center`\n * property, so `view.on('change:center', function(evt) {...});` would call the\n * function whenever the value of the center property changes. Within the\n * function, `evt.target` would be the view, so `evt.target.getCenter()` would\n * return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link ol.Object#getProperties object.getProperties()}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @constructor\n * @extends {ol.Observable}\n * @param {Object.<string, *>=} opt_values An object with key-value pairs.\n * @fires ol.Object.Event\n * @api\n */\n\nvar _ol_Object_ = function (opt_values) {\n  _ol_Observable_.call(this); // Call ol.getUid to ensure that the order of objects' ids is the same as\n  // the order in which they were created.  This also helps to ensure that\n  // object properties are always added in the same order, which helps many\n  // JavaScript engines generate faster code.\n\n\n  _ol_.getUid(this);\n  /**\n   * @private\n   * @type {!Object.<string, *>}\n   */\n\n\n  this.values_ = {};\n\n  if (opt_values !== undefined) {\n    this.setProperties(opt_values);\n  }\n};\n\n_ol_.inherits(_ol_Object_, _ol_Observable_);\n/**\n * @private\n * @type {Object.<string, string>}\n */\n\n\n_ol_Object_.changeEventTypeCache_ = {};\n/**\n * @param {string} key Key name.\n * @return {string} Change name.\n */\n\n_ol_Object_.getChangeEventType = function (key) {\n  return _ol_Object_.changeEventTypeCache_.hasOwnProperty(key) ? _ol_Object_.changeEventTypeCache_[key] : _ol_Object_.changeEventTypeCache_[key] = 'change:' + key;\n};\n/**\n * Gets a value.\n * @param {string} key Key name.\n * @return {*} Value.\n * @api\n */\n\n\n_ol_Object_.prototype.get = function (key) {\n  var value;\n\n  if (this.values_.hasOwnProperty(key)) {\n    value = this.values_[key];\n  }\n\n  return value;\n};\n/**\n * Get a list of object property names.\n * @return {Array.<string>} List of property names.\n * @api\n */\n\n\n_ol_Object_.prototype.getKeys = function () {\n  return Object.keys(this.values_);\n};\n/**\n * Get an object of all property names and values.\n * @return {Object.<string, *>} Object.\n * @api\n */\n\n\n_ol_Object_.prototype.getProperties = function () {\n  return _ol_obj_.assign({}, this.values_);\n};\n/**\n * @param {string} key Key name.\n * @param {*} oldValue Old value.\n */\n\n\n_ol_Object_.prototype.notify = function (key, oldValue) {\n  var eventType;\n  eventType = _ol_Object_.getChangeEventType(key);\n  this.dispatchEvent(new _ol_Object_.Event(eventType, key, oldValue));\n  eventType = _ol_ObjectEventType_.PROPERTYCHANGE;\n  this.dispatchEvent(new _ol_Object_.Event(eventType, key, oldValue));\n};\n/**\n * Sets a value.\n * @param {string} key Key name.\n * @param {*} value Value.\n * @param {boolean=} opt_silent Update without triggering an event.\n * @api\n */\n\n\n_ol_Object_.prototype.set = function (key, value, opt_silent) {\n  if (opt_silent) {\n    this.values_[key] = value;\n  } else {\n    var oldValue = this.values_[key];\n    this.values_[key] = value;\n\n    if (oldValue !== value) {\n      this.notify(key, oldValue);\n    }\n  }\n};\n/**\n * Sets a collection of key-value pairs.  Note that this changes any existing\n * properties and adds new ones (it does not remove any existing properties).\n * @param {Object.<string, *>} values Values.\n * @param {boolean=} opt_silent Update without triggering an event.\n * @api\n */\n\n\n_ol_Object_.prototype.setProperties = function (values, opt_silent) {\n  var key;\n\n  for (key in values) {\n    this.set(key, values[key], opt_silent);\n  }\n};\n/**\n * Unsets a property.\n * @param {string} key Key name.\n * @param {boolean=} opt_silent Unset without triggering an event.\n * @api\n */\n\n\n_ol_Object_.prototype.unset = function (key, opt_silent) {\n  if (key in this.values_) {\n    var oldValue = this.values_[key];\n    delete this.values_[key];\n\n    if (!opt_silent) {\n      this.notify(key, oldValue);\n    }\n  }\n};\n/**\n * @classdesc\n * Events emitted by {@link ol.Object} instances are instances of this type.\n *\n * @param {string} type The event type.\n * @param {string} key The property name.\n * @param {*} oldValue The old value for `key`.\n * @extends {ol.events.Event}\n * @implements {oli.Object.Event}\n * @constructor\n */\n\n\n_ol_Object_.Event = function (type, key, oldValue) {\n  _ol_events_Event_.call(this, type);\n  /**\n   * The name of the property whose value is changing.\n   * @type {string}\n   * @api\n   */\n\n\n  this.key = key;\n  /**\n   * The old value. To get the new value use `e.target.get(e.key)` where\n   * `e` is the event object.\n   * @type {*}\n   * @api\n   */\n\n  this.oldValue = oldValue;\n};\n\n_ol_.inherits(_ol_Object_.Event, _ol_events_Event_);\n\nexport default _ol_Object_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/object.js"],"names":["_ol_","_ol_ObjectEventType_","_ol_Observable_","_ol_events_Event_","_ol_obj_","_ol_Object_","opt_values","call","getUid","values_","undefined","setProperties","inherits","changeEventTypeCache_","getChangeEventType","key","hasOwnProperty","prototype","get","value","getKeys","Object","keys","getProperties","assign","notify","oldValue","eventType","dispatchEvent","Event","PROPERTYCHANGE","set","opt_silent","values","unset","type"],"mappings":"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","sourcesContent":["import _ol_ from './index.js';\nimport _ol_ObjectEventType_ from './objecteventtype.js';\nimport _ol_Observable_ from './observable.js';\nimport _ol_events_Event_ from './events/event.js';\nimport _ol_obj_ from './obj.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link ol.Observable} with observable properties, where each\n * property is observable as well as the object as a whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link ol.Map} has a `target` property, accessed with `getTarget()`  and\n * changed with `setTarget()`. Not all properties are however settable. There\n * are also general-purpose accessors `get()` and `set()`. For example,\n * `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link ol.View} has a `center`\n * property, so `view.on('change:center', function(evt) {...});` would call the\n * function whenever the value of the center property changes. Within the\n * function, `evt.target` would be the view, so `evt.target.getCenter()` would\n * return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link ol.Object#getProperties object.getProperties()}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @constructor\n * @extends {ol.Observable}\n * @param {Object.<string, *>=} opt_values An object with key-value pairs.\n * @fires ol.Object.Event\n * @api\n */\nvar _ol_Object_ = function(opt_values) {\n  _ol_Observable_.call(this);\n\n  // Call ol.getUid to ensure that the order of objects' ids is the same as\n  // the order in which they were created.  This also helps to ensure that\n  // object properties are always added in the same order, which helps many\n  // JavaScript engines generate faster code.\n  _ol_.getUid(this);\n\n  /**\n   * @private\n   * @type {!Object.<string, *>}\n   */\n  this.values_ = {};\n\n  if (opt_values !== undefined) {\n    this.setProperties(opt_values);\n  }\n};\n\n_ol_.inherits(_ol_Object_, _ol_Observable_);\n\n\n/**\n * @private\n * @type {Object.<string, string>}\n */\n_ol_Object_.changeEventTypeCache_ = {};\n\n\n/**\n * @param {string} key Key name.\n * @return {string} Change name.\n */\n_ol_Object_.getChangeEventType = function(key) {\n  return _ol_Object_.changeEventTypeCache_.hasOwnProperty(key) ?\n    _ol_Object_.changeEventTypeCache_[key] :\n    (_ol_Object_.changeEventTypeCache_[key] = 'change:' + key);\n};\n\n\n/**\n * Gets a value.\n * @param {string} key Key name.\n * @return {*} Value.\n * @api\n */\n_ol_Object_.prototype.get = function(key) {\n  var value;\n  if (this.values_.hasOwnProperty(key)) {\n    value = this.values_[key];\n  }\n  return value;\n};\n\n\n/**\n * Get a list of object property names.\n * @return {Array.<string>} List of property names.\n * @api\n */\n_ol_Object_.prototype.getKeys = function() {\n  return Object.keys(this.values_);\n};\n\n\n/**\n * Get an object of all property names and values.\n * @return {Object.<string, *>} Object.\n * @api\n */\n_ol_Object_.prototype.getProperties = function() {\n  return _ol_obj_.assign({}, this.values_);\n};\n\n\n/**\n * @param {string} key Key name.\n * @param {*} oldValue Old value.\n */\n_ol_Object_.prototype.notify = function(key, oldValue) {\n  var eventType;\n  eventType = _ol_Object_.getChangeEventType(key);\n  this.dispatchEvent(new _ol_Object_.Event(eventType, key, oldValue));\n  eventType = _ol_ObjectEventType_.PROPERTYCHANGE;\n  this.dispatchEvent(new _ol_Object_.Event(eventType, key, oldValue));\n};\n\n\n/**\n * Sets a value.\n * @param {string} key Key name.\n * @param {*} value Value.\n * @param {boolean=} opt_silent Update without triggering an event.\n * @api\n */\n_ol_Object_.prototype.set = function(key, value, opt_silent) {\n  if (opt_silent) {\n    this.values_[key] = value;\n  } else {\n    var oldValue = this.values_[key];\n    this.values_[key] = value;\n    if (oldValue !== value) {\n      this.notify(key, oldValue);\n    }\n  }\n};\n\n\n/**\n * Sets a collection of key-value pairs.  Note that this changes any existing\n * properties and adds new ones (it does not remove any existing properties).\n * @param {Object.<string, *>} values Values.\n * @param {boolean=} opt_silent Update without triggering an event.\n * @api\n */\n_ol_Object_.prototype.setProperties = function(values, opt_silent) {\n  var key;\n  for (key in values) {\n    this.set(key, values[key], opt_silent);\n  }\n};\n\n\n/**\n * Unsets a property.\n * @param {string} key Key name.\n * @param {boolean=} opt_silent Unset without triggering an event.\n * @api\n */\n_ol_Object_.prototype.unset = function(key, opt_silent) {\n  if (key in this.values_) {\n    var oldValue = this.values_[key];\n    delete this.values_[key];\n    if (!opt_silent) {\n      this.notify(key, oldValue);\n    }\n  }\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link ol.Object} instances are instances of this type.\n *\n * @param {string} type The event type.\n * @param {string} key The property name.\n * @param {*} oldValue The old value for `key`.\n * @extends {ol.events.Event}\n * @implements {oli.Object.Event}\n * @constructor\n */\n_ol_Object_.Event = function(type, key, oldValue) {\n  _ol_events_Event_.call(this, type);\n\n  /**\n   * The name of the property whose value is changing.\n   * @type {string}\n   * @api\n   */\n  this.key = key;\n\n  /**\n   * The old value. To get the new value use `e.target.get(e.key)` where\n   * `e` is the event object.\n   * @type {*}\n   * @api\n   */\n  this.oldValue = oldValue;\n\n};\n_ol_.inherits(_ol_Object_.Event, _ol_events_Event_);\nexport default _ol_Object_;\n"]},"metadata":{},"sourceType":"module"}