{"ast":null,"code":"// A is m x n. B is n x p. product is m x p.\nfunction multiplyMatrices(A, B) {\n  let m = A.length;\n\n  if (!Array.isArray(A[0])) {\n    // A is vector, convert to [[a, b, c, ...]]\n    A = [A];\n  }\n\n  if (!Array.isArray(B[0])) {\n    // B is vector, convert to [[a], [b], [c], ...]]\n    B = B.map(x => [x]);\n  }\n\n  let p = B[0].length;\n  let B_cols = B[0].map((_, i) => B.map(x => x[i])); // transpose B\n\n  let product = A.map(row => B_cols.map(col => {\n    if (!Array.isArray(row)) {\n      return col.reduce((a, c) => a + c * row, 0);\n    }\n\n    return row.reduce((a, c, i) => a + c * (col[i] || 0), 0);\n  }));\n\n  if (m === 1) {\n    product = product[0]; // Avoid [[a, b, c, ...]]\n  }\n\n  if (p === 1) {\n    return product.map(x => x[0]); // Avoid [[a], [b], [c], ...]]\n  }\n\n  return product;\n}\n/**\r\n * Check if a value is a string (including a String object)\r\n * @param {*} str - Value to check\r\n * @returns {boolean}\r\n */\n\n\nfunction isString(str) {\n  return type(str) === \"string\";\n}\n/**\r\n * Determine the internal JavaScript [[Class]] of an object.\r\n * @param {*} o - Value to check\r\n * @returns {string}\r\n */\n\n\nfunction type(o) {\n  let str = Object.prototype.toString.call(o);\n  return (str.match(/^\\[object\\s+(.*?)\\]$/)[1] || \"\").toLowerCase();\n}\n/**\r\n * Like Object.assign() but copies property descriptors (including symbols)\r\n * @param {Object} target - Object to copy to\r\n * @param {...Object} sources - Objects to copy from\r\n * @returns {Object} target\r\n */\n\n\nfunction extend(target, ...sources) {\n  for (let source of sources) {\n    if (source) {\n      let descriptors = Object.getOwnPropertyDescriptors(source);\n      Object.defineProperties(target, descriptors);\n    }\n  }\n\n  return target;\n}\n/**\r\n * Copy a descriptor from one object to another\r\n * @param {Object} target - Object to copy to\r\n * @param {Object} source - Object to copy from\r\n * @param {string} prop - Name of property\r\n */\n\n\nfunction copyDescriptor(target, source, prop) {\n  let descriptor = Object.getOwnPropertyDescriptor(source, prop);\n  Object.defineProperty(target, prop, descriptor);\n}\n/**\r\n * Uppercase the first letter of a string\r\n * @param {string} str - String to capitalize\r\n * @returns Capitalized string\r\n */\n\n\nfunction capitalize(str) {\n  if (!str) {\n    return str;\n  }\n\n  return str[0].toUpperCase() + str.slice(1);\n}\n/**\r\n * Round a number to a certain number of significant digits based on a range\r\n * @param {number} n - The number to round\r\n * @param {number} precision - Number of significant digits\r\n */\n\n\nfunction toPrecision(n, precision) {\n  precision = +precision;\n  let integerLength = (Math.floor(n) + \"\").length;\n\n  if (precision > integerLength) {\n    return +n.toFixed(precision - integerLength);\n  } else {\n    let p10 = 10 ** (integerLength - precision);\n    return Math.round(n / p10) * p10;\n  }\n}\n\nfunction parseCoord(coord) {\n  if (coord.indexOf(\".\") > 0) {\n    // Reduce a coordinate of a certain color space until the color is in gamut\n    let [spaceId, coordName] = coord.split(\".\");\n    let space = Color.space(spaceId);\n\n    if (!(coordName in space.coords)) {\n      throw new ReferenceError(`Color space \"${space.name}\" has no \"${coordName}\" coordinate.`);\n    }\n\n    return [space, coordName];\n  }\n}\n\nfunction value(obj, prop, value) {\n  let props = prop.split(\".\");\n  let lastProp = props.pop();\n  obj = props.reduceRight((acc, cur) => {\n    return acc && acc[cur];\n  }, obj);\n\n  if (obj) {\n    if (value === undefined) {\n      // Get\n      return obj[lastProp];\n    } else {\n      // Set\n      return obj[lastProp] = value;\n    }\n  }\n}\n\nvar util = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  isString: isString,\n  type: type,\n  extend: extend,\n  copyDescriptor: copyDescriptor,\n  capitalize: capitalize,\n  toPrecision: toPrecision,\n  parseCoord: parseCoord,\n  value: value,\n  multiplyMatrices: multiplyMatrices\n});\n/**\r\n * Module version of Bliss.Hooks.\r\n * @author Lea Verou\r\n */\n\nclass Hooks {\n  add(name, callback, first) {\n    if (typeof arguments[0] != \"string\") {\n      // Multiple hooks\n      for (var name in arguments[0]) {\n        this.add(name, arguments[0][name], arguments[1]);\n      }\n\n      return;\n    }\n\n    (Array.isArray(name) ? name : [name]).forEach(function (name) {\n      this[name] = this[name] || [];\n\n      if (callback) {\n        this[name][first ? \"unshift\" : \"push\"](callback);\n      }\n    }, this);\n  }\n\n  run(name, env) {\n    this[name] = this[name] || [];\n    this[name].forEach(function (callback) {\n      callback.call(env && env.context ? env.context : env, env);\n    });\n  }\n\n}\n\nconst ε = .000075;\nconst hasDOM = typeof document !== \"undefined\";\n\nclass Color$1 {\n  // Signatures:\n  // new Color(stringToParse)\n  // new Color(otherColor)\n  // new Color(coords, alpha) // defaults to sRGB\n  // new Color(CSS variable [, root])\n  constructor(...args) {\n    let str, color; // new Color(color)\n    // new Color({spaceId, coords})\n    // new Color({space, coords})\n\n    if (args[0] && typeof args[0] === \"object\" && (args[0].space || args[0].spaceId) && args[0].coords) {\n      color = args[0];\n    } else if (isString(args[0])) {\n      // new Color(\"--foo\" [, root])\n      if (hasDOM && args[0].indexOf(\"--\") === 0) {\n        // CSS variable\n        let root = arguments[1] && arguments[1].nodeType === 1 ? arguments[1] : document.documentElement;\n        str = getComputedStyle(root).getPropertyValue(arguments[0]);\n      } // new Color(string)\n      else if (args.length === 1) {\n        str = args[0];\n      }\n\n      if (str) {\n        color = Color$1.parse(str);\n      }\n    }\n\n    if (color) {\n      if (\"spaceId\" in color) {\n        this.spaceId = color.spaceId;\n      } else {\n        this.space = color.space;\n      }\n\n      this.coords = color.coords.slice();\n      this.alpha = color.alpha;\n    } else {\n      // default signature new Color([ColorSpace,] array [, alpha])\n      let spaceId, coords, alpha;\n\n      if (Array.isArray(args[0])) {\n        // No color space provided, default to sRGB\n        [spaceId, coords, alpha] = [\"sRGB\", ...args];\n      } else {\n        [spaceId, coords, alpha] = args;\n      }\n\n      this.spaceId = spaceId || \"sRGB\";\n      this.coords = coords ? coords.slice() : [0, 0, 0];\n      this.alpha = alpha;\n    }\n\n    this.alpha = this.alpha < 1 ? this.alpha : 1; // this also deals with NaN etc\n    // Convert \"NaN\" to NaN\n\n    for (let i = 0; i < this.coords.length; i++) {\n      if (this.coords[i] === \"NaN\") {\n        this.coords[i] = NaN;\n      }\n    }\n  }\n\n  get space() {\n    return Color$1.spaces[this.spaceId];\n  }\n\n  set space(value) {\n    // Setting spaceId works with color space objects too\n    return this.spaceId = value;\n  }\n\n  get spaceId() {\n    return this._spaceId;\n  } // Handle dynamic changes of color space\n\n\n  set spaceId(id) {\n    let newSpace = Color$1.space(id);\n    id = newSpace.id;\n\n    if (this.space && newSpace && this.space !== newSpace) {\n      // We’re not setting this for the first time, need to:\n      // a) Convert coords\n      this.coords = this[id]; // b) Remove instance properties from previous color space\n\n      for (let prop in this.space.instance) {\n        if (this.hasOwnProperty(prop)) {\n          delete this[prop];\n        }\n      }\n    }\n\n    this._spaceId = id; // Add new instance properties from new color space\n\n    extend(this, this.space.instance);\n  }\n\n  get white() {\n    return this.space.white || Color$1.whites.D50;\n  } // Set properties and return current instance\n\n\n  set(prop, value$1) {\n    if (arguments.length === 1 && type(arguments[0]) === \"object\") {\n      // Argument is an object literal\n      let object = arguments[0];\n\n      for (let p in object) {\n        this.set(p, object[p]);\n      }\n    } else {\n      if (typeof value$1 === \"function\") {\n        let current = value(this, prop);\n        value(this, prop, value$1.call(this, current));\n      } else {\n        value(this, prop, value$1);\n      }\n    }\n\n    return this;\n  }\n\n  lighten(amount = .25) {\n    let ret = new Color$1(this);\n    let lightness = ret.lightness;\n    ret.lightness = lightness * (1 + amount);\n    return ret;\n  }\n\n  darken(amount = .25) {\n    let ret = new Color$1(this);\n    let lightness = ret.lightness;\n    ret.lightness = lightness * (1 - amount);\n    return ret;\n  } // Euclidean distance of colors in an arbitrary color space\n\n\n  distance(color, space = \"lab\") {\n    color = Color$1.get(color);\n    space = Color$1.space(space);\n    let coords1 = this[space.id];\n    let coords2 = color[space.id];\n    return Math.sqrt(coords1.reduce((a, c, i) => {\n      if (isNaN(c) || isNaN(coords2[i])) {\n        return a;\n      }\n\n      return a + (coords2[i] - c) ** 2;\n    }, 0));\n  }\n\n  deltaE(color, o = {}) {\n    if (isString(o)) {\n      o = {\n        method: o\n      };\n    }\n\n    let {\n      method = Color$1.defaults.deltaE,\n      ...rest\n    } = o;\n    color = Color$1.get(color);\n\n    if (this[\"deltaE\" + method]) {\n      return this[\"deltaE\" + method](color, rest);\n    }\n\n    return this.deltaE76(color);\n  } // 1976 DeltaE. 2.3 is the JND\n\n\n  deltaE76(color) {\n    return this.distance(color, \"lab\");\n  } // Relative luminance\n\n\n  get luminance() {\n    return this.xyz.Y;\n  }\n\n  set luminance(value) {\n    this.xyz.Y = value;\n  } // WCAG 2.0 contrast https://www.w3.org/TR/WCAG20-TECHS/G18.html\n\n\n  contrast(color) {\n    color = Color$1.get(color);\n    let L1 = this.luminance;\n    let L2 = color.luminance;\n\n    if (L2 > L1) {\n      [L1, L2] = [L2, L1];\n    }\n\n    return (L1 + .05) / (L2 + .05);\n  } // Chromaticity coordinates\n\n\n  get uv() {\n    let [X, Y, Z] = this.xyz;\n    let denom = X + 15 * Y + 3 * Z;\n    return [4 * X / denom, 9 * Y / denom];\n  }\n\n  get xy() {\n    let [X, Y, Z] = this.xyz;\n    let sum = X + Y + Z;\n    return [X / sum, Y / sum];\n  } // no setters, as lightness information is lost\n  // when converting color to chromaticity\n  // Get formatted coords\n\n\n  getCoords({\n    inGamut,\n    precision = Color$1.defaults.precision\n  } = {}) {\n    let coords = this.coords;\n\n    if (inGamut && !this.inGamut()) {\n      coords = this.toGamut(inGamut === true ? undefined : inGamut).coords;\n    }\n\n    if (precision !== undefined && precision !== null) {\n      let bounds = this.space.coords ? Object.values(this.space.coords) : [];\n      coords = coords.map((n, i) => toPrecision(n, precision, bounds[i]));\n    }\n\n    return coords;\n  }\n  /**\r\n   * @return {Boolean} Is the color in gamut?\r\n   */\n\n\n  inGamut(space = this.space, options) {\n    space = Color$1.space(space);\n    return Color$1.inGamut(space, this[space.id], options);\n  }\n\n  static inGamut(space, coords, {\n    epsilon = ε\n  } = {}) {\n    space = Color$1.space(space);\n\n    if (space.inGamut) {\n      return space.inGamut(coords, epsilon);\n    } else {\n      if (!space.coords) {\n        return true;\n      } // No color-space specific inGamut() function, just check if coords are within reference range\n\n\n      let bounds = Object.values(space.coords);\n      return coords.every((c, i) => {\n        if (Number.isNaN(c)) {\n          return true;\n        }\n\n        let [min, max] = bounds[i];\n        return (min === undefined || c >= min - epsilon) && (max === undefined || c <= max + epsilon);\n      });\n    }\n  }\n  /**\r\n   * Force coordinates in gamut of a certain color space and return the result\r\n   * @param {Object} options\r\n   * @param {string} options.method - How to force into gamut.\r\n   *        If \"clip\", coordinates are just clipped to their reference range.\r\n   *        If in the form [colorSpaceId].[coordName], that coordinate is reduced\r\n   *        until the color is in gamut. Please note that this may produce nonsensical\r\n   *        results for certain coordinates (e.g. hue) or infinite loops if reducing the coordinate never brings the color in gamut.\r\n   * @param {ColorSpace|string} options.space - The space whose gamut we want to map to\r\n   * @param {boolean} options.inPlace - If true, modify the current color, otherwise return a new one.\r\n   */\n\n\n  toGamut({\n    method = Color$1.defaults.gamutMapping,\n    space = this.space,\n    inPlace\n  } = {}) {\n    if (isString(arguments[0])) {\n      space = arguments[0];\n    }\n\n    space = Color$1.space(space);\n\n    if (this.inGamut(space, {\n      epsilon: 0\n    })) {\n      return this;\n    } // 3 spaces:\n    // this.space: current color space\n    // space: space whose gamut we are mapping to\n    // mapSpace: space with the coord we're reducing\n\n\n    let color = this.to(space);\n\n    if (method.indexOf(\".\") > 0 && !this.inGamut(space)) {\n      let clipped = color.toGamut({\n        method: \"clip\",\n        space\n      });\n\n      if (this.deltaE(clipped, {\n        method: \"2000\"\n      }) > 2) {\n        // Reduce a coordinate of a certain color space until the color is in gamut\n        let [mapSpace, coordName] = parseCoord(method);\n        let mappedColor = color.to(mapSpace);\n        let bounds = mapSpace.coords[coordName];\n        let min = bounds[0];\n        let ε = .01; // for deltaE\n\n        let low = min;\n        let high = mappedColor[coordName];\n\n        while (high - low > ε) {\n          let clipped = mappedColor.toGamut({\n            space,\n            method: \"clip\"\n          });\n          let deltaE = mappedColor.deltaE(clipped, {\n            method: \"2000\"\n          });\n\n          if (deltaE - 2 < ε) {\n            low = mappedColor[coordName];\n          } else {\n            high = mappedColor[coordName];\n          }\n\n          mappedColor[coordName] = (high + low) / 2;\n        }\n\n        color = mappedColor.to(space);\n      } else {\n        color = clipped;\n      }\n    }\n\n    if (method === \"clip\" // Dumb coord clipping\n    // finish off smarter gamut mapping with clip to get rid of ε, see #17\n    || !color.inGamut(space, {\n      epsilon: 0\n    })) {\n      let bounds = Object.values(space.coords);\n      color.coords = color.coords.map((c, i) => {\n        let [min, max] = bounds[i];\n\n        if (min !== undefined) {\n          c = Math.max(min, c);\n        }\n\n        if (max !== undefined) {\n          c = Math.min(c, max);\n        }\n\n        return c;\n      });\n    }\n\n    if (space.id !== this.spaceId) {\n      color = color.to(this.space);\n    }\n\n    if (inPlace) {\n      this.coords = color.coords;\n      return this;\n    } else {\n      return color;\n    }\n  }\n\n  clone() {\n    return new Color$1(this.spaceId, this.coords, this.alpha);\n  }\n  /**\r\n   * Convert to color space and return a new color\r\n   * @param {Object|string} space - Color space object or id\r\n   * @param {Object} options\r\n   * @param {boolean} options.inGamut - Whether to force resulting color in gamut\r\n   * @returns {Color}\r\n   */\n\n\n  to(space, {\n    inGamut\n  } = {}) {\n    space = Color$1.space(space);\n    let id = space.id;\n    let color = new Color$1(id, this[id], this.alpha);\n\n    if (inGamut) {\n      color.toGamut({\n        inPlace: true\n      });\n    }\n\n    return color;\n  }\n\n  toJSON() {\n    return {\n      spaceId: this.spaceId,\n      coords: this.coords,\n      alpha: this.alpha\n    };\n  }\n  /**\r\n   * Generic toString() method, outputs a color(spaceId ...coords) function\r\n   * @param {Object} options\r\n   * @param {number} options.precision - Significant digits\r\n   * @param {boolean} options.commas - Whether to use commas to separate arguments or spaces (and a slash for alpha) [default: false]\r\n   * @param {Function|String|Array} options.format - If function, maps all coordinates. Keywords tap to colorspace-specific formats (e.g. \"hex\")\r\n   * @param {boolean} options.inGamut - Adjust coordinates to fit in gamut first? [default: false]\r\n   * @param {string} options.name - Function name [default: color]\r\n   */\n\n\n  toString({\n    precision = Color$1.defaults.precision,\n    format,\n    commas,\n    inGamut,\n    name = \"color\",\n    fallback\n  } = {}) {\n    let strAlpha = this.alpha < 1 ? ` ${commas ? \",\" : \"/\"} ${this.alpha}` : \"\";\n    let coords = this.getCoords({\n      inGamut,\n      precision\n    }); // Convert NaN to zeros to have a chance at a valid CSS color\n    // Also convert -0 to 0\n\n    coords = coords.map(c => c ? c : 0);\n\n    if (isString(format)) {\n      if (format === \"%\") {\n        format = c => {\n          c *= 100;\n          return toPrecision(c, precision) + \"%\";\n        };\n      }\n    }\n\n    if (typeof format === \"function\") {\n      coords = coords.map(format);\n    }\n\n    let args = [...coords];\n\n    if (name === \"color\") {\n      // If output is a color() function, add colorspace id as first argument\n      args.unshift(this.space ? this.space.cssId || this.space.id : \"XYZ\");\n    }\n\n    let ret = `${name}(${args.join(commas ? \", \" : \" \")}${strAlpha})`;\n\n    if (fallback) {\n      // Return a CSS string that's actually supported by the current browser\n      // Return as a String object, so we can also hang the color object on it\n      // in case it's different than this. That way third party code can use that\n      // for e.g. computing text color, indicating out of gamut etc\n      if (!hasDOM || typeof CSS === \"undefined\" || CSS.supports(\"color\", ret)) {\n        ret = new String(ret);\n        ret.color = this;\n        return ret;\n      }\n\n      let fallbacks = Array.isArray(fallback) ? fallback.slice() : Color$1.defaults.fallbackSpaces;\n\n      for (let i = 0, fallbackSpace; fallbackSpace = fallbacks[i]; i++) {\n        if (Color$1.spaces[fallbackSpace]) {\n          let color = this.to(fallbackSpace);\n          ret = color.toString({\n            precision\n          });\n\n          if (CSS.supports(\"color\", ret)) {\n            ret = new String(ret);\n            ret.color = color;\n            return ret;\n          } else if (fallbacks === Color$1.defaults.fallbackSpaces) {\n            // Drop this space from the default fallbacks since it's not supported\n            fallbacks.splice(i, 1);\n            i--;\n          }\n        }\n      } // None of the fallbacks worked, return in the most conservative form possible\n\n\n      let color = this.to(\"srgb\");\n      ret = new String(color.toString({\n        commas: true\n      }));\n      ret.color = color;\n    }\n\n    return ret;\n  }\n\n  equals(color) {\n    color = Color$1.get(color);\n    return this.spaceId === color.spaceId && this.alpha === color.alpha && this.coords.every((c, i) => c === color.coords[i]);\n  } // Adapt XYZ from white point W1 to W2\n\n\n  static chromaticAdaptation(W1, W2, XYZ, options = {}) {\n    W1 = W1 || Color$1.whites.D50;\n    W2 = W2 || Color$1.whites.D50;\n\n    if (W1 === W2) {\n      return XYZ;\n    }\n\n    let env = {\n      W1,\n      W2,\n      XYZ,\n      options\n    };\n    Color$1.hooks.run(\"chromatic-adaptation-start\", env);\n\n    if (!env.M) {\n      if (env.W1 === Color$1.whites.D65 && env.W2 === Color$1.whites.D50) {\n        // Linear Bradford CAT\n        // env.M = [\n        // \t[ 1.0478112,  0.0228866, -0.0501270],\n        // \t[ 0.0295424,  0.9904844, -0.0170491],\n        // \t[-0.0092345,  0.0150436,  0.7521316]\n        // ];\n        env.M = [[1.0479298208405488, 0.022946793341019088, -0.05019222954313557], [0.029627815688159344, 0.990434484573249, -0.01707382502938514], [-0.009243058152591178, 0.015055144896577895, 0.7518742899580008]];\n      } else if (env.W1 === Color$1.whites.D50 && env.W2 === Color$1.whites.D65) {\n        // env.M = [\n        // \t[ 0.9555766, -0.0230393,  0.0631636],\n        // \t[-0.0282895,  1.0099416,  0.0210077],\n        // \t[ 0.0122982, -0.0204830,  1.3299098]\n        // ];\n        env.M = [[0.9554734527042182, -0.023098536874261423, 0.0632593086610217], [-0.028369706963208136, 1.0099954580058226, 0.021041398966943008], [0.012314001688319899, -0.020507696433477912, 1.3303659366080753]];\n      }\n    }\n\n    Color$1.hooks.run(\"chromatic-adaptation-end\", env);\n\n    if (env.M) {\n      return multiplyMatrices(env.M, env.XYZ);\n    } else {\n      throw new TypeError(\"Only Bradford CAT with white points D50 and D65 supported for now.\");\n    }\n  } // CSS color to Color object\n\n\n  static parse(str) {\n    let env = {\n      str\n    };\n    Color$1.hooks.run(\"parse-start\", env);\n\n    if (env.color) {\n      return env.color;\n    }\n\n    env.parsed = Color$1.parseFunction(env.str);\n    Color$1.hooks.run(\"parse-function-start\", env);\n\n    if (env.color) {\n      return env.color;\n    } // Try colorspace-specific parsing\n\n\n    for (let space of Object.values(Color$1.spaces)) {\n      if (space.parse) {\n        let color = space.parse(env.str, env.parsed);\n\n        if (color) {\n          return color;\n        }\n      }\n    }\n\n    let name = env.parsed && env.parsed.name;\n\n    if (!/^color|^rgb/.test(name) && hasDOM && document.head) {\n      // Use browser to parse when a DOM is available\n      // we mainly use this for color names right now if keywords.js is not included\n      // and for future-proofing\n      let previousColor = document.head.style.color;\n      document.head.style.color = \"\";\n      document.head.style.color = str;\n\n      if (document.head.style.color !== previousColor) {\n        let computed = getComputedStyle(document.head).color;\n        document.head.style.color = previousColor;\n\n        if (computed) {\n          str = computed;\n          env.parsed = Color$1.parseFunction(computed);\n          name = env.parsed.name;\n        }\n      }\n    }\n\n    if (env.parsed) {\n      // It's a function\n      if (name === \"rgb\" || name === \"rgba\") {\n        let args = env.parsed.args.map((c, i) => i < 3 && !c.percentage ? c / 255 : +c);\n        return {\n          spaceId: \"srgb\",\n          coords: args.slice(0, 3),\n          alpha: args[3]\n        };\n      } else if (name === \"color\") {\n        let spaceId = env.parsed.args.shift().toLowerCase();\n        let space = Object.values(Color$1.spaces).find(space => (space.cssId || space.id) === spaceId);\n\n        if (space) {\n          // From https://drafts.csswg.org/css-color-4/#color-function\n          // If more <number>s or <percentage>s are provided than parameters that the colorspace takes, the excess <number>s at the end are ignored.\n          // If less <number>s or <percentage>s are provided than parameters that the colorspace takes, the missing parameters default to 0. (This is particularly convenient for multichannel printers where the additional inks are spot colors or varnishes that most colors on the page won’t use.)\n          let argCount = Object.keys(space.coords).length;\n          let alpha = env.parsed.rawArgs.indexOf(\"/\") > 0 ? env.parsed.args.pop() : 1;\n          let coords = Array(argCount).fill(0);\n          coords.forEach((_, i) => coords[i] = env.parsed.args[i] || 0);\n          return {\n            spaceId: space.id,\n            coords,\n            alpha\n          };\n        } else {\n          throw new TypeError(`Color space ${spaceId} not found. Missing a plugin?`);\n        }\n      }\n    }\n\n    throw new TypeError(`Could not parse ${str} as a color. Missing a plugin?`);\n  }\n  /**\r\n   * Parse a CSS function, regardless of its name and arguments\r\n   * @param String str String to parse\r\n   * @return Object An object with {name, args, rawArgs}\r\n   */\n\n\n  static parseFunction(str) {\n    if (!str) {\n      return;\n    }\n\n    str = str.trim();\n    const isFunctionRegex = /^([a-z]+)\\((.+?)\\)$/i;\n    const isNumberRegex = /^-?[\\d.]+$/;\n    let parts = str.match(isFunctionRegex);\n\n    if (parts) {\n      // It is a function, parse args\n      let args = parts[2].match(/([-\\w.]+(?:%|deg)?)/g);\n      args = args.map(arg => {\n        if (/%$/.test(arg)) {\n          // Convert percentages to 0-1 numbers\n          let n = new Number(+arg.slice(0, -1) / 100);\n          n.percentage = true;\n          return n;\n        } else if (/deg$/.test(arg)) {\n          // Drop deg from degrees and convert to number\n          let n = new Number(+arg.slice(0, -3));\n          n.deg = true;\n          return n;\n        } else if (isNumberRegex.test(arg)) {\n          // Convert numerical args to numbers\n          return +arg;\n        } // Return everything else as-is\n\n\n        return arg;\n      });\n      return {\n        name: parts[1].toLowerCase(),\n        rawName: parts[1],\n        rawArgs: parts[2],\n        // An argument could be (as of css-color-4):\n        // a number, percentage, degrees (hue), ident (in color())\n        args\n      };\n    }\n  } // One-off convert between color spaces\n\n\n  static convert(coords, fromSpace, toSpace) {\n    fromSpace = Color$1.space(fromSpace);\n    toSpace = Color$1.space(toSpace);\n\n    if (fromSpace === toSpace) {\n      // Same space, no change needed\n      return coords;\n    } // Convert NaN to 0, which seems to be valid in every coordinate of every color space\n\n\n    coords = coords.map(c => Number.isNaN(c) ? 0 : c);\n    let fromId = fromSpace.id;\n    let toId = toSpace.id; // Do we have a more specific conversion function?\n    // Avoids round-tripping to & from XYZ\n\n    if (toSpace.from && toSpace.from[fromId]) {\n      // No white point adaptation, we assume the custom function takes care of it\n      return toSpace.from[fromId](coords);\n    }\n\n    if (fromSpace.to && fromSpace.to[toId]) {\n      // No white point adaptation, we assume the custom function takes care of it\n      return fromSpace.to[toId](coords);\n    }\n\n    let XYZ = fromSpace.toXYZ(coords);\n\n    if (toSpace.white !== fromSpace.white) {\n      // Different white point, perform white point adaptation\n      XYZ = Color$1.chromaticAdaptation(fromSpace.white, toSpace.white, XYZ);\n    }\n\n    return toSpace.fromXYZ(XYZ);\n  }\n  /**\r\n   * Get a color from the argument passed\r\n   * Basically gets us the same result as new Color(color) but doesn't clone an existing color object\r\n   */\n\n\n  static get(color, ...args) {\n    if (color instanceof Color$1) {\n      return color;\n    }\n\n    return new Color$1(color, ...args);\n  }\n  /**\r\n   * Return a color space object from an id or color space object\r\n   * Mainly used internally, so that functions can easily accept either\r\n   */\n\n\n  static space(space) {\n    let type$1 = type(space);\n\n    if (type$1 === \"string\") {\n      // It's a color space id\n      let ret = Color$1.spaces[space.toLowerCase()];\n\n      if (!ret) {\n        throw new TypeError(`No color space found with id = \"${space}\"`);\n      }\n\n      return ret;\n    } else if (space && type$1 === \"object\") {\n      return space;\n    }\n\n    throw new TypeError(`${space} is not a valid color space`);\n  } // Define a new color space\n\n\n  static defineSpace({\n    id,\n    inherits\n  }) {\n    let space = Color$1.spaces[id] = arguments[0];\n\n    if (inherits) {\n      const except = [\"id\", \"parse\", \"instance\", \"properties\"];\n      let parent = Color$1.spaces[inherits];\n\n      for (let prop in parent) {\n        if (!except.includes(prop) && !(prop in space)) {\n          copyDescriptor(space, parent, prop);\n        }\n      }\n    }\n\n    let coords = space.coords;\n\n    if (space.properties) {\n      extend(Color$1.prototype, space.properties);\n    }\n\n    if (!space.fromXYZ && !space.toXYZ) {\n      // Using a different connection space, define from/to XYZ functions based on that\n      let connectionSpace; // What are we using as a connection space?\n\n      if (space.from && space.to) {\n        let from = new Set(Object.keys(space.from));\n        let to = new Set(Object.keys(space.to)); // Find spaces we can both convert to and from\n\n        let candidates = [...from].filter(id => {\n          if (to.has(id)) {\n            // Of those, only keep those that have fromXYZ and toXYZ\n            let space = Color$1.spaces[id];\n            return space && space.fromXYZ && space.toXYZ;\n          }\n        });\n\n        if (candidates.length > 0) {\n          // Great, we found connection spaces! Pick the first one\n          connectionSpace = Color$1.spaces[candidates[0]];\n        }\n      }\n\n      if (connectionSpace) {\n        // Define from/to XYZ functions based on the connection space\n        Object.assign(space, {\n          // ISSUE do we need white point adaptation here?\n          fromXYZ(XYZ) {\n            let newCoords = connectionSpace.fromXYZ(XYZ);\n            return this.from[connectionSpace.id](newCoords);\n          },\n\n          toXYZ(coords) {\n            let newCoords = this.to[connectionSpace.id](coords);\n            return connectionSpace.toXYZ(newCoords);\n          }\n\n        });\n      } else {\n        throw new ReferenceError(`No connection space found for ${space.name}.`);\n      }\n    }\n\n    let coordNames = Object.keys(coords); // Define getters and setters for color[spaceId]\n    // e.g. color.lch on *any* color gives us the lch coords\n\n    Object.defineProperty(Color$1.prototype, id, {\n      // Convert coords to coords in another colorspace and return them\n      // Source colorspace: this.spaceId\n      // Target colorspace: id\n      get() {\n        let ret = Color$1.convert(this.coords, this.spaceId, id);\n\n        if (typeof Proxy === \"undefined\") {\n          // If proxies are not supported, just return a static array\n          return ret;\n        } // Enable color.spaceId.coordName syntax\n\n\n        return new Proxy(ret, {\n          has: (obj, property) => {\n            return coordNames.includes(property) || Reflect.has(obj, property);\n          },\n          get: (obj, property, receiver) => {\n            let i = coordNames.indexOf(property);\n\n            if (i > -1) {\n              return obj[i];\n            }\n\n            return Reflect.get(obj, property, receiver);\n          },\n          set: (obj, property, value, receiver) => {\n            let i = coordNames.indexOf(property);\n\n            if (property > -1) {\n              // Is property a numerical index?\n              i = property; // next if will take care of modifying the color\n            }\n\n            if (i > -1) {\n              obj[i] = value; // Update color.coords\n\n              this.coords = Color$1.convert(obj, id, this.spaceId);\n              return true;\n            }\n\n            return Reflect.set(obj, property, value, receiver);\n          }\n        });\n      },\n\n      // Convert coords in another colorspace to internal coords and set them\n      // Target colorspace: this.spaceId\n      // Source colorspace: id\n      set(coords) {\n        this.coords = Color$1.convert(coords, id, this.spaceId);\n      },\n\n      configurable: true,\n      enumerable: true\n    });\n    return space;\n  } // Define a shortcut property, e.g. color.lightness instead of color.lch.lightness\n  // Shorcut is looked up on Color.shortcuts at calling time\n  // If `long` is provided, it's added to Color.shortcuts as well, otherwise it's assumed to be already there\n\n\n  static defineShortcut(prop, obj = Color$1.prototype, long) {\n    if (long) {\n      Color$1.shortcuts[prop] = long;\n    }\n\n    Object.defineProperty(obj, prop, {\n      get() {\n        return value(this, Color$1.shortcuts[prop]);\n      },\n\n      set(value$1) {\n        return value(this, Color$1.shortcuts[prop], value$1);\n      },\n\n      configurable: true,\n      enumerable: true\n    });\n  } // Define static versions of all instance methods\n\n\n  static statify(names = []) {\n    names = names || Object.getOwnPropertyNames(Color$1.prototype);\n\n    for (let prop of Object.getOwnPropertyNames(Color$1.prototype)) {\n      let descriptor = Object.getOwnPropertyDescriptor(Color$1.prototype, prop);\n\n      if (descriptor.get || descriptor.set) {\n        continue; // avoid accessors\n      }\n\n      let method = descriptor.value;\n\n      if (typeof method === \"function\" && !(prop in Color$1)) {\n        // We have a function, and no static version already\n        Color$1[prop] = function (color, ...args) {\n          color = Color$1.get(color);\n          return color[prop](...args);\n        };\n      }\n    }\n  }\n\n}\n\nObject.assign(Color$1, {\n  util,\n  hooks: new Hooks(),\n  whites: {\n    // from ASTM E308-01\n    // D50: [0.96422, 1.00000, 0.82521],\n    // D65: [0.95047, 1.00000, 1.08883],\n    // for compatibility, the four-digit chromaticity-derived ones everyone else uses\n    D50: [0.3457 / 0.3585, 1.00000, (1.0 - 0.3457 - 0.3585) / 0.3585],\n    D65: [0.3127 / 0.3290, 1.00000, (1.0 - 0.3127 - 0.3290) / 0.3290]\n  },\n  spaces: {},\n  // These will be available as getters and setters on EVERY color instance.\n  // They refer to LCH by default, but can be set to anything\n  // and you can add more by calling Color.defineShortcut()\n  shortcuts: {\n    \"lightness\": \"lch.lightness\",\n    \"chroma\": \"lch.chroma\",\n    \"hue\": \"lch.hue\"\n  },\n  // Global defaults one may want to configure\n  defaults: {\n    gamutMapping: \"lch.chroma\",\n    precision: 5,\n    deltaE: \"76\",\n    // Default deltaE method\n    fallbackSpaces: [\"p3\", \"srgb\"]\n  }\n});\nColor$1.defineSpace({\n  id: \"xyz\",\n  name: \"XYZ\",\n  coords: {\n    X: [],\n    Y: [],\n    Z: []\n  },\n  white: Color$1.whites.D65,\n  inGamut: coords => true,\n  toXYZ: coords => coords,\n  fromXYZ: coords => coords\n});\nColor$1.defineSpace({\n  id: \"xyz-d50\",\n  name: \"XYZ-D50\",\n  coords: {\n    X: [],\n    Y: [],\n    Z: []\n  },\n  white: Color$1.whites.D50,\n  inGamut: coords => true,\n  toXYZ: coords => coords,\n  fromXYZ: coords => coords\n});\nColor$1.defineSpace({\n  id: \"xyz-d65\",\n  name: \"XYZ-D65\",\n  coords: {\n    X: [],\n    Y: [],\n    Z: []\n  },\n  white: Color$1.whites.D65,\n  inGamut: coords => true,\n  toXYZ: coords => coords,\n  fromXYZ: coords => coords\n});\n\nfor (let prop in Color$1.shortcuts) {\n  Color$1.defineShortcut(prop);\n} // Make static methods for all instance methods\n\n\nColor$1.statify(); // Color.DEBUGGING = true;\n\nColor$1.defineSpace({\n  id: \"lab\",\n  name: \"Lab\",\n  coords: {\n    L: [0, 100],\n    a: [-100, 100],\n    b: [-100, 100]\n  },\n  inGamut: coords => true,\n  // Assuming XYZ is relative to D50, convert to CIE Lab\n  // from CIE standard, which now defines these as a rational fraction\n  white: Color$1.whites.D50,\n  ε: 216 / 24389,\n  // 6^3/29^3 == (24/116)^3\n  ε3: 24 / 116,\n  κ: 24389 / 27,\n\n  // 29^3/3^3\n  // κ * ε  = 2^3 = 8\n  fromXYZ(XYZ) {\n    // Convert D50-adapted XYX to Lab\n    //  CIE 15.3:2004 section 8.2.1.1\n    const {\n      κ,\n      ε,\n      white\n    } = this; // compute xyz, which is XYZ scaled relative to reference white\n\n    let xyz = XYZ.map((value, i) => value / white[i]); // now compute f\n\n    let f = xyz.map(value => value > ε ? Math.cbrt(value) : (κ * value + 16) / 116);\n    return [116 * f[1] - 16, // L\n    500 * (f[0] - f[1]), // a\n    200 * (f[1] - f[2]) // b\n    ];\n  },\n\n  toXYZ(Lab) {\n    // Convert Lab to D50-adapted XYZ\n    // Same result as CIE 15.3:2004 Appendix D although the derivation is different\n    // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n    const {\n      κ,\n      ε3,\n      white\n    } = this; // compute f, starting with the luminance-related term\n\n    let f = [];\n    f[1] = (Lab[0] + 16) / 116;\n    f[0] = Lab[1] / 500 + f[1];\n    f[2] = f[1] - Lab[2] / 200; // compute xyz\n\n    var xyz = [f[0] > ε3 ? Math.pow(f[0], 3) : (116 * f[0] - 16) / κ, Lab[0] > 8 ? Math.pow((Lab[0] + 16) / 116, 3) : Lab[0] / κ, f[2] > ε3 ? Math.pow(f[2], 3) : (116 * f[2] - 16) / κ]; // Compute XYZ by scaling xyz by reference white\n\n    return xyz.map((value, i) => value * white[i]);\n  },\n\n  parse(str, parsed = Color$1.parseFunction(str)) {\n    if (parsed && parsed.name === \"lab\") {\n      let L = parsed.args[0]; // Percentages in lab() don't translate to a 0-1 range, but a 0-100 range\n\n      if (L.percentage) {\n        parsed.args[0] = L * 100;\n      }\n\n      return {\n        spaceId: \"lab\",\n        coords: parsed.args.slice(0, 3),\n        alpha: parsed.args.slice(3)[0]\n      };\n    }\n  },\n\n  instance: {\n    toString({\n      format,\n      ...rest\n    } = {}) {\n      if (!format) {\n        format = (c, i) => i === 0 ? c + \"%\" : c;\n      }\n\n      return Color$1.prototype.toString.call(this, {\n        name: \"lab\",\n        format,\n        ...rest\n      });\n    }\n\n  }\n});\nconst range = [0, 360];\nrange.isAngle = true;\n\nfunction constrain(angle) {\n  return (angle % 360 + 360) % 360;\n}\n\nfunction adjust(arc, angles) {\n  if (arc === \"raw\") {\n    return angles;\n  }\n\n  let [a1, a2] = angles.map(constrain);\n  let angleDiff = a2 - a1;\n\n  if (arc === \"increasing\") {\n    if (angleDiff < 0) {\n      a2 += 360;\n    }\n  } else if (arc === \"decreasing\") {\n    if (angleDiff > 0) {\n      a1 += 360;\n    }\n  } else if (arc === \"longer\") {\n    if (-180 < angleDiff && angleDiff < 180) {\n      if (angleDiff > 0) {\n        a2 += 360;\n      } else {\n        a1 += 360;\n      }\n    }\n  } else if (arc === \"shorter\") {\n    if (angleDiff > 180) {\n      a1 += 360;\n    } else if (angleDiff < -180) {\n      a2 += 360;\n    }\n  }\n\n  return [a1, a2];\n}\n\nColor$1.defineSpace({\n  id: \"lch\",\n  name: \"LCH\",\n  coords: {\n    lightness: [0, 100],\n    chroma: [0, 150],\n    hue: range\n  },\n  inGamut: coords => true,\n  white: Color$1.whites.D50,\n  from: {\n    lab(Lab) {\n      // Convert to polar form\n      let [L, a, b] = Lab;\n      let hue;\n      const ε = 0.02;\n\n      if (Math.abs(a) < ε && Math.abs(b) < ε) {\n        hue = NaN;\n      } else {\n        hue = Math.atan2(b, a) * 180 / Math.PI;\n      }\n\n      return [L, // L is still L\n      Math.sqrt(a ** 2 + b ** 2), // Chroma\n      constrain(hue) // Hue, in degrees [0 to 360)\n      ];\n    }\n\n  },\n  to: {\n    lab(LCH) {\n      // Convert from polar form\n      let [Lightness, Chroma, Hue] = LCH; // Clamp any negative Chroma\n\n      if (Chroma < 0) {\n        Chroma = 0;\n      } // Deal with NaN Hue\n\n\n      if (isNaN(Hue)) {\n        Hue = 0;\n      }\n\n      return [Lightness, // L is still L\n      Chroma * Math.cos(Hue * Math.PI / 180), // a\n      Chroma * Math.sin(Hue * Math.PI / 180) // b\n      ];\n    }\n\n  },\n\n  parse(str, parsed = Color$1.parseFunction(str)) {\n    if (parsed && parsed.name === \"lch\") {\n      let L = parsed.args[0]; // Percentages in lch() don't translate to a 0-1 range, but a 0-100 range\n\n      if (L.percentage) {\n        parsed.args[0] = L * 100;\n      }\n\n      return {\n        spaceId: \"lch\",\n        coords: parsed.args.slice(0, 3),\n        alpha: parsed.args.slice(3)[0]\n      };\n    }\n  },\n\n  instance: {\n    toString({\n      format,\n      ...rest\n    } = {}) {\n      if (!format) {\n        format = (c, i) => i === 0 ? c + \"%\" : c;\n      }\n\n      return Color$1.prototype.toString.call(this, {\n        name: \"lch\",\n        format,\n        ...rest\n      });\n    }\n\n  }\n});\nColor$1.defineSpace({\n  id: \"srgb\",\n  name: \"sRGB\",\n  coords: {\n    red: [0, 1],\n    green: [0, 1],\n    blue: [0, 1]\n  },\n  white: Color$1.whites.D65,\n\n  // convert an array of sRGB values in the range 0.0 - 1.0\n  // to linear light (un-companded) form.\n  // https://en.wikipedia.org/wiki/SRGB\n  toLinear(RGB) {\n    return RGB.map(function (val) {\n      let sign = val < 0 ? -1 : 1;\n      let abs = Math.abs(val);\n\n      if (abs < 0.04045) {\n        return val / 12.92;\n      }\n\n      return sign * Math.pow((abs + 0.055) / 1.055, 2.4);\n    });\n  },\n\n  // convert an array of linear-light sRGB values in the range 0.0-1.0\n  // to gamma corrected form\n  // https://en.wikipedia.org/wiki/SRGB\n  toGamma(RGB) {\n    return RGB.map(function (val) {\n      let sign = val < 0 ? -1 : 1;\n      let abs = Math.abs(val);\n\n      if (abs > 0.0031308) {\n        return sign * (1.055 * Math.pow(abs, 1 / 2.4) - 0.055);\n      }\n\n      return 12.92 * val;\n    });\n  },\n\n  // This matrix was calculated directly from the RGB and white chromaticities\n  // when rounded to 8 decimal places, it agrees completely with the official matrix\n  // see https://github.com/w3c/csswg-drafts/issues/5922\n  toXYZ_M: [[0.41239079926595934, 0.357584339383878, 0.1804807884018343], [0.21263900587151027, 0.715168678767756, 0.07219231536073371], [0.01933081871559182, 0.11919477979462598, 0.9505321522496607]],\n  // This matrix is the inverse of the above;\n  // again it agrees with the official definiton when rounded to 8 decimal places\n  fromXYZ_M: [[3.2409699419045226, -1.537383177570094, -0.4986107602930034], [-0.9692436362808796, 1.8759675015077202, 0.04155505740717559], [0.05563007969699366, -0.20397695888897652, 1.0569715142428786]],\n\n  // convert an array of sRGB values to CIE XYZ\n  // using sRGB's own white, D65 (no chromatic adaptation)\n  toXYZ(rgb) {\n    rgb = this.toLinear(rgb);\n    return multiplyMatrices(this.toXYZ_M, rgb);\n  },\n\n  fromXYZ(XYZ) {\n    return this.toGamma(multiplyMatrices(this.fromXYZ_M, XYZ));\n  },\n\n  // Properties added to Color.prototype\n  properties: {\n    toHex({\n      alpha = true,\n      // include alpha in hex?\n      collapse = true // collapse to 3-4 digit hex when possible?\n\n    } = {}) {\n      let coords = this.to(\"srgb\", {\n        inGamut: true\n      }).coords;\n\n      if (this.alpha < 1 && alpha) {\n        coords.push(this.alpha);\n      }\n\n      coords = coords.map(c => Math.round(c * 255));\n      let collapsible = collapse && coords.every(c => c % 17 === 0);\n      let hex = coords.map(c => {\n        if (collapsible) {\n          return (c / 17).toString(16);\n        }\n\n        return c.toString(16).padStart(2, \"0\");\n      }).join(\"\");\n      return \"#\" + hex;\n    },\n\n    get hex() {\n      return this.toHex();\n    }\n\n  },\n  // Properties present only on sRGB colors\n  instance: {\n    toString({\n      inGamut = true,\n      commas,\n      format = \"%\",\n      ...rest\n    } = {}) {\n      if (format === 255) {\n        format = c => c * 255;\n      } else if (format === \"hex\") {\n        return this.toHex(arguments[0]);\n      }\n\n      return Color$1.prototype.toString.call(this, {\n        inGamut,\n        commas,\n        format,\n        name: \"rgb\" + (commas && this.alpha < 1 ? \"a\" : \"\"),\n        ...rest\n      });\n    }\n\n  },\n\n  parseHex(str) {\n    if (str.length <= 5) {\n      // #rgb or #rgba, duplicate digits\n      str = str.replace(/[a-f0-9]/gi, \"$&$&\");\n    }\n\n    let rgba = [];\n    str.replace(/[a-f0-9]{2}/gi, component => {\n      rgba.push(parseInt(component, 16) / 255);\n    });\n    return {\n      spaceId: \"srgb\",\n      coords: rgba.slice(0, 3),\n      alpha: rgba.slice(3)[0]\n    };\n  }\n\n});\nColor$1.hooks.add(\"parse-start\", env => {\n  let str = env.str;\n\n  if (/^#([a-f0-9]{3,4}){1,2}$/i.test(str)) {\n    env.color = Color$1.spaces.srgb.parseHex(str);\n  }\n}); // This is the linear-light version of sRGB\n// as used for example in SVG filters\n// or in Canvas\n\nColor$1.defineSpace({\n  inherits: \"srgb\",\n  id: \"srgb-linear\",\n  name: \"sRGB-linear\",\n\n  toLinear(RGB) {\n    return RGB;\n  },\n\n  toGamma(RGB) {\n    return RGB;\n  }\n\n});\nColor$1.defineSpace({\n  id: \"hsl\",\n  name: \"HSL\",\n  coords: {\n    hue: range,\n    saturation: [0, 100],\n    lightness: [0, 100]\n  },\n\n  inGamut(coords, epsilon) {\n    let rgb = this.to.srgb(coords);\n    return Color$1.inGamut(\"srgb\", rgb, {\n      epsilon: epsilon\n    });\n  },\n\n  white: Color$1.whites.D65,\n  // Adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB\n  from: {\n    srgb(rgb) {\n      let max = Math.max(...rgb);\n      let min = Math.min(...rgb);\n      let [r, g, b] = rgb;\n      let [h, s, l] = [NaN, 0, (min + max) / 2];\n      let d = max - min;\n\n      if (d !== 0) {\n        s = l === 0 || l === 1 ? 0 : (max - l) / Math.min(l, 1 - l);\n\n        switch (max) {\n          case r:\n            h = (g - b) / d + (g < b ? 6 : 0);\n            break;\n\n          case g:\n            h = (b - r) / d + 2;\n            break;\n\n          case b:\n            h = (r - g) / d + 4;\n        }\n\n        h = h * 60;\n      }\n\n      return [h, s * 100, l * 100];\n    }\n\n  },\n  // Adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative\n  to: {\n    srgb(hsl) {\n      let [h, s, l] = hsl;\n      h = h % 360;\n\n      if (h < 0) {\n        h += 360;\n      }\n\n      s /= 100;\n      l /= 100;\n\n      function f(n) {\n        let k = (n + h / 30) % 12;\n        let a = s * Math.min(l, 1 - l);\n        return l - a * Math.max(-1, Math.min(k - 3, 9 - k, 1));\n      }\n\n      return [f(0), f(8), f(4)];\n    }\n\n  },\n\n  parse(str, parsed = Color$1.parseFunction(str)) {\n    if (parsed && /^hsla?$/.test(parsed.name)) {\n      let hsl = parsed.args; // percentages are converted to [0, 1] by parseFunction\n\n      hsl[1] *= 100;\n      hsl[2] *= 100;\n      return {\n        spaceId: \"hsl\",\n        coords: hsl.slice(0, 3),\n        alpha: hsl[3]\n      };\n    }\n  },\n\n  instance: {\n    toString({\n      precision,\n      commas,\n      format,\n      inGamut,\n      ...rest\n    } = {}) {\n      if (!format) {\n        format = (c, i) => i > 0 ? c + \"%\" : c;\n      }\n\n      return Color$1.prototype.toString.call(this, {\n        inGamut: true,\n        // hsl() out of gamut makes no sense\n        commas,\n        format,\n        name: \"hsl\" + (commas && this.alpha < 1 ? \"a\" : \"\"),\n        ...rest\n      });\n    }\n\n  }\n}); // The Hue, Whiteness Blackness (HWB) colorspace\n// See https://drafts.csswg.org/css-color-4/#the-hwb-notation\n// Note that, like HSL, calculations are done directly on\n// gamma-corrected sRGB values rather than linearising them first.\n\nColor$1.defineSpace({\n  id: \"hwb\",\n  name: \"HWB\",\n  coords: {\n    hue: range,\n    whiteness: [0, 100],\n    blackness: [0, 100]\n  },\n\n  inGamut(coords, epsilon) {\n    let rgb = this.to.srgb(coords);\n    return Color$1.inGamut(\"srgb\", rgb, {\n      epsilon: epsilon\n    });\n  },\n\n  white: Color$1.whites.D65,\n  from: {\n    srgb(rgb) {\n      let hsl = Color$1.spaces.hsl.from.srgb(rgb);\n      let h = hsl[0]; // calculate white and black\n\n      let w = Math.min(...rgb);\n      let b = 1 - Math.max(...rgb);\n      w *= 100;\n      b *= 100;\n      return [h, w, b];\n    },\n\n    hsv(hsv) {\n      let [h, s, v] = hsv;\n      return [h, v * (100 - s) / 100, 100 - v];\n    },\n\n    hsl(hsl) {\n      let hsv = Color$1.spaces.hsv.from.hsl(hsl);\n      return this.hsv(hsv);\n    }\n\n  },\n  to: {\n    srgb(hwb) {\n      let [h, w, b] = hwb; // Now convert percentages to [0..1]\n\n      w /= 100;\n      b /= 100; // Achromatic check (white plus black >= 1)\n\n      let sum = w + b;\n\n      if (sum >= 1) {\n        let gray = w / sum;\n        return [gray, gray, gray];\n      } // From https://drafts.csswg.org/css-color-4/#hwb-to-rgb\n\n\n      let rgb = Color$1.spaces.hsl.to.srgb([h, 100, 50]);\n\n      for (var i = 0; i < 3; i++) {\n        rgb[i] *= 1 - w - b;\n        rgb[i] += w;\n      }\n\n      return rgb;\n    },\n\n    hsv(hwb) {\n      let [h, w, b] = hwb; // Now convert percentages to [0..1]\n\n      w /= 100;\n      b /= 100; // Achromatic check (white plus black >= 1)\n\n      let sum = w + b;\n\n      if (sum >= 1) {\n        let gray = w / sum;\n        return [h, 0, gray * 100];\n      }\n\n      let v = 1 - b;\n      let s = v === 0 ? 0 : 1 - w / v;\n      return [h, s * 100, v * 100];\n    },\n\n    hsl(hwb) {\n      let hsv = Color$1.spaces.hwb.to.hsv(hwb);\n      return Color$1.spaces.hsv.to.hsl(hsv);\n    }\n\n  },\n\n  parse(str, parsed = Color$1.parseFunction(str)) {\n    if (parsed && /^hwba?$/.test(parsed.name)) {\n      let hwb = parsed.args; // white and black percentages are converted to [0, 1] by parseFunction\n\n      hwb[1] *= 100;\n      hwb[2] *= 100;\n      return {\n        spaceId: \"hwb\",\n        coords: hwb.slice(0, 3),\n        alpha: hwb[3]\n      };\n    }\n  },\n\n  instance: {\n    toString({\n      format,\n      commas,\n      inGamut,\n      ...rest\n    } = {}) {\n      if (!format) {\n        format = (c, i) => i > 0 ? c + \"%\" : c;\n      }\n\n      return Color$1.prototype.toString.call(this, {\n        inGamut: true,\n        // hwb() out of gamut makes no sense\n        commas: false,\n        // never commas\n        format,\n        name: \"hwb\",\n        ...rest\n      });\n    }\n\n  }\n}); // The Hue, Whiteness Blackness (HWB) colorspace\n// See https://drafts.csswg.org/css-color-4/#the-hwb-notation\n// Note that, like HSL, calculations are done directly on\n// gamma-corrected sRGB values rather than linearising them first.\n\nColor$1.defineSpace({\n  id: \"hsv\",\n  name: \"HSV\",\n  coords: {\n    hue: range,\n    saturation: [0, 100],\n    value: [0, 100]\n  },\n\n  inGamut(coords, epsilon) {\n    let hsl = this.to.hsl(coords);\n    return Color$1.spaces.hsl.inGamut(hsl, {\n      epsilon: epsilon\n    });\n  },\n\n  white: Color$1.whites.D65,\n  from: {\n    // https://en.wikipedia.org/wiki/HSL_and_HSV#Interconversion\n    hsl(hsl) {\n      let [h, s, l] = hsl;\n      s /= 100;\n      l /= 100;\n      let v = l + s * Math.min(l, 1 - l);\n      return [h, // h is the same\n      v === 0 ? 0 : 200 * (1 - l / v), // s\n      100 * v];\n    }\n\n  },\n  to: {\n    // https://en.wikipedia.org/wiki/HSL_and_HSV#Interconversion\n    hsl(hsv) {\n      let [h, s, v] = hsv;\n      s /= 100;\n      v /= 100;\n      let l = v * (1 - s / 2);\n      return [h, // h is the same\n      l === 0 || l === 1 ? 0 : (v - l) / Math.min(l, 1 - l) * 100, l * 100];\n    }\n\n  }\n});\nColor$1.defineSpace({\n  inherits: \"srgb\",\n  id: \"p3\",\n  name: \"P3\",\n  cssId: \"display-p3\",\n  // Gamma correction is the same as sRGB\n  // convert an array of display-p3 values to CIE XYZ\n  // using  D65 (no chromatic adaptation)\n  // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n  // Functions are the same as sRGB, just with different matrices\n  toXYZ_M: [[0.4865709486482162, 0.26566769316909306, 0.1982172852343625], [0.2289745640697488, 0.6917385218365064, 0.079286914093745], [0.0000000000000000, 0.04511338185890264, 1.043944368900976]],\n  fromXYZ_M: [[2.493496911941425, -0.9313836179191239, -0.40271078445071684], [-0.8294889695615747, 1.7626640603183463, 0.023624685841943577], [0.03584583024378447, -0.07617238926804182, 0.9568845240076872]]\n});\nColor$1.defineSpace({\n  inherits: \"srgb\",\n  id: \"a98rgb\",\n  name: \"Adobe 98 RGB compatible\",\n  cssId: \"a98-rgb\",\n\n  toLinear(RGB) {\n    return RGB.map(val => Math.pow(Math.abs(val), 563 / 256) * Math.sign(val));\n  },\n\n  toGamma(RGB) {\n    return RGB.map(val => Math.pow(Math.abs(val), 256 / 563) * Math.sign(val));\n  },\n\n  // convert an array of linear-light a98-rgb values to CIE XYZ\n  // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n  // has greater numerical precision than section 4.3.5.3 of\n  // https://www.adobe.com/digitalimag/pdfs/AdobeRGB1998.pdf\n  // but the values below were calculated from first principles\n  // from the chromaticity coordinates of R G B W\n  toXYZ_M: [[0.5766690429101305, 0.1855582379065463, 0.1882286462349947], [0.29734497525053605, 0.6273635662554661, 0.07529145849399788], [0.02703136138641234, 0.07068885253582723, 0.9913375368376388]],\n  fromXYZ_M: [[2.0415879038107465, -0.5650069742788596, -0.34473135077832956], [-0.9692436362808795, 1.8759675015077202, 0.04155505740717557], [0.013444280632031142, -0.11836239223101838, 1.0151749943912054]]\n});\nColor$1.defineSpace({\n  inherits: \"srgb\",\n  id: \"prophoto\",\n  name: \"ProPhoto\",\n  cssId: \"prophoto-rgb\",\n  white: Color$1.whites.D50,\n\n  toLinear(RGB) {\n    // Transfer curve is gamma 1.8 with a small linear portion\n    const Et2 = 16 / 512;\n    return RGB.map(function (val) {\n      if (val < Et2) {\n        return val / 16;\n      }\n\n      return Math.pow(val, 1.8);\n    });\n  },\n\n  toGamma(RGB) {\n    const Et = 1 / 512;\n    return RGB.map(function (val) {\n      if (val >= Et) {\n        return Math.pow(val, 1 / 1.8);\n      }\n\n      return 16 * val;\n    });\n  },\n\n  // convert an array of  prophoto-rgb values to CIE XYZ\n  // using  D50 (so no chromatic adaptation needed afterwards)\n  // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n  toXYZ_M: [[0.7977604896723027, 0.13518583717574031, 0.0313493495815248], [0.2880711282292934, 0.7118432178101014, 0.00008565396060525902], [0.0, 0.0, 0.8251046025104601]],\n  fromXYZ_M: [[1.3457989731028281, -0.25558010007997534, -0.05110628506753401], [-0.5446224939028347, 1.5082327413132781, 0.02053603239147973], [0.0, 0.0, 1.2119675456389454]]\n});\nColor$1.defineSpace({\n  inherits: \"srgb\",\n  id: \"rec2020\",\n  name: \"REC.2020\",\n  α: 1.09929682680944,\n  β: 0.018053968510807,\n\n  // Non-linear transfer function from Rec. ITU-R BT.2020-2 table 4\n  toLinear(RGB) {\n    const {\n      α,\n      β\n    } = this;\n    return RGB.map(function (val) {\n      if (val < β * 4.5) {\n        return val / 4.5;\n      }\n\n      return Math.pow((val + α - 1) / α, 1 / 0.45);\n    });\n  },\n\n  toGamma(RGB) {\n    const {\n      α,\n      β\n    } = this;\n    return RGB.map(function (val) {\n      if (val >= β) {\n        return α * Math.pow(val, 0.45) - (α - 1);\n      }\n\n      return 4.5 * val;\n    });\n  },\n\n  // convert an array of linear-light rec2020 values to CIE XYZ\n  // using  D65 (no chromatic adaptation)\n  // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n  // 0 is actually calculated as  4.994106574466076e-17\n  toXYZ_M: [[0.6369580483012914, 0.14461690358620832, 0.1688809751641721], [0.2627002120112671, 0.6779980715188708, 0.05930171646986196], [0.000000000000000, 0.028072693049087428, 1.060985057710791]],\n  // from ITU-R BT.2124-0 Annex 2 p.3\n  fromXYZ_M: [[1.716651187971268, -0.355670783776392, -0.253366281373660], [-0.666684351832489, 1.616481236634939, 0.0157685458139111], [0.017639857445311, -0.042770613257809, 0.942103121235474]]\n});\nColor$1.defineSpace({\n  // Absolute CIE XYZ, with a D65 whitepoint,\n  // as used in most HDR colorspaces as a starting point.\n  // SDR spaces are converted per BT.2048\n  // so that diffuse, media white is 203 cd/m²\n  id: \"absxyzd65\",\n  name: \"Absolute XYZ D65\",\n  coords: {\n    Xa: [0, 9504.7],\n    Ya: [0, 10000],\n    Za: [0, 10888.3]\n  },\n  white: Color$1.whites.D65,\n  Yw: 203,\n  // absolute luminance of media white\n  inGamut: coords => true,\n\n  fromXYZ(XYZ) {\n    const {\n      Yw\n    } = this; // Make XYZ absolute, not relative to media white\n    // Maximum luminance in PQ is 10,000 cd/m²\n    // Relative XYZ has Y=1 for media white\n\n    return XYZ.map(function (val) {\n      return Math.max(val * Yw, 0);\n    });\n  },\n\n  toXYZ(AbsXYZ) {\n    // Convert to media-white relative XYZ\n    const {\n      Yw\n    } = this;\n    let XYZ = AbsXYZ.map(function (val) {\n      return Math.max(val / Yw, 0);\n    });\n    return XYZ;\n  }\n\n});\nColor$1.defineSpace({\n  id: \"jzazbz\",\n  cssid: \"Jzazbz\",\n  name: \"Jzazbz\",\n  coords: {\n    Jz: [0, 1],\n    az: [-0.5, 0.5],\n    bz: [-0.5, 0.5]\n  },\n  inGamut: coords => true,\n  // Note that XYZ is relative to D65\n  white: Color$1.whites.D65,\n  b: 1.15,\n  g: 0.66,\n  n: 2610 / 2 ** 14,\n  ninv: 2 ** 14 / 2610,\n  c1: 3424 / 2 ** 12,\n  c2: 2413 / 2 ** 7,\n  c3: 2392 / 2 ** 7,\n  p: 1.7 * 2523 / 2 ** 5,\n  pinv: 2 ** 5 / (1.7 * 2523),\n  d: -0.56,\n  d0: 1.6295499532821566E-11,\n  XYZtoCone_M: [[0.41478972, 0.579999, 0.0146480], [-0.2015100, 1.120649, 0.0531008], [-0.0166008, 0.264800, 0.6684799]],\n  // XYZtoCone_M inverted\n  ConetoXYZ_M: [[1.9242264357876067, -1.0047923125953657, 0.037651404030618], [0.35031676209499907, 0.7264811939316552, -0.06538442294808501], [-0.09098281098284752, -0.3127282905230739, 1.5227665613052603]],\n  ConetoIab_M: [[0.5, 0.5, 0], [3.524000, -4.066708, 0.542708], [0.199076, 1.096799, -1.295875]],\n  // ConetoIab_M inverted\n  IabtoCone_M: [[1, 0.1386050432715393, 0.05804731615611886], [0.9999999999999999, -0.1386050432715393, -0.05804731615611886], [0.9999999999999998, -0.09601924202631895, -0.8118918960560388]],\n\n  fromXYZ(XYZ) {\n    const {\n      b,\n      g,\n      n,\n      p,\n      c1,\n      c2,\n      c3,\n      d,\n      d0,\n      XYZtoCone_M,\n      ConetoIab_M\n    } = this; // First make XYZ absolute, not relative to media white\n    // Maximum luminance in PQ is 10,000 cd/m²\n    // Relative XYZ has Y=1 for media white\n    // BT.2048 says media white Y=203 at PQ 58\n    // console.log({XYZ});\n\n    let [Xa, Ya, Za] = Color$1.spaces.absxyzd65.fromXYZ(XYZ); // console.log({Xa, Ya, Za});\n    // modify X and Y\n\n    let Xm = b * Xa - (b - 1) * Za;\n    let Ym = g * Ya - (g - 1) * Xa; // console.log({Xm, Ym, Za});\n    // move to LMS cone domain\n\n    let LMS = multiplyMatrices(XYZtoCone_M, [Xm, Ym, Za]); // console.log({LMS});\n    // PQ-encode LMS\n\n    let PQLMS = LMS.map(function (val) {\n      let num = c1 + c2 * (val / 10000) ** n;\n      let denom = 1 + c3 * (val / 10000) ** n; // console.log({val, num, denom});\n\n      return (num / denom) ** p;\n    }); // console.log({PQLMS});\n    // almost there, calculate Iz az bz\n\n    let [Iz, az, bz] = multiplyMatrices(ConetoIab_M, PQLMS); // console.log({Iz, az, bz});\n\n    let Jz = (1 + d) * Iz / (1 + d * Iz) - d0;\n    return [Jz, az, bz];\n  },\n\n  toXYZ(Jzazbz) {\n    const {\n      b,\n      g,\n      ninv,\n      pinv,\n      c1,\n      c2,\n      c3,\n      d,\n      d0,\n      ConetoXYZ_M,\n      IabtoCone_M\n    } = this;\n    let [Jz, az, bz] = Jzazbz;\n    let Iz = (Jz + d0) / (1 + d - d * (Jz + d0)); // console.log({Iz});\n    // bring into LMS cone domain\n\n    let PQLMS = multiplyMatrices(IabtoCone_M, [Iz, az, bz]); // console.log({PQLMS});\n    // convert from PQ-coded to linear-light\n\n    let LMS = PQLMS.map(function (val) {\n      let num = c1 - val ** pinv;\n      let denom = c3 * val ** pinv - c2;\n      let x = 10000 * (num / denom) ** ninv; // console.log({x, num, denom})\n\n      return x; // luminance relative to diffuse white, [0, 70 or so].\n    }); // console.log({LMS});\n    // modified abs XYZ\n\n    let [Xm, Ym, Za] = multiplyMatrices(ConetoXYZ_M, LMS); // console.log({sXm, Ym, Za});\n    // restore standard D50 relative XYZ, relative to media white\n\n    let Xa = (Xm + (b - 1) * Za) / b;\n    let Ya = (Ym + (g - 1) * Xa) / g;\n    return Color$1.spaces.absxyzd65.toXYZ([Xa, Ya, Za]);\n  },\n\n  parse(str, parsed = Color$1.parseFunction(str)) {\n    if (parsed && parsed.name === \"jzabz\") {\n      return {\n        spaceId: \"jzazbz\",\n        coords: parsed.args.slice(0, 3),\n        alpha: parsed.args.slice(3)[0]\n      };\n    }\n  },\n\n  instance: {\n    toString({\n      format,\n      ...rest\n    } = {}) {\n      return Color$1.prototype.toString.call(this, {\n        name: \"jzazbz\",\n        format,\n        ...rest\n      });\n    }\n\n  }\n});\nColor$1.defineSpace({\n  id: \"jzczhz\",\n  name: \"JzCzHz\",\n  coords: {\n    Jz: [0, 1],\n    chroma: [0, 1],\n    hue: range\n  },\n  inGamut: coords => true,\n  white: Color$1.whites.D65,\n  from: {\n    jzazbz(jzazbz) {\n      // Convert to polar form\n      let [Jz, az, bz] = jzazbz;\n      let hue;\n      const ε = 0.0002; // chromatic components much smaller than a,b\n\n      if (Math.abs(az) < ε && Math.abs(bz) < ε) {\n        hue = NaN;\n      } else {\n        hue = Math.atan2(bz, az) * 180 / Math.PI;\n      }\n\n      return [Jz, // Jz is still Jz\n      Math.sqrt(az ** 2 + bz ** 2), // Chroma\n      constrain(hue) // Hue, in degrees [0 to 360)\n      ];\n    }\n\n  },\n  to: {\n    jzazbz(jzczhz) {\n      // Convert from polar form\n      // debugger;\n      return [jzczhz[0], // Jz is still Jz\n      jzczhz[1] * Math.cos(jzczhz[2] * Math.PI / 180), // az\n      jzczhz[1] * Math.sin(jzczhz[2] * Math.PI / 180) // bz\n      ];\n    }\n\n  },\n\n  parse(str, parsed = Color$1.parseFunction(str)) {\n    if (parsed && parsed.name === \"jzczhz\") {\n      let Jz = parsed.args[0];\n      return {\n        spaceId: \"jzczhz\",\n        coords: parsed.args.slice(0, 3),\n        alpha: parsed.args.slice(3)[0]\n      };\n    }\n  }\n\n});\nconst rec2020 = Color$1.spaces.rec2020;\nColor$1.defineSpace({\n  // Only the PQ form of ICtCp is implemented here. There is also an HLG form.\n  // from Dolby, \"WHAT IS ICTCP?\"\n  // https://professional.dolby.com/siteassets/pdfs/ictcp_dolbywhitepaper_v071.pdf\n  // and\n  // Dolby, \"Perceptual Color Volume\n  // Measuring the Distinguishable Colors of HDR and WCG Displays\"\n  // https://professional.dolby.com/siteassets/pdfs/dolby-vision-measuring-perceptual-color-volume-v7.1.pdf\n  id: \"ictcp\",\n  name: \"ICTCP\",\n  // From BT.2100-2 page 7:\n  // During production, signal values are expected to exceed the\n  // range E′ = [0.0 : 1.0]. This provides processing headroom and avoids\n  // signal degradation during cascaded processing. Such values of E′,\n  // below 0.0 or exceeding 1.0, should not be clipped during production\n  // and exchange.\n  // Values below 0.0 should not be clipped in reference displays (even\n  // though they represent “negative” light) to allow the black level of\n  // the signal (LB) to be properly set using test signals known as “PLUGE”\n  coords: {\n    I: [0, 1],\n    // Constant luminance\n    CT: [-0.5, 0.5],\n    // Full BT.2020 gamut in range [-0.5, 0.5]\n    CP: [-0.5, 0.5]\n  },\n  inGamut: coords => true,\n  // Note that XYZ is relative to D65\n  white: Color$1.whites.D65,\n  c1: 3424 / 4096,\n  c2: 2413 / 128,\n  c3: 2392 / 128,\n  m1: 2610 / 16384,\n  m2: 2523 / 32,\n  im1: 16384 / 2610,\n  im2: 32 / 2523,\n  // The matrix below includes the 4% crosstalk components\n  // and is from the Dolby \"What is ICtCp\" paper\"\n  XYZtoLMS_M: [[0.3592, 0.6976, -0.0358], [-0.1922, 1.1004, 0.0755], [0.0070, 0.0749, 0.8434]],\n  // linear-light Rec.2020 to LMS, again with crosstalk\n  // rational terms from Jan Fröhlich,\n  // Encoding High Dynamic Range andWide Color Gamut Imagery, p.97\n  // and ITU-R BT.2124-0 p.2\n  Rec2020toLMS_M: [[1688 / 4096, 2146 / 4096, 262 / 4096], [683 / 4096, 2951 / 4096, 462 / 4096], [99 / 4096, 309 / 4096, 3688 / 4096]],\n  // this includes the Ebner LMS coefficients,\n  // the rotation, and the scaling to [-0.5,0.5] range\n  // rational terms from Fröhlich p.97\n  // and ITU-R BT.2124-0 pp.2-3\n  LMStoIPT_M: [[2048 / 4096, 2048 / 4096, 0], [6610 / 4096, -13613 / 4096, 7003 / 4096], [17933 / 4096, -17390 / 4096, -543 / 4096]],\n  // inverted matrices, calculated from the above\n  IPTtoLMS_M: [[0.99998889656284013833, 0.00860505014728705821, 0.1110343715986164786], [1.0000111034371598616, -0.00860505014728705821, -0.1110343715986164786], [1.000032063391005412, 0.56004913547279000113, -0.32063391005412026469]],\n  LMStoRec2020_M: [[3.4375568932814012112, -2.5072112125095058195, 0.069654319228104608382], [-0.79142868665644156125, 1.9838372198740089874, -0.19240853321756742626], [-0.025646662911506476363, -0.099240248643945566751, 1.1248869115554520431]],\n  LMStoXYZ_M: [[2.0701800566956135096, -1.3264568761030210255, 0.20661600684785517081], [0.36498825003265747974, 0.68046736285223514102, -0.045421753075853231409], [-0.049595542238932107896, -0.049421161186757487412, 1.1879959417328034394]],\n\n  fromXYZ(XYZ) {\n    const {\n      XYZtoLMS_M\n    } = this; // console.log ({c1, c2, c3, m1, m2});\n    // Make XYZ absolute, not relative to media white\n    // Maximum luminance in PQ is 10,000 cd/m²\n    // Relative XYZ has Y=1 for media white\n    // BT.2048 says media white Y=203 at PQ 58\n    // This also does the D50 to D65 adaptation\n\n    let [Xa, Ya, Za] = Color$1.spaces.absxyzd65.fromXYZ(XYZ); // console.log({Xa, Ya, Za});\n    // move to LMS cone domain\n\n    let LMS = multiplyMatrices(XYZtoLMS_M, [Xa, Ya, Za]); // console.log({LMS});\n\n    return this.LMStoICtCp(LMS);\n  },\n\n  toXYZ(ICtCp) {\n    const {\n      LMStoXYZ_M\n    } = this;\n    let LMS = this.ICtCptoLMS(ICtCp);\n    let XYZa = multiplyMatrices(LMStoXYZ_M, LMS); // convert from Absolute, D65 XYZ to media white relative, D50 XYZ\n\n    return Color$1.spaces.absxyzd65.toXYZ(XYZa);\n  },\n\n  LMStoICtCp(LMS) {\n    const {\n      LMStoIPT_M,\n      c1,\n      c2,\n      c3,\n      m1,\n      m2\n    } = this; // console.log ({c1, c2, c3, m1, m2});\n    // apply the PQ EOTF\n    // we can't ever be dividing by zero because of the \"1 +\" in the denominator\n\n    let PQLMS = LMS.map(function (val) {\n      let num = c1 + c2 * (val / 10000) ** m1;\n      let denom = 1 + c3 * (val / 10000) ** m1; // console.log({val, num, denom});\n\n      return (num / denom) ** m2;\n    }); // console.log({PQLMS});\n    // LMS to IPT, with rotation for Y'C'bC'r compatibility\n\n    return multiplyMatrices(LMStoIPT_M, PQLMS);\n  },\n\n  ICtCptoLMS(ICtCp) {\n    const {\n      IPTtoLMS_M,\n      c1,\n      c2,\n      c3,\n      im1,\n      im2\n    } = this;\n    let PQLMS = multiplyMatrices(IPTtoLMS_M, ICtCp); // From BT.2124-0 Annex 2 Conversion 3\n\n    let LMS = PQLMS.map(function (val) {\n      let num = Math.max(val ** im2 - c1, 0);\n      let denom = c2 - c3 * val ** im2;\n      return 10000 * (num / denom) ** im1;\n    });\n    return LMS;\n  } // },\n  // from: {\n  // \trec2020: function() {\n  // \t}\n  // },\n  // to: {\n  // \trec2020: function() {\n  // \t}\n  // }\n\n\n});\nColor$1.defineSpace({\n  inherits: \"rec2020\",\n  id: \"rec2100pq\",\n  cssid: \"rec2100-pq\",\n  name: \"REC.2100-PQ\",\n  Yw: 203,\n  // absolute luminance of media white, cd/m²\n  n: 2610 / 2 ** 14,\n  ninv: 2 ** 14 / 2610,\n  m: 2523 / 2 ** 5,\n  minv: 2 ** 5 / 2523,\n  c1: 3424 / 2 ** 12,\n  c2: 2413 / 2 ** 7,\n  c3: 2392 / 2 ** 7,\n\n  toLinear(RGB) {\n    // given PQ encoded component in range [0, 1]\n    // return media-white relative linear-light\n    const {\n      Yw,\n      ninv,\n      minv,\n      c1,\n      c2,\n      c3\n    } = this;\n    return RGB.map(function (val) {\n      let x = (Math.max(val ** minv - c1, 0) / (c2 - c3 * val ** minv)) ** ninv;\n      return x * 10000 / Yw; // luminance relative to diffuse white, [0, 70 or so].\n    });\n  },\n\n  toGamma(RGB) {\n    // given media-white relative linear-light\n    // returnPQ encoded component in range [0, 1]\n    const {\n      Yw,\n      n,\n      m,\n      c1,\n      c2,\n      c3\n    } = this;\n    return RGB.map(function (val) {\n      let x = Math.max(val * Yw / 10000, 0); // absolute luminance of peak white is 10,000 cd/m².\n\n      let num = c1 + c2 * x ** n;\n      let denom = 1 + c3 * x ** n; // console.log({x, num, denom});\n\n      return (num / denom) ** m;\n    });\n  } // ,\n  // // convert an array of linear-light rec2120 values to CIE XYZ\n  // // using  D65 (no chromatic adaptation)\n  // // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n  // // 0 is actually calculated as  4.994106574466076e-17\n  // toXYZ_M: [\n  // \t[0.6369580483012914, 0.14461690358620832,  0.1688809751641721],\n  // \t[0.2627002120112671, 0.6779980715188708,   0.05930171646986196],\n  // \t[0.000000000000000,  0.028072693049087428, 1.060985057710791]\n  // ],\n  // fromXYZ_M: [\n  // \t[1.7166511879712674,   -0.35567078377639233, -0.25336628137365974],\n  // \t[-0.6666843518324892,   1.6164812366349395,   0.01576854581391113],\n  // \t[0.017639857445310783, -0.042770613257808524, 0.9421031212354738]\n  // ]\n\n\n});\nColor$1.defineSpace({\n  id: \"oklab\",\n  cssid: \"oklab\",\n  name: \"OKLab\",\n  coords: {\n    L: [0, 1],\n    a: [-0.5, 0.5],\n    b: [-0.5, 0.5]\n  },\n  inGamut: coords => true,\n  // Note that XYZ is relative to D65\n  white: Color$1.whites.D65,\n  XYZtoLMS_M: [[0.8189330101, 0.3618667424, -0.1288597137], [0.0329845436, 0.9293118715, 0.0361456387], [0.0482003018, 0.2643662691, 0.6338517070]],\n  // inverse of XYZtoLMS_M\n  LMStoXYZ_M: [[1.227013851103521026, -0.5577999806518222383, 0.28125614896646780758], [-0.040580178423280593977, 1.1122568696168301049, -0.071676678665601200577], [-0.076381284505706892869, -0.42148197841801273055, 1.5861632204407947575]],\n  LMStoLab_M: [[0.2104542553, 0.7936177850, -0.0040720468], [1.9779984951, -2.4285922050, 0.4505937099], [0.0259040371, 0.7827717662, -0.8086757660]],\n  // LMStoIab_M inverted\n  LabtoLMS_M: [[0.99999999845051981432, 0.39633779217376785678, 0.21580375806075880339], [1.0000000088817607767, -0.1055613423236563494, -0.063854174771705903402], [1.0000000546724109177, -0.089484182094965759684, -1.2914855378640917399]],\n\n  fromXYZ(XYZ) {\n    const {\n      XYZtoLMS_M,\n      LMStoLab_M\n    } = this; // move to LMS cone domain\n\n    let LMS = multiplyMatrices(XYZtoLMS_M, XYZ); // non-linearity\n\n    let LMSg = LMS.map(val => Math.cbrt(val));\n    return multiplyMatrices(LMStoLab_M, LMSg);\n  },\n\n  toXYZ(OKLab) {\n    const {\n      LMStoXYZ_M,\n      LabtoLMS_M\n    } = this; // move to LMS cone domain\n\n    let LMSg = multiplyMatrices(LabtoLMS_M, OKLab); // restore linearity\n\n    let LMS = LMSg.map(val => val ** 3);\n    return multiplyMatrices(LMStoXYZ_M, LMS);\n  }\n\n});\nColor$1.defineSpace({\n  id: \"oklch\",\n  name: \"OKLCh\",\n  coords: {\n    lightness: [0, 1],\n    chroma: [0, 1],\n    hue: range\n  },\n  inGamut: coords => true,\n  white: Color$1.whites.D65,\n  from: {\n    oklab(oklab) {\n      // Convert to polar form\n      let [L, a, b] = oklab;\n      let h;\n      const ε = 0.0002; // chromatic components much smaller than a,b\n\n      if (Math.abs(a) < ε && Math.abs(b) < ε) {\n        h = NaN;\n      } else {\n        h = Math.atan2(b, a) * 180 / Math.PI;\n      }\n\n      return [L, // OKLab L is still L\n      Math.sqrt(a ** 2 + b ** 2), // Chroma\n      constrain(h) // Hue, in degrees [0 to 360)\n      ];\n    }\n\n  },\n  to: {\n    // Convert from polar form\n    oklab(oklch) {\n      let [L, C, h] = oklch;\n      let a, b; // check for NaN hue\n\n      if (isNaN(h)) {\n        a = 0;\n        b = 0;\n      } else {\n        a = C * Math.cos(h * Math.PI / 180);\n        b = C * Math.sin(h * Math.PI / 180);\n      }\n\n      return [L, a, b];\n    }\n\n  },\n\n  parse(str, parsed = Color$1.parseFunction(str)) {\n    if (parsed && parsed.name === \"oklch\") {\n      let L = parsed.args[0];\n      return {\n        spaceId: \"oklch\",\n        coords: parsed.args.slice(0, 3),\n        alpha: parsed.args.slice(3)[0]\n      };\n    }\n  }\n\n});\nColor$1.CATs = {};\nColor$1.hooks.add(\"chromatic-adaptation-start\", env => {\n  if (env.options.method) {\n    env.M = Color$1.adapt(env.W1, env.W2, env.options.method);\n  }\n});\nColor$1.hooks.add(\"chromatic-adaptation-end\", env => {\n  if (!env.M) {\n    env.M = Color$1.adapt(env.W1, env.W2, env.options.method);\n  }\n});\n\nColor$1.defineCAT = function ({\n  id,\n  toCone_M,\n  fromCone_M\n}) {\n  // Use id, toCone_M, fromCone_M like variables\n  Color$1.CATs[id] = arguments[0];\n};\n\nColor$1.adapt = function (W1, W2, id = \"Bradford\") {\n  // adapt from a source whitepoint or illuminant W1\n  // to a destination whitepoint or illuminant W2,\n  // using the given chromatic adaptation transform (CAT)\n  // debugger;\n  let method = Color$1.CATs[id];\n  let [ρs, γs, βs] = multiplyMatrices(method.toCone_M, W1);\n  let [ρd, γd, βd] = multiplyMatrices(method.toCone_M, W2); // all practical illuminants have non-zero XYZ so no division by zero can occur below\n\n  let scale = [[ρd / ρs, 0, 0], [0, γd / γs, 0], [0, 0, βd / βs]]; // console.log({scale});\n\n  let scaled_cone_M = multiplyMatrices(scale, method.toCone_M);\n  let adapt_M = multiplyMatrices(method.fromCone_M, scaled_cone_M); // console.log({scaled_cone_M, adapt_M});\n\n  return adapt_M;\n};\n\nColor$1.defineCAT({\n  id: \"von Kries\",\n  toCone_M: [[0.4002400, 0.7076000, -0.0808100], [-0.2263000, 1.1653200, 0.0457000], [0.0000000, 0.0000000, 0.9182200]],\n  fromCone_M: [[1.8599364, -1.1293816, 0.2198974], [0.3611914, 0.6388125, -0.0000064], [0.0000000, 0.0000000, 1.0890636]]\n});\nColor$1.defineCAT({\n  id: \"Bradford\",\n  // Convert an array of XYZ values in the range 0.0 - 1.0\n  // to cone fundamentals\n  toCone_M: [[0.8951000, 0.2664000, -0.1614000], [-0.7502000, 1.7135000, 0.0367000], [0.0389000, -0.0685000, 1.0296000]],\n  // and back\n  fromCone_M: [[0.9869929, -0.1470543, 0.1599627], [0.4323053, 0.5183603, 0.0492912], [-0.0085287, 0.0400428, 0.9684867]]\n});\nColor$1.defineCAT({\n  id: \"CAT02\",\n  // with complete chromatic adaptation to W2, so D = 1.0\n  toCone_M: [[0.7328000, 0.4296000, -0.1624000], [-0.7036000, 1.6975000, 0.0061000], [0.0030000, 0.0136000, 0.9834000]],\n  fromCone_M: [[1.0961238, -0.2788690, 0.1827452], [0.4543690, 0.4735332, 0.0720978], [-0.0096276, -0.0056980, 1.0153256]]\n});\nColor$1.defineCAT({\n  id: \"CAT16\",\n  toCone_M: [[0.401288, 0.650173, -0.051461], [-0.250268, 1.204414, 0.045854], [-0.002079, 0.048952, 0.953127]],\n  // the extra precision is needed to avoid roundtripping errors\n  fromCone_M: [[1.862067855087233e+0, -1.011254630531685e+0, 1.491867754444518e-1], [3.875265432361372e-1, 6.214474419314753e-1, -8.973985167612518e-3], [-1.584149884933386e-2, -3.412293802851557e-2, 1.049964436877850e+0]]\n});\nObject.assign(Color$1.whites, {\n  // whitepoint values from ASTM E308-01 with 10nm spacing, 1931 2 degree observer\n  // all normalized to Y (luminance) = 1.00000\n  // Illuminant A is a tungsten electric light, giving a very warm, orange light.\n  A: [1.09850, 1.00000, 0.35585],\n  // Illuminant C was an early approximation to daylight: illuminant A with a blue filter.\n  C: [0.98074, 1.000000, 1.18232],\n  // The daylight series of illuminants simulate natural daylight.\n  // The color temperature (in degrees Kelvin/100) ranges from\n  // cool, overcast daylight (D50) to bright, direct sunlight (D65).\n  D55: [0.95682, 1.00000, 0.92149],\n  D75: [0.94972, 1.00000, 1.22638],\n  // Equal-energy illuminant, used in two-stage CAT16\n  E: [1.00000, 1.00000, 1.00000],\n  // The F series of illuminants represent flourescent lights\n  F2: [0.99186, 1.00000, 0.67393],\n  F7: [0.95041, 1.00000, 1.08747],\n  F11: [1.00962, 1.00000, 0.64350]\n}); // because of the funky whitepoint\n\nColor$1.defineSpace({\n  id: \"acescc\",\n  name: \"ACEScc\",\n  inherits: \"srgb\",\n  // see S-2014-003 ACEScc – A Logarithmic Encoding of ACES Data\n  // uses the AP1 primaries, see section 4.3.1 Color primaries\n  coords: {\n    red: [-0.3014, 1.468],\n    green: [-0.3014, 1.468],\n    blue: [-0.3014, 1.468]\n  },\n  // Appendix A: \"Very small ACES scene referred values below 7 1/4 stops\n  // below 18% middle gray are encoded as negative ACEScc values.\n  // These values should be preserved per the encoding in Section 4.4\n  // so that all positive ACES values are maintained.\"\n  // The ACES whitepoint\n  // see TB-2018-001 Derivation of the ACES White Point CIE Chromaticity Coordinates\n  // also https://github.com/ampas/aces-dev/blob/master/documents/python/TB-2018-001/aces_wp.py\n  white: Color$1.whites.ACES = [0.32168 / 0.33767, 1.00000, (1.00000 - 0.32168 - 0.33767) / 0.33767],\n\n  // Similar to D60\n  // from section 4.4.2 Decoding Function\n  toLinear(RGB) {\n    const low = (9.72 - 15) / 17.52; // -0.3014\n\n    const high = (Math.log2(65504) + 9.72) / 17.52; // 1.468\n\n    const ε = 2 ** -16;\n    return RGB.map(function (val) {\n      if (val <= low) {\n        return (2 ** (val * 17.52 - 9.72) - ε) * 2; // 0 for low or below\n      } else if (val < high) {\n        return 2 ** (val * 17.52 - 9.72);\n      } else {\n        // val >= high\n        return 65504;\n      }\n    });\n  },\n\n  // Non-linear encoding function from S-2014-003, section 4.4.1 Encoding Function\n  toGamma(RGB) {\n    const ε = 2 ** -16;\n    return RGB.map(function (val) {\n      if (val <= 0) {\n        return (Math.log2(ε) + 9.72) / 17.52; // -0.3584\n      } else if (val < ε) {\n        return (Math.log2(ε + val * 0.5) + 9.72) / 17.52;\n      } else {\n        // val >= ε\n        return (Math.log2(val) + 9.72) / 17.52;\n      }\n    });\n  },\n\n  // encoded media white (rgb 1,1,1) => linear  [ 222.861, 222.861, 222.861 ]\n  // encoded media black (rgb 0,0,0) => linear [ 0.0011857, 0.0011857, 0.0011857]\n  // convert an array of linear-light ACEScc values to CIE XYZ\n  toXYZ_M: [[0.6624541811085053, 0.13400420645643313, 0.1561876870049078], [0.27222871678091454, 0.6740817658111484, 0.05368951740793705], [-0.005574649490394108, 0.004060733528982826, 1.0103391003129971]],\n  //\n  fromXYZ_M: [[1.6410233796943257, -0.32480329418479, -0.23642469523761225], [-0.6636628587229829, 1.6153315916573379, 0.016756347685530137], [0.011721894328375376, -0.008284441996237409, 0.9883948585390215]]\n}); // export default Color;\n\nlet methods = {\n  range(...args) {\n    return Color$1.range(this, ...args);\n  },\n\n  /**\r\n   * Return an intermediate color between two colors\r\n   * Signatures: color.mix(color, p, options)\r\n   *             color.mix(color, options)\r\n   *             color.mix(color)\r\n   */\n  mix(color, p = .5, o = {}) {\n    if (type(p) === \"object\") {\n      [p, o] = [.5, p];\n    }\n\n    let {\n      space,\n      outputSpace\n    } = o;\n    color = Color$1.get(color);\n    let range = this.range(color, {\n      space,\n      outputSpace\n    });\n    return range(p);\n  },\n\n  /**\r\n   * Interpolate to color2 and return an array of colors\r\n   * @returns {Array[Color]}\r\n   */\n  steps(...args) {\n    return Color$1.steps(this, ...args);\n  }\n\n};\n\nColor$1.steps = function (color1, color2, options = {}) {\n  let range;\n\n  if (isRange(color1)) {\n    // Tweaking existing range\n    [range, options] = [color1, color2];\n    [color1, color2] = range.rangeArgs.colors;\n  }\n\n  let {\n    maxDeltaE,\n    deltaEMethod,\n    steps = 2,\n    maxSteps = 1000,\n    ...rangeOptions\n  } = options;\n\n  if (!range) {\n    color1 = Color$1.get(color1);\n    color2 = Color$1.get(color2);\n    range = Color$1.range(color1, color2, rangeOptions);\n  }\n\n  let totalDelta = this.deltaE(color2);\n  let actualSteps = maxDeltaE > 0 ? Math.max(steps, Math.ceil(totalDelta / maxDeltaE) + 1) : steps;\n  let ret = [];\n\n  if (maxSteps !== undefined) {\n    actualSteps = Math.min(actualSteps, maxSteps);\n  }\n\n  if (actualSteps === 1) {\n    ret = [{\n      p: .5,\n      color: range(.5)\n    }];\n  } else {\n    let step = 1 / (actualSteps - 1);\n    ret = Array.from({\n      length: actualSteps\n    }, (_, i) => {\n      let p = i * step;\n      return {\n        p,\n        color: range(p)\n      };\n    });\n  }\n\n  if (maxDeltaE > 0) {\n    // Iterate over all stops and find max deltaE\n    let maxDelta = ret.reduce((acc, cur, i) => {\n      if (i === 0) {\n        return 0;\n      }\n\n      let deltaE = cur.color.deltaE(ret[i - 1].color, deltaEMethod);\n      return Math.max(acc, deltaE);\n    }, 0);\n\n    while (maxDelta > maxDeltaE) {\n      // Insert intermediate stops and measure maxDelta again\n      // We need to do this for all pairs, otherwise the midpoint shifts\n      maxDelta = 0;\n\n      for (let i = 1; i < ret.length && ret.length < maxSteps; i++) {\n        let prev = ret[i - 1];\n        let cur = ret[i];\n        let p = (cur.p + prev.p) / 2;\n        let color = range(p);\n        maxDelta = Math.max(maxDelta, color.deltaE(prev.color), color.deltaE(cur.color));\n        ret.splice(i, 0, {\n          p,\n          color: range(p)\n        });\n        i++;\n      }\n    }\n  }\n\n  ret = ret.map(a => a.color);\n  return ret;\n};\n/**\r\n * Interpolate to color2 and return a function that takes a 0-1 percentage\r\n * @returns {Function}\r\n */\n\n\nColor$1.range = function (color1, color2, options = {}) {\n  if (isRange(color1)) {\n    // Tweaking existing range\n    let [range, options] = [color1, color2];\n    return Color$1.range(...range.rangeArgs.colors, { ...range.rangeArgs.options,\n      ...options\n    });\n  }\n\n  let {\n    space,\n    outputSpace,\n    progression,\n    premultiplied\n  } = options; // Make sure we're working on copies of these colors\n\n  color1 = new Color$1(color1);\n  color2 = new Color$1(color2);\n  let rangeArgs = {\n    colors: [color1, color2],\n    options\n  };\n\n  if (space) {\n    space = Color$1.space(space);\n  } else {\n    space = Color$1.spaces[Color$1.defaults.interpolationSpace] || color1.space;\n  }\n\n  outputSpace = outputSpace ? Color$1.space(outputSpace) : color1.space || space;\n  color1 = color1.to(space).toGamut();\n  color2 = color2.to(space).toGamut(); // Handle hue interpolation\n  // See https://github.com/w3c/csswg-drafts/issues/4735#issuecomment-635741840\n\n  if (space.coords.hue && space.coords.hue.isAngle) {\n    let arc = options.hue = options.hue || \"shorter\";\n    [color1[space.id].hue, color2[space.id].hue] = adjust(arc, [color1[space.id].hue, color2[space.id].hue]);\n  }\n\n  if (premultiplied) {\n    // not coping with polar spaces yet\n    color1.coords = color1.coords.map(c => c * color1.alpha);\n    color2.coords = color2.coords.map(c => c * color2.alpha);\n  }\n\n  return Object.assign(p => {\n    p = progression ? progression(p) : p;\n    let coords = color1.coords.map((start, i) => {\n      let end = color2.coords[i];\n      return interpolate(start, end, p);\n    });\n    let alpha = interpolate(color1.alpha, color2.alpha, p);\n    let ret = new Color$1(space, coords, alpha);\n\n    if (premultiplied) {\n      // undo premultiplication\n      ret.coords = ret.coords.map(c => c / alpha);\n    }\n\n    if (outputSpace !== space) {\n      ret = ret.to(outputSpace);\n    }\n\n    return ret;\n  }, {\n    rangeArgs\n  });\n};\n\nfunction isRange(val) {\n  return type(val) === \"function\" && val.rangeArgs;\n} // Helper\n\n\nfunction interpolate(start, end, p) {\n  if (isNaN(start)) {\n    return end;\n  }\n\n  if (isNaN(end)) {\n    return start;\n  }\n\n  return start + (end - start) * p;\n}\n\nObject.assign(Color$1.defaults, {\n  interpolationSpace: \"lab\"\n});\nObject.assign(Color$1.prototype, methods);\nColor$1.statify(Object.keys(methods)); // More accurate color-difference formulae\n// than the simple 1976 Euclidean distance in Lab\n// CMC by the Color Measurement Committee of the\n// Bradford Society of Dyeists and Colorsts, 1994.\n// Uses LCH rather than Lab,\n// with different weights for L, C and H differences\n// A nice increase in accuracy for modest increase in complexity\n\nColor$1.prototype.deltaECMC = function (sample, {\n  l = 2,\n  c = 1\n} = {}) {\n  let color = this;\n  sample = Color$1.get(sample); // Given this color as the reference\n  // and a sample,\n  // calculate deltaE CMC.\n  // This implementation assumes the parametric\n  // weighting factors l:c are 2:1\n  //  which is typical for non-textile uses.\n\n  let [L1, a1, b1] = color.lab;\n  let C1 = color.chroma;\n  let H1 = color.hue;\n  let [L2, a2, b2] = sample.lab;\n  let C2 = sample.chroma; // Check for negative Chroma,\n  // which might happen through\n  // direct user input of LCH values\n\n  if (C1 < 0) {\n    C1 = 0;\n  }\n\n  if (C2 < 0) {\n    C2 = 0;\n  } // we don't need H2 as ΔH is calculated from Δa, Δb and ΔC\n  // console.log({L1, a1, b1});\n  // console.log({L2, a2, b2});\n  // Lightness and Chroma differences\n  // These are (color - sample), unlike deltaE2000\n\n\n  let ΔL = L1 - L2;\n  let ΔC = C1 - C2; // console.log({ΔL});\n  // console.log({ΔC});\n\n  let Δa = a1 - a2;\n  let Δb = b1 - b2; // console.log({Δa});\n  // console.log({Δb});\n  // weighted Hue difference, less for larger Chroma difference\n\n  const π = Math.PI;\n  const d2r = π / 180;\n  let H2 = Δa ** 2 + Δb ** 2 - ΔC ** 2; // due to roundoff error it is possible that, for zero a and b,\n  // ΔC > Δa + Δb is 0, resulting in attempting\n  // to take the square root of a negative number\n  // trying instead the equation from Industrial Color Physics\n  // By Georg A. Klein\n  // let ΔH = ((a1 * b2) - (a2 * b1)) / Math.sqrt(0.5 * ((C2 * C1) + (a2 * a1) + (b2 * b1)));\n  // console.log({ΔH});\n  // This gives the same result to 12 decimal places\n  // except it sometimes NaNs when trying to root a negative number\n  // let ΔH = Math.sqrt(H2); we never actually use the root, it gets squared again!!\n  // positional corrections to the lack of uniformity of CIELAB\n  // These are all trying to make JND ellipsoids more like spheres\n  // SL Lightness crispening factor, depends entirely on L1 not L2\n\n  let SL = 0.511; // linear portion of the Y to L transfer function\n\n  if (L1 >= 16) {\n    // cubic portion\n    SL = 0.040975 * L1 / (1 + 0.01765 * L1);\n  } // console.log({SL});\n  // SC Chroma factor\n\n\n  let SC = 0.0638 * C1 / (1 + 0.0131 * C1) + 0.638; // console.log({SC});\n  // Cross term T for blue non-linearity\n\n  let T;\n\n  if (Number.isNaN(H1)) {\n    H1 = 0;\n  }\n\n  if (H1 >= 164 && H1 <= 345) {\n    T = 0.56 + Math.abs(0.2 * Math.cos((H1 + 168) * d2r));\n  } else {\n    T = 0.36 + Math.abs(0.4 * Math.cos((H1 + 35) * d2r));\n  } // console.log({T});\n  // SH Hue factor also depends on C1,\n\n\n  let C4 = Math.pow(C1, 4);\n  let F = Math.sqrt(C4 / (C4 + 1900));\n  let SH = SC * (F * T + 1 - F); // console.log({SH});\n  // Finally calculate the deltaE, term by term as root sume of squares\n\n  let dE = (ΔL / (l * SL)) ** 2;\n  dE += (ΔC / (c * SC)) ** 2;\n  dE += H2 / SH ** 2; // dE += (ΔH / SH)  ** 2;\n\n  return Math.sqrt(dE); // Yay!!!\n};\n\nColor$1.statify([\"deltaECMC\"]); // deltaE2000 is a statistically significant improvement\n// and is recommended by the CIE and Idealliance\n// especially for color differences less than 10 deltaE76\n// but is wicked complicated\n// and many implementations have small errors!\n// DeltaE2000 is also discontinuous; in case this\n// matters to you, use deltaECMC instead.\n\nColor$1.prototype.deltaE2000 = function (sample, {\n  kL = 1,\n  kC = 1,\n  kH = 1\n} = {}) {\n  let color = this;\n  sample = Color$1.get(sample); // Given this color as the reference\n  // and the function parameter as the sample,\n  // calculate deltaE 2000.\n  // This implementation assumes the parametric\n  // weighting factors kL, kC and kH\n  // for the influence of viewing conditions\n  // are all 1, as sadly seems typical.\n  // kL should be increased for lightness texture or noise\n  // and kC increased for chroma noise\n\n  let [L1, a1, b1] = color.lab;\n  let C1 = color.chroma;\n  let [L2, a2, b2] = sample.lab;\n  let C2 = sample.chroma; // Check for negative Chroma,\n  // which might happen through\n  // direct user input of LCH values\n\n  if (C1 < 0) {\n    C1 = 0;\n  }\n\n  if (C2 < 0) {\n    C2 = 0;\n  }\n\n  let Cbar = (C1 + C2) / 2; // mean Chroma\n  // calculate a-axis asymmetry factor from mean Chroma\n  // this turns JND ellipses for near-neutral colors back into circles\n\n  let C7 = Math.pow(Cbar, 7);\n  const Gfactor = Math.pow(25, 7);\n  let G = 0.5 * (1 - Math.sqrt(C7 / (C7 + Gfactor))); // scale a axes by asymmetry factor\n  // this by the way is why there is no Lab2000 colorspace\n\n  let adash1 = (1 + G) * a1;\n  let adash2 = (1 + G) * a2; // calculate new Chroma from scaled a and original b axes\n\n  let Cdash1 = Math.sqrt(adash1 ** 2 + b1 ** 2);\n  let Cdash2 = Math.sqrt(adash2 ** 2 + b2 ** 2); // calculate new hues, with zero hue for true neutrals\n  // and in degrees, not radians\n\n  const π = Math.PI;\n  const r2d = 180 / π;\n  const d2r = π / 180;\n  let h1 = adash1 === 0 && b1 === 0 ? 0 : Math.atan2(b1, adash1);\n  let h2 = adash2 === 0 && b2 === 0 ? 0 : Math.atan2(b2, adash2);\n\n  if (h1 < 0) {\n    h1 += 2 * π;\n  }\n\n  if (h2 < 0) {\n    h2 += 2 * π;\n  }\n\n  h1 *= r2d;\n  h2 *= r2d; // Lightness and Chroma differences; sign matters\n\n  let ΔL = L2 - L1;\n  let ΔC = Cdash2 - Cdash1; // Hue difference, getting the sign correct\n\n  let hdiff = h2 - h1;\n  let hsum = h1 + h2;\n  let habs = Math.abs(hdiff);\n  let Δh;\n\n  if (Cdash1 * Cdash2 === 0) {\n    Δh = 0;\n  } else if (habs <= 180) {\n    Δh = hdiff;\n  } else if (hdiff > 180) {\n    Δh = hdiff - 360;\n  } else if (hdiff < -180) {\n    Δh = hdiff + 360;\n  } else {\n    console.log(\"the unthinkable has happened\");\n  } // weighted Hue difference, more for larger Chroma\n\n\n  let ΔH = 2 * Math.sqrt(Cdash2 * Cdash1) * Math.sin(Δh * d2r / 2); // calculate mean Lightness and Chroma\n\n  let Ldash = (L1 + L2) / 2;\n  let Cdash = (Cdash1 + Cdash2) / 2;\n  let Cdash7 = Math.pow(Cdash, 7); // Compensate for non-linearity in the blue region of Lab.\n  // Four possibilities for hue weighting factor,\n  // depending on the angles, to get the correct sign\n\n  let hdash;\n\n  if (Cdash1 * Cdash2 === 0) {\n    hdash = hsum; // which should be zero\n  } else if (habs <= 180) {\n    hdash = hsum / 2;\n  } else if (hsum < 360) {\n    hdash = (hsum + 360) / 2;\n  } else {\n    hdash = (hsum - 360) / 2;\n  } // positional corrections to the lack of uniformity of CIELAB\n  // These are all trying to make JND ellipsoids more like spheres\n  // SL Lightness crispening factor\n  // a background with L=50 is assumed\n\n\n  let lsq = (Ldash - 50) ** 2;\n  let SL = 1 + 0.015 * lsq / Math.sqrt(20 + lsq); // SC Chroma factor, similar to those in CMC and deltaE 94 formulae\n\n  let SC = 1 + 0.045 * Cdash; // Cross term T for blue non-linearity\n\n  let T = 1;\n  T -= 0.17 * Math.cos((hdash - 30) * d2r);\n  T += 0.24 * Math.cos(2 * hdash * d2r);\n  T += 0.32 * Math.cos((3 * hdash + 6) * d2r);\n  T -= 0.20 * Math.cos((4 * hdash - 63) * d2r); // SH Hue factor depends on Chroma,\n  // as well as adjusted hue angle like deltaE94.\n\n  let SH = 1 + 0.015 * Cdash * T; // RT Hue rotation term compensates for rotation of JND ellipses\n  // and Munsell constant hue lines\n  // in the medium-high Chroma blue region\n  // (Hue 225 to 315)\n\n  let Δθ = 30 * Math.exp(-1 * ((hdash - 275) / 25) ** 2);\n  let RC = 2 * Math.sqrt(Cdash7 / (Cdash7 + Gfactor));\n  let RT = -1 * Math.sin(2 * Δθ * d2r) * RC; // Finally calculate the deltaE, term by term as root sume of squares\n\n  let dE = (ΔL / (kL * SL)) ** 2;\n  dE += (ΔC / (kC * SC)) ** 2;\n  dE += (ΔH / (kH * SH)) ** 2;\n  dE += RT * (ΔC / (kC * SC)) * (ΔH / (kH * SH));\n  return Math.sqrt(dE); // Yay!!!\n};\n\nColor$1.statify([\"deltaE2000\"]); // More accurate color-difference formulae\n// than the simple 1976 Euclidean distance in Lab\n// Uses JzCzHz, which has improved perceptual uniformity\n// and thus a simple Euclidean root-sum of ΔL² ΔC² ΔH²\n// gives good results.\n\nColor$1.prototype.deltaEJz = function (sample) {\n  let color = this;\n  sample = Color$1.get(sample); // Given this color as the reference\n  // and a sample,\n  // calculate deltaE in JzCzHz.\n\n  let [Jz1, Cz1, Hz1] = color.jzczhz;\n  let [Jz2, Cz2, Hz2] = sample.jzczhz; // Lightness and Chroma differences\n  // sign does not matter as they are squared.\n\n  let ΔJ = Jz1 - Jz2;\n  let ΔC = Cz1 - Cz2; // length of chord for ΔH\n\n  if (Number.isNaN(Hz1) && Number.isNaN(Hz2)) {\n    // both undefined hues\n    Hz1 = 0;\n    Hz2 = 0;\n  } else if (Number.isNaN(Hz1)) {\n    // one undefined, set to the defined hue\n    Hz1 = Hz2;\n  } else if (Number.isNaN(Hz2)) {\n    Hz2 = Hz1;\n  }\n\n  let Δh = Hz1 - Hz2;\n  let ΔH = 2 * Math.sqrt(Cz1 * Cz2) * Math.sin(Δh * Math.PI / 180);\n  return Math.sqrt(ΔJ ** 2 + ΔC ** 2 + ΔH ** 2);\n};\n\nColor$1.statify([\"deltaEJz\"]); // Delta E in ICtCp space,\n// which the ITU calls Delta E ITP, which is shorter\n// formulae from ITU Rec. ITU-R BT.2124-0\n\nColor$1.prototype.deltaEITP = function (sample) {\n  let color = this;\n  sample = Color$1.get(sample); // Given this color as the reference\n  // and a sample,\n  // calculate deltaE in ICtCp\n  // which is simply the Euclidean distance\n\n  let [I1, T1, P1] = color.ictcp;\n  let [I2, T2, P2] = sample.ictcp; // the 0.25 factor is to undo the encoding scaling in Ct\n  // the 720 is so that 1 deltaE = 1 JND\n  // per  ITU-R BT.2124-0 p.3\n\n  return 720 * Math.sqrt((I1 - I2) ** 2 + 0.25 * (T1 - T2) ** 2 + (P1 - P2) ** 2);\n};\n\nColor$1.statify([\"deltaEITP\"]); // More accurate color-difference formulae\n// than the simple 1976 Euclidean distance in CIE Lab\n\nColor$1.prototype.deltaEOK = function (sample, deltas = {}) {\n  let color = this;\n  sample = Color$1.get(sample); // Given this color as the reference\n  // and a sample,\n  // calculate deltaEOK, term by term as root sum of squares\n\n  let [L1, a1, b1] = color.oklab;\n  let [L2, a2, b2] = sample.oklab;\n  let ΔL = L1 - L2;\n  let Δa = a1 - a2;\n  let Δb = b1 - b2;\n  return Math.sqrt(ΔL ** 2 + Δa ** 2 + Δb ** 2);\n};\n\nColor$1.statify([\"deltaEOK\"]);\n/* Parse color keywords without the browser DOM\r\n * This is only needed to parse Color keywords in Node,\r\n * and to improve performance when parsing color keywords in the browser\r\n * To take advantage of this, just import the module.\r\n * You can also take advantage of its default exports, if you need a data structure of named colors\r\n * Note that this does not handle currentColor\r\n */\n// To produce: Visit https://www.w3.org/TR/css-color-4/#named-colors\n// and run in the console:\n// copy($$(\"tr\", $(\".named-color-table tbody\")).map(tr => `\"${tr.cells[2].textContent.trim()}\": [${tr.cells[4].textContent.trim().split(/\\s+/).map(c => c === \"0\"? \"0\" : c === \"255\"? \"1\" : c + \" / 255\").join(\", \")}]`).join(\",\\n\"))\n\nconst KEYWORDS = {\n  \"aliceblue\": [240 / 255, 248 / 255, 1],\n  \"antiquewhite\": [250 / 255, 235 / 255, 215 / 255],\n  \"aqua\": [0, 1, 1],\n  \"aquamarine\": [127 / 255, 1, 212 / 255],\n  \"azure\": [240 / 255, 1, 1],\n  \"beige\": [245 / 255, 245 / 255, 220 / 255],\n  \"bisque\": [1, 228 / 255, 196 / 255],\n  \"black\": [0, 0, 0],\n  \"blanchedalmond\": [1, 235 / 255, 205 / 255],\n  \"blue\": [0, 0, 1],\n  \"blueviolet\": [138 / 255, 43 / 255, 226 / 255],\n  \"brown\": [165 / 255, 42 / 255, 42 / 255],\n  \"burlywood\": [222 / 255, 184 / 255, 135 / 255],\n  \"cadetblue\": [95 / 255, 158 / 255, 160 / 255],\n  \"chartreuse\": [127 / 255, 1, 0],\n  \"chocolate\": [210 / 255, 105 / 255, 30 / 255],\n  \"coral\": [1, 127 / 255, 80 / 255],\n  \"cornflowerblue\": [100 / 255, 149 / 255, 237 / 255],\n  \"cornsilk\": [1, 248 / 255, 220 / 255],\n  \"crimson\": [220 / 255, 20 / 255, 60 / 255],\n  \"cyan\": [0, 1, 1],\n  \"darkblue\": [0, 0, 139 / 255],\n  \"darkcyan\": [0, 139 / 255, 139 / 255],\n  \"darkgoldenrod\": [184 / 255, 134 / 255, 11 / 255],\n  \"darkgray\": [169 / 255, 169 / 255, 169 / 255],\n  \"darkgreen\": [0, 100 / 255, 0],\n  \"darkgrey\": [169 / 255, 169 / 255, 169 / 255],\n  \"darkkhaki\": [189 / 255, 183 / 255, 107 / 255],\n  \"darkmagenta\": [139 / 255, 0, 139 / 255],\n  \"darkolivegreen\": [85 / 255, 107 / 255, 47 / 255],\n  \"darkorange\": [1, 140 / 255, 0],\n  \"darkorchid\": [153 / 255, 50 / 255, 204 / 255],\n  \"darkred\": [139 / 255, 0, 0],\n  \"darksalmon\": [233 / 255, 150 / 255, 122 / 255],\n  \"darkseagreen\": [143 / 255, 188 / 255, 143 / 255],\n  \"darkslateblue\": [72 / 255, 61 / 255, 139 / 255],\n  \"darkslategray\": [47 / 255, 79 / 255, 79 / 255],\n  \"darkslategrey\": [47 / 255, 79 / 255, 79 / 255],\n  \"darkturquoise\": [0, 206 / 255, 209 / 255],\n  \"darkviolet\": [148 / 255, 0, 211 / 255],\n  \"deeppink\": [1, 20 / 255, 147 / 255],\n  \"deepskyblue\": [0, 191 / 255, 1],\n  \"dimgray\": [105 / 255, 105 / 255, 105 / 255],\n  \"dimgrey\": [105 / 255, 105 / 255, 105 / 255],\n  \"dodgerblue\": [30 / 255, 144 / 255, 1],\n  \"firebrick\": [178 / 255, 34 / 255, 34 / 255],\n  \"floralwhite\": [1, 250 / 255, 240 / 255],\n  \"forestgreen\": [34 / 255, 139 / 255, 34 / 255],\n  \"fuchsia\": [1, 0, 1],\n  \"gainsboro\": [220 / 255, 220 / 255, 220 / 255],\n  \"ghostwhite\": [248 / 255, 248 / 255, 1],\n  \"gold\": [1, 215 / 255, 0],\n  \"goldenrod\": [218 / 255, 165 / 255, 32 / 255],\n  \"gray\": [128 / 255, 128 / 255, 128 / 255],\n  \"green\": [0, 128 / 255, 0],\n  \"greenyellow\": [173 / 255, 1, 47 / 255],\n  \"grey\": [128 / 255, 128 / 255, 128 / 255],\n  \"honeydew\": [240 / 255, 1, 240 / 255],\n  \"hotpink\": [1, 105 / 255, 180 / 255],\n  \"indianred\": [205 / 255, 92 / 255, 92 / 255],\n  \"indigo\": [75 / 255, 0, 130 / 255],\n  \"ivory\": [1, 1, 240 / 255],\n  \"khaki\": [240 / 255, 230 / 255, 140 / 255],\n  \"lavender\": [230 / 255, 230 / 255, 250 / 255],\n  \"lavenderblush\": [1, 240 / 255, 245 / 255],\n  \"lawngreen\": [124 / 255, 252 / 255, 0],\n  \"lemonchiffon\": [1, 250 / 255, 205 / 255],\n  \"lightblue\": [173 / 255, 216 / 255, 230 / 255],\n  \"lightcoral\": [240 / 255, 128 / 255, 128 / 255],\n  \"lightcyan\": [224 / 255, 1, 1],\n  \"lightgoldenrodyellow\": [250 / 255, 250 / 255, 210 / 255],\n  \"lightgray\": [211 / 255, 211 / 255, 211 / 255],\n  \"lightgreen\": [144 / 255, 238 / 255, 144 / 255],\n  \"lightgrey\": [211 / 255, 211 / 255, 211 / 255],\n  \"lightpink\": [1, 182 / 255, 193 / 255],\n  \"lightsalmon\": [1, 160 / 255, 122 / 255],\n  \"lightseagreen\": [32 / 255, 178 / 255, 170 / 255],\n  \"lightskyblue\": [135 / 255, 206 / 255, 250 / 255],\n  \"lightslategray\": [119 / 255, 136 / 255, 153 / 255],\n  \"lightslategrey\": [119 / 255, 136 / 255, 153 / 255],\n  \"lightsteelblue\": [176 / 255, 196 / 255, 222 / 255],\n  \"lightyellow\": [1, 1, 224 / 255],\n  \"lime\": [0, 1, 0],\n  \"limegreen\": [50 / 255, 205 / 255, 50 / 255],\n  \"linen\": [250 / 255, 240 / 255, 230 / 255],\n  \"magenta\": [1, 0, 1],\n  \"maroon\": [128 / 255, 0, 0],\n  \"mediumaquamarine\": [102 / 255, 205 / 255, 170 / 255],\n  \"mediumblue\": [0, 0, 205 / 255],\n  \"mediumorchid\": [186 / 255, 85 / 255, 211 / 255],\n  \"mediumpurple\": [147 / 255, 112 / 255, 219 / 255],\n  \"mediumseagreen\": [60 / 255, 179 / 255, 113 / 255],\n  \"mediumslateblue\": [123 / 255, 104 / 255, 238 / 255],\n  \"mediumspringgreen\": [0, 250 / 255, 154 / 255],\n  \"mediumturquoise\": [72 / 255, 209 / 255, 204 / 255],\n  \"mediumvioletred\": [199 / 255, 21 / 255, 133 / 255],\n  \"midnightblue\": [25 / 255, 25 / 255, 112 / 255],\n  \"mintcream\": [245 / 255, 1, 250 / 255],\n  \"mistyrose\": [1, 228 / 255, 225 / 255],\n  \"moccasin\": [1, 228 / 255, 181 / 255],\n  \"navajowhite\": [1, 222 / 255, 173 / 255],\n  \"navy\": [0, 0, 128 / 255],\n  \"oldlace\": [253 / 255, 245 / 255, 230 / 255],\n  \"olive\": [128 / 255, 128 / 255, 0],\n  \"olivedrab\": [107 / 255, 142 / 255, 35 / 255],\n  \"orange\": [1, 165 / 255, 0],\n  \"orangered\": [1, 69 / 255, 0],\n  \"orchid\": [218 / 255, 112 / 255, 214 / 255],\n  \"palegoldenrod\": [238 / 255, 232 / 255, 170 / 255],\n  \"palegreen\": [152 / 255, 251 / 255, 152 / 255],\n  \"paleturquoise\": [175 / 255, 238 / 255, 238 / 255],\n  \"palevioletred\": [219 / 255, 112 / 255, 147 / 255],\n  \"papayawhip\": [1, 239 / 255, 213 / 255],\n  \"peachpuff\": [1, 218 / 255, 185 / 255],\n  \"peru\": [205 / 255, 133 / 255, 63 / 255],\n  \"pink\": [1, 192 / 255, 203 / 255],\n  \"plum\": [221 / 255, 160 / 255, 221 / 255],\n  \"powderblue\": [176 / 255, 224 / 255, 230 / 255],\n  \"purple\": [128 / 255, 0, 128 / 255],\n  \"rebeccapurple\": [102 / 255, 51 / 255, 153 / 255],\n  \"red\": [1, 0, 0],\n  \"rosybrown\": [188 / 255, 143 / 255, 143 / 255],\n  \"royalblue\": [65 / 255, 105 / 255, 225 / 255],\n  \"saddlebrown\": [139 / 255, 69 / 255, 19 / 255],\n  \"salmon\": [250 / 255, 128 / 255, 114 / 255],\n  \"sandybrown\": [244 / 255, 164 / 255, 96 / 255],\n  \"seagreen\": [46 / 255, 139 / 255, 87 / 255],\n  \"seashell\": [1, 245 / 255, 238 / 255],\n  \"sienna\": [160 / 255, 82 / 255, 45 / 255],\n  \"silver\": [192 / 255, 192 / 255, 192 / 255],\n  \"skyblue\": [135 / 255, 206 / 255, 235 / 255],\n  \"slateblue\": [106 / 255, 90 / 255, 205 / 255],\n  \"slategray\": [112 / 255, 128 / 255, 144 / 255],\n  \"slategrey\": [112 / 255, 128 / 255, 144 / 255],\n  \"snow\": [1, 250 / 255, 250 / 255],\n  \"springgreen\": [0, 1, 127 / 255],\n  \"steelblue\": [70 / 255, 130 / 255, 180 / 255],\n  \"tan\": [210 / 255, 180 / 255, 140 / 255],\n  \"teal\": [0, 128 / 255, 128 / 255],\n  \"thistle\": [216 / 255, 191 / 255, 216 / 255],\n  \"tomato\": [1, 99 / 255, 71 / 255],\n  \"turquoise\": [64 / 255, 224 / 255, 208 / 255],\n  \"violet\": [238 / 255, 130 / 255, 238 / 255],\n  \"wheat\": [245 / 255, 222 / 255, 179 / 255],\n  \"white\": [1, 1, 1],\n  \"whitesmoke\": [245 / 255, 245 / 255, 245 / 255],\n  \"yellow\": [1, 1, 0],\n  \"yellowgreen\": [154 / 255, 205 / 255, 50 / 255]\n};\nColor$1.hooks.add(\"parse-start\", env => {\n  let str = env.str.toLowerCase();\n  let ret = {\n    spaceId: \"srgb\",\n    coords: null,\n    alpha: 1\n  };\n\n  if (str === \"transparent\") {\n    ret.coords = KEYWORDS.black;\n    ret.alpha = 0;\n  } else {\n    ret.coords = KEYWORDS[str];\n  }\n\n  if (ret.coords) {\n    env.color = ret;\n  }\n}); // Import all modules of Color.js\n\nexport default Color$1;\nexport { util };","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/src/color.js"],"names":["multiplyMatrices","A","B","m","length","Array","isArray","map","x","p","B_cols","_","i","product","row","col","reduce","a","c","isString","str","type","o","Object","prototype","toString","call","match","toLowerCase","extend","target","sources","source","descriptors","getOwnPropertyDescriptors","defineProperties","copyDescriptor","prop","descriptor","getOwnPropertyDescriptor","defineProperty","capitalize","toUpperCase","slice","toPrecision","n","precision","integerLength","Math","floor","toFixed","p10","round","parseCoord","coord","indexOf","spaceId","coordName","split","space","Color","coords","ReferenceError","name","value","obj","props","lastProp","pop","reduceRight","acc","cur","undefined","util","freeze","__proto__","Hooks","add","callback","first","arguments","forEach","run","env","context","ε","hasDOM","document","Color$1","constructor","args","color","root","nodeType","documentElement","getComputedStyle","getPropertyValue","parse","alpha","NaN","spaces","_spaceId","id","newSpace","instance","hasOwnProperty","white","whites","D50","set","value$1","object","current","lighten","amount","ret","lightness","darken","distance","get","coords1","coords2","sqrt","isNaN","deltaE","method","defaults","rest","deltaE76","luminance","xyz","Y","contrast","L1","L2","uv","X","Z","denom","xy","sum","getCoords","inGamut","toGamut","bounds","values","options","epsilon","every","Number","min","max","gamutMapping","inPlace","to","clipped","mapSpace","mappedColor","low","high","clone","toJSON","format","commas","fallback","strAlpha","unshift","cssId","join","CSS","supports","String","fallbacks","fallbackSpaces","fallbackSpace","splice","equals","chromaticAdaptation","W1","W2","XYZ","hooks","M","D65","TypeError","parsed","parseFunction","test","head","previousColor","style","computed","percentage","shift","find","argCount","keys","rawArgs","fill","trim","isFunctionRegex","isNumberRegex","parts","arg","deg","rawName","convert","fromSpace","toSpace","fromId","toId","from","toXYZ","fromXYZ","type$1","defineSpace","inherits","except","parent","includes","properties","connectionSpace","Set","candidates","filter","has","assign","newCoords","coordNames","Proxy","property","Reflect","receiver","configurable","enumerable","defineShortcut","long","shortcuts","statify","names","getOwnPropertyNames","L","b","ε3","κ","f","cbrt","Lab","pow","range","isAngle","constrain","angle","adjust","arc","angles","a1","a2","angleDiff","chroma","hue","lab","abs","atan2","PI","LCH","Lightness","Chroma","Hue","cos","sin","red","green","blue","toLinear","RGB","val","sign","toGamma","toXYZ_M","fromXYZ_M","rgb","toHex","collapse","push","collapsible","hex","padStart","parseHex","replace","rgba","component","parseInt","srgb","saturation","r","g","h","s","l","d","hsl","k","whiteness","blackness","w","hsv","v","hwb","gray","Et2","Et","α","β","Xa","Ya","Za","Yw","AbsXYZ","cssid","Jz","az","bz","ninv","c1","c2","c3","pinv","d0","XYZtoCone_M","ConetoXYZ_M","ConetoIab_M","IabtoCone_M","absxyzd65","Xm","Ym","LMS","PQLMS","num","Iz","Jzazbz","jzazbz","jzczhz","rec2020","I","CT","CP","m1","m2","im1","im2","XYZtoLMS_M","Rec2020toLMS_M","LMStoIPT_M","IPTtoLMS_M","LMStoRec2020_M","LMStoXYZ_M","LMStoICtCp","ICtCp","ICtCptoLMS","XYZa","minv","LMStoLab_M","LabtoLMS_M","LMSg","OKLab","oklab","oklch","C","CATs","adapt","defineCAT","toCone_M","fromCone_M","ρs","γs","βs","ρd","γd","βd","scale","scaled_cone_M","adapt_M","D55","D75","E","F2","F7","F11","ACES","log2","methods","mix","outputSpace","steps","color1","color2","isRange","rangeArgs","colors","maxDeltaE","deltaEMethod","maxSteps","rangeOptions","totalDelta","actualSteps","ceil","step","maxDelta","prev","progression","premultiplied","interpolationSpace","start","end","interpolate","deltaECMC","sample","b1","C1","H1","b2","C2","ΔL","ΔC","Δa","Δb","π","d2r","H2","SL","SC","T","C4","F","SH","dE","deltaE2000","kL","kC","kH","Cbar","C7","Gfactor","G","adash1","adash2","Cdash1","Cdash2","r2d","h1","h2","hdiff","hsum","habs","Δh","console","log","ΔH","Ldash","Cdash","Cdash7","hdash","lsq","Δθ","exp","RC","RT","deltaEJz","Jz1","Cz1","Hz1","Jz2","Cz2","Hz2","ΔJ","deltaEITP","I1","T1","P1","ictcp","I2","T2","P2","deltaEOK","deltas","KEYWORDS","black"],"mappings":"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","sourcesContent":["// A is m x n. B is n x p. product is m x p.\r\nfunction multiplyMatrices(A, B) {\r\n\tlet m = A.length;\r\n\r\n\tif (!Array.isArray(A[0])) {\r\n\t\t// A is vector, convert to [[a, b, c, ...]]\r\n\t\tA = [A];\r\n\t}\r\n\r\n\tif (!Array.isArray(B[0])) {\r\n\t\t// B is vector, convert to [[a], [b], [c], ...]]\r\n\t\tB = B.map(x => [x]);\r\n\t}\r\n\r\n\tlet p = B[0].length;\r\n\tlet B_cols = B[0].map((_, i) => B.map(x => x[i])); // transpose B\r\n\tlet product = A.map(row => B_cols.map(col => {\r\n\t\tif (!Array.isArray(row)) {\r\n\t\t\treturn col.reduce((a, c) => a + c * row, 0);\r\n\t\t}\r\n\r\n\t\treturn row.reduce((a, c, i) => a + c * (col[i] || 0), 0);\r\n\t}));\r\n\r\n\tif (m === 1) {\r\n\t\tproduct = product[0]; // Avoid [[a, b, c, ...]]\r\n\t}\r\n\r\n\tif (p === 1) {\r\n\t\treturn product.map(x => x[0]); // Avoid [[a], [b], [c], ...]]\r\n\t}\r\n\r\n\treturn product;\r\n}\r\n\r\n/**\r\n * Check if a value is a string (including a String object)\r\n * @param {*} str - Value to check\r\n * @returns {boolean}\r\n */\r\nfunction isString (str) {\r\n\treturn type(str) === \"string\";\r\n}\r\n\r\n/**\r\n * Determine the internal JavaScript [[Class]] of an object.\r\n * @param {*} o - Value to check\r\n * @returns {string}\r\n */\r\nfunction type (o) {\r\n\tlet str = Object.prototype.toString.call(o);\r\n\r\n\treturn (str.match(/^\\[object\\s+(.*?)\\]$/)[1] || \"\").toLowerCase();\r\n}\r\n\r\n/**\r\n * Like Object.assign() but copies property descriptors (including symbols)\r\n * @param {Object} target - Object to copy to\r\n * @param {...Object} sources - Objects to copy from\r\n * @returns {Object} target\r\n */\r\nfunction extend (target, ...sources) {\r\n\tfor (let source of sources) {\r\n\t\tif (source) {\r\n\t\t\tlet descriptors = Object.getOwnPropertyDescriptors(source);\r\n\t\t\tObject.defineProperties(target, descriptors);\r\n\t\t}\r\n\t}\r\n\r\n\treturn target;\r\n}\r\n\r\n/**\r\n * Copy a descriptor from one object to another\r\n * @param {Object} target - Object to copy to\r\n * @param {Object} source - Object to copy from\r\n * @param {string} prop - Name of property\r\n */\r\nfunction copyDescriptor (target, source, prop) {\r\n\tlet descriptor = Object.getOwnPropertyDescriptor(source, prop);\r\n\tObject.defineProperty(target, prop, descriptor);\r\n}\r\n\r\n/**\r\n * Uppercase the first letter of a string\r\n * @param {string} str - String to capitalize\r\n * @returns Capitalized string\r\n */\r\nfunction capitalize(str) {\r\n\tif (!str) {\r\n\t\treturn str;\r\n\t}\r\n\r\n\treturn str[0].toUpperCase() + str.slice(1);\r\n}\r\n\r\n/**\r\n * Round a number to a certain number of significant digits based on a range\r\n * @param {number} n - The number to round\r\n * @param {number} precision - Number of significant digits\r\n */\r\nfunction toPrecision(n, precision) {\r\n\tprecision = +precision;\r\n\tlet integerLength = (Math.floor(n) + \"\").length;\r\n\r\n\tif (precision > integerLength) {\r\n\t\treturn +n.toFixed(precision - integerLength);\r\n\t}\r\n\telse {\r\n\t\tlet p10 = 10 ** (integerLength - precision);\r\n\t\treturn Math.round(n / p10) * p10;\r\n\t}\r\n}\r\n\r\nfunction parseCoord(coord) {\r\n\tif (coord.indexOf(\".\") > 0) {\r\n\t\t// Reduce a coordinate of a certain color space until the color is in gamut\r\n\t\tlet [spaceId, coordName] = coord.split(\".\");\r\n\t\tlet space = Color.space(spaceId);\r\n\r\n\t\tif (!(coordName in space.coords)) {\r\n\t\t\tthrow new ReferenceError(`Color space \"${space.name}\" has no \"${coordName}\" coordinate.`);\r\n\t\t}\r\n\r\n\t\treturn [space, coordName];\r\n\t}\r\n}\r\n\r\nfunction value(obj, prop, value) {\r\n\tlet props = prop.split(\".\");\r\n\tlet lastProp = props.pop();\r\n\r\n\tobj = props.reduceRight((acc, cur) => {\r\n\t\treturn acc && acc[cur];\r\n\t}, obj);\r\n\r\n\tif (obj) {\r\n\t\tif (value === undefined) {\r\n\t\t\t// Get\r\n\t\t\treturn obj[lastProp];\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Set\r\n\t\t\treturn obj[lastProp] = value;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvar util = /*#__PURE__*/Object.freeze({\r\n\t__proto__: null,\r\n\tisString: isString,\r\n\ttype: type,\r\n\textend: extend,\r\n\tcopyDescriptor: copyDescriptor,\r\n\tcapitalize: capitalize,\r\n\ttoPrecision: toPrecision,\r\n\tparseCoord: parseCoord,\r\n\tvalue: value,\r\n\tmultiplyMatrices: multiplyMatrices\r\n});\r\n\r\n/**\r\n * Module version of Bliss.Hooks.\r\n * @author Lea Verou\r\n */\r\nclass Hooks {\r\n\tadd (name, callback, first) {\r\n\t\tif (typeof arguments[0] != \"string\") {\r\n\t\t\t// Multiple hooks\r\n\t\t\tfor (var name in arguments[0]) {\r\n\t\t\t\tthis.add(name, arguments[0][name], arguments[1]);\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t(Array.isArray(name)? name : [name]).forEach(function(name) {\r\n\t\t\tthis[name] = this[name] || [];\r\n\r\n\t\t\tif (callback) {\r\n\t\t\t\tthis[name][first? \"unshift\" : \"push\"](callback);\r\n\t\t\t}\r\n\t\t}, this);\r\n\t}\r\n\r\n\trun (name, env) {\r\n\t\tthis[name] = this[name] || [];\r\n\t\tthis[name].forEach(function(callback) {\r\n\t\t\tcallback.call(env && env.context? env.context : env, env);\r\n\t\t});\r\n\t}\r\n}\r\n\r\nconst ε = .000075;\r\nconst hasDOM = typeof document !== \"undefined\";\r\n\r\nclass Color$1 {\r\n\t// Signatures:\r\n\t// new Color(stringToParse)\r\n\t// new Color(otherColor)\r\n\t// new Color(coords, alpha) // defaults to sRGB\r\n\t// new Color(CSS variable [, root])\r\n\tconstructor (...args) {\r\n\t\tlet str, color;\r\n\r\n\t\t// new Color(color)\r\n\t\t// new Color({spaceId, coords})\r\n\t\t// new Color({space, coords})\r\n\t\tif (args[0] && typeof args[0] === \"object\" && (args[0].space || args[0].spaceId) && args[0].coords) {\r\n\t\t\tcolor = args[0];\r\n\t\t}\r\n\t\telse if (isString(args[0])) {\r\n\t\t\t// new Color(\"--foo\" [, root])\r\n\t\t\tif (hasDOM && args[0].indexOf(\"--\") === 0) {\r\n\t\t\t\t// CSS variable\r\n\t\t\t\tlet root = arguments[1] && arguments[1].nodeType === 1? arguments[1] : document.documentElement;\r\n\t\t\t\tstr = getComputedStyle(root).getPropertyValue(arguments[0]);\r\n\t\t\t}\r\n\t\t\t // new Color(string)\r\n\t\t\telse if (args.length === 1) {\r\n\t\t\t\tstr = args[0];\r\n\t\t\t}\r\n\r\n\t\t\tif (str) {\r\n\t\t\t\tcolor = Color$1.parse(str);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (color) {\r\n\t\t\tif (\"spaceId\" in color) {\r\n\t\t\t\tthis.spaceId = color.spaceId;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.space = color.space;\r\n\t\t\t}\r\n\r\n\t\t\tthis.coords = color.coords.slice();\r\n\t\t\tthis.alpha = color.alpha;\r\n\t\t}\r\n\t\telse { // default signature new Color([ColorSpace,] array [, alpha])\r\n\t\t\tlet spaceId, coords, alpha;\r\n\r\n\t\t\tif (Array.isArray(args[0])) {\r\n\t\t\t\t// No color space provided, default to sRGB\r\n\t\t\t\t[spaceId, coords, alpha] = [\"sRGB\", ...args];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t[spaceId, coords, alpha] = args;\r\n\t\t\t}\r\n\r\n\t\t\tthis.spaceId = spaceId || \"sRGB\";\r\n\t\t\tthis.coords = coords? coords.slice() : [0, 0, 0];\r\n\t\t\tthis.alpha = alpha;\r\n\t\t}\r\n\r\n\t\tthis.alpha = this.alpha < 1? this.alpha : 1; // this also deals with NaN etc\r\n\r\n\t\t// Convert \"NaN\" to NaN\r\n\t\tfor (let i = 0; i < this.coords.length; i++) {\r\n\t\t\tif (this.coords[i] === \"NaN\") {\r\n\t\t\t\tthis.coords[i] = NaN;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tget space () {\r\n\t\treturn Color$1.spaces[this.spaceId];\r\n\t}\r\n\r\n\tset space (value) {\r\n\t\t// Setting spaceId works with color space objects too\r\n\t\treturn this.spaceId = value;\r\n\t}\r\n\r\n\tget spaceId () {\r\n\t\treturn this._spaceId;\r\n\t}\r\n\r\n\t// Handle dynamic changes of color space\r\n\tset spaceId (id) {\r\n\t\tlet newSpace = Color$1.space(id);\r\n\r\n\t\tid = newSpace.id;\r\n\r\n\t\tif (this.space && newSpace && this.space !== newSpace) {\r\n\t\t\t// We’re not setting this for the first time, need to:\r\n\t\t\t// a) Convert coords\r\n\t\t\tthis.coords = this[id];\r\n\r\n\t\t\t// b) Remove instance properties from previous color space\r\n\t\t\tfor (let prop in this.space.instance) {\r\n\t\t\t\tif (this.hasOwnProperty(prop)) {\r\n\t\t\t\t\tdelete this[prop];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._spaceId = id;\r\n\r\n\t\t// Add new instance properties from new color space\r\n\t\textend(this, this.space.instance);\r\n\t}\r\n\r\n\tget white () {\r\n\t\treturn this.space.white || Color$1.whites.D50;\r\n\t}\r\n\r\n\t// Set properties and return current instance\r\n\tset (prop, value$1) {\r\n\t\tif (arguments.length === 1 && type(arguments[0]) === \"object\") {\r\n\t\t\t// Argument is an object literal\r\n\t\t\tlet object = arguments[0];\r\n\t\t\tfor (let p in object) {\r\n\t\t\t\tthis.set(p, object[p]);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (typeof value$1 === \"function\") {\r\n\t\t\t\tlet current = value(this, prop);\r\n\r\n\t\t\t\tvalue(this, prop, value$1.call(this, current));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue(this, prop, value$1);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tlighten (amount = .25) {\r\n\t\tlet ret = new Color$1(this);\r\n\t\tlet lightness = ret.lightness;\r\n\t\tret.lightness = lightness * (1 + amount);\r\n\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tdarken (amount = .25) {\r\n\t\tlet ret = new Color$1(this);\r\n\t\tlet lightness = ret.lightness;\r\n\t\tret.lightness = lightness * (1 - amount);\r\n\r\n\t\treturn ret;\r\n\t}\r\n\r\n\t// Euclidean distance of colors in an arbitrary color space\r\n\tdistance (color, space = \"lab\") {\r\n\t\tcolor = Color$1.get(color);\r\n\t\tspace = Color$1.space(space);\r\n\r\n\t\tlet coords1 = this[space.id];\r\n\t\tlet coords2 = color[space.id];\r\n\r\n\t\treturn Math.sqrt(coords1.reduce((a, c, i) => {\r\n\t\t\tif (isNaN(c) || isNaN(coords2[i])) {\r\n\t\t\t\treturn a;\r\n\t\t\t}\r\n\r\n\t\t\treturn a + (coords2[i] - c) ** 2;\r\n\t\t}, 0));\r\n\t}\r\n\r\n\tdeltaE (color, o = {}) {\r\n\t\tif (isString(o)) {\r\n\t\t\to = {method: o};\r\n\t\t}\r\n\r\n\t\tlet {method = Color$1.defaults.deltaE, ...rest} = o;\r\n\t\tcolor = Color$1.get(color);\r\n\r\n\t\tif (this[\"deltaE\" + method]) {\r\n\t\t\treturn this[\"deltaE\" + method](color, rest);\r\n\t\t}\r\n\r\n\t\treturn this.deltaE76(color);\r\n\t}\r\n\r\n\t// 1976 DeltaE. 2.3 is the JND\r\n\tdeltaE76 (color) {\r\n\t\treturn this.distance(color, \"lab\");\r\n\t}\r\n\r\n\t// Relative luminance\r\n\tget luminance () {\r\n\t\treturn this.xyz.Y;\r\n\t}\r\n\r\n\tset luminance (value) {\r\n\t\tthis.xyz.Y = value;\r\n\t}\r\n\r\n\t// WCAG 2.0 contrast https://www.w3.org/TR/WCAG20-TECHS/G18.html\r\n\tcontrast (color) {\r\n\t\tcolor = Color$1.get(color);\r\n\t\tlet L1 = this.luminance;\r\n\t\tlet L2 = color.luminance;\r\n\r\n\t\tif (L2 > L1) {\r\n\t\t\t[L1, L2] = [L2, L1];\r\n\t\t}\r\n\r\n\t\treturn (L1 + .05) / (L2 + .05);\r\n\t}\r\n\r\n\t// Chromaticity coordinates\r\n\tget uv () {\r\n\t\tlet [X, Y, Z] = this.xyz;\r\n\t\tlet denom = X + 15 * Y + 3 * Z;\r\n\t\treturn [4 * X / denom, 9 * Y / denom];\r\n\t}\r\n\r\n\tget xy () {\r\n\t\tlet [X, Y, Z] = this.xyz;\r\n\t\tlet  sum = X + Y + Z;\r\n\t\treturn [X / sum, Y / sum];\r\n\t}\r\n\t// no setters, as lightness information is lost\r\n\t// when converting color to chromaticity\r\n\r\n\t// Get formatted coords\r\n\tgetCoords ({inGamut, precision = Color$1.defaults.precision} = {}) {\r\n\t\tlet coords = this.coords;\r\n\r\n\t\tif (inGamut && !this.inGamut()) {\r\n\t\t\tcoords = this.toGamut(inGamut === true? undefined : inGamut).coords;\r\n\t\t}\r\n\r\n\t\tif (precision !== undefined && precision !== null) {\r\n\t\t\tlet bounds = this.space.coords? Object.values(this.space.coords) : [];\r\n\r\n\t\t\tcoords = coords.map((n, i) => toPrecision(n, precision, bounds[i]));\r\n\t\t}\r\n\r\n\t\treturn coords;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Boolean} Is the color in gamut?\r\n\t */\r\n\tinGamut (space = this.space, options) {\r\n\t\tspace = Color$1.space(space);\r\n\t\treturn Color$1.inGamut(space, this[space.id], options);\r\n\t}\r\n\r\n\tstatic inGamut (space, coords, {epsilon = ε} = {}) {\r\n\t\tspace = Color$1.space(space);\r\n\r\n\t\tif (space.inGamut) {\r\n\t\t\treturn space.inGamut(coords, epsilon);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (!space.coords) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// No color-space specific inGamut() function, just check if coords are within reference range\r\n\t\t\tlet bounds = Object.values(space.coords);\r\n\r\n\t\t\treturn coords.every((c, i) => {\r\n\t\t\t\tif (Number.isNaN(c)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet [min, max] = bounds[i];\r\n\r\n\t\t\t\treturn (min === undefined || c >= min - epsilon)\r\n\t\t\t\t    && (max === undefined || c <= max + epsilon);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Force coordinates in gamut of a certain color space and return the result\r\n\t * @param {Object} options\r\n\t * @param {string} options.method - How to force into gamut.\r\n\t *        If \"clip\", coordinates are just clipped to their reference range.\r\n\t *        If in the form [colorSpaceId].[coordName], that coordinate is reduced\r\n\t *        until the color is in gamut. Please note that this may produce nonsensical\r\n\t *        results for certain coordinates (e.g. hue) or infinite loops if reducing the coordinate never brings the color in gamut.\r\n\t * @param {ColorSpace|string} options.space - The space whose gamut we want to map to\r\n\t * @param {boolean} options.inPlace - If true, modify the current color, otherwise return a new one.\r\n\t */\r\n\ttoGamut ({method = Color$1.defaults.gamutMapping, space = this.space, inPlace} = {}) {\r\n\t\tif (isString(arguments[0])) {\r\n\t\t\tspace = arguments[0];\r\n\t\t}\r\n\r\n\t\tspace = Color$1.space(space);\r\n\r\n\t\tif (this.inGamut(space, {epsilon: 0})) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t// 3 spaces:\r\n\t\t// this.space: current color space\r\n\t\t// space: space whose gamut we are mapping to\r\n\t\t// mapSpace: space with the coord we're reducing\r\n\t\tlet color = this.to(space);\r\n\r\n\t\tif (method.indexOf(\".\") > 0 && !this.inGamut(space)) {\r\n\t\t\tlet clipped = color.toGamut({method: \"clip\", space});\r\n\t\t\tif (this.deltaE(clipped, {method: \"2000\"}) > 2) {\r\n\t\t\t\t// Reduce a coordinate of a certain color space until the color is in gamut\r\n\t\t\t\tlet [mapSpace, coordName] = parseCoord(method);\r\n\r\n\t\t\t\tlet mappedColor = color.to(mapSpace);\r\n\t\t\t\tlet bounds = mapSpace.coords[coordName];\r\n\t\t\t\tlet min = bounds[0];\r\n\t\t\t\tlet ε = .01; // for deltaE\r\n\t\t\t\tlet low = min;\r\n\t\t\t\tlet high = mappedColor[coordName];\r\n\t\t\t\twhile (high - low > ε) {\r\n\t\t\t\t\tlet clipped = mappedColor.toGamut({space, method: \"clip\"});\r\n\t\t\t\t\tlet deltaE = mappedColor.deltaE(clipped, {method: \"2000\"});\r\n\t\t\t\t\tif (deltaE - 2 < ε) {\r\n\t\t\t\t\t\tlow = mappedColor[coordName];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\thigh = mappedColor[coordName];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmappedColor[coordName] = (high + low) / 2;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcolor = mappedColor.to(space);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolor = clipped;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (method === \"clip\" // Dumb coord clipping\r\n\t\t    // finish off smarter gamut mapping with clip to get rid of ε, see #17\r\n\t\t    || !color.inGamut(space, {epsilon: 0})\r\n\t\t) {\r\n\t\t\tlet bounds = Object.values(space.coords);\r\n\r\n\t\t\tcolor.coords = color.coords.map((c, i) => {\r\n\t\t\t\tlet [min, max] = bounds[i];\r\n\r\n\t\t\t\tif (min !== undefined) {\r\n\t\t\t\t\tc = Math.max(min, c);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (max !== undefined) {\r\n\t\t\t\t\tc = Math.min(c, max);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn c;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (space.id !== this.spaceId) {\r\n\t\t\tcolor = color.to(this.space);\r\n\t\t}\r\n\r\n\t\tif (inPlace) {\r\n\t\t\tthis.coords = color.coords;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn color;\r\n\t\t}\r\n\t}\r\n\r\n\tclone () {\r\n\t\treturn new Color$1(this.spaceId, this.coords, this.alpha);\r\n\t}\r\n\r\n\t/**\r\n\t * Convert to color space and return a new color\r\n\t * @param {Object|string} space - Color space object or id\r\n\t * @param {Object} options\r\n\t * @param {boolean} options.inGamut - Whether to force resulting color in gamut\r\n\t * @returns {Color}\r\n\t */\r\n\tto (space, {inGamut} = {}) {\r\n\t\tspace = Color$1.space(space);\r\n\t\tlet id = space.id;\r\n\r\n\t\tlet color = new Color$1(id, this[id], this.alpha);\r\n\r\n\t\tif (inGamut) {\r\n\t\t\tcolor.toGamut({inPlace: true});\r\n\t\t}\r\n\r\n\t\treturn color;\r\n\t}\r\n\r\n\ttoJSON () {\r\n\t\treturn {\r\n\t\t\tspaceId: this.spaceId,\r\n\t\t\tcoords: this.coords,\r\n\t\t\talpha: this.alpha\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Generic toString() method, outputs a color(spaceId ...coords) function\r\n\t * @param {Object} options\r\n\t * @param {number} options.precision - Significant digits\r\n\t * @param {boolean} options.commas - Whether to use commas to separate arguments or spaces (and a slash for alpha) [default: false]\r\n\t * @param {Function|String|Array} options.format - If function, maps all coordinates. Keywords tap to colorspace-specific formats (e.g. \"hex\")\r\n\t * @param {boolean} options.inGamut - Adjust coordinates to fit in gamut first? [default: false]\r\n\t * @param {string} options.name - Function name [default: color]\r\n\t */\r\n\ttoString ({\r\n\t\tprecision = Color$1.defaults.precision,\r\n\t\tformat, commas, inGamut,\r\n\t\tname = \"color\",\r\n\t\tfallback\r\n\t} = {}) {\r\n\t\tlet strAlpha = this.alpha < 1? ` ${commas? \",\" : \"/\"} ${this.alpha}` : \"\";\r\n\r\n\t\tlet coords = this.getCoords({inGamut, precision});\r\n\r\n\t\t// Convert NaN to zeros to have a chance at a valid CSS color\r\n\t\t// Also convert -0 to 0\r\n\t\tcoords = coords.map(c => c? c : 0);\r\n\r\n\t\tif (isString(format)) {\r\n\t\t\tif (format === \"%\") {\r\n\t\t\t\tformat = c => {\r\n\t\t\t\t\tc *= 100;\r\n\t\t\t\t\treturn toPrecision(c, precision) + \"%\";\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (typeof format === \"function\") {\r\n\t\t\tcoords = coords.map(format);\r\n\t\t}\r\n\r\n\t\tlet args = [...coords];\r\n\r\n\t\tif (name === \"color\") {\r\n\t\t\t// If output is a color() function, add colorspace id as first argument\r\n\t\t\targs.unshift(this.space? this.space.cssId || this.space.id : \"XYZ\");\r\n\t\t}\r\n\r\n\t\tlet ret = `${name}(${args.join(commas? \", \" : \" \")}${strAlpha})`;\r\n\r\n\t\tif (fallback) {\r\n\t\t\t// Return a CSS string that's actually supported by the current browser\r\n\t\t\t// Return as a String object, so we can also hang the color object on it\r\n\t\t\t// in case it's different than this. That way third party code can use that\r\n\t\t\t// for e.g. computing text color, indicating out of gamut etc\r\n\r\n\t\t\tif (!hasDOM || typeof CSS === \"undefined\" || CSS.supports(\"color\", ret)) {\r\n\t\t\t\tret = new String(ret);\r\n\t\t\t\tret.color = this;\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\r\n\t\t\tlet fallbacks = Array.isArray(fallback)? fallback.slice() : Color$1.defaults.fallbackSpaces;\r\n\r\n\t\t\tfor (let i = 0, fallbackSpace; fallbackSpace = fallbacks[i]; i++) {\r\n\t\t\t\tif (Color$1.spaces[fallbackSpace]) {\r\n\t\t\t\t\tlet color = this.to(fallbackSpace);\r\n\t\t\t\t\tret = color.toString({precision});\r\n\r\n\t\t\t\t\tif (CSS.supports(\"color\", ret)) {\r\n\t\t\t\t\t\tret = new String(ret);\r\n\t\t\t\t\t\tret.color = color;\r\n\t\t\t\t\t\treturn ret;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (fallbacks === Color$1.defaults.fallbackSpaces) {\r\n\t\t\t\t\t\t// Drop this space from the default fallbacks since it's not supported\r\n\t\t\t\t\t\tfallbacks.splice(i, 1);\r\n\t\t\t\t\t\ti--;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// None of the fallbacks worked, return in the most conservative form possible\r\n\t\t\tlet color = this.to(\"srgb\");\r\n\t\t\tret = new String(color.toString({commas: true}));\r\n\t\t\tret.color = color;\r\n\t\t}\r\n\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tequals (color) {\r\n\t\tcolor = Color$1.get(color);\r\n\t\treturn this.spaceId === color.spaceId\r\n\t\t       && this.alpha === color.alpha\r\n\t\t       && this.coords.every((c, i) => c === color.coords[i]);\r\n\t}\r\n\r\n\t// Adapt XYZ from white point W1 to W2\r\n\tstatic chromaticAdaptation (W1, W2, XYZ, options = {}) {\r\n\t\tW1 = W1 || Color$1.whites.D50;\r\n\t\tW2 = W2 || Color$1.whites.D50;\r\n\r\n\t\tif (W1 === W2) {\r\n\t\t\treturn XYZ;\r\n\t\t}\r\n\r\n\t\tlet env = {W1, W2, XYZ, options};\r\n\r\n\t\tColor$1.hooks.run(\"chromatic-adaptation-start\", env);\r\n\r\n\t\tif (!env.M) {\r\n\t\t\tif (env.W1 === Color$1.whites.D65 && env.W2 === Color$1.whites.D50) {\r\n\t\t\t\t// Linear Bradford CAT\r\n\t\t\t\t// env.M = [\r\n\t\t\t\t// \t[ 1.0478112,  0.0228866, -0.0501270],\r\n\t\t\t\t// \t[ 0.0295424,  0.9904844, -0.0170491],\r\n\t\t\t\t// \t[-0.0092345,  0.0150436,  0.7521316]\r\n\t\t\t\t// ];\r\n\r\n\t\t\t\tenv.M = [\r\n\t\t\t\t\t[  1.0479298208405488,    0.022946793341019088,  -0.05019222954313557 ],\r\n\t\t\t\t\t[  0.029627815688159344,  0.990434484573249,     -0.01707382502938514 ],\r\n\t\t\t\t\t[ -0.009243058152591178,  0.015055144896577895,   0.7518742899580008  ]\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\t\telse if (env.W1 === Color$1.whites.D50 && env.W2 === Color$1.whites.D65) {\r\n\t\t\t\t// env.M = [\r\n\t\t\t\t// \t[ 0.9555766, -0.0230393,  0.0631636],\r\n\t\t\t\t// \t[-0.0282895,  1.0099416,  0.0210077],\r\n\t\t\t\t// \t[ 0.0122982, -0.0204830,  1.3299098]\r\n\t\t\t\t// ];\r\n\r\n\t\t\t\tenv.M = [\r\n\t\t\t\t\t[  0.9554734527042182,   -0.023098536874261423,  0.0632593086610217   ],\r\n\t\t\t\t\t[ -0.028369706963208136,  1.0099954580058226,    0.021041398966943008 ],\r\n\t\t\t\t\t[  0.012314001688319899, -0.020507696433477912,  1.3303659366080753   ]\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tColor$1.hooks.run(\"chromatic-adaptation-end\", env);\r\n\r\n\t\tif (env.M) {\r\n\t\t\treturn multiplyMatrices(env.M, env.XYZ);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthrow new TypeError(\"Only Bradford CAT with white points D50 and D65 supported for now.\");\r\n\t\t}\r\n\t}\r\n\r\n\t// CSS color to Color object\r\n\tstatic parse (str) {\r\n\t\tlet env = {str};\r\n\t\tColor$1.hooks.run(\"parse-start\", env);\r\n\r\n\t\tif (env.color) {\r\n\t\t\treturn env.color;\r\n\t\t}\r\n\r\n\t\tenv.parsed = Color$1.parseFunction(env.str);\r\n\t\tColor$1.hooks.run(\"parse-function-start\", env);\r\n\r\n\t\tif (env.color) {\r\n\t\t\treturn env.color;\r\n\t\t}\r\n\r\n\t\t// Try colorspace-specific parsing\r\n\t\tfor (let space of Object.values(Color$1.spaces)) {\r\n\t\t\tif (space.parse) {\r\n\t\t\t\tlet color = space.parse(env.str, env.parsed);\r\n\r\n\t\t\t\tif (color) {\r\n\t\t\t\t\treturn color;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet name = env.parsed && env.parsed.name;\r\n\r\n\t\tif (!/^color|^rgb/.test(name) && hasDOM && document.head) {\r\n\t\t\t// Use browser to parse when a DOM is available\r\n\t\t\t// we mainly use this for color names right now if keywords.js is not included\r\n\t\t\t// and for future-proofing\r\n\r\n\t\t\tlet previousColor = document.head.style.color;\r\n\t\t\tdocument.head.style.color = \"\";\r\n\t\t\tdocument.head.style.color = str;\r\n\r\n\t\t\tif (document.head.style.color !== previousColor) {\r\n\t\t\t\tlet computed = getComputedStyle(document.head).color;\r\n\t\t\t\tdocument.head.style.color = previousColor;\r\n\r\n\t\t\t\tif (computed) {\r\n\t\t\t\t\tstr = computed;\r\n\t\t\t\t\tenv.parsed = Color$1.parseFunction(computed);\r\n\t\t\t\t\tname = env.parsed.name;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (env.parsed) {\r\n\t\t\t// It's a function\r\n\t\t\tif (name === \"rgb\" || name === \"rgba\") {\r\n\t\t\t\tlet args = env.parsed.args.map((c, i) => i < 3 && !c.percentage? c / 255 : +c);\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tspaceId: \"srgb\",\r\n\t\t\t\t\tcoords: args.slice(0, 3),\r\n\t\t\t\t\talpha: args[3]\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse if (name === \"color\") {\r\n\t\t\t\tlet spaceId = env.parsed.args.shift().toLowerCase();\r\n\t\t\t\tlet space = Object.values(Color$1.spaces).find(space => (space.cssId || space.id) === spaceId);\r\n\r\n\t\t\t\tif (space) {\r\n\t\t\t\t\t// From https://drafts.csswg.org/css-color-4/#color-function\r\n\t\t\t\t\t// If more <number>s or <percentage>s are provided than parameters that the colorspace takes, the excess <number>s at the end are ignored.\r\n\t\t\t\t\t// If less <number>s or <percentage>s are provided than parameters that the colorspace takes, the missing parameters default to 0. (This is particularly convenient for multichannel printers where the additional inks are spot colors or varnishes that most colors on the page won’t use.)\r\n\t\t\t\t\tlet argCount = Object.keys(space.coords).length;\r\n\t\t\t\t\tlet alpha = env.parsed.rawArgs.indexOf(\"/\") > 0? env.parsed.args.pop() : 1;\r\n\t\t\t\t\tlet coords = Array(argCount).fill(0);\r\n\t\t\t\t\tcoords.forEach((_, i) => coords[i] = env.parsed.args[i] || 0);\r\n\r\n\t\t\t\t\treturn {spaceId: space.id, coords, alpha};\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthrow new TypeError(`Color space ${spaceId} not found. Missing a plugin?`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthrow new TypeError(`Could not parse ${str} as a color. Missing a plugin?`);\r\n\t}\r\n\r\n\t/**\r\n\t * Parse a CSS function, regardless of its name and arguments\r\n\t * @param String str String to parse\r\n\t * @return Object An object with {name, args, rawArgs}\r\n\t */\r\n\tstatic parseFunction (str) {\r\n\t\tif (!str) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tstr = str.trim();\r\n\r\n\t\tconst isFunctionRegex = /^([a-z]+)\\((.+?)\\)$/i;\r\n\t\tconst isNumberRegex = /^-?[\\d.]+$/;\r\n\t\tlet parts = str.match(isFunctionRegex);\r\n\r\n\t\tif (parts) {\r\n\t\t\t// It is a function, parse args\r\n\t\t\tlet args = parts[2].match(/([-\\w.]+(?:%|deg)?)/g);\r\n\r\n\t\t\targs = args.map(arg => {\r\n\t\t\t\tif (/%$/.test(arg)) {\r\n\t\t\t\t\t// Convert percentages to 0-1 numbers\r\n\t\t\t\t\tlet n = new Number(+arg.slice(0, -1) / 100);\r\n\t\t\t\t\tn.percentage = true;\r\n\t\t\t\t\treturn n;\r\n\t\t\t\t}\r\n\t\t\t\telse if (/deg$/.test(arg)) {\r\n\t\t\t\t\t// Drop deg from degrees and convert to number\r\n\t\t\t\t\tlet n = new Number(+arg.slice(0, -3));\r\n\t\t\t\t\tn.deg = true;\r\n\t\t\t\t\treturn n;\r\n\t\t\t\t}\r\n\t\t\t\telse if (isNumberRegex.test(arg)) {\r\n\t\t\t\t\t// Convert numerical args to numbers\r\n\t\t\t\t\treturn +arg;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Return everything else as-is\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\r\n\t\t\treturn {\r\n\t\t\t\tname: parts[1].toLowerCase(),\r\n\t\t\t\trawName: parts[1],\r\n\t\t\t\trawArgs: parts[2],\r\n\t\t\t\t// An argument could be (as of css-color-4):\r\n\t\t\t\t// a number, percentage, degrees (hue), ident (in color())\r\n\t\t\t\targs\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t// One-off convert between color spaces\r\n\tstatic convert (coords, fromSpace, toSpace) {\r\n\t\tfromSpace = Color$1.space(fromSpace);\r\n\t\ttoSpace = Color$1.space(toSpace);\r\n\r\n\t\tif (fromSpace === toSpace) {\r\n\t\t\t// Same space, no change needed\r\n\t\t\treturn coords;\r\n\t\t}\r\n\r\n\t\t// Convert NaN to 0, which seems to be valid in every coordinate of every color space\r\n\t\tcoords = coords.map(c => Number.isNaN(c)? 0 : c);\r\n\r\n\t\tlet fromId = fromSpace.id;\r\n\t\tlet toId = toSpace.id;\r\n\r\n\t\t// Do we have a more specific conversion function?\r\n\t\t// Avoids round-tripping to & from XYZ\r\n\t\tif (toSpace.from && toSpace.from[fromId]) {\r\n\t\t\t// No white point adaptation, we assume the custom function takes care of it\r\n\t\t\treturn toSpace.from[fromId](coords);\r\n\t\t}\r\n\r\n\t\tif (fromSpace.to && fromSpace.to[toId]) {\r\n\t\t\t// No white point adaptation, we assume the custom function takes care of it\r\n\t\t\treturn fromSpace.to[toId](coords);\r\n\t\t}\r\n\r\n\t\tlet XYZ = fromSpace.toXYZ(coords);\r\n\r\n\t\tif (toSpace.white !== fromSpace.white) {\r\n\t\t\t// Different white point, perform white point adaptation\r\n\t\t\tXYZ = Color$1.chromaticAdaptation(fromSpace.white, toSpace.white, XYZ);\r\n\t\t}\r\n\r\n\t\treturn toSpace.fromXYZ(XYZ);\r\n\t}\r\n\r\n\t/**\r\n\t * Get a color from the argument passed\r\n\t * Basically gets us the same result as new Color(color) but doesn't clone an existing color object\r\n\t */\r\n\tstatic get (color, ...args) {\r\n\t\tif (color instanceof Color$1) {\r\n\t\t\treturn color;\r\n\t\t}\r\n\r\n\t\treturn new Color$1(color, ...args);\r\n\t}\r\n\r\n\t/**\r\n\t * Return a color space object from an id or color space object\r\n\t * Mainly used internally, so that functions can easily accept either\r\n\t */\r\n\tstatic space (space) {\r\n\t\tlet type$1 = type(space);\r\n\r\n\t\tif (type$1 === \"string\") {\r\n\t\t\t// It's a color space id\r\n\t\t\tlet ret = Color$1.spaces[space.toLowerCase()];\r\n\r\n\t\t\tif (!ret) {\r\n\t\t\t\tthrow new TypeError(`No color space found with id = \"${space}\"`);\r\n\t\t\t}\r\n\r\n\t\t\treturn ret;\r\n\t\t}\r\n\t\telse if (space && type$1 === \"object\") {\r\n\t\t\treturn space;\r\n\t\t}\r\n\r\n\t\tthrow new TypeError(`${space} is not a valid color space`);\r\n\t}\r\n\r\n\t// Define a new color space\r\n\tstatic defineSpace ({id, inherits}) {\r\n\t\tlet space = Color$1.spaces[id] = arguments[0];\r\n\r\n\t\tif (inherits) {\r\n\t\t\tconst except = [\"id\", \"parse\", \"instance\", \"properties\"];\r\n\t\t\tlet parent = Color$1.spaces[inherits];\r\n\r\n\t\t\tfor (let prop in parent) {\r\n\t\t\t\tif (!except.includes(prop) && !(prop in space)) {\r\n\t\t\t\t\tcopyDescriptor(space, parent, prop);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet coords = space.coords;\r\n\r\n\t\tif (space.properties) {\r\n\t\t\textend(Color$1.prototype, space.properties);\r\n\t\t}\r\n\r\n\t\tif (!space.fromXYZ && !space.toXYZ) {\r\n\t\t\t// Using a different connection space, define from/to XYZ functions based on that\r\n\t\t\tlet connectionSpace;\r\n\r\n\t\t\t// What are we using as a connection space?\r\n\t\t\tif (space.from && space.to) {\r\n\t\t\t\tlet from = new Set(Object.keys(space.from));\r\n\t\t\t\tlet to = new Set(Object.keys(space.to));\r\n\r\n\t\t\t\t// Find spaces we can both convert to and from\r\n\t\t\t\tlet candidates = [...from].filter(id => {\r\n\t\t\t\t\tif (to.has(id)) {\r\n\t\t\t\t\t\t// Of those, only keep those that have fromXYZ and toXYZ\r\n\t\t\t\t\t\tlet space = Color$1.spaces[id];\r\n\t\t\t\t\t\treturn space && space.fromXYZ && space.toXYZ;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (candidates.length > 0) {\r\n\t\t\t\t\t// Great, we found connection spaces! Pick the first one\r\n\t\t\t\t\tconnectionSpace = Color$1.spaces[candidates[0]];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (connectionSpace) {\r\n\t\t\t\t// Define from/to XYZ functions based on the connection space\r\n\t\t\t\tObject.assign(space, {\r\n\t\t\t\t\t// ISSUE do we need white point adaptation here?\r\n\t\t\t\t\tfromXYZ(XYZ) {\r\n\t\t\t\t\t\tlet newCoords = connectionSpace.fromXYZ(XYZ);\r\n\t\t\t\t\t\treturn this.from[connectionSpace.id](newCoords);\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttoXYZ(coords) {\r\n\t\t\t\t\t\tlet newCoords = this.to[connectionSpace.id](coords);\r\n\t\t\t\t\t\treturn connectionSpace.toXYZ(newCoords);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthrow new ReferenceError(`No connection space found for ${space.name}.`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet coordNames = Object.keys(coords);\r\n\r\n\t\t// Define getters and setters for color[spaceId]\r\n\t\t// e.g. color.lch on *any* color gives us the lch coords\r\n\t\tObject.defineProperty(Color$1.prototype, id, {\r\n\t\t\t// Convert coords to coords in another colorspace and return them\r\n\t\t\t// Source colorspace: this.spaceId\r\n\t\t\t// Target colorspace: id\r\n\t\t\tget () {\r\n\t\t\t\tlet ret = Color$1.convert(this.coords, this.spaceId, id);\r\n\r\n\t\t\t\tif (typeof Proxy === \"undefined\") {\r\n\t\t\t\t\t// If proxies are not supported, just return a static array\r\n\t\t\t\t\treturn ret;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Enable color.spaceId.coordName syntax\r\n\t\t\t\treturn new Proxy(ret, {\r\n\t\t\t\t\thas: (obj, property) => {\r\n\t\t\t\t\t\treturn coordNames.includes(property) || Reflect.has(obj, property);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tget: (obj, property, receiver) => {\r\n\t\t\t\t\t\tlet i = coordNames.indexOf(property);\r\n\r\n\t\t\t\t\t\tif (i > -1) {\r\n\t\t\t\t\t\t\treturn obj[i];\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn Reflect.get(obj, property, receiver);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tset: (obj, property, value, receiver) => {\r\n\t\t\t\t\t\tlet i = coordNames.indexOf(property);\r\n\r\n\t\t\t\t\t\tif (property > -1) { // Is property a numerical index?\r\n\t\t\t\t\t\t\ti = property; // next if will take care of modifying the color\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (i > -1) {\r\n\t\t\t\t\t\t\tobj[i] = value;\r\n\r\n\t\t\t\t\t\t\t// Update color.coords\r\n\t\t\t\t\t\t\tthis.coords = Color$1.convert(obj, id, this.spaceId);\r\n\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn Reflect.set(obj, property, value, receiver);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\t// Convert coords in another colorspace to internal coords and set them\r\n\t\t\t// Target colorspace: this.spaceId\r\n\t\t\t// Source colorspace: id\r\n\t\t\tset (coords) {\r\n\t\t\t\tthis.coords = Color$1.convert(coords, id, this.spaceId);\r\n\t\t\t},\r\n\t\t\tconfigurable: true,\r\n\t\t\tenumerable: true\r\n\t\t});\r\n\r\n\t\treturn space;\r\n\t}\r\n\r\n\t// Define a shortcut property, e.g. color.lightness instead of color.lch.lightness\r\n\t// Shorcut is looked up on Color.shortcuts at calling time\r\n\t// If `long` is provided, it's added to Color.shortcuts as well, otherwise it's assumed to be already there\r\n\tstatic defineShortcut(prop, obj = Color$1.prototype, long) {\r\n\t\tif (long) {\r\n\t\t\tColor$1.shortcuts[prop] = long;\r\n\t\t}\r\n\r\n\t\tObject.defineProperty(obj, prop, {\r\n\t\t\tget () {\r\n\t\t\t\treturn value(this, Color$1.shortcuts[prop]);\r\n\t\t\t},\r\n\t\t\tset (value$1) {\r\n\t\t\t\treturn value(this, Color$1.shortcuts[prop], value$1);\r\n\t\t\t},\r\n\t\t\tconfigurable: true,\r\n\t\t\tenumerable: true\r\n\t\t});\r\n\t}\r\n\r\n\t// Define static versions of all instance methods\r\n\tstatic statify(names = []) {\r\n\t\tnames = names || Object.getOwnPropertyNames(Color$1.prototype);\r\n\r\n\t\tfor (let prop of Object.getOwnPropertyNames(Color$1.prototype)) {\r\n\t\t\tlet descriptor = Object.getOwnPropertyDescriptor(Color$1.prototype, prop);\r\n\r\n\t\t\tif (descriptor.get || descriptor.set) {\r\n\t\t\t\tcontinue; // avoid accessors\r\n\t\t\t}\r\n\r\n\t\t\tlet method = descriptor.value;\r\n\r\n\t\t\tif (typeof method === \"function\" && !(prop in Color$1)) {\r\n\t\t\t\t// We have a function, and no static version already\r\n\t\t\t\tColor$1[prop] = function(color, ...args) {\r\n\t\t\t\t\tcolor = Color$1.get(color);\r\n\t\t\t\t\treturn color[prop](...args);\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nObject.assign(Color$1, {\r\n\tutil,\r\n\thooks: new Hooks(),\r\n\twhites: {\r\n\t\t// from ASTM E308-01\r\n\t\t// D50: [0.96422, 1.00000, 0.82521],\r\n\t\t// D65: [0.95047, 1.00000, 1.08883],\r\n\t\t// for compatibility, the four-digit chromaticity-derived ones everyone else uses\r\n\t\tD50: [0.3457 / 0.3585, 1.00000, (1.0 - 0.3457 - 0.3585) / 0.3585],\r\n\t\tD65: [0.3127 / 0.3290, 1.00000, (1.0 - 0.3127 - 0.3290) / 0.3290],\r\n\r\n\t},\r\n\tspaces: {},\r\n\r\n\t// These will be available as getters and setters on EVERY color instance.\r\n\t// They refer to LCH by default, but can be set to anything\r\n\t// and you can add more by calling Color.defineShortcut()\r\n\tshortcuts: {\r\n\t\t\"lightness\": \"lch.lightness\",\r\n\t\t\"chroma\": \"lch.chroma\",\r\n\t\t\"hue\": \"lch.hue\",\r\n\t},\r\n\r\n\t// Global defaults one may want to configure\r\n\tdefaults: {\r\n\t\tgamutMapping: \"lch.chroma\",\r\n\t\tprecision: 5,\r\n\t\tdeltaE: \"76\", // Default deltaE method\r\n\t\tfallbackSpaces: [\"p3\", \"srgb\"]\r\n\t}\r\n});\r\n\r\nColor$1.defineSpace({\r\n\tid: \"xyz\",\r\n\tname: \"XYZ\",\r\n\tcoords: {\r\n\t\tX: [],\r\n\t\tY: [],\r\n\t\tZ: []\r\n\t},\r\n\twhite: Color$1.whites.D65,\r\n\tinGamut: coords => true,\r\n\ttoXYZ: coords => coords,\r\n\tfromXYZ: coords => coords\r\n});\r\n\r\nColor$1.defineSpace({\r\n\tid: \"xyz-d50\",\r\n\tname: \"XYZ-D50\",\r\n\tcoords: {\r\n\t\tX: [],\r\n\t\tY: [],\r\n\t\tZ: []\r\n\t},\r\n\twhite: Color$1.whites.D50,\r\n\tinGamut: coords => true,\r\n\ttoXYZ: coords => coords,\r\n\tfromXYZ: coords => coords\r\n});\r\n\r\nColor$1.defineSpace({\r\n\tid: \"xyz-d65\",\r\n\tname: \"XYZ-D65\",\r\n\tcoords: {\r\n\t\tX: [],\r\n\t\tY: [],\r\n\t\tZ: []\r\n\t},\r\n\twhite: Color$1.whites.D65,\r\n\tinGamut: coords => true,\r\n\ttoXYZ: coords => coords,\r\n\tfromXYZ: coords => coords\r\n});\r\n\r\nfor (let prop in Color$1.shortcuts) {\r\n\tColor$1.defineShortcut(prop);\r\n}\r\n\r\n// Make static methods for all instance methods\r\nColor$1.statify();\r\n\r\n// Color.DEBUGGING = true;\r\n\r\nColor$1.defineSpace({\r\n\tid: \"lab\",\r\n\tname: \"Lab\",\r\n\tcoords: {\r\n\t\tL: [0, 100],\r\n\t\ta: [-100, 100],\r\n\t\tb: [-100, 100]\r\n\t},\r\n\tinGamut: coords => true,\r\n\t// Assuming XYZ is relative to D50, convert to CIE Lab\r\n\t// from CIE standard, which now defines these as a rational fraction\r\n\twhite: Color$1.whites.D50,\r\n\tε: 216/24389,  // 6^3/29^3 == (24/116)^3\r\n\tε3: 24/116,\r\n\tκ: 24389/27,   // 29^3/3^3\r\n\t// κ * ε  = 2^3 = 8\r\n\tfromXYZ(XYZ) {\r\n\t\t// Convert D50-adapted XYX to Lab\r\n\t\t//  CIE 15.3:2004 section 8.2.1.1\r\n\t\tconst {κ, ε, white} = this;\r\n\r\n\t\t// compute xyz, which is XYZ scaled relative to reference white\r\n\t\tlet xyz = XYZ.map((value, i) => value / white[i]);\r\n\r\n\t\t// now compute f\r\n\t\tlet f = xyz.map(value => value > ε ? Math.cbrt(value) : (κ * value + 16)/116);\r\n\r\n\t\treturn [\r\n\t\t\t(116 * f[1]) - 16, \t // L\r\n\t\t\t500 * (f[0] - f[1]), // a\r\n\t\t\t200 * (f[1] - f[2])  // b\r\n\t\t];\r\n\t},\r\n\ttoXYZ(Lab) {\r\n\t\t// Convert Lab to D50-adapted XYZ\r\n\t\t// Same result as CIE 15.3:2004 Appendix D although the derivation is different\r\n\t\t// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\r\n\t\tconst {κ, ε3, white} = this;\r\n\r\n\t\t// compute f, starting with the luminance-related term\r\n\t\tlet f = [];\r\n\t\tf[1] = (Lab[0] + 16)/116;\r\n\t\tf[0] = Lab[1]/500 + f[1];\r\n\t\tf[2] = f[1] - Lab[2]/200;\r\n\r\n\t\t// compute xyz\r\n\t\tvar xyz = [\r\n\t\t\tf[0]   > ε3  ?  Math.pow(f[0], 3)            : (116*f[0]-16)/κ,\r\n\t\t\tLab[0] > 8   ?  Math.pow((Lab[0]+16)/116, 3) : Lab[0]/κ,\r\n\t\t\tf[2]   > ε3  ?  Math.pow(f[2], 3)            : (116*f[2]-16)/κ\r\n\t\t];\r\n\r\n\t\t// Compute XYZ by scaling xyz by reference white\r\n\t\treturn xyz.map((value, i) => value * white[i]);\r\n\t},\r\n\tparse (str, parsed = Color$1.parseFunction(str)) {\r\n\t\tif (parsed && parsed.name === \"lab\") {\r\n\t\t\tlet L = parsed.args[0];\r\n\r\n\t\t\t// Percentages in lab() don't translate to a 0-1 range, but a 0-100 range\r\n\t\t\tif (L.percentage) {\r\n\t\t\t\tparsed.args[0] = L * 100;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tspaceId: \"lab\",\r\n\t\t\t\tcoords: parsed.args.slice(0, 3),\r\n\t\t\t\talpha: parsed.args.slice(3)[0]\r\n\t\t\t};\r\n\t\t}\r\n\t},\r\n\tinstance: {\r\n\t\ttoString ({format, ...rest} = {}) {\r\n\t\t\tif (!format) {\r\n\t\t\t\tformat = (c, i) => i === 0? c + \"%\" : c;\r\n\t\t\t}\r\n\r\n\t\t\treturn Color$1.prototype.toString.call(this, {name: \"lab\", format, ...rest});\r\n\t\t}\r\n\t}\r\n});\r\n\r\nconst range = [0, 360];\r\nrange.isAngle = true;\r\n\r\nfunction constrain (angle) {\r\n\treturn ((angle % 360) + 360) % 360;\r\n}\r\n\r\nfunction adjust (arc, angles) {\r\n\tif (arc === \"raw\") {\r\n\t\treturn angles;\r\n\t}\r\n\r\n\tlet [a1, a2] = angles.map(constrain);\r\n\r\n\tlet angleDiff = a2 - a1;\r\n\r\n\tif (arc === \"increasing\") {\r\n\t\tif (angleDiff < 0) {\r\n\t\t\ta2 += 360;\r\n\t\t}\r\n\t}\r\n\telse if (arc === \"decreasing\") {\r\n\t\tif (angleDiff > 0) {\r\n\t\t\ta1 += 360;\r\n\t\t}\r\n\t}\r\n\telse if (arc === \"longer\") {\r\n\t\tif (-180 < angleDiff && angleDiff < 180) {\r\n\t\t\tif (angleDiff > 0) {\r\n\t\t\t\ta2 += 360;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ta1 += 360;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse if (arc === \"shorter\") {\r\n\t\tif (angleDiff > 180) {\r\n\t\t\ta1 += 360;\r\n\t\t}\r\n\t\telse if (angleDiff < -180) {\r\n\t\t\ta2 += 360;\r\n\t\t}\r\n\t}\r\n\r\n\treturn [a1, a2];\r\n}\r\n\r\nColor$1.defineSpace({\r\n\tid: \"lch\",\r\n\tname: \"LCH\",\r\n\tcoords: {\r\n\t\tlightness: [0, 100],\r\n\t\tchroma: [0, 150],\r\n\t\thue: range,\r\n\t},\r\n\tinGamut: coords => true,\r\n\twhite: Color$1.whites.D50,\r\n\tfrom: {\r\n\t\tlab (Lab) {\r\n\t\t\t// Convert to polar form\r\n\t\t\tlet [L, a, b] = Lab;\r\n\t\t\tlet hue;\r\n\t\t\tconst ε = 0.02;\r\n\r\n\t\t\tif (Math.abs(a) < ε && Math.abs(b) < ε) {\r\n\t\t\t\thue = NaN;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thue = Math.atan2(b, a) * 180 / Math.PI;\r\n\t\t\t}\r\n\r\n\t\t\treturn [\r\n\t\t\t\tL, // L is still L\r\n\t\t\t\tMath.sqrt(a ** 2 + b ** 2), // Chroma\r\n\t\t\t\tconstrain(hue) // Hue, in degrees [0 to 360)\r\n\t\t\t];\r\n\t\t}\r\n\t},\r\n\tto: {\r\n\t\tlab (LCH) {\r\n\t\t\t// Convert from polar form\r\n\t\t\tlet [Lightness, Chroma, Hue] = LCH;\r\n\t\t\t// Clamp any negative Chroma\r\n\t\t\tif (Chroma < 0) {\r\n\t\t\t\tChroma = 0;\r\n\t\t\t}\t\t\t// Deal with NaN Hue\r\n\t\t\tif (isNaN(Hue)) {\r\n\t\t\t\tHue = 0;\r\n\t\t\t}\r\n\t\t\treturn [\r\n\t\t\t\tLightness, // L is still L\r\n\t\t\t\tChroma * Math.cos(Hue * Math.PI / 180), // a\r\n\t\t\t\tChroma * Math.sin(Hue * Math.PI / 180)  // b\r\n\t\t\t];\r\n\t\t}\r\n\t},\r\n\tparse (str, parsed = Color$1.parseFunction(str)) {\r\n\t\tif (parsed && parsed.name === \"lch\") {\r\n\t\t\tlet L = parsed.args[0];\r\n\r\n\t\t\t// Percentages in lch() don't translate to a 0-1 range, but a 0-100 range\r\n\t\t\tif (L.percentage) {\r\n\t\t\t\tparsed.args[0] = L * 100;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tspaceId: \"lch\",\r\n\t\t\t\tcoords: parsed.args.slice(0, 3),\r\n\t\t\t\talpha: parsed.args.slice(3)[0]\r\n\t\t\t};\r\n\t\t}\r\n\t},\r\n\tinstance: {\r\n\t\ttoString ({format, ...rest} = {}) {\r\n\t\t\tif (!format) {\r\n\t\t\t\tformat = (c, i) => i === 0? c + \"%\" : c;\r\n\t\t\t}\r\n\r\n\t\t\treturn Color$1.prototype.toString.call(this, {name: \"lch\", format, ...rest});\r\n\t\t}\r\n\t}\r\n});\r\n\r\nColor$1.defineSpace({\r\n\tid: \"srgb\",\r\n\tname: \"sRGB\",\r\n\tcoords: {\r\n\t\tred: [0, 1],\r\n\t\tgreen: [0, 1],\r\n\t\tblue: [0, 1]\r\n\t},\r\n\twhite: Color$1.whites.D65,\r\n\r\n\t// convert an array of sRGB values in the range 0.0 - 1.0\r\n\t// to linear light (un-companded) form.\r\n\t// https://en.wikipedia.org/wiki/SRGB\r\n\ttoLinear(RGB) {\r\n\t\treturn RGB.map(function (val) {\r\n\t\t\tlet sign = val < 0? -1 : 1;\r\n\t\t\tlet abs = Math.abs(val);\r\n\r\n\t\t\tif (abs < 0.04045) {\r\n\t\t\t\treturn val / 12.92;\r\n\t\t\t}\r\n\r\n\t\t\treturn sign * Math.pow((abs + 0.055) / 1.055, 2.4);\r\n\t\t});\r\n\t},\r\n\t// convert an array of linear-light sRGB values in the range 0.0-1.0\r\n\t// to gamma corrected form\r\n\t// https://en.wikipedia.org/wiki/SRGB\r\n\ttoGamma(RGB) {\r\n\t\treturn RGB.map(function (val) {\r\n\t\t\tlet sign = val < 0? -1 : 1;\r\n\t\t\tlet abs = Math.abs(val);\r\n\r\n\t\t\tif (abs > 0.0031308) {\r\n\t\t\t\treturn sign * (1.055 * Math.pow(abs, 1/2.4) - 0.055);\r\n\t\t\t}\r\n\r\n\t\t\treturn 12.92 * val;\r\n\t\t});\r\n\t},\r\n\r\n\t// This matrix was calculated directly from the RGB and white chromaticities\r\n\t// when rounded to 8 decimal places, it agrees completely with the official matrix\r\n\t// see https://github.com/w3c/csswg-drafts/issues/5922\r\n\ttoXYZ_M: [\r\n\t\t[ 0.41239079926595934, 0.357584339383878,   0.1804807884018343  ],\r\n\t\t[ 0.21263900587151027, 0.715168678767756,   0.07219231536073371 ],\r\n\t\t[ 0.01933081871559182, 0.11919477979462598, 0.9505321522496607  ]\r\n\t],\r\n\r\n\t// This matrix is the inverse of the above;\r\n\t// again it agrees with the official definiton when rounded to 8 decimal places\r\n\tfromXYZ_M: [\r\n\t\t[  3.2409699419045226,  -1.537383177570094,   -0.4986107602930034  ],\r\n\t\t[ -0.9692436362808796,   1.8759675015077202,   0.04155505740717559 ],\r\n\t\t[  0.05563007969699366, -0.20397695888897652,  1.0569715142428786  ]\r\n\t],\r\n\r\n\t// convert an array of sRGB values to CIE XYZ\r\n\t// using sRGB's own white, D65 (no chromatic adaptation)\r\n\ttoXYZ(rgb) {\r\n\t\trgb = this.toLinear(rgb);\r\n\r\n\t\treturn multiplyMatrices(this.toXYZ_M, rgb);\r\n\t},\r\n\tfromXYZ(XYZ) {\r\n\t\treturn this.toGamma(multiplyMatrices(this.fromXYZ_M, XYZ));\r\n\t},\r\n\t// Properties added to Color.prototype\r\n\tproperties: {\r\n\t\ttoHex({\r\n\t\t\talpha = true, // include alpha in hex?\r\n\t\t\tcollapse = true // collapse to 3-4 digit hex when possible?\r\n\t\t} = {}) {\r\n\t\t\tlet coords = this.to(\"srgb\", {inGamut: true}).coords;\r\n\r\n\t\t\tif (this.alpha < 1 && alpha) {\r\n\t\t\t\tcoords.push(this.alpha);\r\n\t\t\t}\r\n\r\n\t\t\tcoords = coords.map(c => Math.round(c * 255));\r\n\r\n\t\t\tlet collapsible = collapse && coords.every(c => c % 17 === 0);\r\n\r\n\t\t\tlet hex = coords.map(c => {\r\n\t\t\t\tif (collapsible) {\r\n\t\t\t\t\treturn (c/17).toString(16);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn c.toString(16).padStart(2, \"0\");\r\n\t\t\t}).join(\"\");\r\n\r\n\t\t\treturn \"#\" + hex;\r\n\t\t},\r\n\r\n\t\tget hex() {\r\n\t\t\treturn this.toHex();\r\n\t\t}\r\n\t},\r\n\t// Properties present only on sRGB colors\r\n\tinstance: {\r\n\t\ttoString ({inGamut = true, commas, format = \"%\", ...rest} = {}) {\r\n\t\t\tif (format === 255) {\r\n\t\t\t\tformat = c => c * 255;\r\n\t\t\t}\r\n\t\t\telse if (format === \"hex\") {\r\n\t\t\t\treturn this.toHex(arguments[0]);\r\n\t\t\t}\r\n\r\n\t\t\treturn Color$1.prototype.toString.call(this, {\r\n\t\t\t\tinGamut, commas, format,\r\n\t\t\t\tname: \"rgb\" + (commas && this.alpha < 1? \"a\" : \"\"),\r\n\t\t\t\t...rest\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\r\n\tparseHex (str) {\r\n\t\tif (str.length <= 5) {\r\n\t\t\t// #rgb or #rgba, duplicate digits\r\n\t\t\tstr = str.replace(/[a-f0-9]/gi, \"$&$&\");\r\n\t\t}\r\n\r\n\t\tlet rgba = [];\r\n\t\tstr.replace(/[a-f0-9]{2}/gi, component => {\r\n\t\t\trgba.push(parseInt(component, 16) / 255);\r\n\t\t});\r\n\r\n\t\treturn {\r\n\t\t\tspaceId: \"srgb\",\r\n\t\t\tcoords: rgba.slice(0, 3),\r\n\t\t\talpha: rgba.slice(3)[0]\r\n\t\t};\r\n\t}\r\n});\r\n\r\nColor$1.hooks.add(\"parse-start\", env => {\r\n\tlet str = env.str;\r\n\r\n\tif (/^#([a-f0-9]{3,4}){1,2}$/i.test(str)) {\r\n\t\tenv.color = Color$1.spaces.srgb.parseHex(str);\r\n\t}\r\n});\r\n\r\n// This is the linear-light version of sRGB\r\n// as used for example in SVG filters\r\n// or in Canvas\r\n\r\nColor$1.defineSpace({\r\n\tinherits: \"srgb\",\r\n\tid: \"srgb-linear\",\r\n\tname: \"sRGB-linear\",\r\n    toLinear(RGB) {\r\n        return RGB;\r\n    },\r\n    toGamma(RGB) {\r\n        return RGB;\r\n    },\r\n});\r\n\r\nColor$1.defineSpace({\r\n\tid: \"hsl\",\r\n\tname: \"HSL\",\r\n\tcoords: {\r\n\t\thue: range,\r\n\t\tsaturation: [0, 100],\r\n\t\tlightness: [0, 100]\r\n\t},\r\n\tinGamut (coords, epsilon) {\r\n\t\tlet rgb = this.to.srgb(coords);\r\n\t\treturn Color$1.inGamut(\"srgb\", rgb, {epsilon: epsilon});\r\n\t},\r\n\twhite: Color$1.whites.D65,\r\n\r\n\t// Adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB\r\n\tfrom: {\r\n\t\tsrgb (rgb) {\r\n\t\t\tlet max = Math.max(...rgb);\r\n\t\t\tlet min = Math.min(...rgb);\r\n\t\t\tlet [r, g, b] = rgb;\r\n\t\t\tlet [h, s, l] = [NaN, 0, (min + max)/2];\r\n\t\t\tlet d = max - min;\r\n\r\n\t\t\tif (d !== 0) {\r\n\t\t\t\ts = (l === 0 || l === 1) ? 0 : (max - l) / Math.min(l, 1 - l);\r\n\r\n\t\t\t\tswitch (max) {\r\n\t\t\t\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n\t\t\t\t\tcase g: h = (b - r) / d + 2; break;\r\n\t\t\t\t\tcase b: h = (r - g) / d + 4;\r\n\t\t\t\t}\r\n\r\n\t\t\t\th = h * 60;\r\n\t\t\t}\r\n\r\n\t\t\treturn [h, s * 100, l * 100];\r\n\t\t}\r\n\t},\r\n\t// Adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative\r\n\tto: {\r\n\t\tsrgb (hsl) {\r\n\t\t\tlet [h, s, l] = hsl;\r\n\t\t\th = h % 360;\r\n\r\n\t\t\tif (h < 0) {\r\n\t\t\t\th += 360;\r\n\t\t\t}\r\n\r\n\t\t\ts /= 100;\r\n\t\t\tl /= 100;\r\n\r\n\t\t\tfunction f(n) {\r\n\t\t\t\tlet k = (n + h/30) % 12;\r\n\t\t\t\tlet a = s * Math.min(l, 1 - l);\r\n\t\t\t\treturn l - a * Math.max(-1, Math.min(k - 3, 9 - k, 1));\r\n\t\t\t}\r\n\r\n\t\t\treturn [f(0), f(8), f(4)];\r\n\t\t}\r\n\t},\r\n\r\n\tparse (str, parsed = Color$1.parseFunction(str)) {\r\n\t\tif (parsed && /^hsla?$/.test(parsed.name)) {\r\n\t\t\tlet hsl = parsed.args;\r\n\r\n\t\t\t // percentages are converted to [0, 1] by parseFunction\r\n\t\t\thsl[1] *= 100;\r\n\t\t\thsl[2] *= 100;\r\n\r\n\t\t\treturn {\r\n\t\t\t\tspaceId: \"hsl\",\r\n\t\t\t\tcoords: hsl.slice(0, 3),\r\n\t\t\t\talpha: hsl[3]\r\n\t\t\t};\r\n\t\t}\r\n\t},\r\n\r\n\tinstance: {\r\n\t\ttoString ({precision, commas, format, inGamut, ...rest} = {}) {\r\n\t\t\tif (!format) {\r\n\t\t\t\tformat = (c, i) => i > 0? c + \"%\" : c;\r\n\t\t\t}\r\n\r\n\t\t\treturn Color$1.prototype.toString.call(this, {\r\n\t\t\t\tinGamut: true, // hsl() out of gamut makes no sense\r\n\t\t\t\tcommas, format,\r\n\t\t\t\tname: \"hsl\" + (commas && this.alpha < 1? \"a\" : \"\"),\r\n\t\t\t\t...rest\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// The Hue, Whiteness Blackness (HWB) colorspace\r\n// See https://drafts.csswg.org/css-color-4/#the-hwb-notation\r\n// Note that, like HSL, calculations are done directly on\r\n// gamma-corrected sRGB values rather than linearising them first.\r\n\r\nColor$1.defineSpace({\r\n\tid: \"hwb\",\r\n\tname: \"HWB\",\r\n\tcoords: {\r\n\t\thue: range,\r\n\t\twhiteness: [0, 100],\r\n\t\tblackness: [0, 100]\r\n\t},\r\n\tinGamut (coords, epsilon) {\r\n\t\tlet rgb = this.to.srgb(coords);\r\n\t\treturn Color$1.inGamut(\"srgb\", rgb, {epsilon: epsilon});\r\n\t},\r\n\t white: Color$1.whites.D65,\r\n\r\n\tfrom: {\r\n\t\tsrgb (rgb) {\r\n\t\t\tlet hsl = Color$1.spaces.hsl.from.srgb(rgb);\r\n\t\t\tlet h = hsl[0];\r\n\t\t\t// calculate white and black\r\n\t\t\tlet w = Math.min(...rgb);\r\n\t\t\tlet b = 1 - Math.max(...rgb);\r\n\t\t\tw *= 100;\r\n\t\t\tb *= 100;\r\n\t\t\treturn [h, w, b];\r\n\t\t},\r\n\r\n\t\thsv (hsv) {\r\n\t\t\tlet [h, s, v] = hsv;\r\n\r\n\t\t\treturn [h, v * (100 - s) / 100, 100 - v];\r\n\t\t},\r\n\r\n\t\thsl (hsl) {\r\n\t\t\tlet hsv = Color$1.spaces.hsv.from.hsl(hsl);\r\n\t\t\treturn this.hsv(hsv);\r\n\t\t}\r\n\t},\r\n\r\n\tto: {\r\n\t\tsrgb (hwb) {\r\n\t\t\tlet [h, w, b] = hwb;\r\n\r\n\t\t\t// Now convert percentages to [0..1]\r\n\t\t\tw /= 100;\r\n\t\t\tb /= 100;\r\n\r\n\t\t\t// Achromatic check (white plus black >= 1)\r\n\t\t\tlet sum = w + b;\r\n\t\t\tif (sum >= 1) {\r\n\t\t\t\t let gray = w / sum;\r\n\t\t\t\t return [gray, gray, gray];\r\n\t\t\t}\r\n\r\n\t\t\t// From https://drafts.csswg.org/css-color-4/#hwb-to-rgb\r\n\t\t\tlet rgb = Color$1.spaces.hsl.to.srgb([h, 100, 50]);\r\n\t\t\tfor (var i = 0; i < 3; i++) {\r\n\t\t\t\trgb[i] *= (1 - w - b);\r\n\t\t\t\trgb[i] += w;\r\n\t\t\t}\r\n\t\t\treturn rgb;\r\n\t\t},\r\n\r\n\t\thsv (hwb) {\r\n\t\t\tlet [h, w, b] = hwb;\r\n\r\n\t\t\t// Now convert percentages to [0..1]\r\n\t\t\tw /= 100;\r\n\t\t\tb /= 100;\r\n\r\n\t\t\t// Achromatic check (white plus black >= 1)\r\n\t\t\tlet sum = w + b;\r\n\t\t\tif (sum >= 1) {\r\n\t\t\t\t let gray = w / sum;\r\n\t\t\t\t return [h, 0, gray * 100];\r\n\t\t\t}\r\n\r\n\t\t\tlet v = (1 - b);\r\n\t\t\tlet s = (v === 0) ? 0 : 1 - w / v;\r\n\t\t\treturn [h, s * 100, v * 100];\r\n\t\t},\r\n\r\n\t\thsl (hwb) {\r\n\t\t\tlet hsv = Color$1.spaces.hwb.to.hsv(hwb);\r\n\t\t\treturn (Color$1.spaces.hsv.to.hsl(hsv));\r\n\t\t}\r\n\t},\r\n\r\n\t parse (str, parsed = Color$1.parseFunction(str)) {\r\n\t\t  if (parsed && /^hwba?$/.test(parsed.name)) {\r\n\t\t\tlet hwb = parsed.args;\r\n\r\n\t\t\t // white and black percentages are converted to [0, 1] by parseFunction\r\n\t\t\thwb[1] *= 100;\r\n\t\t\thwb[2] *= 100;\r\n\r\n\t\t\treturn {\r\n\t\t\t\tspaceId: \"hwb\",\r\n\t\t\t\tcoords: hwb.slice(0, 3),\r\n\t\t\t\talpha: hwb[3]\r\n\t\t\t};\r\n\t\t}\r\n\t },\r\n\r\n\t instance: {\r\n\t\ttoString ({format, commas, inGamut, ...rest} = {}) {\r\n\t\t\t\tif (!format) {\r\n\t\t\t\tformat = (c, i) => i > 0? c + \"%\" : c;\r\n\t\t\t}\r\n\r\n\t\t\treturn Color$1.prototype.toString.call(this, {\r\n\t\t\t\tinGamut: true, // hwb() out of gamut makes no sense\r\n\t\t\t\tcommas: false,  // never commas\r\n\t\t\t\tformat,\r\n\t\t\t\tname: \"hwb\",\r\n\t\t\t\t...rest\r\n\t\t\t});\r\n\t\t  }\r\n\t }\r\n});\r\n\r\n// The Hue, Whiteness Blackness (HWB) colorspace\r\n// See https://drafts.csswg.org/css-color-4/#the-hwb-notation\r\n// Note that, like HSL, calculations are done directly on\r\n// gamma-corrected sRGB values rather than linearising them first.\r\n\r\nColor$1.defineSpace({\r\n\tid: \"hsv\",\r\n\tname: \"HSV\",\r\n\tcoords: {\r\n\t\thue: range,\r\n\t\tsaturation: [0, 100],\r\n\t\tvalue: [0, 100]\r\n\t},\r\n\tinGamut (coords, epsilon) {\r\n\t\tlet hsl = this.to.hsl(coords);\r\n\t\treturn Color$1.spaces.hsl.inGamut(hsl, {epsilon: epsilon});\r\n\t},\r\n\twhite: Color$1.whites.D65,\r\n\r\n\tfrom: {\r\n\t\t// https://en.wikipedia.org/wiki/HSL_and_HSV#Interconversion\r\n\t\thsl (hsl) {\r\n\t\t\tlet [h, s, l] = hsl;\r\n\t\t\ts /= 100;\r\n\t\t\tl /= 100;\r\n\r\n\t\t\tlet v = l + s * Math.min(l, 1 - l);\r\n\r\n\t\t\treturn [\r\n\t\t\t\th, // h is the same\r\n\t\t\t\tv === 0? 0 : 200 * (1 - l / v), // s\r\n\t\t\t\t100 * v\r\n\t\t\t];\r\n\t\t},\r\n\t},\r\n\r\n\tto: {\r\n\t\t// https://en.wikipedia.org/wiki/HSL_and_HSV#Interconversion\r\n\t\thsl (hsv) {\r\n\t\t\tlet [h, s, v] = hsv;\r\n\r\n\t\t\ts /= 100;\r\n\t\t\tv /= 100;\r\n\r\n\t\t\tlet l = v * (1 - s/2);\r\n\r\n\t\t\treturn [\r\n\t\t\t\th, // h is the same\r\n\t\t\t\t(l === 0 || l === 1)? 0 : ((v - l) / Math.min(l, 1 - l)) * 100,\r\n\t\t\t\tl * 100\r\n\t\t\t];\r\n\t\t}\r\n\t}\r\n});\r\n\r\nColor$1.defineSpace({\r\n\tinherits: \"srgb\",\r\n\tid: \"p3\",\r\n\tname: \"P3\",\r\n\tcssId: \"display-p3\",\r\n\t// Gamma correction is the same as sRGB\r\n\t// convert an array of display-p3 values to CIE XYZ\r\n\t// using  D65 (no chromatic adaptation)\r\n\t// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\r\n\t// Functions are the same as sRGB, just with different matrices\r\n\ttoXYZ_M: [\r\n\t\t[0.4865709486482162, 0.26566769316909306, 0.1982172852343625],\r\n\t\t[0.2289745640697488, 0.6917385218365064,  0.079286914093745],\r\n\t\t[0.0000000000000000, 0.04511338185890264, 1.043944368900976]\r\n\t],\r\n\tfromXYZ_M: [\r\n\t\t[ 2.493496911941425,   -0.9313836179191239, -0.40271078445071684],\r\n\t\t[-0.8294889695615747,   1.7626640603183463,  0.023624685841943577],\r\n\t\t[ 0.03584583024378447, -0.07617238926804182, 0.9568845240076872]\r\n\t]\r\n});\r\n\r\nColor$1.defineSpace({\r\n\tinherits: \"srgb\",\r\n\tid: \"a98rgb\",\r\n\tname: \"Adobe 98 RGB compatible\",\r\n\tcssId: \"a98-rgb\",\r\n\ttoLinear(RGB) {\r\n\t\treturn RGB.map(val => Math.pow(Math.abs(val), 563/256)*Math.sign(val));\r\n\t},\r\n\ttoGamma(RGB) {\r\n\t\treturn RGB.map(val => Math.pow(Math.abs(val), 256/563)*Math.sign(val));\r\n\t},\r\n\t// convert an array of linear-light a98-rgb values to CIE XYZ\r\n\t// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\r\n\t// has greater numerical precision than section 4.3.5.3 of\r\n\t// https://www.adobe.com/digitalimag/pdfs/AdobeRGB1998.pdf\r\n\t// but the values below were calculated from first principles\r\n\t// from the chromaticity coordinates of R G B W\r\n\ttoXYZ_M: [\r\n\t\t[ 0.5766690429101305,   0.1855582379065463,   0.1882286462349947  ],\r\n\t\t[ 0.29734497525053605,  0.6273635662554661,   0.07529145849399788 ],\r\n\t\t[ 0.02703136138641234,  0.07068885253582723,  0.9913375368376388  ]\r\n\t],\r\n\tfromXYZ_M: [\r\n\t\t[  2.0415879038107465,    -0.5650069742788596,   -0.34473135077832956 ],\r\n\t\t[ -0.9692436362808795,     1.8759675015077202,    0.04155505740717557 ],\r\n\t\t[  0.013444280632031142,  -0.11836239223101838,   1.0151749943912054  ]\r\n\t]\r\n});\r\n\r\nColor$1.defineSpace({\r\n\tinherits: \"srgb\",\r\n\tid: \"prophoto\",\r\n\tname: \"ProPhoto\",\r\n\tcssId: \"prophoto-rgb\",\r\n\twhite: Color$1.whites.D50,\r\n\ttoLinear(RGB) {\r\n\t\t// Transfer curve is gamma 1.8 with a small linear portion\r\n\t\tconst Et2 = 16/512;\r\n\t\treturn RGB.map(function (val) {\r\n\t\t\tif (val < Et2) {\r\n\t\t\t\treturn val / 16;\r\n\t\t\t}\r\n\r\n\t\t\treturn Math.pow(val, 1.8);\r\n\t\t});\r\n\t},\r\n\ttoGamma(RGB) {\r\n\t\tconst Et = 1/512;\r\n\t\treturn RGB.map(function (val) {\r\n\t\t\tif (val >= Et) {\r\n\t\t\t\treturn Math.pow(val, 1/1.8);\r\n\t\t\t}\r\n\r\n\t\t\treturn 16 * val;\r\n\t\t});\r\n\t},\r\n\t// convert an array of  prophoto-rgb values to CIE XYZ\r\n\t// using  D50 (so no chromatic adaptation needed afterwards)\r\n\t// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\r\n\ttoXYZ_M: [\r\n\t\t[ 0.7977604896723027,  0.13518583717574031,  0.0313493495815248     ],\r\n\t\t[ 0.2880711282292934,  0.7118432178101014,   0.00008565396060525902 ],\r\n\t\t[ 0.0,                 0.0,                  0.8251046025104601     ]\r\n\t],\r\n\tfromXYZ_M: [\r\n\t\t[  1.3457989731028281,  -0.25558010007997534,  -0.05110628506753401 ],\r\n\t\t[ -0.5446224939028347,   1.5082327413132781,    0.02053603239147973 ],\r\n\t\t[  0.0,                  0.0,                   1.2119675456389454  ]\r\n\t]\r\n});\r\n\r\nColor$1.defineSpace({\r\n\tinherits: \"srgb\",\r\n\tid: \"rec2020\",\r\n\tname: \"REC.2020\",\r\n\tα: 1.09929682680944,\r\n\tβ: 0.018053968510807,\r\n\t// Non-linear transfer function from Rec. ITU-R BT.2020-2 table 4\r\n\ttoLinear(RGB) {\r\n\t\tconst {α, β} = this;\r\n\r\n\t\treturn RGB.map(function (val) {\r\n\t\t\tif (val < β * 4.5 ) {\r\n\t\t\t\treturn val / 4.5;\r\n\t\t\t}\r\n\r\n\t\t\treturn Math.pow((val + α -1 ) / α, 1/0.45);\r\n\t\t});\r\n\t},\r\n\ttoGamma(RGB) {\r\n\t\tconst {α, β} = this;\r\n\r\n\t\treturn RGB.map(function (val) {\r\n\t\t\tif (val >= β ) {\r\n\t\t\t\treturn α * Math.pow(val, 0.45) - (α - 1);\r\n\t\t\t}\r\n\r\n\t\t\treturn 4.5 * val;\r\n\t\t});\r\n\t},\r\n\t// convert an array of linear-light rec2020 values to CIE XYZ\r\n\t// using  D65 (no chromatic adaptation)\r\n\t// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\r\n\t// 0 is actually calculated as  4.994106574466076e-17\r\n\ttoXYZ_M: [\r\n\t\t[ 0.6369580483012914, 0.14461690358620832,  0.1688809751641721  ],\r\n\t\t[ 0.2627002120112671, 0.6779980715188708,   0.05930171646986196 ],\r\n\t\t[ 0.000000000000000,  0.028072693049087428, 1.060985057710791   ]\r\n\t],\r\n\t// from ITU-R BT.2124-0 Annex 2 p.3\r\n\tfromXYZ_M: [\r\n\t\t[  1.716651187971268,  -0.355670783776392, -0.253366281373660  ],\r\n\t\t[ -0.666684351832489,   1.616481236634939,  0.0157685458139111 ],\r\n\t\t[  0.017639857445311,  -0.042770613257809,  0.942103121235474  ]\r\n\t]\r\n});\r\n\r\nColor$1.defineSpace({\r\n// Absolute CIE XYZ, with a D65 whitepoint,\r\n// as used in most HDR colorspaces as a starting point.\r\n// SDR spaces are converted per BT.2048\r\n// so that diffuse, media white is 203 cd/m²\r\n    id: \"absxyzd65\",\r\n    name: \"Absolute XYZ D65\",\r\n\tcoords: {\r\n\t\tXa: [0, 9504.7],\r\n\t\tYa: [0, 10000],\r\n\t\tZa: [0, 10888.3]\r\n\t},\r\n    white: Color$1.whites.D65,\r\n    Yw: 203,\t// absolute luminance of media white\r\n\tinGamut: coords => true,\r\n    fromXYZ (XYZ) {\r\n\r\n\t\tconst {Yw} = this;\r\n\r\n\t\t// Make XYZ absolute, not relative to media white\r\n\t\t// Maximum luminance in PQ is 10,000 cd/m²\r\n        // Relative XYZ has Y=1 for media white\r\n\r\n        return XYZ.map (function (val) {\r\n\t\t\treturn Math.max(val * Yw, 0);\r\n\t\t});\r\n    },\r\n    toXYZ (AbsXYZ) {\r\n\r\n\t\t// Convert to media-white relative XYZ\r\n\r\n\t\tconst {Yw} = this;\r\n\r\n\t\tlet XYZ = AbsXYZ.map (function (val) {\r\n\t\t\treturn Math.max(val / Yw, 0);\r\n        });\r\n\r\n\t\treturn XYZ;\r\n\t}\r\n});\r\n\r\nColor$1.defineSpace({\r\n\tid: \"jzazbz\",\r\n\tcssid: \"Jzazbz\",\r\n    name: \"Jzazbz\",\r\n    coords: {\r\n\t\tJz: [0, 1],\r\n\t\taz: [-0.5, 0.5],\r\n\t\tbz: [-0.5, 0.5]\r\n    },\r\n    inGamut: coords => true,\r\n\t// Note that XYZ is relative to D65\r\n\twhite: Color$1.whites.D65,\r\n\tb: 1.15,\r\n\tg: 0.66,\r\n\tn:2610 / (2 ** 14),\r\n\tninv: (2 ** 14) / 2610,\r\n\tc1: 3424 / (2 ** 12),\r\n\tc2: 2413 / (2 ** 7),\r\n\tc3: 2392 / (2 ** 7),\r\n\tp: 1.7 * 2523 / (2 ** 5),\r\n\tpinv: (2 ** 5) / (1.7 * 2523),\r\n\td: -0.56,\r\n\td0: 1.6295499532821566E-11,\r\n\tXYZtoCone_M: [\r\n\t\t[  0.41478972, 0.579999,  0.0146480 ],\r\n\t\t[ -0.2015100,  1.120649,  0.0531008 ],\r\n\t\t[ -0.0166008,  0.264800,  0.6684799 ]\r\n\t],\r\n\t// XYZtoCone_M inverted\r\n\tConetoXYZ_M: [\r\n\t\t[  1.9242264357876067,  -1.0047923125953657,  0.037651404030618   ],\r\n\t\t[  0.35031676209499907,  0.7264811939316552, -0.06538442294808501 ],\r\n\t\t[ -0.09098281098284752, -0.3127282905230739,  1.5227665613052603  ]\r\n\t],\r\n\tConetoIab_M: [\r\n\t\t[  0.5,       0.5,       0        ],\r\n\t\t[  3.524000, -4.066708,  0.542708 ],\r\n\t\t[  0.199076,  1.096799, -1.295875 ]\r\n\t],\r\n\t// ConetoIab_M inverted\r\n\tIabtoCone_M: [\r\n\t\t[ 1,                   0.1386050432715393,   0.05804731615611886 ],\r\n\t\t[ 0.9999999999999999, -0.1386050432715393,  -0.05804731615611886 ],\r\n\t\t[ 0.9999999999999998, -0.09601924202631895, -0.8118918960560388  ]\r\n\t],\r\n    fromXYZ (XYZ) {\r\n\r\n\t\tconst {b, g, n, p, c1, c2, c3, d, d0, XYZtoCone_M, ConetoIab_M} = this;\r\n\r\n\t\t// First make XYZ absolute, not relative to media white\r\n\t\t// Maximum luminance in PQ is 10,000 cd/m²\r\n\t\t// Relative XYZ has Y=1 for media white\r\n\t\t// BT.2048 says media white Y=203 at PQ 58\r\n\r\n\t\t// console.log({XYZ});\r\n\r\n\t\tlet [ Xa, Ya, Za ] = Color$1.spaces.absxyzd65.fromXYZ(XYZ);\r\n\t\t// console.log({Xa, Ya, Za});\r\n\r\n\r\n\t\t// modify X and Y\r\n\t\tlet Xm = (b * Xa) - ((b - 1) * Za);\r\n\t\tlet Ym = (g * Ya) - ((g - 1) * Xa);\r\n\t\t// console.log({Xm, Ym, Za});\r\n\r\n\t\t// move to LMS cone domain\r\n\t\tlet LMS = multiplyMatrices(XYZtoCone_M, [ Xm, Ym, Za ]);\r\n\t\t// console.log({LMS});\r\n\r\n\t\t// PQ-encode LMS\r\n\t\tlet PQLMS = LMS.map (function (val) {\r\n\t\t\tlet num = c1 + (c2 * ((val / 10000) ** n));\r\n\t\t\tlet denom = 1 + (c3 * ((val / 10000) ** n));\r\n\t\t\t// console.log({val, num, denom});\r\n\t\t\treturn (num / denom)  ** p;\r\n\t\t});\r\n\t\t// console.log({PQLMS});\r\n\r\n\t\t// almost there, calculate Iz az bz\r\n\t\tlet [ Iz, az, bz] = multiplyMatrices(ConetoIab_M, PQLMS);\r\n\t\t// console.log({Iz, az, bz});\r\n\r\n\t\tlet Jz = ((1 + d) * Iz) / (1 + (d * Iz)) - d0;\r\n\t\treturn [Jz, az, bz];\r\n\r\n    },\r\n    toXYZ(Jzazbz) {\r\n\r\n\t\tconst {b, g, ninv, pinv, c1, c2, c3, d, d0, ConetoXYZ_M, IabtoCone_M} = this;\r\n\r\n\t\tlet [Jz, az, bz] = Jzazbz;\r\n\t\tlet Iz = (Jz + d0) / (1 + d - d * (Jz + d0));\r\n\t\t// console.log({Iz});\r\n\r\n\t\t// bring into LMS cone domain\r\n\t\tlet PQLMS = multiplyMatrices(IabtoCone_M, [ Iz, az, bz ]);\r\n\t\t// console.log({PQLMS});\r\n\r\n\t\t// convert from PQ-coded to linear-light\r\n\t\tlet LMS = PQLMS.map(function (val){\r\n\t\t\tlet num = (c1 - (val ** pinv));\r\n\t\t\tlet denom = (c3 * (val ** pinv)) - c2;\r\n\t\t\tlet x = 10000 * ((num / denom) ** ninv);\r\n\t\t\t// console.log({x, num, denom})\r\n\t\t\treturn (x); \t// luminance relative to diffuse white, [0, 70 or so].\r\n\t\t});\r\n\t\t// console.log({LMS});\r\n\r\n\t\t// modified abs XYZ\r\n\t\tlet [ Xm, Ym, Za ] = multiplyMatrices(ConetoXYZ_M, LMS);\r\n\t\t// console.log({sXm, Ym, Za});\r\n\r\n\t\t// restore standard D50 relative XYZ, relative to media white\r\n\t\tlet Xa = (Xm + ((b -1) * Za)) / b;\r\n\t\tlet Ya = (Ym + ((g -1) * Xa)) / g;\r\n\t\treturn Color$1.spaces.absxyzd65.toXYZ([ Xa, Ya, Za ]);\r\n    },\r\n\tparse (str, parsed = Color$1.parseFunction(str)) {\r\n\t\tif (parsed && parsed.name === \"jzabz\") {\r\n\t\t\treturn {\r\n\t\t\t\tspaceId: \"jzazbz\",\r\n\t\t\t\tcoords: parsed.args.slice(0, 3),\r\n\t\t\t\talpha: parsed.args.slice(3)[0]\r\n\t\t\t};\r\n\t\t}\r\n\t},\r\n\tinstance: {\r\n\t\ttoString ({format, ...rest} = {}) {\r\n\t\t\treturn Color$1.prototype.toString.call(this, {name: \"jzazbz\", format, ...rest});\r\n\t\t}\r\n\t}\r\n});\r\n\r\nColor$1.defineSpace({\r\n\tid: \"jzczhz\",\r\n\tname: \"JzCzHz\",\r\n\tcoords: {\r\n\t\tJz: [0, 1],\r\n\t\tchroma: [0, 1],\r\n\t\thue: range,\r\n\t},\r\n\tinGamut: coords => true,\r\n\twhite: Color$1.whites.D65,\r\n\tfrom: {\r\n\t\tjzazbz (jzazbz) {\r\n\t\t\t// Convert to polar form\r\n\t\t\tlet [Jz, az, bz] = jzazbz;\r\n\t\t\tlet hue;\r\n\t\t\tconst ε = 0.0002; // chromatic components much smaller than a,b\r\n\r\n\t\t\tif (Math.abs(az) < ε && Math.abs(bz) < ε) {\r\n\t\t\t\thue = NaN;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thue = Math.atan2(bz, az) * 180 / Math.PI;\r\n\t\t\t}\r\n\r\n\t\t\treturn [\r\n\t\t\t\tJz, // Jz is still Jz\r\n\t\t\t\tMath.sqrt(az ** 2 + bz ** 2), // Chroma\r\n\t\t\t\tconstrain(hue) // Hue, in degrees [0 to 360)\r\n\t\t\t];\r\n\t\t}\r\n\t},\r\n\tto: {\r\n\t\tjzazbz (jzczhz) {\r\n\t\t\t// Convert from polar form\r\n\t\t\t// debugger;\r\n\t\t\treturn [\r\n\t\t\t\tjzczhz[0], // Jz is still Jz\r\n\t\t\t\tjzczhz[1] * Math.cos(jzczhz[2] * Math.PI / 180), // az\r\n\t\t\t\tjzczhz[1] * Math.sin(jzczhz[2] * Math.PI / 180)  // bz\r\n\t\t\t];\r\n\t\t}\r\n\t},\r\n\tparse (str, parsed = Color$1.parseFunction(str)) {\r\n\t\tif (parsed && parsed.name === \"jzczhz\") {\r\n\t\t\tlet Jz = parsed.args[0];\r\n\r\n\t\t\treturn {\r\n\t\t\t\tspaceId: \"jzczhz\",\r\n\t\t\t\tcoords: parsed.args.slice(0, 3),\r\n\t\t\t\talpha: parsed.args.slice(3)[0]\r\n\t\t\t};\r\n\t\t}\r\n\t},\r\n\r\n});\r\n\r\nconst rec2020 = Color$1.spaces.rec2020;\r\n\r\nColor$1.defineSpace({\r\n\t// Only the PQ form of ICtCp is implemented here. There is also an HLG form.\r\n\t// from Dolby, \"WHAT IS ICTCP?\"\r\n\t// https://professional.dolby.com/siteassets/pdfs/ictcp_dolbywhitepaper_v071.pdf\r\n\t// and\r\n\t// Dolby, \"Perceptual Color Volume\r\n\t// Measuring the Distinguishable Colors of HDR and WCG Displays\"\r\n\t// https://professional.dolby.com/siteassets/pdfs/dolby-vision-measuring-perceptual-color-volume-v7.1.pdf\r\n\tid: \"ictcp\",\r\n\tname: \"ICTCP\",\r\n\t// From BT.2100-2 page 7:\r\n\t// During production, signal values are expected to exceed the\r\n\t// range E′ = [0.0 : 1.0]. This provides processing headroom and avoids\r\n\t// signal degradation during cascaded processing. Such values of E′,\r\n\t// below 0.0 or exceeding 1.0, should not be clipped during production\r\n\t// and exchange.\r\n\t// Values below 0.0 should not be clipped in reference displays (even\r\n\t// though they represent “negative” light) to allow the black level of\r\n\t// the signal (LB) to be properly set using test signals known as “PLUGE”\r\n\tcoords: {\r\n\t\tI: [0, 1],\t\t\t// Constant luminance\r\n\t\tCT: [-0.5, 0.5],\t// Full BT.2020 gamut in range [-0.5, 0.5]\r\n\t\tCP: [-0.5, 0.5]\r\n\t},\r\n\tinGamut: coords => true,\r\n\t// Note that XYZ is relative to D65\r\n\twhite: Color$1.whites.D65,\r\n\tc1: 3424 / 4096,\r\n\tc2: 2413 / 128,\r\n\tc3: 2392 / 128,\r\n\tm1: 2610 / 16384,\r\n\tm2: 2523 / 32,\r\n\tim1: 16384 / 2610,\r\n\tim2: 32 / 2523,\r\n\t// The matrix below includes the 4% crosstalk components\r\n\t// and is from the Dolby \"What is ICtCp\" paper\"\r\n\tXYZtoLMS_M: [\r\n\t\t[ 0.3592,  0.6976, -0.0358],\r\n\t\t[-0.1922,  1.1004,  0.0755],\r\n\t\t[ 0.0070,  0.0749,  0.8434]\r\n\t],\r\n\t// linear-light Rec.2020 to LMS, again with crosstalk\r\n\t// rational terms from Jan Fröhlich,\r\n\t// Encoding High Dynamic Range andWide Color Gamut Imagery, p.97\r\n\t// and ITU-R BT.2124-0 p.2\r\n\tRec2020toLMS_M: [\r\n\t\t[ 1688 / 4096,  2146 / 4096,   262 / 4096 ],\r\n\t\t[  683 / 4096,  2951 / 4096,   462 / 4096 ],\r\n\t\t[   99 / 4096,   309 / 4096,  3688 / 4096 ]\r\n\t],\r\n\t// this includes the Ebner LMS coefficients,\r\n\t// the rotation, and the scaling to [-0.5,0.5] range\r\n\t// rational terms from Fröhlich p.97\r\n\t// and ITU-R BT.2124-0 pp.2-3\r\n\tLMStoIPT_M: [\r\n\t\t[  2048 / 4096,   2048 / 4096,       0      ],\r\n\t\t[  6610 / 4096, -13613 / 4096,  7003 / 4096 ],\r\n\t\t[ 17933 / 4096, -17390 / 4096,  -543 / 4096 ]\r\n\t],\r\n\t// inverted matrices, calculated from the above\r\n\tIPTtoLMS_M: [\r\n\t\t[0.99998889656284013833, 0.00860505014728705821,  0.1110343715986164786 ],\r\n\t\t[1.0000111034371598616, -0.00860505014728705821, -0.1110343715986164786 ],\r\n\t\t[1.000032063391005412,   0.56004913547279000113, -0.32063391005412026469],\r\n\t],\r\n\tLMStoRec2020_M: [\r\n\t\t[ 3.4375568932814012112,   -2.5072112125095058195,   0.069654319228104608382],\r\n\t\t[-0.79142868665644156125,   1.9838372198740089874,  -0.19240853321756742626 ],\r\n\t\t[-0.025646662911506476363, -0.099240248643945566751, 1.1248869115554520431  ]\r\n\t],\r\n\tLMStoXYZ_M: [\r\n\t\t[ 2.0701800566956135096,   -1.3264568761030210255,    0.20661600684785517081 ],\r\n\t\t[ 0.36498825003265747974,   0.68046736285223514102,  -0.045421753075853231409],\r\n\t\t[-0.049595542238932107896, -0.049421161186757487412,  1.1879959417328034394  ]\r\n\t],\r\n\tfromXYZ (XYZ) {\r\n\r\n\t\tconst {XYZtoLMS_M} = this;\r\n\t\t// console.log ({c1, c2, c3, m1, m2});\r\n\r\n\t\t// Make XYZ absolute, not relative to media white\r\n\t\t// Maximum luminance in PQ is 10,000 cd/m²\r\n\t\t// Relative XYZ has Y=1 for media white\r\n\t\t// BT.2048 says media white Y=203 at PQ 58\r\n\t\t// This also does the D50 to D65 adaptation\r\n\r\n\t\tlet [ Xa, Ya, Za ] = Color$1.spaces.absxyzd65.fromXYZ(XYZ);\r\n\t\t// console.log({Xa, Ya, Za});\r\n\r\n\t\t// move to LMS cone domain\r\n\t\tlet LMS = multiplyMatrices(XYZtoLMS_M, [ Xa, Ya, Za ]);\r\n\t\t// console.log({LMS});\r\n\r\n\t\treturn this.LMStoICtCp(LMS);\r\n\t},\r\n\ttoXYZ (ICtCp) {\r\n\r\n\t\tconst {LMStoXYZ_M} = this;\r\n\r\n\t\tlet LMS = this.ICtCptoLMS(ICtCp);\r\n\r\n\t\tlet XYZa = multiplyMatrices(LMStoXYZ_M, LMS);\r\n\r\n\t\t// convert from Absolute, D65 XYZ to media white relative, D50 XYZ\r\n\t\treturn Color$1.spaces.absxyzd65.toXYZ(XYZa);\r\n\r\n\t},\r\n\tLMStoICtCp (LMS) {\r\n\r\n\t\tconst {LMStoIPT_M, c1, c2, c3, m1, m2} = this;\r\n\t\t// console.log ({c1, c2, c3, m1, m2});\r\n\r\n\t\t// apply the PQ EOTF\r\n\t\t// we can't ever be dividing by zero because of the \"1 +\" in the denominator\r\n\t\tlet PQLMS = LMS.map (function (val) {\r\n\t\t\tlet num = c1 + (c2 * ((val / 10000) ** m1));\r\n\t\t\tlet denom = 1 + (c3 * ((val / 10000) ** m1));\r\n\t\t\t// console.log({val, num, denom});\r\n\t\t\treturn (num / denom)  ** m2;\r\n\t\t});\r\n\t\t// console.log({PQLMS});\r\n\r\n\t\t// LMS to IPT, with rotation for Y'C'bC'r compatibility\r\n\t\treturn multiplyMatrices(LMStoIPT_M, PQLMS);\r\n\t},\r\n\tICtCptoLMS (ICtCp) {\r\n\r\n\t\tconst {IPTtoLMS_M, c1, c2, c3, im1, im2} = this;\r\n\r\n\t\tlet PQLMS = multiplyMatrices(IPTtoLMS_M, ICtCp);\r\n\r\n\t\t// From BT.2124-0 Annex 2 Conversion 3\r\n\t\tlet LMS = PQLMS.map (function (val) {\r\n\t\t\tlet num  = Math.max((val ** im2) - c1, 0);\r\n\t\t\tlet denom = (c2 - (c3 * (val ** im2)));\r\n\t\t\treturn 10000 * ((num / denom) ** im1);\r\n\t\t});\r\n\r\n\t\treturn LMS;\r\n\t}\r\n\t// },\r\n\t// from: {\r\n\t// \trec2020: function() {\r\n\r\n\t// \t}\r\n\t// },\r\n\t// to: {\r\n\t// \trec2020: function() {\r\n\r\n\t// \t}\r\n\t// }\r\n});\r\n\r\nColor$1.defineSpace({\r\n\tinherits: \"rec2020\",\r\n\tid: \"rec2100pq\",\r\n\tcssid: \"rec2100-pq\",\r\n\tname: \"REC.2100-PQ\",\r\n\tYw: 203,\t// absolute luminance of media white, cd/m²\r\n\tn: 2610 / (2 ** 14),\r\n\tninv: (2 ** 14) / 2610,\r\n\tm: 2523 / (2 ** 5),\r\n\tminv: (2 ** 5) / 2523,\r\n\tc1: 3424 / (2 ** 12),\r\n\tc2: 2413 / (2 ** 7),\r\n\tc3: 2392 / (2 ** 7),\r\n\ttoLinear(RGB) {\r\n\t// given PQ encoded component in range [0, 1]\r\n\t// return media-white relative linear-light\r\n\r\n\t\tconst {Yw, ninv, minv, c1, c2, c3} = this;\r\n\r\n\t\treturn RGB.map(function (val) {\r\n\t\t\tlet x = ((Math.max(((val ** minv) - c1), 0) / (c2 - (c3 * (val ** minv)))) ** ninv);\r\n\t\t\treturn (x * 10000 / Yw); \t// luminance relative to diffuse white, [0, 70 or so].\r\n\t\t});\r\n\t},\r\n\ttoGamma(RGB) {\r\n\t// given media-white relative linear-light\r\n\t// returnPQ encoded component in range [0, 1]\r\n\r\n\t\tconst {Yw, n, m, c1, c2, c3} = this;\r\n\r\n\t\treturn RGB.map(function (val) {\r\n\t\t\tlet x = Math.max(val * Yw / 10000, 0); \t// absolute luminance of peak white is 10,000 cd/m².\r\n\t\t\tlet num = (c1 + (c2 * (x ** n)));\r\n\t\t\tlet denom = (1 + (c3 * (x ** n)));\r\n\t\t\t// console.log({x, num, denom});\r\n\t\t\treturn ((num / denom)  ** m);\r\n\t\t});\r\n\t}\r\n\t// ,\r\n\t// // convert an array of linear-light rec2120 values to CIE XYZ\r\n\t// // using  D65 (no chromatic adaptation)\r\n\t// // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\r\n\t// // 0 is actually calculated as  4.994106574466076e-17\r\n\t// toXYZ_M: [\r\n\t// \t[0.6369580483012914, 0.14461690358620832,  0.1688809751641721],\r\n\t// \t[0.2627002120112671, 0.6779980715188708,   0.05930171646986196],\r\n\t// \t[0.000000000000000,  0.028072693049087428, 1.060985057710791]\r\n\t// ],\r\n\t// fromXYZ_M: [\r\n\t// \t[1.7166511879712674,   -0.35567078377639233, -0.25336628137365974],\r\n\t// \t[-0.6666843518324892,   1.6164812366349395,   0.01576854581391113],\r\n\t// \t[0.017639857445310783, -0.042770613257808524, 0.9421031212354738]\r\n\t// ]\r\n});\r\n\r\nColor$1.defineSpace({\r\n\tid: \"oklab\",\r\n\tcssid: \"oklab\",\r\n    name: \"OKLab\",\r\n    coords: {\r\n\t\tL: [ 0, 1],\r\n\t\ta: [-0.5, 0.5],\r\n\t\tb: [-0.5, 0.5]\r\n    },\r\n    inGamut: coords => true,\r\n\t// Note that XYZ is relative to D65\r\n    white: Color$1.whites.D65,\r\n    XYZtoLMS_M: [\r\n\t\t[  0.8189330101,  0.3618667424,  -0.1288597137 ],\r\n\t\t[  0.0329845436,  0.9293118715,   0.0361456387 ],\r\n\t\t[  0.0482003018,  0.2643662691,   0.6338517070 ]\r\n    ],\r\n    // inverse of XYZtoLMS_M\r\n    LMStoXYZ_M: [\r\n        [  1.227013851103521026,    -0.5577999806518222383,  0.28125614896646780758  ],\r\n        [ -0.040580178423280593977,  1.1122568696168301049, -0.071676678665601200577 ],\r\n        [ -0.076381284505706892869, -0.42148197841801273055, 1.5861632204407947575   ]\r\n    ],\r\n    LMStoLab_M: [\r\n\t\t[  0.2104542553,   0.7936177850,  -0.0040720468 ],\r\n\t\t[  1.9779984951,  -2.4285922050,   0.4505937099 ],\r\n\t\t[  0.0259040371,   0.7827717662,  -0.8086757660 ]\r\n\t],\r\n\t// LMStoIab_M inverted\r\n\tLabtoLMS_M: [\r\n        [ 0.99999999845051981432,  0.39633779217376785678,   0.21580375806075880339  ],\r\n        [ 1.0000000088817607767,  -0.1055613423236563494,   -0.063854174771705903402 ],\r\n        [ 1.0000000546724109177,  -0.089484182094965759684, -1.2914855378640917399   ]\r\n    ],\r\n\tfromXYZ (XYZ) {\r\n\t\tconst {XYZtoLMS_M, LMStoLab_M} = this;\r\n\r\n\t\t// move to LMS cone domain\r\n\t\tlet LMS = multiplyMatrices(XYZtoLMS_M, XYZ);\r\n\r\n\t\t// non-linearity\r\n\t\tlet LMSg = LMS.map (val => Math.cbrt(val));\r\n\r\n\t\treturn (multiplyMatrices(LMStoLab_M, LMSg));\r\n\r\n\t},\r\n\ttoXYZ (OKLab) {\r\n\r\n\t\tconst {LMStoXYZ_M, LabtoLMS_M} = this;\r\n\r\n\t\t// move to LMS cone domain\r\n\t\tlet LMSg = multiplyMatrices(LabtoLMS_M, OKLab);\r\n\r\n\t\t// restore linearity\r\n\t\tlet LMS = LMSg.map (val => val ** 3);\r\n\r\n\t\treturn (multiplyMatrices(LMStoXYZ_M, LMS));\r\n\t}\r\n});\r\n\r\nColor$1.defineSpace({\r\n\tid: \"oklch\",\r\n\tname: \"OKLCh\",\r\n\tcoords: {\r\n\t\tlightness: [0, 1],\r\n\t\tchroma: [0, 1],\r\n\t\thue: range,\r\n\t},\r\n\tinGamut: coords => true,\r\n\twhite: Color$1.whites.D65,\r\n\tfrom: {\r\n\t\toklab (oklab) {\r\n\t\t\t// Convert to polar form\r\n\t\t\tlet [L, a, b] = oklab;\r\n\t\t\tlet h;\r\n\t\t\tconst ε = 0.0002; // chromatic components much smaller than a,b\r\n\r\n\t\t\tif (Math.abs(a) < ε && Math.abs(b) < ε) {\r\n\t\t\t\th = NaN;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\th = Math.atan2(b, a) * 180 / Math.PI;\r\n\t\t\t}\r\n\r\n\t\t\treturn [\r\n\t\t\t\tL, // OKLab L is still L\r\n\t\t\t\tMath.sqrt(a ** 2 + b ** 2), // Chroma\r\n\t\t\t\tconstrain(h) // Hue, in degrees [0 to 360)\r\n\t\t\t];\r\n\t\t}\r\n\t},\r\n\tto: {\r\n\t\t// Convert from polar form\r\n\t\toklab (oklch) {\r\n\t\t\tlet [L, C, h] = oklch;\r\n\t\t\tlet a, b;\r\n\r\n\t\t\t// check for NaN hue\r\n\t\t\tif (isNaN(h)) {\r\n\t\t\t\ta = 0;\r\n\t\t\t\tb = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ta = C * Math.cos(h * Math.PI / 180);\r\n\t\t\t\tb = C * Math.sin(h * Math.PI / 180);\r\n\t\t\t}\r\n\r\n\t\t\treturn [ L, a, b ];\r\n\t\t}\r\n\t},\r\n\tparse (str, parsed = Color$1.parseFunction(str)) {\r\n\t\tif (parsed && parsed.name === \"oklch\") {\r\n\t\t\tlet L = parsed.args[0];\r\n\r\n\t\t\treturn {\r\n\t\t\t\tspaceId: \"oklch\",\r\n\t\t\t\tcoords: parsed.args.slice(0, 3),\r\n\t\t\t\talpha: parsed.args.slice(3)[0]\r\n\t\t\t};\r\n\t\t}\r\n\t},\r\n\r\n});\r\n\r\nColor$1.CATs = {};\r\n\r\nColor$1.hooks.add(\"chromatic-adaptation-start\", env => {\r\n\tif (env.options.method) {\r\n\t\tenv.M = Color$1.adapt(env.W1, env.W2, env.options.method);\r\n\t}\r\n});\r\n\r\nColor$1.hooks.add(\"chromatic-adaptation-end\", env => {\r\n\tif (!env.M) {\r\n\t\tenv.M = Color$1.adapt(env.W1, env.W2, env.options.method);\r\n\t}\r\n});\r\n\r\nColor$1.defineCAT = function ({id, toCone_M, fromCone_M}) {\r\n\t// Use id, toCone_M, fromCone_M like variables\r\n\tColor$1.CATs[id] = arguments[0];\r\n};\r\n\r\nColor$1.adapt = function (W1, W2, id = \"Bradford\") {\r\n\t// adapt from a source whitepoint or illuminant W1\r\n\t// to a destination whitepoint or illuminant W2,\r\n\t// using the given chromatic adaptation transform (CAT)\r\n\t// debugger;\r\n\tlet method = Color$1.CATs[id];\r\n\r\n\tlet [ρs, γs, βs] = multiplyMatrices(method.toCone_M, W1);\r\n\tlet [ρd, γd, βd] = multiplyMatrices(method.toCone_M, W2);\r\n\r\n\t// all practical illuminants have non-zero XYZ so no division by zero can occur below\r\n\tlet scale = [\r\n\t\t[ρd/ρs,    0,      0      ],\r\n\t\t[0,        γd/γs,  0      ],\r\n\t\t[0,        0,      βd/βs  ]\r\n\t];\r\n\t// console.log({scale});\r\n\r\n\tlet scaled_cone_M = multiplyMatrices(scale, method.toCone_M);\r\n\tlet adapt_M\t= multiplyMatrices(method.fromCone_M, scaled_cone_M);\r\n\t// console.log({scaled_cone_M, adapt_M});\r\n\treturn adapt_M;\r\n};\r\n\r\nColor$1.defineCAT({\r\n\tid: \"von Kries\",\r\n\ttoCone_M: [\r\n\t\t[  0.4002400,  0.7076000, -0.0808100 ],\r\n\t\t[ -0.2263000,  1.1653200,  0.0457000 ],\r\n\t\t[  0.0000000,  0.0000000,  0.9182200 ]\r\n\t],\r\n\tfromCone_M: [\r\n\t\t[  1.8599364, -1.1293816,  0.2198974 ],\r\n\t\t[  0.3611914,  0.6388125, -0.0000064 ],\r\n\t\t[  0.0000000,  0.0000000,  1.0890636 ]\r\n\t]\r\n});\r\nColor$1.defineCAT({\r\n\tid: \"Bradford\",\r\n\t// Convert an array of XYZ values in the range 0.0 - 1.0\r\n\t// to cone fundamentals\r\n\ttoCone_M: [\r\n\t\t[  0.8951000,  0.2664000, -0.1614000 ],\r\n\t\t[ -0.7502000,  1.7135000,  0.0367000 ],\r\n\t\t[  0.0389000, -0.0685000,  1.0296000 ]\r\n\t],\r\n\t// and back\r\n\tfromCone_M: [\r\n\t\t[  0.9869929, -0.1470543,  0.1599627 ],\r\n\t\t[  0.4323053,  0.5183603,  0.0492912 ],\r\n\t\t[ -0.0085287,  0.0400428,  0.9684867 ]\r\n\t]\r\n});\r\n\r\nColor$1.defineCAT({\r\n\tid: \"CAT02\",\r\n\t// with complete chromatic adaptation to W2, so D = 1.0\r\n\ttoCone_M: [\r\n\t\t[  0.7328000,  0.4296000, -0.1624000 ],\r\n\t\t[ -0.7036000,  1.6975000,  0.0061000 ],\r\n\t\t[  0.0030000,  0.0136000,  0.9834000 ]\r\n\t],\r\n\tfromCone_M: [\r\n\t\t[  1.0961238, -0.2788690,  0.1827452 ],\r\n\t\t[  0.4543690,  0.4735332,  0.0720978 ],\r\n\t\t[ -0.0096276, -0.0056980,  1.0153256 ]\r\n\t]\r\n});\r\n\r\nColor$1.defineCAT({\r\n\tid: \"CAT16\",\r\n\ttoCone_M: [\r\n\t\t[  0.401288,  0.650173, -0.051461 ],\r\n\t\t[ -0.250268,  1.204414,  0.045854 ],\r\n\t\t[ -0.002079,  0.048952,  0.953127 ]\r\n\t],\r\n\t// the extra precision is needed to avoid roundtripping errors\r\n\tfromCone_M: [\r\n\t\t[  1.862067855087233e+0, -1.011254630531685e+0,   1.491867754444518e-1 ],\r\n\t\t[  3.875265432361372e-1,  6.214474419314753e-1,  -8.973985167612518e-3 ],\r\n\t\t[ -1.584149884933386e-2, -3.412293802851557e-2,   1.049964436877850e+0 ]\r\n\t]\r\n});\r\n\r\nObject.assign(Color$1.whites, {\r\n\t// whitepoint values from ASTM E308-01 with 10nm spacing, 1931 2 degree observer\r\n\t// all normalized to Y (luminance) = 1.00000\r\n\t// Illuminant A is a tungsten electric light, giving a very warm, orange light.\r\n\tA:  [1.09850, 1.00000, 0.35585],\r\n\r\n\t// Illuminant C was an early approximation to daylight: illuminant A with a blue filter.\r\n\tC:   [0.98074, 1.000000, 1.18232],\r\n\r\n\t// The daylight series of illuminants simulate natural daylight.\r\n\t// The color temperature (in degrees Kelvin/100) ranges from\r\n\t// cool, overcast daylight (D50) to bright, direct sunlight (D65).\r\n\tD55: [0.95682, 1.00000, 0.92149],\r\n\tD75: [0.94972, 1.00000, 1.22638],\r\n\r\n\t// Equal-energy illuminant, used in two-stage CAT16\r\n\tE:   [1.00000, 1.00000, 1.00000],\r\n\r\n\t// The F series of illuminants represent flourescent lights\r\n\tF2:  [0.99186, 1.00000, 0.67393],\r\n\tF7:  [0.95041, 1.00000, 1.08747],\r\n\tF11: [1.00962, 1.00000, 0.64350],\r\n});\r\n\r\n// because of the funky whitepoint\r\n\r\nColor$1.defineSpace({\r\n\tid: \"acescc\",\r\n\tname: \"ACEScc\",\r\n\tinherits: \"srgb\",\r\n\r\n\t// see S-2014-003 ACEScc – A Logarithmic Encoding of ACES Data\r\n\t// uses the AP1 primaries, see section 4.3.1 Color primaries\r\n\tcoords: {\r\n\t\tred:   [-0.3014, 1.468],\r\n\t\tgreen: [-0.3014, 1.468],\r\n\t\tblue:  [-0.3014, 1.468]\r\n\t},\r\n\t// Appendix A: \"Very small ACES scene referred values below 7 1/4 stops\r\n\t// below 18% middle gray are encoded as negative ACEScc values.\r\n\t// These values should be preserved per the encoding in Section 4.4\r\n\t// so that all positive ACES values are maintained.\"\r\n\r\n\t// The ACES whitepoint\r\n\t// see TB-2018-001 Derivation of the ACES White Point CIE Chromaticity Coordinates\r\n\t// also https://github.com/ampas/aces-dev/blob/master/documents/python/TB-2018-001/aces_wp.py\r\n\twhite: Color$1.whites.ACES = [0.32168/0.33767, 1.00000, (1.00000 - 0.32168 - 0.33767)/0.33767],\r\n\t// Similar to D60\r\n\r\n\t// from section 4.4.2 Decoding Function\r\n\ttoLinear(RGB) {\r\n\r\n\t\tconst low = (9.72 - 15) / 17.52; // -0.3014\r\n\t\tconst high = (Math.log2(65504) + 9.72) / 17.52; // 1.468\r\n\t\tconst ε = 2 ** -16;\r\n\r\n\t\treturn RGB.map(function (val) {\r\n\t\t\tif (val <= low) {\r\n\t\t\t\treturn (2 ** ((val * 17.52) - 9.72) - ε) * 2; // 0 for low or below\r\n\t\t\t}\r\n\t\t\telse if (val < high) {\r\n\t\t\t\treturn 2 ** ((val * 17.52) - 9.72);\r\n\t\t\t}\r\n\t\t\telse { // val >= high\r\n\t\t\t\treturn 65504;\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\r\n\t// Non-linear encoding function from S-2014-003, section 4.4.1 Encoding Function\r\n\ttoGamma(RGB) {\r\n\r\n\t\tconst ε = 2 ** -16;\r\n\r\n\t\treturn RGB.map(function (val) {\r\n\t\t\tif (val <= 0) {\r\n\t\t\t\treturn (Math.log2(ε) + 9.72) / 17.52; // -0.3584\r\n\t\t\t}\r\n\t\t\telse if (val < ε) {\r\n\t\t\t\treturn  (Math.log2(ε + val * 0.5) + 9.72) / 17.52;\r\n\t\t\t}\r\n\t\t\telse { // val >= ε\r\n\t\t\t\treturn  (Math.log2(val) + 9.72) / 17.52;\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\t// encoded media white (rgb 1,1,1) => linear  [ 222.861, 222.861, 222.861 ]\r\n\t// encoded media black (rgb 0,0,0) => linear [ 0.0011857, 0.0011857, 0.0011857]\r\n\r\n\t// convert an array of linear-light ACEScc values to CIE XYZ\r\n\ttoXYZ_M: [\r\n\t\t[  0.6624541811085053,   0.13400420645643313,  0.1561876870049078  ],\r\n\t\t[  0.27222871678091454,  0.6740817658111484,   0.05368951740793705 ],\r\n\t\t[ -0.005574649490394108, 0.004060733528982826, 1.0103391003129971  ]\r\n\t],\r\n\t//\r\n\tfromXYZ_M: [\r\n\t\t[  1.6410233796943257,   -0.32480329418479,    -0.23642469523761225  ],\r\n\t\t[ -0.6636628587229829,    1.6153315916573379,   0.016756347685530137 ],\r\n\t\t[  0.011721894328375376, -0.008284441996237409, 0.9883948585390215   ]\r\n\t]\r\n});\r\n\r\n// export default Color;\r\n\r\nlet methods = {\r\n\trange (...args) {\r\n\t\treturn Color$1.range(this, ...args);\r\n\t},\r\n\r\n\t/**\r\n\t * Return an intermediate color between two colors\r\n\t * Signatures: color.mix(color, p, options)\r\n\t *             color.mix(color, options)\r\n\t *             color.mix(color)\r\n\t */\r\n\tmix (color, p = .5, o = {}) {\r\n\t\tif (type(p) === \"object\") {\r\n\t\t\t[p, o] = [.5, p];\r\n\t\t}\r\n\r\n\t\tlet {space, outputSpace} = o;\r\n\r\n\t\tcolor = Color$1.get(color);\r\n\t\tlet range = this.range(color, {space, outputSpace});\r\n\t\treturn range(p);\r\n\t},\r\n\r\n\t/**\r\n\t * Interpolate to color2 and return an array of colors\r\n\t * @returns {Array[Color]}\r\n\t */\r\n\tsteps (...args) {\r\n\t\treturn Color$1.steps(this, ...args);\r\n\t}\r\n};\r\n\r\nColor$1.steps = function(color1, color2, options = {}) {\r\n\tlet range;\r\n\r\n\tif (isRange(color1)) {\r\n\t\t// Tweaking existing range\r\n\t\t[range, options] = [color1, color2];\r\n\t\t[color1, color2] = range.rangeArgs.colors;\r\n\t}\r\n\r\n\tlet {\r\n\t\tmaxDeltaE, deltaEMethod,\r\n\t\tsteps = 2, maxSteps = 1000,\r\n\t\t...rangeOptions\r\n\t} = options;\r\n\r\n\tif (!range) {\r\n\t\tcolor1 = Color$1.get(color1);\r\n\t\tcolor2 = Color$1.get(color2);\r\n\t\trange = Color$1.range(color1, color2, rangeOptions);\r\n\t}\r\n\r\n\tlet totalDelta = this.deltaE(color2);\r\n\tlet actualSteps = maxDeltaE > 0? Math.max(steps, Math.ceil(totalDelta / maxDeltaE) + 1) : steps;\r\n\tlet ret = [];\r\n\r\n\tif (maxSteps !== undefined) {\r\n\t\tactualSteps = Math.min(actualSteps, maxSteps);\r\n\t}\r\n\r\n\tif (actualSteps === 1) {\r\n\t\tret = [{p: .5, color: range(.5)}];\r\n\t}\r\n\telse {\r\n\t\tlet step = 1 / (actualSteps - 1);\r\n\t\tret = Array.from({length: actualSteps}, (_, i) => {\r\n\t\t\tlet p = i * step;\r\n\t\t\treturn {p, color: range(p)};\r\n\t\t});\r\n\t}\r\n\r\n\tif (maxDeltaE > 0) {\r\n\t\t// Iterate over all stops and find max deltaE\r\n\t\tlet maxDelta = ret.reduce((acc, cur, i) => {\r\n\t\t\tif (i === 0) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\tlet deltaE = cur.color.deltaE(ret[i - 1].color, deltaEMethod);\r\n\t\t\treturn Math.max(acc, deltaE);\r\n\t\t}, 0);\r\n\r\n\t\twhile (maxDelta > maxDeltaE) {\r\n\t\t\t// Insert intermediate stops and measure maxDelta again\r\n\t\t\t// We need to do this for all pairs, otherwise the midpoint shifts\r\n\t\t\tmaxDelta = 0;\r\n\r\n\t\t\tfor (let i = 1; (i < ret.length) && (ret.length < maxSteps); i++) {\r\n\t\t\t\tlet prev = ret[i - 1];\r\n\t\t\t\tlet cur = ret[i];\r\n\r\n\t\t\t\tlet p = (cur.p + prev.p) / 2;\r\n\t\t\t\tlet color = range(p);\r\n\t\t\t\tmaxDelta = Math.max(maxDelta, color.deltaE(prev.color), color.deltaE(cur.color));\r\n\t\t\t\tret.splice(i, 0, {p, color: range(p)});\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tret = ret.map(a => a.color);\r\n\r\n\treturn ret;\r\n};\r\n\r\n/**\r\n * Interpolate to color2 and return a function that takes a 0-1 percentage\r\n * @returns {Function}\r\n */\r\nColor$1.range = function(color1, color2, options = {}) {\r\n\tif (isRange(color1)) {\r\n\t\t// Tweaking existing range\r\n\t\tlet [range, options] = [color1, color2];\r\n\t\treturn Color$1.range(...range.rangeArgs.colors, {...range.rangeArgs.options, ...options});\r\n\t}\r\n\r\n\tlet {space, outputSpace, progression, premultiplied} = options;\r\n\r\n\t// Make sure we're working on copies of these colors\r\n\tcolor1 = new Color$1(color1);\r\n\tcolor2 = new Color$1(color2);\r\n\r\n\r\n\tlet rangeArgs = {colors: [color1, color2], options};\r\n\r\n\tif (space) {\r\n\t\tspace = Color$1.space(space);\r\n\t}\r\n\telse {\r\n\t\tspace = Color$1.spaces[Color$1.defaults.interpolationSpace] || color1.space;\r\n\t}\r\n\r\n\toutputSpace = outputSpace? Color$1.space(outputSpace) : (color1.space || space);\r\n\r\n\tcolor1 = color1.to(space).toGamut();\r\n\tcolor2 = color2.to(space).toGamut();\r\n\r\n\t// Handle hue interpolation\r\n\t// See https://github.com/w3c/csswg-drafts/issues/4735#issuecomment-635741840\r\n\tif (space.coords.hue && space.coords.hue.isAngle) {\r\n\t\tlet arc = options.hue = options.hue || \"shorter\";\r\n\r\n\t\t[color1[space.id].hue, color2[space.id].hue] = adjust(arc, [color1[space.id].hue, color2[space.id].hue]);\r\n\t}\r\n\r\n\tif (premultiplied) {\r\n\t\t// not coping with polar spaces yet\r\n\t\tcolor1.coords = color1.coords.map (c => c * color1.alpha);\r\n\t\tcolor2.coords = color2.coords.map (c => c * color2.alpha);\r\n\t}\r\n\r\n\treturn Object.assign(p => {\r\n\t\tp = progression? progression(p) : p;\r\n\t\tlet coords = color1.coords.map((start, i) => {\r\n\t\t\tlet end = color2.coords[i];\r\n\t\t\treturn interpolate(start, end, p);\r\n\t\t});\r\n\t\tlet alpha = interpolate(color1.alpha, color2.alpha, p);\r\n\t\tlet ret = new Color$1(space, coords, alpha);\r\n\r\n\t\tif (premultiplied) {\r\n\t\t\t// undo premultiplication\r\n\t\t\tret.coords = ret.coords.map(c => c / alpha);\r\n\t\t}\r\n\r\n\t\tif (outputSpace !== space) {\r\n\t\t\tret = ret.to(outputSpace);\r\n\t\t}\r\n\r\n\t\treturn ret;\r\n\t}, {\r\n\t\trangeArgs\r\n\t});\r\n};\r\n\r\nfunction isRange (val) {\r\n\treturn type(val) === \"function\" && val.rangeArgs;\r\n}\r\n// Helper\r\nfunction interpolate(start, end, p) {\r\n\tif (isNaN(start)) {\r\n\t\treturn end;\r\n\t}\r\n\r\n\tif (isNaN(end)) {\r\n\t\treturn start;\r\n\t}\r\n\r\n\treturn start + (end - start) * p;\r\n}\r\n\r\nObject.assign(Color$1.defaults, {\r\n\tinterpolationSpace: \"lab\"\r\n});\r\n\r\nObject.assign(Color$1.prototype, methods);\r\nColor$1.statify(Object.keys(methods));\r\n\r\n// More accurate color-difference formulae\r\n// than the simple 1976 Euclidean distance in Lab\r\n\r\n// CMC by the Color Measurement Committee of the\r\n// Bradford Society of Dyeists and Colorsts, 1994.\r\n// Uses LCH rather than Lab,\r\n// with different weights for L, C and H differences\r\n// A nice increase in accuracy for modest increase in complexity\r\n\r\nColor$1.prototype.deltaECMC = function (sample, {l = 2, c = 1} = {}) {\r\n\tlet color = this;\r\n\tsample = Color$1.get(sample);\r\n\r\n\t// Given this color as the reference\r\n\t// and a sample,\r\n\t// calculate deltaE CMC.\r\n\r\n\t// This implementation assumes the parametric\r\n\t// weighting factors l:c are 2:1\r\n\t//  which is typical for non-textile uses.\r\n\r\n\tlet [L1, a1, b1] = color.lab;\r\n\tlet C1 = color.chroma;\r\n\tlet H1 = color.hue;\r\n\tlet [L2, a2, b2] = sample.lab;\r\n\tlet C2 = sample.chroma;\r\n\r\n\t// Check for negative Chroma,\r\n\t// which might happen through\r\n\t// direct user input of LCH values\r\n\r\n\tif (C1 < 0) {\r\n\t\tC1 = 0;\r\n\t}\r\n\tif (C2 < 0) {\r\n\t\tC2 = 0;\r\n\t}\r\n\r\n\t// we don't need H2 as ΔH is calculated from Δa, Δb and ΔC\r\n\t// console.log({L1, a1, b1});\r\n\t// console.log({L2, a2, b2});\r\n\r\n\t// Lightness and Chroma differences\r\n\t// These are (color - sample), unlike deltaE2000\r\n\tlet ΔL = L1 - L2;\r\n\tlet ΔC = C1 - C2;\r\n\t// console.log({ΔL});\r\n\t// console.log({ΔC});\r\n\r\n\tlet Δa = a1 - a2;\r\n\tlet Δb = b1 - b2;\r\n\t// console.log({Δa});\r\n\t// console.log({Δb});\r\n\r\n\t// weighted Hue difference, less for larger Chroma difference\r\n\tconst π = Math.PI;\r\n\tconst d2r = π / 180;\r\n\tlet H2 = (Δa ** 2) + (Δb ** 2) - (ΔC ** 2);\r\n\t// due to roundoff error it is possible that, for zero a and b,\r\n\t// ΔC > Δa + Δb is 0, resulting in attempting\r\n\t// to take the square root of a negative number\r\n\r\n\t// trying instead the equation from Industrial Color Physics\r\n\t// By Georg A. Klein\r\n\r\n\t// let ΔH = ((a1 * b2) - (a2 * b1)) / Math.sqrt(0.5 * ((C2 * C1) + (a2 * a1) + (b2 * b1)));\r\n\t// console.log({ΔH});\r\n\t// This gives the same result to 12 decimal places\r\n\t// except it sometimes NaNs when trying to root a negative number\r\n\r\n\t// let ΔH = Math.sqrt(H2); we never actually use the root, it gets squared again!!\r\n\r\n\t// positional corrections to the lack of uniformity of CIELAB\r\n\t// These are all trying to make JND ellipsoids more like spheres\r\n\r\n\t// SL Lightness crispening factor, depends entirely on L1 not L2\r\n\tlet SL = 0.511;\t// linear portion of the Y to L transfer function\r\n\tif (L1 >= 16) {\t// cubic portion\r\n\t\tSL = (0.040975 * L1) / (1 + 0.01765 * L1);\r\n\t}\r\n\t// console.log({SL});\r\n\r\n\t// SC Chroma factor\r\n\tlet SC = ((0.0638 * C1) / (1 + 0.0131 * C1)) + 0.638;\r\n\t// console.log({SC});\r\n\r\n\t// Cross term T for blue non-linearity\r\n\tlet T;\r\n\tif ( Number.isNaN(H1)) {\r\n\t\tH1 = 0;\r\n\t}\r\n\r\n\tif (H1 >= 164 && H1 <= 345) {\r\n\t\tT = 0.56 + Math.abs(0.2 * Math.cos((H1 + 168) * d2r));\r\n\t}\r\n\telse {\r\n\t\tT = 0.36 + Math.abs(0.4 * Math.cos((H1 + 35) * d2r));\r\n\t}\r\n\t// console.log({T});\r\n\r\n\t// SH Hue factor also depends on C1,\r\n\tlet C4 = Math.pow(C1, 4);\r\n\tlet F = Math.sqrt(C4 / (C4 + 1900));\r\n\tlet SH = SC * ((F * T) + 1 - F);\r\n\t// console.log({SH});\r\n\r\n\t// Finally calculate the deltaE, term by term as root sume of squares\r\n\tlet dE = (ΔL / (l * SL)) ** 2;\r\n\tdE += (ΔC / (c * SC)) ** 2;\r\n\tdE += (H2 / (SH ** 2));\r\n\t// dE += (ΔH / SH)  ** 2;\r\n\treturn Math.sqrt(dE);\r\n\t// Yay!!!\r\n};\r\n\r\nColor$1.statify([\"deltaECMC\"]);\r\n\r\n// deltaE2000 is a statistically significant improvement\r\n// and is recommended by the CIE and Idealliance\r\n// especially for color differences less than 10 deltaE76\r\n// but is wicked complicated\r\n// and many implementations have small errors!\r\n// DeltaE2000 is also discontinuous; in case this\r\n// matters to you, use deltaECMC instead.\r\n\r\nColor$1.prototype.deltaE2000 = function (sample, {kL = 1, kC = 1, kH = 1} = {}) {\r\n\tlet color = this;\r\n\tsample = Color$1.get(sample);\r\n\r\n\t// Given this color as the reference\r\n\t// and the function parameter as the sample,\r\n\t// calculate deltaE 2000.\r\n\r\n\t// This implementation assumes the parametric\r\n\t// weighting factors kL, kC and kH\r\n\t// for the influence of viewing conditions\r\n\t// are all 1, as sadly seems typical.\r\n\t// kL should be increased for lightness texture or noise\r\n\t// and kC increased for chroma noise\r\n\r\n\tlet [L1, a1, b1] = color.lab;\r\n\tlet C1 = color.chroma;\r\n\tlet [L2, a2, b2] = sample.lab;\r\n\tlet C2 = sample.chroma;\r\n\r\n\t// Check for negative Chroma,\r\n\t// which might happen through\r\n\t// direct user input of LCH values\r\n\r\n\tif (C1 < 0) {\r\n\t\tC1 = 0;\r\n\t}\r\n\tif (C2 < 0) {\r\n\t\tC2 = 0;\r\n\t}\r\n\r\n\tlet Cbar = (C1 + C2)/2; // mean Chroma\r\n\r\n\t// calculate a-axis asymmetry factor from mean Chroma\r\n\t// this turns JND ellipses for near-neutral colors back into circles\r\n\tlet C7 = Math.pow(Cbar, 7);\r\n\tconst Gfactor = Math.pow(25, 7);\r\n\tlet G = 0.5 * (1 - Math.sqrt(C7/(C7+Gfactor)));\r\n\r\n\t// scale a axes by asymmetry factor\r\n\t// this by the way is why there is no Lab2000 colorspace\r\n\tlet adash1 = (1 + G) * a1;\r\n\tlet adash2 = (1 + G) * a2;\r\n\r\n\t// calculate new Chroma from scaled a and original b axes\r\n\tlet Cdash1 = Math.sqrt(adash1 ** 2 + b1 ** 2);\r\n\tlet Cdash2 = Math.sqrt(adash2 ** 2 + b2 ** 2);\r\n\r\n\t// calculate new hues, with zero hue for true neutrals\r\n\t// and in degrees, not radians\r\n\tconst π = Math.PI;\r\n\tconst r2d = 180 / π;\r\n\tconst d2r = π / 180;\r\n\tlet h1 = (adash1 === 0 && b1 === 0)? 0: Math.atan2(b1, adash1);\r\n\tlet h2 = (adash2 === 0 && b2 === 0)? 0: Math.atan2(b2, adash2);\r\n\r\n\tif (h1 < 0) {\r\n\t\th1 += 2 * π;\r\n\t}\r\n\tif (h2 < 0) {\r\n\t\th2 += 2 * π;\r\n\t}\r\n\r\n\th1 *= r2d;\r\n\th2 *= r2d;\r\n\r\n\t// Lightness and Chroma differences; sign matters\r\n\tlet ΔL = L2 - L1;\r\n\tlet ΔC = Cdash2 - Cdash1;\r\n\r\n\t// Hue difference, getting the sign correct\r\n\tlet hdiff = h2 - h1;\r\n\tlet hsum = h1 + h2;\r\n\tlet habs = Math.abs(hdiff);\r\n\tlet Δh;\r\n\r\n\tif (Cdash1 * Cdash2 === 0) {\r\n\t\tΔh = 0;\r\n\t}\r\n\telse if (habs <= 180) {\r\n\t\tΔh = hdiff;\r\n\t}\r\n\telse if (hdiff > 180) {\r\n\t\tΔh = hdiff - 360;\r\n\t}\r\n\telse if (hdiff < -180) {\r\n\t\tΔh = hdiff + 360;\r\n\t}\r\n\telse {\r\n\t\tconsole.log(\"the unthinkable has happened\");\r\n\t}\r\n\r\n\t// weighted Hue difference, more for larger Chroma\r\n\tlet ΔH = 2 * Math.sqrt(Cdash2 * Cdash1) * Math.sin(Δh * d2r / 2);\r\n\r\n\t// calculate mean Lightness and Chroma\r\n\tlet Ldash = (L1 + L2)/2;\r\n\tlet Cdash = (Cdash1 + Cdash2)/2;\r\n\tlet Cdash7 = Math.pow(Cdash, 7);\r\n\r\n\t// Compensate for non-linearity in the blue region of Lab.\r\n\t// Four possibilities for hue weighting factor,\r\n\t// depending on the angles, to get the correct sign\r\n\tlet hdash;\r\n\tif (Cdash1 * Cdash2 === 0) {\r\n\t\thdash = hsum;   // which should be zero\r\n\t}\r\n\telse if (habs <= 180) {\r\n\t\thdash = hsum / 2;\r\n\t}\r\n\telse if (hsum < 360) {\r\n\t\thdash = (hsum + 360) / 2;\r\n\t}\r\n\telse {\r\n\t\thdash = (hsum - 360) / 2;\r\n\t}\r\n\r\n\t// positional corrections to the lack of uniformity of CIELAB\r\n\t// These are all trying to make JND ellipsoids more like spheres\r\n\r\n\t// SL Lightness crispening factor\r\n\t// a background with L=50 is assumed\r\n\tlet lsq = (Ldash - 50) ** 2;\r\n\tlet SL = 1 + ((0.015 * lsq) / Math.sqrt(20 + lsq));\r\n\r\n\t// SC Chroma factor, similar to those in CMC and deltaE 94 formulae\r\n\tlet SC = 1 + 0.045 * Cdash;\r\n\r\n\t// Cross term T for blue non-linearity\r\n\tlet T = 1;\r\n\tT -= (0.17 * Math.cos((     hdash - 30)  * d2r));\r\n\tT += (0.24 * Math.cos(  2 * hdash        * d2r));\r\n\tT += (0.32 * Math.cos(((3 * hdash) + 6)  * d2r));\r\n\tT -= (0.20 * Math.cos(((4 * hdash) - 63) * d2r));\r\n\r\n\t// SH Hue factor depends on Chroma,\r\n\t// as well as adjusted hue angle like deltaE94.\r\n\tlet SH = 1 + 0.015 * Cdash * T;\r\n\r\n\t// RT Hue rotation term compensates for rotation of JND ellipses\r\n\t// and Munsell constant hue lines\r\n\t// in the medium-high Chroma blue region\r\n\t// (Hue 225 to 315)\r\n\tlet Δθ = 30 * Math.exp(-1 * (((hdash - 275)/25) ** 2));\r\n\tlet RC = 2 * Math.sqrt(Cdash7/(Cdash7 + Gfactor));\r\n\tlet RT = -1 * Math.sin(2 * Δθ * d2r) * RC;\r\n\r\n\t// Finally calculate the deltaE, term by term as root sume of squares\r\n\tlet dE = (ΔL / (kL * SL)) ** 2;\r\n\tdE += (ΔC / (kC * SC)) ** 2;\r\n\tdE += (ΔH / (kH * SH)) ** 2;\r\n\tdE += RT * (ΔC / (kC * SC)) * (ΔH / (kH * SH));\r\n\treturn Math.sqrt(dE);\r\n\t// Yay!!!\r\n};\r\n\r\nColor$1.statify([\"deltaE2000\"]);\r\n\r\n// More accurate color-difference formulae\r\n// than the simple 1976 Euclidean distance in Lab\r\n\r\n// Uses JzCzHz, which has improved perceptual uniformity\r\n// and thus a simple Euclidean root-sum of ΔL² ΔC² ΔH²\r\n// gives good results.\r\n\r\nColor$1.prototype.deltaEJz = function (sample) {\r\n\tlet color = this;\r\n\tsample = Color$1.get(sample);\r\n\r\n\t// Given this color as the reference\r\n\t// and a sample,\r\n\t// calculate deltaE in JzCzHz.\r\n\r\n\tlet [Jz1, Cz1, Hz1] = color.jzczhz;\r\n\tlet [Jz2, Cz2, Hz2] = sample.jzczhz;\r\n\r\n\t// Lightness and Chroma differences\r\n\t// sign does not matter as they are squared.\r\n\tlet ΔJ = Jz1 - Jz2;\r\n\tlet ΔC = Cz1 - Cz2;\r\n\r\n\t// length of chord for ΔH\r\n\tif ((Number.isNaN(Hz1)) && (Number.isNaN(Hz2))) {\r\n\t\t// both undefined hues\r\n\t\tHz1 = 0;\r\n\t\tHz2 = 0;\r\n\t} else\r\n\tif (Number.isNaN(Hz1)) {\r\n\t\t// one undefined, set to the defined hue\r\n\t\tHz1 = Hz2;\r\n\t} else\r\n\tif (Number.isNaN(Hz2)) {\r\n\t\tHz2 = Hz1;\r\n\t}\r\n\r\n\tlet Δh = Hz1 - Hz2;\r\n\tlet ΔH = 2 * Math.sqrt(Cz1 * Cz2) * Math.sin(Δh * Math.PI / 180);\r\n\r\n\treturn Math.sqrt(ΔJ ** 2 + ΔC ** 2 + ΔH ** 2);\r\n};\r\n\r\nColor$1.statify([\"deltaEJz\"]);\r\n\r\n// Delta E in ICtCp space,\r\n// which the ITU calls Delta E ITP, which is shorter\r\n// formulae from ITU Rec. ITU-R BT.2124-0\r\n\r\nColor$1.prototype.deltaEITP = function (sample) {\r\n\tlet color = this;\r\n\tsample = Color$1.get(sample);\r\n\r\n\t// Given this color as the reference\r\n\t// and a sample,\r\n\t// calculate deltaE in ICtCp\r\n\t// which is simply the Euclidean distance\r\n\r\n\tlet [ I1, T1, P1 ] = color.ictcp;\r\n\tlet [ I2, T2, P2 ] = sample.ictcp;\r\n\r\n\t// the 0.25 factor is to undo the encoding scaling in Ct\r\n\t// the 720 is so that 1 deltaE = 1 JND\r\n\t// per  ITU-R BT.2124-0 p.3\r\n\r\n\treturn 720 * Math.sqrt((I1 - I2) ** 2 + (0.25 * (T1 -T2) ** 2) + (P1 - P2) ** 2);\r\n};\r\n\r\nColor$1.statify([\"deltaEITP\"]);\r\n\r\n// More accurate color-difference formulae\r\n// than the simple 1976 Euclidean distance in CIE Lab\r\n\r\n\r\nColor$1.prototype.deltaEOK = function (sample, deltas = {}) {\r\n\tlet color = this;\r\n\tsample = Color$1.get(sample);\r\n\r\n\t// Given this color as the reference\r\n\t// and a sample,\r\n\t// calculate deltaEOK, term by term as root sum of squares\r\n\tlet [L1, a1, b1] = color.oklab;\r\n\tlet [L2, a2, b2] = sample.oklab;\r\n\tlet ΔL = L1 - L2;\r\n\tlet Δa = a1 - a2;\r\n\tlet Δb = b1 - b2;\r\n\treturn Math.sqrt(ΔL ** 2 + Δa ** 2 + Δb ** 2);\r\n};\r\n\r\nColor$1.statify([\"deltaEOK\"]);\r\n\r\n/* Parse color keywords without the browser DOM\r\n * This is only needed to parse Color keywords in Node,\r\n * and to improve performance when parsing color keywords in the browser\r\n * To take advantage of this, just import the module.\r\n * You can also take advantage of its default exports, if you need a data structure of named colors\r\n * Note that this does not handle currentColor\r\n */\r\n\r\n// To produce: Visit https://www.w3.org/TR/css-color-4/#named-colors\r\n// and run in the console:\r\n// copy($$(\"tr\", $(\".named-color-table tbody\")).map(tr => `\"${tr.cells[2].textContent.trim()}\": [${tr.cells[4].textContent.trim().split(/\\s+/).map(c => c === \"0\"? \"0\" : c === \"255\"? \"1\" : c + \" / 255\").join(\", \")}]`).join(\",\\n\"))\r\nconst KEYWORDS = {\r\n\t\"aliceblue\": [240 / 255, 248 / 255, 1],\r\n\t\"antiquewhite\": [250 / 255, 235 / 255, 215 / 255],\r\n\t\"aqua\": [0, 1, 1],\r\n\t\"aquamarine\": [127 / 255, 1, 212 / 255],\r\n\t\"azure\": [240 / 255, 1, 1],\r\n\t\"beige\": [245 / 255, 245 / 255, 220 / 255],\r\n\t\"bisque\": [1, 228 / 255, 196 / 255],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [1, 235 / 255, 205 / 255],\r\n\t\"blue\": [0, 0, 1],\r\n\t\"blueviolet\": [138 / 255, 43 / 255, 226 / 255],\r\n\t\"brown\": [165 / 255, 42 / 255, 42 / 255],\r\n\t\"burlywood\": [222 / 255, 184 / 255, 135 / 255],\r\n\t\"cadetblue\": [95 / 255, 158 / 255, 160 / 255],\r\n\t\"chartreuse\": [127 / 255, 1, 0],\r\n\t\"chocolate\": [210 / 255, 105 / 255, 30 / 255],\r\n\t\"coral\": [1, 127 / 255, 80 / 255],\r\n\t\"cornflowerblue\": [100 / 255, 149 / 255, 237 / 255],\r\n\t\"cornsilk\": [1, 248 / 255, 220 / 255],\r\n\t\"crimson\": [220 / 255, 20 / 255, 60 / 255],\r\n\t\"cyan\": [0, 1, 1],\r\n\t\"darkblue\": [0, 0, 139 / 255],\r\n\t\"darkcyan\": [0, 139 / 255, 139 / 255],\r\n\t\"darkgoldenrod\": [184 / 255, 134 / 255, 11 / 255],\r\n\t\"darkgray\": [169 / 255, 169 / 255, 169 / 255],\r\n\t\"darkgreen\": [0, 100 / 255, 0],\r\n\t\"darkgrey\": [169 / 255, 169 / 255, 169 / 255],\r\n\t\"darkkhaki\": [189 / 255, 183 / 255, 107 / 255],\r\n\t\"darkmagenta\": [139 / 255, 0, 139 / 255],\r\n\t\"darkolivegreen\": [85 / 255, 107 / 255, 47 / 255],\r\n\t\"darkorange\": [1, 140 / 255, 0],\r\n\t\"darkorchid\": [153 / 255, 50 / 255, 204 / 255],\r\n\t\"darkred\": [139 / 255, 0, 0],\r\n\t\"darksalmon\": [233 / 255, 150 / 255, 122 / 255],\r\n\t\"darkseagreen\": [143 / 255, 188 / 255, 143 / 255],\r\n\t\"darkslateblue\": [72 / 255, 61 / 255, 139 / 255],\r\n\t\"darkslategray\": [47 / 255, 79 / 255, 79 / 255],\r\n\t\"darkslategrey\": [47 / 255, 79 / 255, 79 / 255],\r\n\t\"darkturquoise\": [0, 206 / 255, 209 / 255],\r\n\t\"darkviolet\": [148 / 255, 0, 211 / 255],\r\n\t\"deeppink\": [1, 20 / 255, 147 / 255],\r\n\t\"deepskyblue\": [0, 191 / 255, 1],\r\n\t\"dimgray\": [105 / 255, 105 / 255, 105 / 255],\r\n\t\"dimgrey\": [105 / 255, 105 / 255, 105 / 255],\r\n\t\"dodgerblue\": [30 / 255, 144 / 255, 1],\r\n\t\"firebrick\": [178 / 255, 34 / 255, 34 / 255],\r\n\t\"floralwhite\": [1, 250 / 255, 240 / 255],\r\n\t\"forestgreen\": [34 / 255, 139 / 255, 34 / 255],\r\n\t\"fuchsia\": [1, 0, 1],\r\n\t\"gainsboro\": [220 / 255, 220 / 255, 220 / 255],\r\n\t\"ghostwhite\": [248 / 255, 248 / 255, 1],\r\n\t\"gold\": [1, 215 / 255, 0],\r\n\t\"goldenrod\": [218 / 255, 165 / 255, 32 / 255],\r\n\t\"gray\": [128 / 255, 128 / 255, 128 / 255],\r\n\t\"green\": [0, 128 / 255, 0],\r\n\t\"greenyellow\": [173 / 255, 1, 47 / 255],\r\n\t\"grey\": [128 / 255, 128 / 255, 128 / 255],\r\n\t\"honeydew\": [240 / 255, 1, 240 / 255],\r\n\t\"hotpink\": [1, 105 / 255, 180 / 255],\r\n\t\"indianred\": [205 / 255, 92 / 255, 92 / 255],\r\n\t\"indigo\": [75 / 255, 0, 130 / 255],\r\n\t\"ivory\": [1, 1, 240 / 255],\r\n\t\"khaki\": [240 / 255, 230 / 255, 140 / 255],\r\n\t\"lavender\": [230 / 255, 230 / 255, 250 / 255],\r\n\t\"lavenderblush\": [1, 240 / 255, 245 / 255],\r\n\t\"lawngreen\": [124 / 255, 252 / 255, 0],\r\n\t\"lemonchiffon\": [1, 250 / 255, 205 / 255],\r\n\t\"lightblue\": [173 / 255, 216 / 255, 230 / 255],\r\n\t\"lightcoral\": [240 / 255, 128 / 255, 128 / 255],\r\n\t\"lightcyan\": [224 / 255, 1, 1],\r\n\t\"lightgoldenrodyellow\": [250 / 255, 250 / 255, 210 / 255],\r\n\t\"lightgray\": [211 / 255, 211 / 255, 211 / 255],\r\n\t\"lightgreen\": [144 / 255, 238 / 255, 144 / 255],\r\n\t\"lightgrey\": [211 / 255, 211 / 255, 211 / 255],\r\n\t\"lightpink\": [1, 182 / 255, 193 / 255],\r\n\t\"lightsalmon\": [1, 160 / 255, 122 / 255],\r\n\t\"lightseagreen\": [32 / 255, 178 / 255, 170 / 255],\r\n\t\"lightskyblue\": [135 / 255, 206 / 255, 250 / 255],\r\n\t\"lightslategray\": [119 / 255, 136 / 255, 153 / 255],\r\n\t\"lightslategrey\": [119 / 255, 136 / 255, 153 / 255],\r\n\t\"lightsteelblue\": [176 / 255, 196 / 255, 222 / 255],\r\n\t\"lightyellow\": [1, 1, 224 / 255],\r\n\t\"lime\": [0, 1, 0],\r\n\t\"limegreen\": [50 / 255, 205 / 255, 50 / 255],\r\n\t\"linen\": [250 / 255, 240 / 255, 230 / 255],\r\n\t\"magenta\": [1, 0, 1],\r\n\t\"maroon\": [128 / 255, 0, 0],\r\n\t\"mediumaquamarine\": [102 / 255, 205 / 255, 170 / 255],\r\n\t\"mediumblue\": [0, 0, 205 / 255],\r\n\t\"mediumorchid\": [186 / 255, 85 / 255, 211 / 255],\r\n\t\"mediumpurple\": [147 / 255, 112 / 255, 219 / 255],\r\n\t\"mediumseagreen\": [60 / 255, 179 / 255, 113 / 255],\r\n\t\"mediumslateblue\": [123 / 255, 104 / 255, 238 / 255],\r\n\t\"mediumspringgreen\": [0, 250 / 255, 154 / 255],\r\n\t\"mediumturquoise\": [72 / 255, 209 / 255, 204 / 255],\r\n\t\"mediumvioletred\": [199 / 255, 21 / 255, 133 / 255],\r\n\t\"midnightblue\": [25 / 255, 25 / 255, 112 / 255],\r\n\t\"mintcream\": [245 / 255, 1, 250 / 255],\r\n\t\"mistyrose\": [1, 228 / 255, 225 / 255],\r\n\t\"moccasin\": [1, 228 / 255, 181 / 255],\r\n\t\"navajowhite\": [1, 222 / 255, 173 / 255],\r\n\t\"navy\": [0, 0, 128 / 255],\r\n\t\"oldlace\": [253 / 255, 245 / 255, 230 / 255],\r\n\t\"olive\": [128 / 255, 128 / 255, 0],\r\n\t\"olivedrab\": [107 / 255, 142 / 255, 35 / 255],\r\n\t\"orange\": [1, 165 / 255, 0],\r\n\t\"orangered\": [1, 69 / 255, 0],\r\n\t\"orchid\": [218 / 255, 112 / 255, 214 / 255],\r\n\t\"palegoldenrod\": [238 / 255, 232 / 255, 170 / 255],\r\n\t\"palegreen\": [152 / 255, 251 / 255, 152 / 255],\r\n\t\"paleturquoise\": [175 / 255, 238 / 255, 238 / 255],\r\n\t\"palevioletred\": [219 / 255, 112 / 255, 147 / 255],\r\n\t\"papayawhip\": [1, 239 / 255, 213 / 255],\r\n\t\"peachpuff\": [1, 218 / 255, 185 / 255],\r\n\t\"peru\": [205 / 255, 133 / 255, 63 / 255],\r\n\t\"pink\": [1, 192 / 255, 203 / 255],\r\n\t\"plum\": [221 / 255, 160 / 255, 221 / 255],\r\n\t\"powderblue\": [176 / 255, 224 / 255, 230 / 255],\r\n\t\"purple\": [128 / 255, 0, 128 / 255],\r\n\t\"rebeccapurple\": [102 / 255, 51 / 255, 153 / 255],\r\n\t\"red\": [1, 0, 0],\r\n\t\"rosybrown\": [188 / 255, 143 / 255, 143 / 255],\r\n\t\"royalblue\": [65 / 255, 105 / 255, 225 / 255],\r\n\t\"saddlebrown\": [139 / 255, 69 / 255, 19 / 255],\r\n\t\"salmon\": [250 / 255, 128 / 255, 114 / 255],\r\n\t\"sandybrown\": [244 / 255, 164 / 255, 96 / 255],\r\n\t\"seagreen\": [46 / 255, 139 / 255, 87 / 255],\r\n\t\"seashell\": [1, 245 / 255, 238 / 255],\r\n\t\"sienna\": [160 / 255, 82 / 255, 45 / 255],\r\n\t\"silver\": [192 / 255, 192 / 255, 192 / 255],\r\n\t\"skyblue\": [135 / 255, 206 / 255, 235 / 255],\r\n\t\"slateblue\": [106 / 255, 90 / 255, 205 / 255],\r\n\t\"slategray\": [112 / 255, 128 / 255, 144 / 255],\r\n\t\"slategrey\": [112 / 255, 128 / 255, 144 / 255],\r\n\t\"snow\": [1, 250 / 255, 250 / 255],\r\n\t\"springgreen\": [0, 1, 127 / 255],\r\n\t\"steelblue\": [70 / 255, 130 / 255, 180 / 255],\r\n\t\"tan\": [210 / 255, 180 / 255, 140 / 255],\r\n\t\"teal\": [0, 128 / 255, 128 / 255],\r\n\t\"thistle\": [216 / 255, 191 / 255, 216 / 255],\r\n\t\"tomato\": [1, 99 / 255, 71 / 255],\r\n\t\"turquoise\": [64 / 255, 224 / 255, 208 / 255],\r\n\t\"violet\": [238 / 255, 130 / 255, 238 / 255],\r\n\t\"wheat\": [245 / 255, 222 / 255, 179 / 255],\r\n\t\"white\": [1, 1, 1],\r\n\t\"whitesmoke\": [245 / 255, 245 / 255, 245 / 255],\r\n\t\"yellow\": [1, 1, 0],\r\n\t\"yellowgreen\": [154 / 255, 205 / 255, 50 / 255]\r\n};\r\n\r\nColor$1.hooks.add(\"parse-start\", env => {\r\n\tlet str = env.str.toLowerCase();\r\n\tlet ret = {spaceId: \"srgb\", coords: null, alpha: 1};\r\n\r\n\tif (str === \"transparent\") {\r\n\t\tret.coords = KEYWORDS.black;\r\n\t\tret.alpha = 0;\r\n\t}\r\n\telse {\r\n\t\tret.coords = KEYWORDS[str];\r\n\t}\r\n\r\n\tif (ret.coords) {\r\n\t\tenv.color = ret;\r\n\t}\r\n});\r\n\r\n// Import all modules of Color.js\r\n\r\nexport default Color$1;\r\nexport { util };\r\n//# sourceMappingURL=color.esm.js.map"]},"metadata":{},"sourceType":"module"}