{"ast":null,"code":"import _ol_extent_ from '../../extent.js';\nimport _ol_geom_flat_contains_ from '../flat/contains.js';\nimport _ol_geom_flat_segments_ from '../flat/segments.js';\nvar _ol_geom_flat_intersectsextent_ = {};\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n\n_ol_geom_flat_intersectsextent_.lineString = function (flatCoordinates, offset, end, stride, extent) {\n  var coordinatesExtent = _ol_extent_.extendFlatCoordinates(_ol_extent_.createEmpty(), flatCoordinates, offset, end, stride);\n\n  if (!_ol_extent_.intersects(extent, coordinatesExtent)) {\n    return false;\n  }\n\n  if (_ol_extent_.containsExtent(extent, coordinatesExtent)) {\n    return true;\n  }\n\n  if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {\n    return true;\n  }\n\n  if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {\n    return true;\n  }\n\n  return _ol_geom_flat_segments_.forEach(flatCoordinates, offset, end, stride,\n  /**\n   * @param {ol.Coordinate} point1 Start point.\n   * @param {ol.Coordinate} point2 End point.\n   * @return {boolean} `true` if the segment and the extent intersect,\n   *     `false` otherwise.\n   */\n  function (point1, point2) {\n    return _ol_extent_.intersectsSegment(extent, point1, point2);\n  });\n};\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n\n\n_ol_geom_flat_intersectsextent_.lineStrings = function (flatCoordinates, offset, ends, stride, extent) {\n  var i, ii;\n\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    if (_ol_geom_flat_intersectsextent_.lineString(flatCoordinates, offset, ends[i], stride, extent)) {\n      return true;\n    }\n\n    offset = ends[i];\n  }\n\n  return false;\n};\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n\n\n_ol_geom_flat_intersectsextent_.linearRing = function (flatCoordinates, offset, end, stride, extent) {\n  if (_ol_geom_flat_intersectsextent_.lineString(flatCoordinates, offset, end, stride, extent)) {\n    return true;\n  }\n\n  if (_ol_geom_flat_contains_.linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[1])) {\n    return true;\n  }\n\n  if (_ol_geom_flat_contains_.linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[3])) {\n    return true;\n  }\n\n  if (_ol_geom_flat_contains_.linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[1])) {\n    return true;\n  }\n\n  if (_ol_geom_flat_contains_.linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[3])) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n\n\n_ol_geom_flat_intersectsextent_.linearRings = function (flatCoordinates, offset, ends, stride, extent) {\n  if (!_ol_geom_flat_intersectsextent_.linearRing(flatCoordinates, offset, ends[0], stride, extent)) {\n    return false;\n  }\n\n  if (ends.length === 1) {\n    return true;\n  }\n\n  var i, ii;\n\n  for (i = 1, ii = ends.length; i < ii; ++i) {\n    if (_ol_geom_flat_contains_.linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<Array.<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n\n\n_ol_geom_flat_intersectsextent_.linearRingss = function (flatCoordinates, offset, endss, stride, extent) {\n  var i, ii;\n\n  for (i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n\n    if (_ol_geom_flat_intersectsextent_.linearRings(flatCoordinates, offset, ends, stride, extent)) {\n      return true;\n    }\n\n    offset = ends[ends.length - 1];\n  }\n\n  return false;\n};\n\nexport default _ol_geom_flat_intersectsextent_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/geom/flat/intersectsextent.js"],"names":["_ol_extent_","_ol_geom_flat_contains_","_ol_geom_flat_segments_","_ol_geom_flat_intersectsextent_","lineString","flatCoordinates","offset","end","stride","extent","coordinatesExtent","extendFlatCoordinates","createEmpty","intersects","containsExtent","forEach","point1","point2","intersectsSegment","lineStrings","ends","i","ii","length","linearRing","linearRingContainsXY","linearRings","linearRingContainsExtent","linearRingss","endss"],"mappings":"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","sourcesContent":["import _ol_extent_ from '../../extent.js';\nimport _ol_geom_flat_contains_ from '../flat/contains.js';\nimport _ol_geom_flat_segments_ from '../flat/segments.js';\nvar _ol_geom_flat_intersectsextent_ = {};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n_ol_geom_flat_intersectsextent_.lineString = function(flatCoordinates, offset, end, stride, extent) {\n  var coordinatesExtent = _ol_extent_.extendFlatCoordinates(\n      _ol_extent_.createEmpty(), flatCoordinates, offset, end, stride);\n  if (!_ol_extent_.intersects(extent, coordinatesExtent)) {\n    return false;\n  }\n  if (_ol_extent_.containsExtent(extent, coordinatesExtent)) {\n    return true;\n  }\n  if (coordinatesExtent[0] >= extent[0] &&\n      coordinatesExtent[2] <= extent[2]) {\n    return true;\n  }\n  if (coordinatesExtent[1] >= extent[1] &&\n      coordinatesExtent[3] <= extent[3]) {\n    return true;\n  }\n  return _ol_geom_flat_segments_.forEach(flatCoordinates, offset, end, stride,\n      /**\n       * @param {ol.Coordinate} point1 Start point.\n       * @param {ol.Coordinate} point2 End point.\n       * @return {boolean} `true` if the segment and the extent intersect,\n       *     `false` otherwise.\n       */\n      function(point1, point2) {\n        return _ol_extent_.intersectsSegment(extent, point1, point2);\n      });\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n_ol_geom_flat_intersectsextent_.lineStrings = function(flatCoordinates, offset, ends, stride, extent) {\n  var i, ii;\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    if (_ol_geom_flat_intersectsextent_.lineString(\n        flatCoordinates, offset, ends[i], stride, extent)) {\n      return true;\n    }\n    offset = ends[i];\n  }\n  return false;\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n_ol_geom_flat_intersectsextent_.linearRing = function(flatCoordinates, offset, end, stride, extent) {\n  if (_ol_geom_flat_intersectsextent_.lineString(\n      flatCoordinates, offset, end, stride, extent)) {\n    return true;\n  }\n  if (_ol_geom_flat_contains_.linearRingContainsXY(\n      flatCoordinates, offset, end, stride, extent[0], extent[1])) {\n    return true;\n  }\n  if (_ol_geom_flat_contains_.linearRingContainsXY(\n      flatCoordinates, offset, end, stride, extent[0], extent[3])) {\n    return true;\n  }\n  if (_ol_geom_flat_contains_.linearRingContainsXY(\n      flatCoordinates, offset, end, stride, extent[2], extent[1])) {\n    return true;\n  }\n  if (_ol_geom_flat_contains_.linearRingContainsXY(\n      flatCoordinates, offset, end, stride, extent[2], extent[3])) {\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n_ol_geom_flat_intersectsextent_.linearRings = function(flatCoordinates, offset, ends, stride, extent) {\n  if (!_ol_geom_flat_intersectsextent_.linearRing(\n      flatCoordinates, offset, ends[0], stride, extent)) {\n    return false;\n  }\n  if (ends.length === 1) {\n    return true;\n  }\n  var i, ii;\n  for (i = 1, ii = ends.length; i < ii; ++i) {\n    if (_ol_geom_flat_contains_.linearRingContainsExtent(\n        flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<Array.<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n_ol_geom_flat_intersectsextent_.linearRingss = function(flatCoordinates, offset, endss, stride, extent) {\n  var i, ii;\n  for (i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    if (_ol_geom_flat_intersectsextent_.linearRings(\n        flatCoordinates, offset, ends, stride, extent)) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n};\nexport default _ol_geom_flat_intersectsextent_;\n"]},"metadata":{},"sourceType":"module"}