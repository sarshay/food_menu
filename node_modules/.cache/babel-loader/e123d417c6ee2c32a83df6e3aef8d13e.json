{"ast":null,"code":"import _ol_ from './index.js';\nimport _ol_PluggableMap_ from './pluggablemap.js';\nimport _ol_PluginType_ from './plugintype.js';\nimport _ol_control_ from './control.js';\nimport _ol_interaction_ from './interaction.js';\nimport _ol_obj_ from './obj.js';\nimport _ol_plugins_ from './plugins.js';\nimport _ol_renderer_canvas_ImageLayer_ from './renderer/canvas/imagelayer.js';\nimport _ol_renderer_canvas_Map_ from './renderer/canvas/map.js';\nimport _ol_renderer_canvas_TileLayer_ from './renderer/canvas/tilelayer.js';\nimport _ol_renderer_canvas_VectorLayer_ from './renderer/canvas/vectorlayer.js';\nimport _ol_renderer_canvas_VectorTileLayer_ from './renderer/canvas/vectortilelayer.js';\nimport _ol_renderer_webgl_ImageLayer_ from './renderer/webgl/imagelayer.js';\nimport _ol_renderer_webgl_Map_ from './renderer/webgl/map.js';\nimport _ol_renderer_webgl_TileLayer_ from './renderer/webgl/tilelayer.js';\nimport _ol_renderer_webgl_VectorLayer_ from './renderer/webgl/vectorlayer.js';\n\nif (_ol_.ENABLE_CANVAS) {\n  _ol_plugins_.register(_ol_PluginType_.MAP_RENDERER, _ol_renderer_canvas_Map_);\n\n  _ol_plugins_.registerMultiple(_ol_PluginType_.LAYER_RENDERER, [_ol_renderer_canvas_ImageLayer_, _ol_renderer_canvas_TileLayer_, _ol_renderer_canvas_VectorLayer_, _ol_renderer_canvas_VectorTileLayer_]);\n}\n\nif (_ol_.ENABLE_WEBGL) {\n  _ol_plugins_.register(_ol_PluginType_.MAP_RENDERER, _ol_renderer_webgl_Map_);\n\n  _ol_plugins_.registerMultiple(_ol_PluginType_.LAYER_RENDERER, [_ol_renderer_webgl_ImageLayer_, _ol_renderer_webgl_TileLayer_, _ol_renderer_webgl_VectorLayer_]);\n}\n/**\n * @classdesc\n * The map is the core component of OpenLayers. For a map to render, a view,\n * one or more layers, and a target container are needed:\n *\n *     var map = new ol.Map({\n *       view: new ol.View({\n *         center: [0, 0],\n *         zoom: 1\n *       }),\n *       layers: [\n *         new ol.layer.Tile({\n *           source: new ol.source.OSM()\n *         })\n *       ],\n *       target: 'map'\n *     });\n *\n * The above snippet creates a map using a {@link ol.layer.Tile} to display\n * {@link ol.source.OSM} OSM data and render it to a DOM element with the\n * id `map`.\n *\n * The constructor places a viewport container (with CSS class name\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\n * further elements within the viewport: one with CSS class name\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\n * option of {@link ol.Overlay} for the difference). The map itself is placed in\n * a further element within the viewport.\n *\n * Layers are stored as a `ol.Collection` in layerGroups. A top-level group is\n * provided by the library. This is what is accessed by `getLayerGroup` and\n * `setLayerGroup`. Layers entered in the options are added to this group, and\n * `addLayer` and `removeLayer` change the layer collection in the group.\n * `getLayers` is a convenience function for `getLayerGroup().getLayers()`.\n * Note that `ol.layer.Group` is a subclass of `ol.layer.Base`, so layers\n * entered in the options or added with `addLayer` can be groups, which can\n * contain further groups, and so on.\n *\n * @constructor\n * @extends {ol.PluggableMap}\n * @param {olx.MapOptions} options Map options.\n * @fires ol.MapBrowserEvent\n * @fires ol.MapEvent\n * @fires ol.render.Event#postcompose\n * @fires ol.render.Event#precompose\n * @api\n */\n\n\nvar _ol_Map_ = function (options) {\n  options = _ol_obj_.assign({}, options);\n\n  if (!options.controls) {\n    options.controls = _ol_control_.defaults();\n  }\n\n  if (!options.interactions) {\n    options.interactions = _ol_interaction_.defaults();\n  }\n\n  _ol_PluggableMap_.call(this, options);\n};\n\n_ol_.inherits(_ol_Map_, _ol_PluggableMap_);\n\nexport default _ol_Map_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/map.js"],"names":["_ol_","_ol_PluggableMap_","_ol_PluginType_","_ol_control_","_ol_interaction_","_ol_obj_","_ol_plugins_","_ol_renderer_canvas_ImageLayer_","_ol_renderer_canvas_Map_","_ol_renderer_canvas_TileLayer_","_ol_renderer_canvas_VectorLayer_","_ol_renderer_canvas_VectorTileLayer_","_ol_renderer_webgl_ImageLayer_","_ol_renderer_webgl_Map_","_ol_renderer_webgl_TileLayer_","_ol_renderer_webgl_VectorLayer_","ENABLE_CANVAS","register","MAP_RENDERER","registerMultiple","LAYER_RENDERER","ENABLE_WEBGL","_ol_Map_","options","assign","controls","defaults","interactions","call","inherits"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAOC,iBAAP,MAA8B,mBAA9B;AACA,OAAOC,eAAP,MAA4B,iBAA5B;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,OAAOC,gBAAP,MAA6B,kBAA7B;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,OAAOC,+BAAP,MAA4C,iCAA5C;AACA,OAAOC,wBAAP,MAAqC,0BAArC;AACA,OAAOC,8BAAP,MAA2C,gCAA3C;AACA,OAAOC,gCAAP,MAA6C,kCAA7C;AACA,OAAOC,oCAAP,MAAiD,sCAAjD;AACA,OAAOC,8BAAP,MAA2C,gCAA3C;AACA,OAAOC,uBAAP,MAAoC,yBAApC;AACA,OAAOC,6BAAP,MAA0C,+BAA1C;AACA,OAAOC,+BAAP,MAA4C,iCAA5C;;AAGA,IAAIf,IAAI,CAACgB,aAAT,EAAwB;AACtBV,EAAAA,YAAY,CAACW,QAAb,CAAsBf,eAAe,CAACgB,YAAtC,EAAoDV,wBAApD;;AACAF,EAAAA,YAAY,CAACa,gBAAb,CAA8BjB,eAAe,CAACkB,cAA9C,EAA8D,CAC5Db,+BAD4D,EAE5DE,8BAF4D,EAG5DC,gCAH4D,EAI5DC,oCAJ4D,CAA9D;AAMD;;AAED,IAAIX,IAAI,CAACqB,YAAT,EAAuB;AACrBf,EAAAA,YAAY,CAACW,QAAb,CAAsBf,eAAe,CAACgB,YAAtC,EAAoDL,uBAApD;;AACAP,EAAAA,YAAY,CAACa,gBAAb,CAA8BjB,eAAe,CAACkB,cAA9C,EAA8D,CAC5DR,8BAD4D,EAE5DE,6BAF4D,EAG5DC,+BAH4D,CAA9D;AAKD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIO,QAAQ,GAAG,UAASC,OAAT,EAAkB;AAC/BA,EAAAA,OAAO,GAAGlB,QAAQ,CAACmB,MAAT,CAAgB,EAAhB,EAAoBD,OAApB,CAAV;;AACA,MAAI,CAACA,OAAO,CAACE,QAAb,EAAuB;AACrBF,IAAAA,OAAO,CAACE,QAAR,GAAmBtB,YAAY,CAACuB,QAAb,EAAnB;AACD;;AACD,MAAI,CAACH,OAAO,CAACI,YAAb,EAA2B;AACzBJ,IAAAA,OAAO,CAACI,YAAR,GAAuBvB,gBAAgB,CAACsB,QAAjB,EAAvB;AACD;;AAEDzB,EAAAA,iBAAiB,CAAC2B,IAAlB,CAAuB,IAAvB,EAA6BL,OAA7B;AACD,CAVD;;AAYAvB,IAAI,CAAC6B,QAAL,CAAcP,QAAd,EAAwBrB,iBAAxB;;AACA,eAAeqB,QAAf","sourcesContent":["import _ol_ from './index.js';\nimport _ol_PluggableMap_ from './pluggablemap.js';\nimport _ol_PluginType_ from './plugintype.js';\nimport _ol_control_ from './control.js';\nimport _ol_interaction_ from './interaction.js';\nimport _ol_obj_ from './obj.js';\nimport _ol_plugins_ from './plugins.js';\nimport _ol_renderer_canvas_ImageLayer_ from './renderer/canvas/imagelayer.js';\nimport _ol_renderer_canvas_Map_ from './renderer/canvas/map.js';\nimport _ol_renderer_canvas_TileLayer_ from './renderer/canvas/tilelayer.js';\nimport _ol_renderer_canvas_VectorLayer_ from './renderer/canvas/vectorlayer.js';\nimport _ol_renderer_canvas_VectorTileLayer_ from './renderer/canvas/vectortilelayer.js';\nimport _ol_renderer_webgl_ImageLayer_ from './renderer/webgl/imagelayer.js';\nimport _ol_renderer_webgl_Map_ from './renderer/webgl/map.js';\nimport _ol_renderer_webgl_TileLayer_ from './renderer/webgl/tilelayer.js';\nimport _ol_renderer_webgl_VectorLayer_ from './renderer/webgl/vectorlayer.js';\n\n\nif (_ol_.ENABLE_CANVAS) {\n  _ol_plugins_.register(_ol_PluginType_.MAP_RENDERER, _ol_renderer_canvas_Map_);\n  _ol_plugins_.registerMultiple(_ol_PluginType_.LAYER_RENDERER, [\n    _ol_renderer_canvas_ImageLayer_,\n    _ol_renderer_canvas_TileLayer_,\n    _ol_renderer_canvas_VectorLayer_,\n    _ol_renderer_canvas_VectorTileLayer_\n  ]);\n}\n\nif (_ol_.ENABLE_WEBGL) {\n  _ol_plugins_.register(_ol_PluginType_.MAP_RENDERER, _ol_renderer_webgl_Map_);\n  _ol_plugins_.registerMultiple(_ol_PluginType_.LAYER_RENDERER, [\n    _ol_renderer_webgl_ImageLayer_,\n    _ol_renderer_webgl_TileLayer_,\n    _ol_renderer_webgl_VectorLayer_\n  ]);\n}\n\n\n/**\n * @classdesc\n * The map is the core component of OpenLayers. For a map to render, a view,\n * one or more layers, and a target container are needed:\n *\n *     var map = new ol.Map({\n *       view: new ol.View({\n *         center: [0, 0],\n *         zoom: 1\n *       }),\n *       layers: [\n *         new ol.layer.Tile({\n *           source: new ol.source.OSM()\n *         })\n *       ],\n *       target: 'map'\n *     });\n *\n * The above snippet creates a map using a {@link ol.layer.Tile} to display\n * {@link ol.source.OSM} OSM data and render it to a DOM element with the\n * id `map`.\n *\n * The constructor places a viewport container (with CSS class name\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\n * further elements within the viewport: one with CSS class name\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\n * option of {@link ol.Overlay} for the difference). The map itself is placed in\n * a further element within the viewport.\n *\n * Layers are stored as a `ol.Collection` in layerGroups. A top-level group is\n * provided by the library. This is what is accessed by `getLayerGroup` and\n * `setLayerGroup`. Layers entered in the options are added to this group, and\n * `addLayer` and `removeLayer` change the layer collection in the group.\n * `getLayers` is a convenience function for `getLayerGroup().getLayers()`.\n * Note that `ol.layer.Group` is a subclass of `ol.layer.Base`, so layers\n * entered in the options or added with `addLayer` can be groups, which can\n * contain further groups, and so on.\n *\n * @constructor\n * @extends {ol.PluggableMap}\n * @param {olx.MapOptions} options Map options.\n * @fires ol.MapBrowserEvent\n * @fires ol.MapEvent\n * @fires ol.render.Event#postcompose\n * @fires ol.render.Event#precompose\n * @api\n */\nvar _ol_Map_ = function(options) {\n  options = _ol_obj_.assign({}, options);\n  if (!options.controls) {\n    options.controls = _ol_control_.defaults();\n  }\n  if (!options.interactions) {\n    options.interactions = _ol_interaction_.defaults();\n  }\n\n  _ol_PluggableMap_.call(this, options);\n};\n\n_ol_.inherits(_ol_Map_, _ol_PluggableMap_);\nexport default _ol_Map_;\n"]},"metadata":{},"sourceType":"module"}