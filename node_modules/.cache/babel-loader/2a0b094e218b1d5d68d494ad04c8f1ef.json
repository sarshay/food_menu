{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_array_ from '../array.js';\nimport _ol_extent_ from '../extent.js';\nimport _ol_geom_GeometryLayout_ from '../geom/geometrylayout.js';\nimport _ol_geom_GeometryType_ from '../geom/geometrytype.js';\nimport _ol_geom_LinearRing_ from '../geom/linearring.js';\nimport _ol_geom_Point_ from '../geom/point.js';\nimport _ol_geom_SimpleGeometry_ from '../geom/simplegeometry.js';\nimport _ol_geom_flat_area_ from '../geom/flat/area.js';\nimport _ol_geom_flat_closest_ from '../geom/flat/closest.js';\nimport _ol_geom_flat_contains_ from '../geom/flat/contains.js';\nimport _ol_geom_flat_deflate_ from '../geom/flat/deflate.js';\nimport _ol_geom_flat_inflate_ from '../geom/flat/inflate.js';\nimport _ol_geom_flat_interiorpoint_ from '../geom/flat/interiorpoint.js';\nimport _ol_geom_flat_intersectsextent_ from '../geom/flat/intersectsextent.js';\nimport _ol_geom_flat_orient_ from '../geom/flat/orient.js';\nimport _ol_geom_flat_simplify_ from '../geom/flat/simplify.js';\nimport _ol_math_ from '../math.js';\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @constructor\n * @extends {ol.geom.SimpleGeometry}\n * @param {Array.<Array.<ol.Coordinate>>} coordinates Array of linear\n *     rings that define the polygon. The first linear ring of the array\n *     defines the outer-boundary or surface of the polygon. Each subsequent\n *     linear ring defines a hole in the surface of the polygon. A linear ring\n *     is an array of vertices' coordinates where the first coordinate and the\n *     last are equivalent.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @api\n */\n\nvar _ol_geom_Polygon_ = function (coordinates, opt_layout) {\n  _ol_geom_SimpleGeometry_.call(this);\n  /**\n   * @type {Array.<number>}\n   * @private\n   */\n\n\n  this.ends_ = [];\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.flatInteriorPointRevision_ = -1;\n  /**\n   * @private\n   * @type {ol.Coordinate}\n   */\n\n  this.flatInteriorPoint_ = null;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.maxDelta_ = -1;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.maxDeltaRevision_ = -1;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.orientedRevision_ = -1;\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n\n  this.orientedFlatCoordinates_ = null;\n  this.setCoordinates(coordinates, opt_layout);\n};\n\n_ol_.inherits(_ol_geom_Polygon_, _ol_geom_SimpleGeometry_);\n/**\n * Append the passed linear ring to this polygon.\n * @param {ol.geom.LinearRing} linearRing Linear ring.\n * @api\n */\n\n\n_ol_geom_Polygon_.prototype.appendLinearRing = function (linearRing) {\n  if (!this.flatCoordinates) {\n    this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n  } else {\n    _ol_array_.extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n  }\n\n  this.ends_.push(this.flatCoordinates.length);\n  this.changed();\n};\n/**\n * Make a complete copy of the geometry.\n * @return {!ol.geom.Polygon} Clone.\n * @override\n * @api\n */\n\n\n_ol_geom_Polygon_.prototype.clone = function () {\n  var polygon = new _ol_geom_Polygon_(null);\n  polygon.setFlatCoordinates(this.layout, this.flatCoordinates.slice(), this.ends_.slice());\n  return polygon;\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_geom_Polygon_.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n  if (minSquaredDistance < _ol_extent_.closestSquaredDistanceXY(this.getExtent(), x, y)) {\n    return minSquaredDistance;\n  }\n\n  if (this.maxDeltaRevision_ != this.getRevision()) {\n    this.maxDelta_ = Math.sqrt(_ol_geom_flat_closest_.getsMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n    this.maxDeltaRevision_ = this.getRevision();\n  }\n\n  return _ol_geom_flat_closest_.getsClosestPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_geom_Polygon_.prototype.containsXY = function (x, y) {\n  return _ol_geom_flat_contains_.linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);\n};\n/**\n * Return the area of the polygon on projected plane.\n * @return {number} Area (on projected plane).\n * @api\n */\n\n\n_ol_geom_Polygon_.prototype.getArea = function () {\n  return _ol_geom_flat_area_.linearRings(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);\n};\n/**\n * Get the coordinate array for this geometry.  This array has the structure\n * of a GeoJSON coordinate array for polygons.\n *\n * @param {boolean=} opt_right Orient coordinates according to the right-hand\n *     rule (counter-clockwise for exterior and clockwise for interior rings).\n *     If `false`, coordinates will be oriented according to the left-hand rule\n *     (clockwise for exterior and counter-clockwise for interior rings).\n *     By default, coordinate orientation will depend on how the geometry was\n *     constructed.\n * @return {Array.<Array.<ol.Coordinate>>} Coordinates.\n * @override\n * @api\n */\n\n\n_ol_geom_Polygon_.prototype.getCoordinates = function (opt_right) {\n  var flatCoordinates;\n\n  if (opt_right !== undefined) {\n    flatCoordinates = this.getOrientedFlatCoordinates().slice();\n\n    _ol_geom_flat_orient_.orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, opt_right);\n  } else {\n    flatCoordinates = this.flatCoordinates;\n  }\n\n  return _ol_geom_flat_inflate_.coordinatess(flatCoordinates, 0, this.ends_, this.stride);\n};\n/**\n * @return {Array.<number>} Ends.\n */\n\n\n_ol_geom_Polygon_.prototype.getEnds = function () {\n  return this.ends_;\n};\n/**\n * @return {Array.<number>} Interior point.\n */\n\n\n_ol_geom_Polygon_.prototype.getFlatInteriorPoint = function () {\n  if (this.flatInteriorPointRevision_ != this.getRevision()) {\n    var flatCenter = _ol_extent_.getCenter(this.getExtent());\n\n    this.flatInteriorPoint_ = _ol_geom_flat_interiorpoint_.linearRings(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);\n    this.flatInteriorPointRevision_ = this.getRevision();\n  }\n\n  return this.flatInteriorPoint_;\n};\n/**\n * Return an interior point of the polygon.\n * @return {ol.geom.Point} Interior point as XYM coordinate, where M is the\n * length of the horizontal intersection that the point belongs to.\n * @api\n */\n\n\n_ol_geom_Polygon_.prototype.getInteriorPoint = function () {\n  return new _ol_geom_Point_(this.getFlatInteriorPoint(), _ol_geom_GeometryLayout_.XYM);\n};\n/**\n * Return the number of rings of the polygon,  this includes the exterior\n * ring and any interior rings.\n *\n * @return {number} Number of rings.\n * @api\n */\n\n\n_ol_geom_Polygon_.prototype.getLinearRingCount = function () {\n  return this.ends_.length;\n};\n/**\n * Return the Nth linear ring of the polygon geometry. Return `null` if the\n * given index is out of range.\n * The exterior linear ring is available at index `0` and the interior rings\n * at index `1` and beyond.\n *\n * @param {number} index Index.\n * @return {ol.geom.LinearRing} Linear ring.\n * @api\n */\n\n\n_ol_geom_Polygon_.prototype.getLinearRing = function (index) {\n  if (index < 0 || this.ends_.length <= index) {\n    return null;\n  }\n\n  var linearRing = new _ol_geom_LinearRing_(null);\n  linearRing.setFlatCoordinates(this.layout, this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]));\n  return linearRing;\n};\n/**\n * Return the linear rings of the polygon.\n * @return {Array.<ol.geom.LinearRing>} Linear rings.\n * @api\n */\n\n\n_ol_geom_Polygon_.prototype.getLinearRings = function () {\n  var layout = this.layout;\n  var flatCoordinates = this.flatCoordinates;\n  var ends = this.ends_;\n  var linearRings = [];\n  var offset = 0;\n  var i, ii;\n\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    var linearRing = new _ol_geom_LinearRing_(null);\n    linearRing.setFlatCoordinates(layout, flatCoordinates.slice(offset, end));\n    linearRings.push(linearRing);\n    offset = end;\n  }\n\n  return linearRings;\n};\n/**\n * @return {Array.<number>} Oriented flat coordinates.\n */\n\n\n_ol_geom_Polygon_.prototype.getOrientedFlatCoordinates = function () {\n  if (this.orientedRevision_ != this.getRevision()) {\n    var flatCoordinates = this.flatCoordinates;\n\n    if (_ol_geom_flat_orient_.linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n      this.orientedFlatCoordinates_ = flatCoordinates;\n    } else {\n      this.orientedFlatCoordinates_ = flatCoordinates.slice();\n      this.orientedFlatCoordinates_.length = _ol_geom_flat_orient_.orientLinearRings(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);\n    }\n\n    this.orientedRevision_ = this.getRevision();\n  }\n\n  return this.orientedFlatCoordinates_;\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_geom_Polygon_.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n  var simplifiedFlatCoordinates = [];\n  var simplifiedEnds = [];\n  simplifiedFlatCoordinates.length = _ol_geom_flat_simplify_.quantizes(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);\n  var simplifiedPolygon = new _ol_geom_Polygon_(null);\n  simplifiedPolygon.setFlatCoordinates(_ol_geom_GeometryLayout_.XY, simplifiedFlatCoordinates, simplifiedEnds);\n  return simplifiedPolygon;\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\n_ol_geom_Polygon_.prototype.getType = function () {\n  return _ol_geom_GeometryType_.POLYGON;\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\n_ol_geom_Polygon_.prototype.intersectsExtent = function (extent) {\n  return _ol_geom_flat_intersectsextent_.linearRings(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);\n};\n/**\n * Set the coordinates of the polygon.\n * @param {Array.<Array.<ol.Coordinate>>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @override\n * @api\n */\n\n\n_ol_geom_Polygon_.prototype.setCoordinates = function (coordinates, opt_layout) {\n  if (!coordinates) {\n    this.setFlatCoordinates(_ol_geom_GeometryLayout_.XY, null, this.ends_);\n  } else {\n    this.setLayout(opt_layout, coordinates, 2);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    var ends = _ol_geom_flat_deflate_.coordinatess(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n};\n/**\n * @param {ol.geom.GeometryLayout} layout Layout.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {Array.<number>} ends Ends.\n */\n\n\n_ol_geom_Polygon_.prototype.setFlatCoordinates = function (layout, flatCoordinates, ends) {\n  this.setFlatCoordinatesInternal(layout, flatCoordinates);\n  this.ends_ = ends;\n  this.changed();\n};\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {ol.Sphere} sphere The sphere.\n * @param {ol.Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices.\n * @param {number=} opt_n Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @return {ol.geom.Polygon} The \"circular\" polygon.\n * @api\n */\n\n\n_ol_geom_Polygon_.circular = function (sphere, center, radius, opt_n) {\n  var n = opt_n ? opt_n : 32;\n  /** @type {Array.<number>} */\n\n  var flatCoordinates = [];\n  var i;\n\n  for (i = 0; i < n; ++i) {\n    _ol_array_.extend(flatCoordinates, sphere.offset(center, radius, 2 * Math.PI * i / n));\n  }\n\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  var polygon = new _ol_geom_Polygon_(null);\n  polygon.setFlatCoordinates(_ol_geom_GeometryLayout_.XY, flatCoordinates, [flatCoordinates.length]);\n  return polygon;\n};\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {ol.Extent} extent The extent.\n * @return {ol.geom.Polygon} The polygon.\n * @api\n */\n\n\n_ol_geom_Polygon_.fromExtent = function (extent) {\n  var minX = extent[0];\n  var minY = extent[1];\n  var maxX = extent[2];\n  var maxY = extent[3];\n  var flatCoordinates = [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];\n  var polygon = new _ol_geom_Polygon_(null);\n  polygon.setFlatCoordinates(_ol_geom_GeometryLayout_.XY, flatCoordinates, [flatCoordinates.length]);\n  return polygon;\n};\n/**\n * Create a regular polygon from a circle.\n * @param {ol.geom.Circle} circle Circle geometry.\n * @param {number=} opt_sides Number of sides of the polygon. Default is 32.\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\n *     radians. Default is 0.\n * @return {ol.geom.Polygon} Polygon geometry.\n * @api\n */\n\n\n_ol_geom_Polygon_.fromCircle = function (circle, opt_sides, opt_angle) {\n  var sides = opt_sides ? opt_sides : 32;\n  var stride = circle.getStride();\n  var layout = circle.getLayout();\n  var polygon = new _ol_geom_Polygon_(null, layout);\n  var arrayLength = stride * (sides + 1);\n  var flatCoordinates = new Array(arrayLength);\n\n  for (var i = 0; i < arrayLength; i++) {\n    flatCoordinates[i] = 0;\n  }\n\n  var ends = [flatCoordinates.length];\n  polygon.setFlatCoordinates(layout, flatCoordinates, ends);\n\n  _ol_geom_Polygon_.makeRegular(polygon, circle.getCenter(), circle.getRadius(), opt_angle);\n\n  return polygon;\n};\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {ol.geom.Polygon} polygon Polygon geometry.\n * @param {ol.Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\n *     radians. Default is 0.\n */\n\n\n_ol_geom_Polygon_.makeRegular = function (polygon, center, radius, opt_angle) {\n  var flatCoordinates = polygon.getFlatCoordinates();\n  var layout = polygon.getLayout();\n  var stride = polygon.getStride();\n  var ends = polygon.getEnds();\n  var sides = flatCoordinates.length / stride - 1;\n  var startAngle = opt_angle ? opt_angle : 0;\n  var angle, offset;\n\n  for (var i = 0; i <= sides; ++i) {\n    offset = i * stride;\n    angle = startAngle + _ol_math_.modulo(i, sides) * 2 * Math.PI / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n\n  polygon.setFlatCoordinates(layout, flatCoordinates, ends);\n};\n\nexport default _ol_geom_Polygon_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/geom/polygon.js"],"names":["_ol_","_ol_array_","_ol_extent_","_ol_geom_GeometryLayout_","_ol_geom_GeometryType_","_ol_geom_LinearRing_","_ol_geom_Point_","_ol_geom_SimpleGeometry_","_ol_geom_flat_area_","_ol_geom_flat_closest_","_ol_geom_flat_contains_","_ol_geom_flat_deflate_","_ol_geom_flat_inflate_","_ol_geom_flat_interiorpoint_","_ol_geom_flat_intersectsextent_","_ol_geom_flat_orient_","_ol_geom_flat_simplify_","_ol_math_","_ol_geom_Polygon_","coordinates","opt_layout","call","ends_","flatInteriorPointRevision_","flatInteriorPoint_","maxDelta_","maxDeltaRevision_","orientedRevision_","orientedFlatCoordinates_","setCoordinates","inherits","prototype","appendLinearRing","linearRing","flatCoordinates","getFlatCoordinates","slice","extend","push","length","changed","clone","polygon","setFlatCoordinates","layout","closestPointXY","x","y","closestPoint","minSquaredDistance","closestSquaredDistanceXY","getExtent","getRevision","Math","sqrt","getsMaxSquaredDelta","stride","getsClosestPoint","containsXY","linearRingsContainsXY","getOrientedFlatCoordinates","getArea","linearRings","getCoordinates","opt_right","undefined","orientLinearRings","coordinatess","getEnds","getFlatInteriorPoint","flatCenter","getCenter","getInteriorPoint","XYM","getLinearRingCount","getLinearRing","index","getLinearRings","ends","offset","i","ii","end","linearRingsAreOriented","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","simplifiedEnds","quantizes","simplifiedPolygon","XY","getType","POLYGON","intersectsExtent","extent","setLayout","setFlatCoordinatesInternal","circular","sphere","center","radius","opt_n","n","PI","fromExtent","minX","minY","maxX","maxY","fromCircle","circle","opt_sides","opt_angle","sides","getStride","getLayout","arrayLength","Array","makeRegular","getRadius","startAngle","angle","modulo","cos","sin"],"mappings":"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","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_array_ from '../array.js';\nimport _ol_extent_ from '../extent.js';\nimport _ol_geom_GeometryLayout_ from '../geom/geometrylayout.js';\nimport _ol_geom_GeometryType_ from '../geom/geometrytype.js';\nimport _ol_geom_LinearRing_ from '../geom/linearring.js';\nimport _ol_geom_Point_ from '../geom/point.js';\nimport _ol_geom_SimpleGeometry_ from '../geom/simplegeometry.js';\nimport _ol_geom_flat_area_ from '../geom/flat/area.js';\nimport _ol_geom_flat_closest_ from '../geom/flat/closest.js';\nimport _ol_geom_flat_contains_ from '../geom/flat/contains.js';\nimport _ol_geom_flat_deflate_ from '../geom/flat/deflate.js';\nimport _ol_geom_flat_inflate_ from '../geom/flat/inflate.js';\nimport _ol_geom_flat_interiorpoint_ from '../geom/flat/interiorpoint.js';\nimport _ol_geom_flat_intersectsextent_ from '../geom/flat/intersectsextent.js';\nimport _ol_geom_flat_orient_ from '../geom/flat/orient.js';\nimport _ol_geom_flat_simplify_ from '../geom/flat/simplify.js';\nimport _ol_math_ from '../math.js';\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @constructor\n * @extends {ol.geom.SimpleGeometry}\n * @param {Array.<Array.<ol.Coordinate>>} coordinates Array of linear\n *     rings that define the polygon. The first linear ring of the array\n *     defines the outer-boundary or surface of the polygon. Each subsequent\n *     linear ring defines a hole in the surface of the polygon. A linear ring\n *     is an array of vertices' coordinates where the first coordinate and the\n *     last are equivalent.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @api\n */\nvar _ol_geom_Polygon_ = function(coordinates, opt_layout) {\n\n  _ol_geom_SimpleGeometry_.call(this);\n\n  /**\n   * @type {Array.<number>}\n   * @private\n   */\n  this.ends_ = [];\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.flatInteriorPointRevision_ = -1;\n\n  /**\n   * @private\n   * @type {ol.Coordinate}\n   */\n  this.flatInteriorPoint_ = null;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.maxDelta_ = -1;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.maxDeltaRevision_ = -1;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.orientedRevision_ = -1;\n\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n  this.orientedFlatCoordinates_ = null;\n\n  this.setCoordinates(coordinates, opt_layout);\n\n};\n\n_ol_.inherits(_ol_geom_Polygon_, _ol_geom_SimpleGeometry_);\n\n\n/**\n * Append the passed linear ring to this polygon.\n * @param {ol.geom.LinearRing} linearRing Linear ring.\n * @api\n */\n_ol_geom_Polygon_.prototype.appendLinearRing = function(linearRing) {\n  if (!this.flatCoordinates) {\n    this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n  } else {\n    _ol_array_.extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n  }\n  this.ends_.push(this.flatCoordinates.length);\n  this.changed();\n};\n\n\n/**\n * Make a complete copy of the geometry.\n * @return {!ol.geom.Polygon} Clone.\n * @override\n * @api\n */\n_ol_geom_Polygon_.prototype.clone = function() {\n  var polygon = new _ol_geom_Polygon_(null);\n  polygon.setFlatCoordinates(\n      this.layout, this.flatCoordinates.slice(), this.ends_.slice());\n  return polygon;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_geom_Polygon_.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {\n  if (minSquaredDistance <\n      _ol_extent_.closestSquaredDistanceXY(this.getExtent(), x, y)) {\n    return minSquaredDistance;\n  }\n  if (this.maxDeltaRevision_ != this.getRevision()) {\n    this.maxDelta_ = Math.sqrt(_ol_geom_flat_closest_.getsMaxSquaredDelta(\n        this.flatCoordinates, 0, this.ends_, this.stride, 0));\n    this.maxDeltaRevision_ = this.getRevision();\n  }\n  return _ol_geom_flat_closest_.getsClosestPoint(\n      this.flatCoordinates, 0, this.ends_, this.stride,\n      this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_geom_Polygon_.prototype.containsXY = function(x, y) {\n  return _ol_geom_flat_contains_.linearRingsContainsXY(\n      this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);\n};\n\n\n/**\n * Return the area of the polygon on projected plane.\n * @return {number} Area (on projected plane).\n * @api\n */\n_ol_geom_Polygon_.prototype.getArea = function() {\n  return _ol_geom_flat_area_.linearRings(\n      this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);\n};\n\n\n/**\n * Get the coordinate array for this geometry.  This array has the structure\n * of a GeoJSON coordinate array for polygons.\n *\n * @param {boolean=} opt_right Orient coordinates according to the right-hand\n *     rule (counter-clockwise for exterior and clockwise for interior rings).\n *     If `false`, coordinates will be oriented according to the left-hand rule\n *     (clockwise for exterior and counter-clockwise for interior rings).\n *     By default, coordinate orientation will depend on how the geometry was\n *     constructed.\n * @return {Array.<Array.<ol.Coordinate>>} Coordinates.\n * @override\n * @api\n */\n_ol_geom_Polygon_.prototype.getCoordinates = function(opt_right) {\n  var flatCoordinates;\n  if (opt_right !== undefined) {\n    flatCoordinates = this.getOrientedFlatCoordinates().slice();\n    _ol_geom_flat_orient_.orientLinearRings(\n        flatCoordinates, 0, this.ends_, this.stride, opt_right);\n  } else {\n    flatCoordinates = this.flatCoordinates;\n  }\n\n  return _ol_geom_flat_inflate_.coordinatess(\n      flatCoordinates, 0, this.ends_, this.stride);\n};\n\n\n/**\n * @return {Array.<number>} Ends.\n */\n_ol_geom_Polygon_.prototype.getEnds = function() {\n  return this.ends_;\n};\n\n\n/**\n * @return {Array.<number>} Interior point.\n */\n_ol_geom_Polygon_.prototype.getFlatInteriorPoint = function() {\n  if (this.flatInteriorPointRevision_ != this.getRevision()) {\n    var flatCenter = _ol_extent_.getCenter(this.getExtent());\n    this.flatInteriorPoint_ = _ol_geom_flat_interiorpoint_.linearRings(\n        this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride,\n        flatCenter, 0);\n    this.flatInteriorPointRevision_ = this.getRevision();\n  }\n  return this.flatInteriorPoint_;\n};\n\n\n/**\n * Return an interior point of the polygon.\n * @return {ol.geom.Point} Interior point as XYM coordinate, where M is the\n * length of the horizontal intersection that the point belongs to.\n * @api\n */\n_ol_geom_Polygon_.prototype.getInteriorPoint = function() {\n  return new _ol_geom_Point_(this.getFlatInteriorPoint(), _ol_geom_GeometryLayout_.XYM);\n};\n\n\n/**\n * Return the number of rings of the polygon,  this includes the exterior\n * ring and any interior rings.\n *\n * @return {number} Number of rings.\n * @api\n */\n_ol_geom_Polygon_.prototype.getLinearRingCount = function() {\n  return this.ends_.length;\n};\n\n\n/**\n * Return the Nth linear ring of the polygon geometry. Return `null` if the\n * given index is out of range.\n * The exterior linear ring is available at index `0` and the interior rings\n * at index `1` and beyond.\n *\n * @param {number} index Index.\n * @return {ol.geom.LinearRing} Linear ring.\n * @api\n */\n_ol_geom_Polygon_.prototype.getLinearRing = function(index) {\n  if (index < 0 || this.ends_.length <= index) {\n    return null;\n  }\n  var linearRing = new _ol_geom_LinearRing_(null);\n  linearRing.setFlatCoordinates(this.layout, this.flatCoordinates.slice(\n      index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]));\n  return linearRing;\n};\n\n\n/**\n * Return the linear rings of the polygon.\n * @return {Array.<ol.geom.LinearRing>} Linear rings.\n * @api\n */\n_ol_geom_Polygon_.prototype.getLinearRings = function() {\n  var layout = this.layout;\n  var flatCoordinates = this.flatCoordinates;\n  var ends = this.ends_;\n  var linearRings = [];\n  var offset = 0;\n  var i, ii;\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    var linearRing = new _ol_geom_LinearRing_(null);\n    linearRing.setFlatCoordinates(layout, flatCoordinates.slice(offset, end));\n    linearRings.push(linearRing);\n    offset = end;\n  }\n  return linearRings;\n};\n\n\n/**\n * @return {Array.<number>} Oriented flat coordinates.\n */\n_ol_geom_Polygon_.prototype.getOrientedFlatCoordinates = function() {\n  if (this.orientedRevision_ != this.getRevision()) {\n    var flatCoordinates = this.flatCoordinates;\n    if (_ol_geom_flat_orient_.linearRingsAreOriented(\n        flatCoordinates, 0, this.ends_, this.stride)) {\n      this.orientedFlatCoordinates_ = flatCoordinates;\n    } else {\n      this.orientedFlatCoordinates_ = flatCoordinates.slice();\n      this.orientedFlatCoordinates_.length =\n          _ol_geom_flat_orient_.orientLinearRings(\n              this.orientedFlatCoordinates_, 0, this.ends_, this.stride);\n    }\n    this.orientedRevision_ = this.getRevision();\n  }\n  return this.orientedFlatCoordinates_;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_geom_Polygon_.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {\n  var simplifiedFlatCoordinates = [];\n  var simplifiedEnds = [];\n  simplifiedFlatCoordinates.length = _ol_geom_flat_simplify_.quantizes(\n      this.flatCoordinates, 0, this.ends_, this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates, 0, simplifiedEnds);\n  var simplifiedPolygon = new _ol_geom_Polygon_(null);\n  simplifiedPolygon.setFlatCoordinates(\n      _ol_geom_GeometryLayout_.XY, simplifiedFlatCoordinates, simplifiedEnds);\n  return simplifiedPolygon;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\n_ol_geom_Polygon_.prototype.getType = function() {\n  return _ol_geom_GeometryType_.POLYGON;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\n_ol_geom_Polygon_.prototype.intersectsExtent = function(extent) {\n  return _ol_geom_flat_intersectsextent_.linearRings(\n      this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);\n};\n\n\n/**\n * Set the coordinates of the polygon.\n * @param {Array.<Array.<ol.Coordinate>>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @override\n * @api\n */\n_ol_geom_Polygon_.prototype.setCoordinates = function(coordinates, opt_layout) {\n  if (!coordinates) {\n    this.setFlatCoordinates(_ol_geom_GeometryLayout_.XY, null, this.ends_);\n  } else {\n    this.setLayout(opt_layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    var ends = _ol_geom_flat_deflate_.coordinatess(\n        this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n};\n\n\n/**\n * @param {ol.geom.GeometryLayout} layout Layout.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {Array.<number>} ends Ends.\n */\n_ol_geom_Polygon_.prototype.setFlatCoordinates = function(layout, flatCoordinates, ends) {\n  this.setFlatCoordinatesInternal(layout, flatCoordinates);\n  this.ends_ = ends;\n  this.changed();\n};\n\n\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {ol.Sphere} sphere The sphere.\n * @param {ol.Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices.\n * @param {number=} opt_n Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @return {ol.geom.Polygon} The \"circular\" polygon.\n * @api\n */\n_ol_geom_Polygon_.circular = function(sphere, center, radius, opt_n) {\n  var n = opt_n ? opt_n : 32;\n  /** @type {Array.<number>} */\n  var flatCoordinates = [];\n  var i;\n  for (i = 0; i < n; ++i) {\n    _ol_array_.extend(\n        flatCoordinates, sphere.offset(center, radius, 2 * Math.PI * i / n));\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  var polygon = new _ol_geom_Polygon_(null);\n  polygon.setFlatCoordinates(\n      _ol_geom_GeometryLayout_.XY, flatCoordinates, [flatCoordinates.length]);\n  return polygon;\n};\n\n\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {ol.Extent} extent The extent.\n * @return {ol.geom.Polygon} The polygon.\n * @api\n */\n_ol_geom_Polygon_.fromExtent = function(extent) {\n  var minX = extent[0];\n  var minY = extent[1];\n  var maxX = extent[2];\n  var maxY = extent[3];\n  var flatCoordinates =\n      [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];\n  var polygon = new _ol_geom_Polygon_(null);\n  polygon.setFlatCoordinates(\n      _ol_geom_GeometryLayout_.XY, flatCoordinates, [flatCoordinates.length]);\n  return polygon;\n};\n\n\n/**\n * Create a regular polygon from a circle.\n * @param {ol.geom.Circle} circle Circle geometry.\n * @param {number=} opt_sides Number of sides of the polygon. Default is 32.\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\n *     radians. Default is 0.\n * @return {ol.geom.Polygon} Polygon geometry.\n * @api\n */\n_ol_geom_Polygon_.fromCircle = function(circle, opt_sides, opt_angle) {\n  var sides = opt_sides ? opt_sides : 32;\n  var stride = circle.getStride();\n  var layout = circle.getLayout();\n  var polygon = new _ol_geom_Polygon_(null, layout);\n  var arrayLength = stride * (sides + 1);\n  var flatCoordinates = new Array(arrayLength);\n  for (var i = 0; i < arrayLength; i++) {\n    flatCoordinates[i] = 0;\n  }\n  var ends = [flatCoordinates.length];\n  polygon.setFlatCoordinates(layout, flatCoordinates, ends);\n  _ol_geom_Polygon_.makeRegular(\n      polygon, circle.getCenter(), circle.getRadius(), opt_angle);\n  return polygon;\n};\n\n\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {ol.geom.Polygon} polygon Polygon geometry.\n * @param {ol.Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\n *     radians. Default is 0.\n */\n_ol_geom_Polygon_.makeRegular = function(polygon, center, radius, opt_angle) {\n  var flatCoordinates = polygon.getFlatCoordinates();\n  var layout = polygon.getLayout();\n  var stride = polygon.getStride();\n  var ends = polygon.getEnds();\n  var sides = flatCoordinates.length / stride - 1;\n  var startAngle = opt_angle ? opt_angle : 0;\n  var angle, offset;\n  for (var i = 0; i <= sides; ++i) {\n    offset = i * stride;\n    angle = startAngle + (_ol_math_.modulo(i, sides) * 2 * Math.PI / sides);\n    flatCoordinates[offset] = center[0] + (radius * Math.cos(angle));\n    flatCoordinates[offset + 1] = center[1] + (radius * Math.sin(angle));\n  }\n  polygon.setFlatCoordinates(layout, flatCoordinates, ends);\n};\nexport default _ol_geom_Polygon_;\n"]},"metadata":{},"sourceType":"module"}