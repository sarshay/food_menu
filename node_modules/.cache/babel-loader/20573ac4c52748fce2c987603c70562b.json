{"ast":null,"code":"// FIXME factor out key precondition (shift et. al)\nimport _ol_ from '../index.js';\nimport _ol_Object_ from '../object.js';\nimport _ol_easing_ from '../easing.js';\nimport _ol_interaction_Property_ from '../interaction/property.js';\nimport _ol_math_ from '../math.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * User actions that change the state of the map. Some are similar to controls,\n * but are not associated with a DOM element.\n * For example, {@link ol.interaction.KeyboardZoom} is functionally the same as\n * {@link ol.control.Zoom}, but triggered by a keyboard event not a button\n * element event.\n * Although interactions do not have a DOM element, some of them do render\n * vectors and so are visible on the screen.\n *\n * @constructor\n * @param {olx.interaction.InteractionOptions} options Options.\n * @extends {ol.Object}\n * @api\n */\n\nvar _ol_interaction_Interaction_ = function (options) {\n  _ol_Object_.call(this);\n  /**\n   * @private\n   * @type {ol.PluggableMap}\n   */\n\n\n  this.map_ = null;\n  this.setActive(true);\n  /**\n   * @type {function(ol.MapBrowserEvent):boolean}\n   */\n\n  this.handleEvent = options.handleEvent;\n};\n\n_ol_.inherits(_ol_interaction_Interaction_, _ol_Object_);\n/**\n * Return whether the interaction is currently active.\n * @return {boolean} `true` if the interaction is active, `false` otherwise.\n * @observable\n * @api\n */\n\n\n_ol_interaction_Interaction_.prototype.getActive = function () {\n  return (\n    /** @type {boolean} */\n    this.get(_ol_interaction_Property_.ACTIVE)\n  );\n};\n/**\n * Get the map associated with this interaction.\n * @return {ol.PluggableMap} Map.\n * @api\n */\n\n\n_ol_interaction_Interaction_.prototype.getMap = function () {\n  return this.map_;\n};\n/**\n * Activate or deactivate the interaction.\n * @param {boolean} active Active.\n * @observable\n * @api\n */\n\n\n_ol_interaction_Interaction_.prototype.setActive = function (active) {\n  this.set(_ol_interaction_Property_.ACTIVE, active);\n};\n/**\n * Remove the interaction from its current map and attach it to the new map.\n * Subclasses may set up event handlers to get notified about changes to\n * the map here.\n * @param {ol.PluggableMap} map Map.\n */\n\n\n_ol_interaction_Interaction_.prototype.setMap = function (map) {\n  this.map_ = map;\n};\n/**\n * @param {ol.View} view View.\n * @param {ol.Coordinate} delta Delta.\n * @param {number=} opt_duration Duration.\n */\n\n\n_ol_interaction_Interaction_.pan = function (view, delta, opt_duration) {\n  var currentCenter = view.getCenter();\n\n  if (currentCenter) {\n    var center = view.constrainCenter([currentCenter[0] + delta[0], currentCenter[1] + delta[1]]);\n\n    if (opt_duration) {\n      view.animate({\n        duration: opt_duration,\n        easing: _ol_easing_.linear,\n        center: center\n      });\n    } else {\n      view.setCenter(center);\n    }\n  }\n};\n/**\n * @param {ol.View} view View.\n * @param {number|undefined} rotation Rotation.\n * @param {ol.Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\n\n\n_ol_interaction_Interaction_.rotate = function (view, rotation, opt_anchor, opt_duration) {\n  rotation = view.constrainRotation(rotation, 0);\n\n  _ol_interaction_Interaction_.rotateWithoutConstraints(view, rotation, opt_anchor, opt_duration);\n};\n/**\n * @param {ol.View} view View.\n * @param {number|undefined} rotation Rotation.\n * @param {ol.Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\n\n\n_ol_interaction_Interaction_.rotateWithoutConstraints = function (view, rotation, opt_anchor, opt_duration) {\n  if (rotation !== undefined) {\n    var currentRotation = view.getRotation();\n    var currentCenter = view.getCenter();\n\n    if (currentRotation !== undefined && currentCenter && opt_duration > 0) {\n      view.animate({\n        rotation: rotation,\n        anchor: opt_anchor,\n        duration: opt_duration,\n        easing: _ol_easing_.easeOut\n      });\n    } else {\n      view.rotate(rotation, opt_anchor);\n    }\n  }\n};\n/**\n * @param {ol.View} view View.\n * @param {number|undefined} resolution Resolution to go to.\n * @param {ol.Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n * @param {number=} opt_direction Zooming direction; > 0 indicates\n *     zooming out, in which case the constraints system will select\n *     the largest nearest resolution; < 0 indicates zooming in, in\n *     which case the constraints system will select the smallest\n *     nearest resolution; == 0 indicates that the zooming direction\n *     is unknown/not relevant, in which case the constraints system\n *     will select the nearest resolution. If not defined 0 is\n *     assumed.\n */\n\n\n_ol_interaction_Interaction_.zoom = function (view, resolution, opt_anchor, opt_duration, opt_direction) {\n  resolution = view.constrainResolution(resolution, 0, opt_direction);\n\n  _ol_interaction_Interaction_.zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration);\n};\n/**\n * @param {ol.View} view View.\n * @param {number} delta Delta from previous zoom level.\n * @param {ol.Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\n\n\n_ol_interaction_Interaction_.zoomByDelta = function (view, delta, opt_anchor, opt_duration) {\n  var currentResolution = view.getResolution();\n  var resolution = view.constrainResolution(currentResolution, delta, 0);\n\n  if (resolution !== undefined) {\n    var resolutions = view.getResolutions();\n    resolution = _ol_math_.clamp(resolution, view.getMinResolution() || resolutions[resolutions.length - 1], view.getMaxResolution() || resolutions[0]);\n  } // If we have a constraint on center, we need to change the anchor so that the\n  // new center is within the extent. We first calculate the new center, apply\n  // the constraint to it, and then calculate back the anchor\n\n\n  if (opt_anchor && resolution !== undefined && resolution !== currentResolution) {\n    var currentCenter = view.getCenter();\n    var center = view.calculateCenterZoom(resolution, opt_anchor);\n    center = view.constrainCenter(center);\n    opt_anchor = [(resolution * currentCenter[0] - currentResolution * center[0]) / (resolution - currentResolution), (resolution * currentCenter[1] - currentResolution * center[1]) / (resolution - currentResolution)];\n  }\n\n  _ol_interaction_Interaction_.zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration);\n};\n/**\n * @param {ol.View} view View.\n * @param {number|undefined} resolution Resolution to go to.\n * @param {ol.Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\n\n\n_ol_interaction_Interaction_.zoomWithoutConstraints = function (view, resolution, opt_anchor, opt_duration) {\n  if (resolution) {\n    var currentResolution = view.getResolution();\n    var currentCenter = view.getCenter();\n\n    if (currentResolution !== undefined && currentCenter && resolution !== currentResolution && opt_duration) {\n      view.animate({\n        resolution: resolution,\n        anchor: opt_anchor,\n        duration: opt_duration,\n        easing: _ol_easing_.easeOut\n      });\n    } else {\n      if (opt_anchor) {\n        var center = view.calculateCenterZoom(resolution, opt_anchor);\n        view.setCenter(center);\n      }\n\n      view.setResolution(resolution);\n    }\n  }\n};\n\nexport default _ol_interaction_Interaction_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/interaction/interaction.js"],"names":["_ol_","_ol_Object_","_ol_easing_","_ol_interaction_Property_","_ol_math_","_ol_interaction_Interaction_","options","call","map_","setActive","handleEvent","inherits","prototype","getActive","get","ACTIVE","getMap","active","set","setMap","map","pan","view","delta","opt_duration","currentCenter","getCenter","center","constrainCenter","animate","duration","easing","linear","setCenter","rotate","rotation","opt_anchor","constrainRotation","rotateWithoutConstraints","undefined","currentRotation","getRotation","anchor","easeOut","zoom","resolution","opt_direction","constrainResolution","zoomWithoutConstraints","zoomByDelta","currentResolution","getResolution","resolutions","getResolutions","clamp","getMinResolution","length","getMaxResolution","calculateCenterZoom","setResolution"],"mappings":"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","sourcesContent":["// FIXME factor out key precondition (shift et. al)\n\nimport _ol_ from '../index.js';\nimport _ol_Object_ from '../object.js';\nimport _ol_easing_ from '../easing.js';\nimport _ol_interaction_Property_ from '../interaction/property.js';\nimport _ol_math_ from '../math.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * User actions that change the state of the map. Some are similar to controls,\n * but are not associated with a DOM element.\n * For example, {@link ol.interaction.KeyboardZoom} is functionally the same as\n * {@link ol.control.Zoom}, but triggered by a keyboard event not a button\n * element event.\n * Although interactions do not have a DOM element, some of them do render\n * vectors and so are visible on the screen.\n *\n * @constructor\n * @param {olx.interaction.InteractionOptions} options Options.\n * @extends {ol.Object}\n * @api\n */\nvar _ol_interaction_Interaction_ = function(options) {\n\n  _ol_Object_.call(this);\n\n  /**\n   * @private\n   * @type {ol.PluggableMap}\n   */\n  this.map_ = null;\n\n  this.setActive(true);\n\n  /**\n   * @type {function(ol.MapBrowserEvent):boolean}\n   */\n  this.handleEvent = options.handleEvent;\n\n};\n\n_ol_.inherits(_ol_interaction_Interaction_, _ol_Object_);\n\n\n/**\n * Return whether the interaction is currently active.\n * @return {boolean} `true` if the interaction is active, `false` otherwise.\n * @observable\n * @api\n */\n_ol_interaction_Interaction_.prototype.getActive = function() {\n  return (\n    /** @type {boolean} */ this.get(_ol_interaction_Property_.ACTIVE)\n  );\n};\n\n\n/**\n * Get the map associated with this interaction.\n * @return {ol.PluggableMap} Map.\n * @api\n */\n_ol_interaction_Interaction_.prototype.getMap = function() {\n  return this.map_;\n};\n\n\n/**\n * Activate or deactivate the interaction.\n * @param {boolean} active Active.\n * @observable\n * @api\n */\n_ol_interaction_Interaction_.prototype.setActive = function(active) {\n  this.set(_ol_interaction_Property_.ACTIVE, active);\n};\n\n\n/**\n * Remove the interaction from its current map and attach it to the new map.\n * Subclasses may set up event handlers to get notified about changes to\n * the map here.\n * @param {ol.PluggableMap} map Map.\n */\n_ol_interaction_Interaction_.prototype.setMap = function(map) {\n  this.map_ = map;\n};\n\n\n/**\n * @param {ol.View} view View.\n * @param {ol.Coordinate} delta Delta.\n * @param {number=} opt_duration Duration.\n */\n_ol_interaction_Interaction_.pan = function(view, delta, opt_duration) {\n  var currentCenter = view.getCenter();\n  if (currentCenter) {\n    var center = view.constrainCenter(\n        [currentCenter[0] + delta[0], currentCenter[1] + delta[1]]);\n    if (opt_duration) {\n      view.animate({\n        duration: opt_duration,\n        easing: _ol_easing_.linear,\n        center: center\n      });\n    } else {\n      view.setCenter(center);\n    }\n  }\n};\n\n\n/**\n * @param {ol.View} view View.\n * @param {number|undefined} rotation Rotation.\n * @param {ol.Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\n_ol_interaction_Interaction_.rotate = function(view, rotation, opt_anchor, opt_duration) {\n  rotation = view.constrainRotation(rotation, 0);\n  _ol_interaction_Interaction_.rotateWithoutConstraints(\n      view, rotation, opt_anchor, opt_duration);\n};\n\n\n/**\n * @param {ol.View} view View.\n * @param {number|undefined} rotation Rotation.\n * @param {ol.Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\n_ol_interaction_Interaction_.rotateWithoutConstraints = function(view, rotation, opt_anchor, opt_duration) {\n  if (rotation !== undefined) {\n    var currentRotation = view.getRotation();\n    var currentCenter = view.getCenter();\n    if (currentRotation !== undefined && currentCenter && opt_duration > 0) {\n      view.animate({\n        rotation: rotation,\n        anchor: opt_anchor,\n        duration: opt_duration,\n        easing: _ol_easing_.easeOut\n      });\n    } else {\n      view.rotate(rotation, opt_anchor);\n    }\n  }\n};\n\n\n/**\n * @param {ol.View} view View.\n * @param {number|undefined} resolution Resolution to go to.\n * @param {ol.Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n * @param {number=} opt_direction Zooming direction; > 0 indicates\n *     zooming out, in which case the constraints system will select\n *     the largest nearest resolution; < 0 indicates zooming in, in\n *     which case the constraints system will select the smallest\n *     nearest resolution; == 0 indicates that the zooming direction\n *     is unknown/not relevant, in which case the constraints system\n *     will select the nearest resolution. If not defined 0 is\n *     assumed.\n */\n_ol_interaction_Interaction_.zoom = function(view, resolution, opt_anchor, opt_duration, opt_direction) {\n  resolution = view.constrainResolution(resolution, 0, opt_direction);\n  _ol_interaction_Interaction_.zoomWithoutConstraints(\n      view, resolution, opt_anchor, opt_duration);\n};\n\n\n/**\n * @param {ol.View} view View.\n * @param {number} delta Delta from previous zoom level.\n * @param {ol.Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\n_ol_interaction_Interaction_.zoomByDelta = function(view, delta, opt_anchor, opt_duration) {\n  var currentResolution = view.getResolution();\n  var resolution = view.constrainResolution(currentResolution, delta, 0);\n\n  if (resolution !== undefined) {\n    var resolutions = view.getResolutions();\n    resolution = _ol_math_.clamp(\n        resolution,\n        view.getMinResolution() || resolutions[resolutions.length - 1],\n        view.getMaxResolution() || resolutions[0]);\n  }\n\n  // If we have a constraint on center, we need to change the anchor so that the\n  // new center is within the extent. We first calculate the new center, apply\n  // the constraint to it, and then calculate back the anchor\n  if (opt_anchor && resolution !== undefined && resolution !== currentResolution) {\n    var currentCenter = view.getCenter();\n    var center = view.calculateCenterZoom(resolution, opt_anchor);\n    center = view.constrainCenter(center);\n\n    opt_anchor = [\n      (resolution * currentCenter[0] - currentResolution * center[0]) /\n          (resolution - currentResolution),\n      (resolution * currentCenter[1] - currentResolution * center[1]) /\n          (resolution - currentResolution)\n    ];\n  }\n\n  _ol_interaction_Interaction_.zoomWithoutConstraints(\n      view, resolution, opt_anchor, opt_duration);\n};\n\n\n/**\n * @param {ol.View} view View.\n * @param {number|undefined} resolution Resolution to go to.\n * @param {ol.Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\n_ol_interaction_Interaction_.zoomWithoutConstraints = function(view, resolution, opt_anchor, opt_duration) {\n  if (resolution) {\n    var currentResolution = view.getResolution();\n    var currentCenter = view.getCenter();\n    if (currentResolution !== undefined && currentCenter &&\n        resolution !== currentResolution && opt_duration) {\n      view.animate({\n        resolution: resolution,\n        anchor: opt_anchor,\n        duration: opt_duration,\n        easing: _ol_easing_.easeOut\n      });\n    } else {\n      if (opt_anchor) {\n        var center = view.calculateCenterZoom(resolution, opt_anchor);\n        view.setCenter(center);\n      }\n      view.setResolution(resolution);\n    }\n  }\n};\nexport default _ol_interaction_Interaction_;\n"]},"metadata":{},"sourceType":"module"}