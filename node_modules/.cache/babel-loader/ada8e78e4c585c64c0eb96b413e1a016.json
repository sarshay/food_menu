{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_Disposable_ from '../disposable.js';\nimport _ol_events_ from '../events.js';\nimport _ol_events_Event_ from '../events/event.js';\n/**\n * @classdesc\n * A simplified implementation of the W3C DOM Level 2 EventTarget interface.\n * @see {@link https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget}\n *\n * There are two important simplifications compared to the specification:\n *\n * 1. The handling of `useCapture` in `addEventListener` and\n *    `removeEventListener`. There is no real capture model.\n * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.\n *    There is no event target hierarchy. When a listener calls\n *    `stopPropagation` or `preventDefault` on an event object, it means that no\n *    more listeners after this one will be called. Same as when the listener\n *    returns false.\n *\n * @constructor\n * @extends {ol.Disposable}\n */\n\nvar _ol_events_EventTarget_ = function () {\n  _ol_Disposable_.call(this);\n  /**\n   * @private\n   * @type {!Object.<string, number>}\n   */\n\n\n  this.pendingRemovals_ = {};\n  /**\n   * @private\n   * @type {!Object.<string, number>}\n   */\n\n  this.dispatching_ = {};\n  /**\n   * @private\n   * @type {!Object.<string, Array.<ol.EventsListenerFunctionType>>}\n   */\n\n  this.listeners_ = {};\n};\n\n_ol_.inherits(_ol_events_EventTarget_, _ol_Disposable_);\n/**\n * @param {string} type Type.\n * @param {ol.EventsListenerFunctionType} listener Listener.\n */\n\n\n_ol_events_EventTarget_.prototype.addEventListener = function (type, listener) {\n  var listeners = this.listeners_[type];\n\n  if (!listeners) {\n    listeners = this.listeners_[type] = [];\n  }\n\n  if (listeners.indexOf(listener) === -1) {\n    listeners.push(listener);\n  }\n};\n/**\n * @param {{type: string,\n *     target: (EventTarget|ol.events.EventTarget|undefined)}|ol.events.Event|\n *     string} event Event or event type.\n * @return {boolean|undefined} `false` if anyone called preventDefault on the\n *     event object or if any of the listeners returned false.\n */\n\n\n_ol_events_EventTarget_.prototype.dispatchEvent = function (event) {\n  var evt = typeof event === 'string' ? new _ol_events_Event_(event) : event;\n  var type = evt.type;\n  evt.target = this;\n  var listeners = this.listeners_[type];\n  var propagate;\n\n  if (listeners) {\n    if (!(type in this.dispatching_)) {\n      this.dispatching_[type] = 0;\n      this.pendingRemovals_[type] = 0;\n    }\n\n    ++this.dispatching_[type];\n\n    for (var i = 0, ii = listeners.length; i < ii; ++i) {\n      if (listeners[i].call(this, evt) === false || evt.propagationStopped) {\n        propagate = false;\n        break;\n      }\n    }\n\n    --this.dispatching_[type];\n\n    if (this.dispatching_[type] === 0) {\n      var pendingRemovals = this.pendingRemovals_[type];\n      delete this.pendingRemovals_[type];\n\n      while (pendingRemovals--) {\n        this.removeEventListener(type, _ol_.nullFunction);\n      }\n\n      delete this.dispatching_[type];\n    }\n\n    return propagate;\n  }\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_events_EventTarget_.prototype.disposeInternal = function () {\n  _ol_events_.unlistenAll(this);\n};\n/**\n * Get the listeners for a specified event type. Listeners are returned in the\n * order that they will be called in.\n *\n * @param {string} type Type.\n * @return {Array.<ol.EventsListenerFunctionType>} Listeners.\n */\n\n\n_ol_events_EventTarget_.prototype.getListeners = function (type) {\n  return this.listeners_[type];\n};\n/**\n * @param {string=} opt_type Type. If not provided,\n *     `true` will be returned if this EventTarget has any listeners.\n * @return {boolean} Has listeners.\n */\n\n\n_ol_events_EventTarget_.prototype.hasListener = function (opt_type) {\n  return opt_type ? opt_type in this.listeners_ : Object.keys(this.listeners_).length > 0;\n};\n/**\n * @param {string} type Type.\n * @param {ol.EventsListenerFunctionType} listener Listener.\n */\n\n\n_ol_events_EventTarget_.prototype.removeEventListener = function (type, listener) {\n  var listeners = this.listeners_[type];\n\n  if (listeners) {\n    var index = listeners.indexOf(listener);\n\n    if (type in this.pendingRemovals_) {\n      // make listener a no-op, and remove later in #dispatchEvent()\n      listeners[index] = _ol_.nullFunction;\n      ++this.pendingRemovals_[type];\n    } else {\n      listeners.splice(index, 1);\n\n      if (listeners.length === 0) {\n        delete this.listeners_[type];\n      }\n    }\n  }\n};\n\nexport default _ol_events_EventTarget_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/events/eventtarget.js"],"names":["_ol_","_ol_Disposable_","_ol_events_","_ol_events_Event_","_ol_events_EventTarget_","call","pendingRemovals_","dispatching_","listeners_","inherits","prototype","addEventListener","type","listener","listeners","indexOf","push","dispatchEvent","event","evt","target","propagate","i","ii","length","propagationStopped","pendingRemovals","removeEventListener","nullFunction","disposeInternal","unlistenAll","getListeners","hasListener","opt_type","Object","keys","index","splice"],"mappings":"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","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_Disposable_ from '../disposable.js';\nimport _ol_events_ from '../events.js';\nimport _ol_events_Event_ from '../events/event.js';\n\n/**\n * @classdesc\n * A simplified implementation of the W3C DOM Level 2 EventTarget interface.\n * @see {@link https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget}\n *\n * There are two important simplifications compared to the specification:\n *\n * 1. The handling of `useCapture` in `addEventListener` and\n *    `removeEventListener`. There is no real capture model.\n * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.\n *    There is no event target hierarchy. When a listener calls\n *    `stopPropagation` or `preventDefault` on an event object, it means that no\n *    more listeners after this one will be called. Same as when the listener\n *    returns false.\n *\n * @constructor\n * @extends {ol.Disposable}\n */\nvar _ol_events_EventTarget_ = function() {\n\n  _ol_Disposable_.call(this);\n\n  /**\n   * @private\n   * @type {!Object.<string, number>}\n   */\n  this.pendingRemovals_ = {};\n\n  /**\n   * @private\n   * @type {!Object.<string, number>}\n   */\n  this.dispatching_ = {};\n\n  /**\n   * @private\n   * @type {!Object.<string, Array.<ol.EventsListenerFunctionType>>}\n   */\n  this.listeners_ = {};\n\n};\n\n_ol_.inherits(_ol_events_EventTarget_, _ol_Disposable_);\n\n\n/**\n * @param {string} type Type.\n * @param {ol.EventsListenerFunctionType} listener Listener.\n */\n_ol_events_EventTarget_.prototype.addEventListener = function(type, listener) {\n  var listeners = this.listeners_[type];\n  if (!listeners) {\n    listeners = this.listeners_[type] = [];\n  }\n  if (listeners.indexOf(listener) === -1) {\n    listeners.push(listener);\n  }\n};\n\n\n/**\n * @param {{type: string,\n *     target: (EventTarget|ol.events.EventTarget|undefined)}|ol.events.Event|\n *     string} event Event or event type.\n * @return {boolean|undefined} `false` if anyone called preventDefault on the\n *     event object or if any of the listeners returned false.\n */\n_ol_events_EventTarget_.prototype.dispatchEvent = function(event) {\n  var evt = typeof event === 'string' ? new _ol_events_Event_(event) : event;\n  var type = evt.type;\n  evt.target = this;\n  var listeners = this.listeners_[type];\n  var propagate;\n  if (listeners) {\n    if (!(type in this.dispatching_)) {\n      this.dispatching_[type] = 0;\n      this.pendingRemovals_[type] = 0;\n    }\n    ++this.dispatching_[type];\n    for (var i = 0, ii = listeners.length; i < ii; ++i) {\n      if (listeners[i].call(this, evt) === false || evt.propagationStopped) {\n        propagate = false;\n        break;\n      }\n    }\n    --this.dispatching_[type];\n    if (this.dispatching_[type] === 0) {\n      var pendingRemovals = this.pendingRemovals_[type];\n      delete this.pendingRemovals_[type];\n      while (pendingRemovals--) {\n        this.removeEventListener(type, _ol_.nullFunction);\n      }\n      delete this.dispatching_[type];\n    }\n    return propagate;\n  }\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_events_EventTarget_.prototype.disposeInternal = function() {\n  _ol_events_.unlistenAll(this);\n};\n\n\n/**\n * Get the listeners for a specified event type. Listeners are returned in the\n * order that they will be called in.\n *\n * @param {string} type Type.\n * @return {Array.<ol.EventsListenerFunctionType>} Listeners.\n */\n_ol_events_EventTarget_.prototype.getListeners = function(type) {\n  return this.listeners_[type];\n};\n\n\n/**\n * @param {string=} opt_type Type. If not provided,\n *     `true` will be returned if this EventTarget has any listeners.\n * @return {boolean} Has listeners.\n */\n_ol_events_EventTarget_.prototype.hasListener = function(opt_type) {\n  return opt_type ?\n    opt_type in this.listeners_ :\n    Object.keys(this.listeners_).length > 0;\n};\n\n\n/**\n * @param {string} type Type.\n * @param {ol.EventsListenerFunctionType} listener Listener.\n */\n_ol_events_EventTarget_.prototype.removeEventListener = function(type, listener) {\n  var listeners = this.listeners_[type];\n  if (listeners) {\n    var index = listeners.indexOf(listener);\n    if (type in this.pendingRemovals_) {\n      // make listener a no-op, and remove later in #dispatchEvent()\n      listeners[index] = _ol_.nullFunction;\n      ++this.pendingRemovals_[type];\n    } else {\n      listeners.splice(index, 1);\n      if (listeners.length === 0) {\n        delete this.listeners_[type];\n      }\n    }\n  }\n};\nexport default _ol_events_EventTarget_;\n"]},"metadata":{},"sourceType":"module"}