{"ast":null,"code":"import _ol_asserts_ from './asserts.js';\nimport _ol_extent_Corner_ from './extent/corner.js';\nimport _ol_extent_Relationship_ from './extent/relationship.js';\nvar _ol_extent_ = {};\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array.<ol.Coordinate>} coordinates Coordinates.\n * @return {ol.Extent} Bounding extent.\n * @api\n */\n\n_ol_extent_.boundingExtent = function (coordinates) {\n  var extent = _ol_extent_.createEmpty();\n\n  for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n    _ol_extent_.extendCoordinate(extent, coordinates[i]);\n  }\n\n  return extent;\n};\n/**\n * @param {Array.<number>} xs Xs.\n * @param {Array.<number>} ys Ys.\n * @param {ol.Extent=} opt_extent Destination extent.\n * @private\n * @return {ol.Extent} Extent.\n */\n\n\n_ol_extent_.boundingExtentXYs_ = function (xs, ys, opt_extent) {\n  var minX = Math.min.apply(null, xs);\n  var minY = Math.min.apply(null, ys);\n  var maxX = Math.max.apply(null, xs);\n  var maxY = Math.max.apply(null, ys);\n  return _ol_extent_.createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n};\n/**\n * Return extent increased by the provided value.\n * @param {ol.Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n * @api\n */\n\n\n_ol_extent_.buffer = function (extent, value, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0] - value;\n    opt_extent[1] = extent[1] - value;\n    opt_extent[2] = extent[2] + value;\n    opt_extent[3] = extent[3] + value;\n    return opt_extent;\n  } else {\n    return [extent[0] - value, extent[1] - value, extent[2] + value, extent[3] + value];\n  }\n};\n/**\n * Creates a clone of an extent.\n *\n * @param {ol.Extent} extent Extent to clone.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} The clone.\n */\n\n\n_ol_extent_.clone = function (extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent.slice();\n  }\n};\n/**\n * @param {ol.Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\n\n\n_ol_extent_.closestSquaredDistanceXY = function (extent, x, y) {\n  var dx, dy;\n\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n\n  return dx * dx + dy * dy;\n};\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {ol.Extent} extent Extent.\n * @param {ol.Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\n\n\n_ol_extent_.containsCoordinate = function (extent, coordinate) {\n  return _ol_extent_.containsXY(extent, coordinate[0], coordinate[1]);\n};\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\n\n\n_ol_extent_.containsExtent = function (extent1, extent2) {\n  return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] && extent1[1] <= extent2[1] && extent2[3] <= extent1[3];\n};\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {ol.Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\n\n\n_ol_extent_.containsXY = function (extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n};\n/**\n * Get the relationship between a coordinate and extent.\n * @param {ol.Extent} extent The extent.\n * @param {ol.Coordinate} coordinate The coordinate.\n * @return {number} The relationship (bitwise compare with\n *     ol.extent.Relationship).\n */\n\n\n_ol_extent_.coordinateRelationship = function (extent, coordinate) {\n  var minX = extent[0];\n  var minY = extent[1];\n  var maxX = extent[2];\n  var maxY = extent[3];\n  var x = coordinate[0];\n  var y = coordinate[1];\n  var relationship = _ol_extent_Relationship_.UNKNOWN;\n\n  if (x < minX) {\n    relationship = relationship | _ol_extent_Relationship_.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | _ol_extent_Relationship_.RIGHT;\n  }\n\n  if (y < minY) {\n    relationship = relationship | _ol_extent_Relationship_.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | _ol_extent_Relationship_.ABOVE;\n  }\n\n  if (relationship === _ol_extent_Relationship_.UNKNOWN) {\n    relationship = _ol_extent_Relationship_.INTERSECTING;\n  }\n\n  return relationship;\n};\n/**\n * Create an empty extent.\n * @return {ol.Extent} Empty extent.\n * @api\n */\n\n\n_ol_extent_.createEmpty = function () {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n};\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {ol.Extent=} opt_extent Destination extent.\n * @return {ol.Extent} Extent.\n */\n\n\n_ol_extent_.createOrUpdate = function (minX, minY, maxX, maxY, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = minX;\n    opt_extent[1] = minY;\n    opt_extent[2] = maxX;\n    opt_extent[3] = maxY;\n    return opt_extent;\n  } else {\n    return [minX, minY, maxX, maxY];\n  }\n};\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n\n\n_ol_extent_.createOrUpdateEmpty = function (opt_extent) {\n  return _ol_extent_.createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, opt_extent);\n};\n/**\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n\n\n_ol_extent_.createOrUpdateFromCoordinate = function (coordinate, opt_extent) {\n  var x = coordinate[0];\n  var y = coordinate[1];\n  return _ol_extent_.createOrUpdate(x, y, x, y, opt_extent);\n};\n/**\n * @param {Array.<ol.Coordinate>} coordinates Coordinates.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n\n\n_ol_extent_.createOrUpdateFromCoordinates = function (coordinates, opt_extent) {\n  var extent = _ol_extent_.createOrUpdateEmpty(opt_extent);\n\n  return _ol_extent_.extendCoordinates(extent, coordinates);\n};\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n\n\n_ol_extent_.createOrUpdateFromFlatCoordinates = function (flatCoordinates, offset, end, stride, opt_extent) {\n  var extent = _ol_extent_.createOrUpdateEmpty(opt_extent);\n\n  return _ol_extent_.extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n};\n/**\n * @param {Array.<Array.<ol.Coordinate>>} rings Rings.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n\n\n_ol_extent_.createOrUpdateFromRings = function (rings, opt_extent) {\n  var extent = _ol_extent_.createOrUpdateEmpty(opt_extent);\n\n  return _ol_extent_.extendRings(extent, rings);\n};\n/**\n * Determine if two extents are equivalent.\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\n\n\n_ol_extent_.equals = function (extent1, extent2) {\n  return extent1[0] == extent2[0] && extent1[2] == extent2[2] && extent1[1] == extent2[1] && extent1[3] == extent2[3];\n};\n/**\n * Modify an extent to include another extent.\n * @param {ol.Extent} extent1 The extent to be modified.\n * @param {ol.Extent} extent2 The extent that will be included in the first.\n * @return {ol.Extent} A reference to the first (extended) extent.\n * @api\n */\n\n\n_ol_extent_.extend = function (extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n\n  return extent1;\n};\n/**\n * @param {ol.Extent} extent Extent.\n * @param {ol.Coordinate} coordinate Coordinate.\n */\n\n\n_ol_extent_.extendCoordinate = function (extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n};\n/**\n * @param {ol.Extent} extent Extent.\n * @param {Array.<ol.Coordinate>} coordinates Coordinates.\n * @return {ol.Extent} Extent.\n */\n\n\n_ol_extent_.extendCoordinates = function (extent, coordinates) {\n  var i, ii;\n\n  for (i = 0, ii = coordinates.length; i < ii; ++i) {\n    _ol_extent_.extendCoordinate(extent, coordinates[i]);\n  }\n\n  return extent;\n};\n/**\n * @param {ol.Extent} extent Extent.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {ol.Extent} Extent.\n */\n\n\n_ol_extent_.extendFlatCoordinates = function (extent, flatCoordinates, offset, end, stride) {\n  for (; offset < end; offset += stride) {\n    _ol_extent_.extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n\n  return extent;\n};\n/**\n * @param {ol.Extent} extent Extent.\n * @param {Array.<Array.<ol.Coordinate>>} rings Rings.\n * @return {ol.Extent} Extent.\n */\n\n\n_ol_extent_.extendRings = function (extent, rings) {\n  var i, ii;\n\n  for (i = 0, ii = rings.length; i < ii; ++i) {\n    _ol_extent_.extendCoordinates(extent, rings[i]);\n  }\n\n  return extent;\n};\n/**\n * @param {ol.Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\n\n\n_ol_extent_.extendXY = function (extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n};\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {ol.Extent} extent Extent.\n * @param {function(this:T, ol.Coordinate): S} callback Callback.\n * @param {T=} opt_this Value to use as `this` when executing `callback`.\n * @return {S|boolean} Value.\n * @template S, T\n */\n\n\n_ol_extent_.forEachCorner = function (extent, callback, opt_this) {\n  var val;\n  val = callback.call(opt_this, _ol_extent_.getBottomLeft(extent));\n\n  if (val) {\n    return val;\n  }\n\n  val = callback.call(opt_this, _ol_extent_.getBottomRight(extent));\n\n  if (val) {\n    return val;\n  }\n\n  val = callback.call(opt_this, _ol_extent_.getTopRight(extent));\n\n  if (val) {\n    return val;\n  }\n\n  val = callback.call(opt_this, _ol_extent_.getTopLeft(extent));\n\n  if (val) {\n    return val;\n  }\n\n  return false;\n};\n/**\n * Get the size of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\n\n\n_ol_extent_.getArea = function (extent) {\n  var area = 0;\n\n  if (!_ol_extent_.isEmpty(extent)) {\n    area = _ol_extent_.getWidth(extent) * _ol_extent_.getHeight(extent);\n  }\n\n  return area;\n};\n/**\n * Get the bottom left coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Bottom left coordinate.\n * @api\n */\n\n\n_ol_extent_.getBottomLeft = function (extent) {\n  return [extent[0], extent[1]];\n};\n/**\n * Get the bottom right coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Bottom right coordinate.\n * @api\n */\n\n\n_ol_extent_.getBottomRight = function (extent) {\n  return [extent[2], extent[1]];\n};\n/**\n * Get the center coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Center.\n * @api\n */\n\n\n_ol_extent_.getCenter = function (extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n};\n/**\n * Get a corner coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @param {ol.extent.Corner} corner Corner.\n * @return {ol.Coordinate} Corner coordinate.\n */\n\n\n_ol_extent_.getCorner = function (extent, corner) {\n  var coordinate;\n\n  if (corner === _ol_extent_Corner_.BOTTOM_LEFT) {\n    coordinate = _ol_extent_.getBottomLeft(extent);\n  } else if (corner === _ol_extent_Corner_.BOTTOM_RIGHT) {\n    coordinate = _ol_extent_.getBottomRight(extent);\n  } else if (corner === _ol_extent_Corner_.TOP_LEFT) {\n    coordinate = _ol_extent_.getTopLeft(extent);\n  } else if (corner === _ol_extent_Corner_.TOP_RIGHT) {\n    coordinate = _ol_extent_.getTopRight(extent);\n  } else {\n    _ol_asserts_.assert(false, 13); // Invalid corner\n\n  }\n\n  return (\n    /** @type {!ol.Coordinate} */\n    coordinate\n  );\n};\n/**\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\n\n\n_ol_extent_.getEnlargedArea = function (extent1, extent2) {\n  var minX = Math.min(extent1[0], extent2[0]);\n  var minY = Math.min(extent1[1], extent2[1]);\n  var maxX = Math.max(extent1[2], extent2[2]);\n  var maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n};\n/**\n * @param {ol.Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {ol.Size} size Size.\n * @param {ol.Extent=} opt_extent Destination extent.\n * @return {ol.Extent} Extent.\n */\n\n\n_ol_extent_.getForViewAndSize = function (center, resolution, rotation, size, opt_extent) {\n  var dx = resolution * size[0] / 2;\n  var dy = resolution * size[1] / 2;\n  var cosRotation = Math.cos(rotation);\n  var sinRotation = Math.sin(rotation);\n  var xCos = dx * cosRotation;\n  var xSin = dx * sinRotation;\n  var yCos = dy * cosRotation;\n  var ySin = dy * sinRotation;\n  var x = center[0];\n  var y = center[1];\n  var x0 = x - xCos + ySin;\n  var x1 = x - xCos - ySin;\n  var x2 = x + xCos - ySin;\n  var x3 = x + xCos + ySin;\n  var y0 = y - xSin - yCos;\n  var y1 = y - xSin + yCos;\n  var y2 = y + xSin + yCos;\n  var y3 = y + xSin - yCos;\n  return _ol_extent_.createOrUpdate(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), opt_extent);\n};\n/**\n * Get the height of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\n\n\n_ol_extent_.getHeight = function (extent) {\n  return extent[3] - extent[1];\n};\n/**\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\n\n\n_ol_extent_.getIntersectionArea = function (extent1, extent2) {\n  var intersection = _ol_extent_.getIntersection(extent1, extent2);\n\n  return _ol_extent_.getArea(intersection);\n};\n/**\n * Get the intersection of two extents.\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @param {ol.Extent=} opt_extent Optional extent to populate with intersection.\n * @return {ol.Extent} Intersecting extent.\n * @api\n */\n\n\n_ol_extent_.getIntersection = function (extent1, extent2, opt_extent) {\n  var intersection = opt_extent ? opt_extent : _ol_extent_.createEmpty();\n\n  if (_ol_extent_.intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  }\n\n  return intersection;\n};\n/**\n * @param {ol.Extent} extent Extent.\n * @return {number} Margin.\n */\n\n\n_ol_extent_.getMargin = function (extent) {\n  return _ol_extent_.getWidth(extent) + _ol_extent_.getHeight(extent);\n};\n/**\n * Get the size (width, height) of an extent.\n * @param {ol.Extent} extent The extent.\n * @return {ol.Size} The extent size.\n * @api\n */\n\n\n_ol_extent_.getSize = function (extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n};\n/**\n * Get the top left coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Top left coordinate.\n * @api\n */\n\n\n_ol_extent_.getTopLeft = function (extent) {\n  return [extent[0], extent[3]];\n};\n/**\n * Get the top right coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Top right coordinate.\n * @api\n */\n\n\n_ol_extent_.getTopRight = function (extent) {\n  return [extent[2], extent[3]];\n};\n/**\n * Get the width of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\n\n\n_ol_extent_.getWidth = function (extent) {\n  return extent[2] - extent[0];\n};\n/**\n * Determine if one extent intersects another.\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\n\n\n_ol_extent_.intersects = function (extent1, extent2) {\n  return extent1[0] <= extent2[2] && extent1[2] >= extent2[0] && extent1[1] <= extent2[3] && extent1[3] >= extent2[1];\n};\n/**\n * Determine if an extent is empty.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\n\n\n_ol_extent_.isEmpty = function (extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n};\n/**\n * @param {ol.Extent} extent Extent.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n\n\n_ol_extent_.returnOrUpdate = function (extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent;\n  }\n};\n/**\n * @param {ol.Extent} extent Extent.\n * @param {number} value Value.\n */\n\n\n_ol_extent_.scaleFromCenter = function (extent, value) {\n  var deltaX = (extent[2] - extent[0]) / 2 * (value - 1);\n  var deltaY = (extent[3] - extent[1]) / 2 * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n};\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {ol.Extent} extent The extent.\n * @param {ol.Coordinate} start Segment start coordinate.\n * @param {ol.Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\n\n\n_ol_extent_.intersectsSegment = function (extent, start, end) {\n  var intersects = false;\n\n  var startRel = _ol_extent_.coordinateRelationship(extent, start);\n\n  var endRel = _ol_extent_.coordinateRelationship(extent, end);\n\n  if (startRel === _ol_extent_Relationship_.INTERSECTING || endRel === _ol_extent_Relationship_.INTERSECTING) {\n    intersects = true;\n  } else {\n    var minX = extent[0];\n    var minY = extent[1];\n    var maxX = extent[2];\n    var maxY = extent[3];\n    var startX = start[0];\n    var startY = start[1];\n    var endX = end[0];\n    var endY = end[1];\n    var slope = (endY - startY) / (endX - startX);\n    var x, y;\n\n    if (!!(endRel & _ol_extent_Relationship_.ABOVE) && !(startRel & _ol_extent_Relationship_.ABOVE)) {\n      // potentially intersects top\n      x = endX - (endY - maxY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n\n    if (!intersects && !!(endRel & _ol_extent_Relationship_.RIGHT) && !(startRel & _ol_extent_Relationship_.RIGHT)) {\n      // potentially intersects right\n      y = endY - (endX - maxX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n\n    if (!intersects && !!(endRel & _ol_extent_Relationship_.BELOW) && !(startRel & _ol_extent_Relationship_.BELOW)) {\n      // potentially intersects bottom\n      x = endX - (endY - minY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n\n    if (!intersects && !!(endRel & _ol_extent_Relationship_.LEFT) && !(startRel & _ol_extent_Relationship_.LEFT)) {\n      // potentially intersects left\n      y = endY - (endX - minX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n  }\n\n  return intersects;\n};\n/**\n * Apply a transform function to the extent.\n * @param {ol.Extent} extent Extent.\n * @param {ol.TransformFunction} transformFn Transform function.  Called with\n * [minX, minY, maxX, maxY] extent coordinates.\n * @param {ol.Extent=} opt_extent Destination extent.\n * @return {ol.Extent} Extent.\n * @api\n */\n\n\n_ol_extent_.applyTransform = function (extent, transformFn, opt_extent) {\n  var coordinates = [extent[0], extent[1], extent[0], extent[3], extent[2], extent[1], extent[2], extent[3]];\n  transformFn(coordinates, coordinates, 2);\n  var xs = [coordinates[0], coordinates[2], coordinates[4], coordinates[6]];\n  var ys = [coordinates[1], coordinates[3], coordinates[5], coordinates[7]];\n  return _ol_extent_.boundingExtentXYs_(xs, ys, opt_extent);\n};\n\nexport default _ol_extent_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/extent.js"],"names":["_ol_asserts_","_ol_extent_Corner_","_ol_extent_Relationship_","_ol_extent_","boundingExtent","coordinates","extent","createEmpty","i","ii","length","extendCoordinate","boundingExtentXYs_","xs","ys","opt_extent","minX","Math","min","apply","minY","maxX","max","maxY","createOrUpdate","buffer","value","clone","slice","closestSquaredDistanceXY","x","y","dx","dy","containsCoordinate","coordinate","containsXY","containsExtent","extent1","extent2","coordinateRelationship","relationship","UNKNOWN","LEFT","RIGHT","BELOW","ABOVE","INTERSECTING","Infinity","createOrUpdateEmpty","createOrUpdateFromCoordinate","createOrUpdateFromCoordinates","extendCoordinates","createOrUpdateFromFlatCoordinates","flatCoordinates","offset","end","stride","extendFlatCoordinates","createOrUpdateFromRings","rings","extendRings","equals","extend","extendXY","forEachCorner","callback","opt_this","val","call","getBottomLeft","getBottomRight","getTopRight","getTopLeft","getArea","area","isEmpty","getWidth","getHeight","getCenter","getCorner","corner","BOTTOM_LEFT","BOTTOM_RIGHT","TOP_LEFT","TOP_RIGHT","assert","getEnlargedArea","getForViewAndSize","center","resolution","rotation","size","cosRotation","cos","sinRotation","sin","xCos","xSin","yCos","ySin","x0","x1","x2","x3","y0","y1","y2","y3","getIntersectionArea","intersection","getIntersection","intersects","getMargin","getSize","returnOrUpdate","scaleFromCenter","deltaX","deltaY","intersectsSegment","start","startRel","endRel","startX","startY","endX","endY","slope","applyTransform","transformFn"],"mappings":"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","sourcesContent":["import _ol_asserts_ from './asserts.js';\nimport _ol_extent_Corner_ from './extent/corner.js';\nimport _ol_extent_Relationship_ from './extent/relationship.js';\nvar _ol_extent_ = {};\n\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array.<ol.Coordinate>} coordinates Coordinates.\n * @return {ol.Extent} Bounding extent.\n * @api\n */\n_ol_extent_.boundingExtent = function(coordinates) {\n  var extent = _ol_extent_.createEmpty();\n  for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n    _ol_extent_.extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n};\n\n\n/**\n * @param {Array.<number>} xs Xs.\n * @param {Array.<number>} ys Ys.\n * @param {ol.Extent=} opt_extent Destination extent.\n * @private\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.boundingExtentXYs_ = function(xs, ys, opt_extent) {\n  var minX = Math.min.apply(null, xs);\n  var minY = Math.min.apply(null, ys);\n  var maxX = Math.max.apply(null, xs);\n  var maxY = Math.max.apply(null, ys);\n  return _ol_extent_.createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n};\n\n\n/**\n * Return extent increased by the provided value.\n * @param {ol.Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n * @api\n */\n_ol_extent_.buffer = function(extent, value, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0] - value;\n    opt_extent[1] = extent[1] - value;\n    opt_extent[2] = extent[2] + value;\n    opt_extent[3] = extent[3] + value;\n    return opt_extent;\n  } else {\n    return [\n      extent[0] - value,\n      extent[1] - value,\n      extent[2] + value,\n      extent[3] + value\n    ];\n  }\n};\n\n\n/**\n * Creates a clone of an extent.\n *\n * @param {ol.Extent} extent Extent to clone.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} The clone.\n */\n_ol_extent_.clone = function(extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent.slice();\n  }\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\n_ol_extent_.closestSquaredDistanceXY = function(extent, x, y) {\n  var dx, dy;\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n  return dx * dx + dy * dy;\n};\n\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {ol.Extent} extent Extent.\n * @param {ol.Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\n_ol_extent_.containsCoordinate = function(extent, coordinate) {\n  return _ol_extent_.containsXY(extent, coordinate[0], coordinate[1]);\n};\n\n\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\n_ol_extent_.containsExtent = function(extent1, extent2) {\n  return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] &&\n      extent1[1] <= extent2[1] && extent2[3] <= extent1[3];\n};\n\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {ol.Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\n_ol_extent_.containsXY = function(extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n};\n\n\n/**\n * Get the relationship between a coordinate and extent.\n * @param {ol.Extent} extent The extent.\n * @param {ol.Coordinate} coordinate The coordinate.\n * @return {number} The relationship (bitwise compare with\n *     ol.extent.Relationship).\n */\n_ol_extent_.coordinateRelationship = function(extent, coordinate) {\n  var minX = extent[0];\n  var minY = extent[1];\n  var maxX = extent[2];\n  var maxY = extent[3];\n  var x = coordinate[0];\n  var y = coordinate[1];\n  var relationship = _ol_extent_Relationship_.UNKNOWN;\n  if (x < minX) {\n    relationship = relationship | _ol_extent_Relationship_.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | _ol_extent_Relationship_.RIGHT;\n  }\n  if (y < minY) {\n    relationship = relationship | _ol_extent_Relationship_.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | _ol_extent_Relationship_.ABOVE;\n  }\n  if (relationship === _ol_extent_Relationship_.UNKNOWN) {\n    relationship = _ol_extent_Relationship_.INTERSECTING;\n  }\n  return relationship;\n};\n\n\n/**\n * Create an empty extent.\n * @return {ol.Extent} Empty extent.\n * @api\n */\n_ol_extent_.createEmpty = function() {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n};\n\n\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {ol.Extent=} opt_extent Destination extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.createOrUpdate = function(minX, minY, maxX, maxY, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = minX;\n    opt_extent[1] = minY;\n    opt_extent[2] = maxX;\n    opt_extent[3] = maxY;\n    return opt_extent;\n  } else {\n    return [minX, minY, maxX, maxY];\n  }\n};\n\n\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.createOrUpdateEmpty = function(opt_extent) {\n  return _ol_extent_.createOrUpdate(\n      Infinity, Infinity, -Infinity, -Infinity, opt_extent);\n};\n\n\n/**\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.createOrUpdateFromCoordinate = function(coordinate, opt_extent) {\n  var x = coordinate[0];\n  var y = coordinate[1];\n  return _ol_extent_.createOrUpdate(x, y, x, y, opt_extent);\n};\n\n\n/**\n * @param {Array.<ol.Coordinate>} coordinates Coordinates.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.createOrUpdateFromCoordinates = function(coordinates, opt_extent) {\n  var extent = _ol_extent_.createOrUpdateEmpty(opt_extent);\n  return _ol_extent_.extendCoordinates(extent, coordinates);\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.createOrUpdateFromFlatCoordinates = function(flatCoordinates, offset, end, stride, opt_extent) {\n  var extent = _ol_extent_.createOrUpdateEmpty(opt_extent);\n  return _ol_extent_.extendFlatCoordinates(\n      extent, flatCoordinates, offset, end, stride);\n};\n\n\n/**\n * @param {Array.<Array.<ol.Coordinate>>} rings Rings.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.createOrUpdateFromRings = function(rings, opt_extent) {\n  var extent = _ol_extent_.createOrUpdateEmpty(opt_extent);\n  return _ol_extent_.extendRings(extent, rings);\n};\n\n\n/**\n * Determine if two extents are equivalent.\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\n_ol_extent_.equals = function(extent1, extent2) {\n  return extent1[0] == extent2[0] && extent1[2] == extent2[2] &&\n      extent1[1] == extent2[1] && extent1[3] == extent2[3];\n};\n\n\n/**\n * Modify an extent to include another extent.\n * @param {ol.Extent} extent1 The extent to be modified.\n * @param {ol.Extent} extent2 The extent that will be included in the first.\n * @return {ol.Extent} A reference to the first (extended) extent.\n * @api\n */\n_ol_extent_.extend = function(extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n  return extent1;\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {ol.Coordinate} coordinate Coordinate.\n */\n_ol_extent_.extendCoordinate = function(extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {Array.<ol.Coordinate>} coordinates Coordinates.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.extendCoordinates = function(extent, coordinates) {\n  var i, ii;\n  for (i = 0, ii = coordinates.length; i < ii; ++i) {\n    _ol_extent_.extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.extendFlatCoordinates = function(extent, flatCoordinates, offset, end, stride) {\n  for (; offset < end; offset += stride) {\n    _ol_extent_.extendXY(\n        extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n  return extent;\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {Array.<Array.<ol.Coordinate>>} rings Rings.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.extendRings = function(extent, rings) {\n  var i, ii;\n  for (i = 0, ii = rings.length; i < ii; ++i) {\n    _ol_extent_.extendCoordinates(extent, rings[i]);\n  }\n  return extent;\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\n_ol_extent_.extendXY = function(extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n};\n\n\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {ol.Extent} extent Extent.\n * @param {function(this:T, ol.Coordinate): S} callback Callback.\n * @param {T=} opt_this Value to use as `this` when executing `callback`.\n * @return {S|boolean} Value.\n * @template S, T\n */\n_ol_extent_.forEachCorner = function(extent, callback, opt_this) {\n  var val;\n  val = callback.call(opt_this, _ol_extent_.getBottomLeft(extent));\n  if (val) {\n    return val;\n  }\n  val = callback.call(opt_this, _ol_extent_.getBottomRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback.call(opt_this, _ol_extent_.getTopRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback.call(opt_this, _ol_extent_.getTopLeft(extent));\n  if (val) {\n    return val;\n  }\n  return false;\n};\n\n\n/**\n * Get the size of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\n_ol_extent_.getArea = function(extent) {\n  var area = 0;\n  if (!_ol_extent_.isEmpty(extent)) {\n    area = _ol_extent_.getWidth(extent) * _ol_extent_.getHeight(extent);\n  }\n  return area;\n};\n\n\n/**\n * Get the bottom left coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Bottom left coordinate.\n * @api\n */\n_ol_extent_.getBottomLeft = function(extent) {\n  return [extent[0], extent[1]];\n};\n\n\n/**\n * Get the bottom right coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Bottom right coordinate.\n * @api\n */\n_ol_extent_.getBottomRight = function(extent) {\n  return [extent[2], extent[1]];\n};\n\n\n/**\n * Get the center coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Center.\n * @api\n */\n_ol_extent_.getCenter = function(extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n};\n\n\n/**\n * Get a corner coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @param {ol.extent.Corner} corner Corner.\n * @return {ol.Coordinate} Corner coordinate.\n */\n_ol_extent_.getCorner = function(extent, corner) {\n  var coordinate;\n  if (corner === _ol_extent_Corner_.BOTTOM_LEFT) {\n    coordinate = _ol_extent_.getBottomLeft(extent);\n  } else if (corner === _ol_extent_Corner_.BOTTOM_RIGHT) {\n    coordinate = _ol_extent_.getBottomRight(extent);\n  } else if (corner === _ol_extent_Corner_.TOP_LEFT) {\n    coordinate = _ol_extent_.getTopLeft(extent);\n  } else if (corner === _ol_extent_Corner_.TOP_RIGHT) {\n    coordinate = _ol_extent_.getTopRight(extent);\n  } else {\n    _ol_asserts_.assert(false, 13); // Invalid corner\n  }\n  return /** @type {!ol.Coordinate} */ (coordinate);\n};\n\n\n/**\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\n_ol_extent_.getEnlargedArea = function(extent1, extent2) {\n  var minX = Math.min(extent1[0], extent2[0]);\n  var minY = Math.min(extent1[1], extent2[1]);\n  var maxX = Math.max(extent1[2], extent2[2]);\n  var maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n};\n\n\n/**\n * @param {ol.Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {ol.Size} size Size.\n * @param {ol.Extent=} opt_extent Destination extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.getForViewAndSize = function(center, resolution, rotation, size, opt_extent) {\n  var dx = resolution * size[0] / 2;\n  var dy = resolution * size[1] / 2;\n  var cosRotation = Math.cos(rotation);\n  var sinRotation = Math.sin(rotation);\n  var xCos = dx * cosRotation;\n  var xSin = dx * sinRotation;\n  var yCos = dy * cosRotation;\n  var ySin = dy * sinRotation;\n  var x = center[0];\n  var y = center[1];\n  var x0 = x - xCos + ySin;\n  var x1 = x - xCos - ySin;\n  var x2 = x + xCos - ySin;\n  var x3 = x + xCos + ySin;\n  var y0 = y - xSin - yCos;\n  var y1 = y - xSin + yCos;\n  var y2 = y + xSin + yCos;\n  var y3 = y + xSin - yCos;\n  return _ol_extent_.createOrUpdate(\n      Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3),\n      Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3),\n      opt_extent);\n};\n\n\n/**\n * Get the height of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\n_ol_extent_.getHeight = function(extent) {\n  return extent[3] - extent[1];\n};\n\n\n/**\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\n_ol_extent_.getIntersectionArea = function(extent1, extent2) {\n  var intersection = _ol_extent_.getIntersection(extent1, extent2);\n  return _ol_extent_.getArea(intersection);\n};\n\n\n/**\n * Get the intersection of two extents.\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @param {ol.Extent=} opt_extent Optional extent to populate with intersection.\n * @return {ol.Extent} Intersecting extent.\n * @api\n */\n_ol_extent_.getIntersection = function(extent1, extent2, opt_extent) {\n  var intersection = opt_extent ? opt_extent : _ol_extent_.createEmpty();\n  if (_ol_extent_.intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  }\n  return intersection;\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @return {number} Margin.\n */\n_ol_extent_.getMargin = function(extent) {\n  return _ol_extent_.getWidth(extent) + _ol_extent_.getHeight(extent);\n};\n\n\n/**\n * Get the size (width, height) of an extent.\n * @param {ol.Extent} extent The extent.\n * @return {ol.Size} The extent size.\n * @api\n */\n_ol_extent_.getSize = function(extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n};\n\n\n/**\n * Get the top left coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Top left coordinate.\n * @api\n */\n_ol_extent_.getTopLeft = function(extent) {\n  return [extent[0], extent[3]];\n};\n\n\n/**\n * Get the top right coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Top right coordinate.\n * @api\n */\n_ol_extent_.getTopRight = function(extent) {\n  return [extent[2], extent[3]];\n};\n\n\n/**\n * Get the width of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\n_ol_extent_.getWidth = function(extent) {\n  return extent[2] - extent[0];\n};\n\n\n/**\n * Determine if one extent intersects another.\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\n_ol_extent_.intersects = function(extent1, extent2) {\n  return extent1[0] <= extent2[2] &&\n      extent1[2] >= extent2[0] &&\n      extent1[1] <= extent2[3] &&\n      extent1[3] >= extent2[1];\n};\n\n\n/**\n * Determine if an extent is empty.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\n_ol_extent_.isEmpty = function(extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.returnOrUpdate = function(extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent;\n  }\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {number} value Value.\n */\n_ol_extent_.scaleFromCenter = function(extent, value) {\n  var deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\n  var deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n};\n\n\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {ol.Extent} extent The extent.\n * @param {ol.Coordinate} start Segment start coordinate.\n * @param {ol.Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\n_ol_extent_.intersectsSegment = function(extent, start, end) {\n  var intersects = false;\n  var startRel = _ol_extent_.coordinateRelationship(extent, start);\n  var endRel = _ol_extent_.coordinateRelationship(extent, end);\n  if (startRel === _ol_extent_Relationship_.INTERSECTING ||\n      endRel === _ol_extent_Relationship_.INTERSECTING) {\n    intersects = true;\n  } else {\n    var minX = extent[0];\n    var minY = extent[1];\n    var maxX = extent[2];\n    var maxY = extent[3];\n    var startX = start[0];\n    var startY = start[1];\n    var endX = end[0];\n    var endY = end[1];\n    var slope = (endY - startY) / (endX - startX);\n    var x, y;\n    if (!!(endRel & _ol_extent_Relationship_.ABOVE) &&\n        !(startRel & _ol_extent_Relationship_.ABOVE)) {\n      // potentially intersects top\n      x = endX - ((endY - maxY) / slope);\n      intersects = x >= minX && x <= maxX;\n    }\n    if (!intersects && !!(endRel & _ol_extent_Relationship_.RIGHT) &&\n        !(startRel & _ol_extent_Relationship_.RIGHT)) {\n      // potentially intersects right\n      y = endY - ((endX - maxX) * slope);\n      intersects = y >= minY && y <= maxY;\n    }\n    if (!intersects && !!(endRel & _ol_extent_Relationship_.BELOW) &&\n        !(startRel & _ol_extent_Relationship_.BELOW)) {\n      // potentially intersects bottom\n      x = endX - ((endY - minY) / slope);\n      intersects = x >= minX && x <= maxX;\n    }\n    if (!intersects && !!(endRel & _ol_extent_Relationship_.LEFT) &&\n        !(startRel & _ol_extent_Relationship_.LEFT)) {\n      // potentially intersects left\n      y = endY - ((endX - minX) * slope);\n      intersects = y >= minY && y <= maxY;\n    }\n\n  }\n  return intersects;\n};\n\n\n/**\n * Apply a transform function to the extent.\n * @param {ol.Extent} extent Extent.\n * @param {ol.TransformFunction} transformFn Transform function.  Called with\n * [minX, minY, maxX, maxY] extent coordinates.\n * @param {ol.Extent=} opt_extent Destination extent.\n * @return {ol.Extent} Extent.\n * @api\n */\n_ol_extent_.applyTransform = function(extent, transformFn, opt_extent) {\n  var coordinates = [\n    extent[0], extent[1],\n    extent[0], extent[3],\n    extent[2], extent[1],\n    extent[2], extent[3]\n  ];\n  transformFn(coordinates, coordinates, 2);\n  var xs = [coordinates[0], coordinates[2], coordinates[4], coordinates[6]];\n  var ys = [coordinates[1], coordinates[3], coordinates[5], coordinates[7]];\n  return _ol_extent_.boundingExtentXYs_(xs, ys, opt_extent);\n};\nexport default _ol_extent_;\n"]},"metadata":{},"sourceType":"module"}