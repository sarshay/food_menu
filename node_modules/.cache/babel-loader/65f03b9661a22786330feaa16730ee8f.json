{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_source_TileImage_ from '../source/tileimage.js';\nimport _ol_tilegrid_ from '../tilegrid.js';\n/**\n * @classdesc\n * Layer source for tile data with URLs in a set XYZ format that are\n * defined in a URL template. By default, this follows the widely-used\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\n * using the `{-y}` placeholder in the URL template, so long as the\n * source does not have a custom tile grid. In this case,\n * {@link ol.source.TileImage} can be used with a `tileUrlFunction`\n * such as:\n *\n *  tileUrlFunction: function(coordinate) {\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\n *        coordinate[1] + '/' + coordinate[2] + '.png';\n *    }\n *\n *\n * @constructor\n * @extends {ol.source.TileImage}\n * @param {olx.source.XYZOptions=} opt_options XYZ options.\n * @api\n */\n\nvar _ol_source_XYZ_ = function (opt_options) {\n  var options = opt_options || {};\n  var projection = options.projection !== undefined ? options.projection : 'EPSG:3857';\n  var tileGrid = options.tileGrid !== undefined ? options.tileGrid : _ol_tilegrid_.createXYZ({\n    extent: _ol_tilegrid_.extentFromProjection(projection),\n    maxZoom: options.maxZoom,\n    minZoom: options.minZoom,\n    tileSize: options.tileSize\n  });\n\n  _ol_source_TileImage_.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: options.crossOrigin,\n    logo: options.logo,\n    opaque: options.opaque,\n    projection: projection,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileGrid: tileGrid,\n    tileLoadFunction: options.tileLoadFunction,\n    tilePixelRatio: options.tilePixelRatio,\n    tileUrlFunction: options.tileUrlFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    transition: options.transition\n  });\n};\n\n_ol_.inherits(_ol_source_XYZ_, _ol_source_TileImage_);\n\nexport default _ol_source_XYZ_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/source/xyz.js"],"names":["_ol_","_ol_source_TileImage_","_ol_tilegrid_","_ol_source_XYZ_","opt_options","options","projection","undefined","tileGrid","createXYZ","extent","extentFromProjection","maxZoom","minZoom","tileSize","call","attributions","cacheSize","crossOrigin","logo","opaque","reprojectionErrorThreshold","tileLoadFunction","tilePixelRatio","tileUrlFunction","url","urls","wrapX","transition","inherits"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,qBAAP,MAAkC,wBAAlC;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,eAAe,GAAG,UAASC,WAAT,EAAsB;AAC1C,MAAIC,OAAO,GAAGD,WAAW,IAAI,EAA7B;AACA,MAAIE,UAAU,GAAGD,OAAO,CAACC,UAAR,KAAuBC,SAAvB,GACfF,OAAO,CAACC,UADO,GACM,WADvB;AAGA,MAAIE,QAAQ,GAAGH,OAAO,CAACG,QAAR,KAAqBD,SAArB,GAAiCF,OAAO,CAACG,QAAzC,GACbN,aAAa,CAACO,SAAd,CAAwB;AACtBC,IAAAA,MAAM,EAAER,aAAa,CAACS,oBAAd,CAAmCL,UAAnC,CADc;AAEtBM,IAAAA,OAAO,EAAEP,OAAO,CAACO,OAFK;AAGtBC,IAAAA,OAAO,EAAER,OAAO,CAACQ,OAHK;AAItBC,IAAAA,QAAQ,EAAET,OAAO,CAACS;AAJI,GAAxB,CADF;;AAQAb,EAAAA,qBAAqB,CAACc,IAAtB,CAA2B,IAA3B,EAAiC;AAC/BC,IAAAA,YAAY,EAAEX,OAAO,CAACW,YADS;AAE/BC,IAAAA,SAAS,EAAEZ,OAAO,CAACY,SAFY;AAG/BC,IAAAA,WAAW,EAAEb,OAAO,CAACa,WAHU;AAI/BC,IAAAA,IAAI,EAAEd,OAAO,CAACc,IAJiB;AAK/BC,IAAAA,MAAM,EAAEf,OAAO,CAACe,MALe;AAM/Bd,IAAAA,UAAU,EAAEA,UANmB;AAO/Be,IAAAA,0BAA0B,EAAEhB,OAAO,CAACgB,0BAPL;AAQ/Bb,IAAAA,QAAQ,EAAEA,QARqB;AAS/Bc,IAAAA,gBAAgB,EAAEjB,OAAO,CAACiB,gBATK;AAU/BC,IAAAA,cAAc,EAAElB,OAAO,CAACkB,cAVO;AAW/BC,IAAAA,eAAe,EAAEnB,OAAO,CAACmB,eAXM;AAY/BC,IAAAA,GAAG,EAAEpB,OAAO,CAACoB,GAZkB;AAa/BC,IAAAA,IAAI,EAAErB,OAAO,CAACqB,IAbiB;AAc/BC,IAAAA,KAAK,EAAEtB,OAAO,CAACsB,KAAR,KAAkBpB,SAAlB,GAA8BF,OAAO,CAACsB,KAAtC,GAA8C,IAdtB;AAe/BC,IAAAA,UAAU,EAAEvB,OAAO,CAACuB;AAfW,GAAjC;AAkBD,CA/BD;;AAiCA5B,IAAI,CAAC6B,QAAL,CAAc1B,eAAd,EAA+BF,qBAA/B;;AACA,eAAeE,eAAf","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_source_TileImage_ from '../source/tileimage.js';\nimport _ol_tilegrid_ from '../tilegrid.js';\n\n/**\n * @classdesc\n * Layer source for tile data with URLs in a set XYZ format that are\n * defined in a URL template. By default, this follows the widely-used\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\n * using the `{-y}` placeholder in the URL template, so long as the\n * source does not have a custom tile grid. In this case,\n * {@link ol.source.TileImage} can be used with a `tileUrlFunction`\n * such as:\n *\n *  tileUrlFunction: function(coordinate) {\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\n *        coordinate[1] + '/' + coordinate[2] + '.png';\n *    }\n *\n *\n * @constructor\n * @extends {ol.source.TileImage}\n * @param {olx.source.XYZOptions=} opt_options XYZ options.\n * @api\n */\nvar _ol_source_XYZ_ = function(opt_options) {\n  var options = opt_options || {};\n  var projection = options.projection !== undefined ?\n    options.projection : 'EPSG:3857';\n\n  var tileGrid = options.tileGrid !== undefined ? options.tileGrid :\n    _ol_tilegrid_.createXYZ({\n      extent: _ol_tilegrid_.extentFromProjection(projection),\n      maxZoom: options.maxZoom,\n      minZoom: options.minZoom,\n      tileSize: options.tileSize\n    });\n\n  _ol_source_TileImage_.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: options.crossOrigin,\n    logo: options.logo,\n    opaque: options.opaque,\n    projection: projection,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileGrid: tileGrid,\n    tileLoadFunction: options.tileLoadFunction,\n    tilePixelRatio: options.tilePixelRatio,\n    tileUrlFunction: options.tileUrlFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    transition: options.transition\n  });\n\n};\n\n_ol_.inherits(_ol_source_XYZ_, _ol_source_TileImage_);\nexport default _ol_source_XYZ_;\n"]},"metadata":{},"sourceType":"module"}