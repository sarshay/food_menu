{"ast":null,"code":"import _ol_ from './index.js';\nimport _ol_CenterConstraint_ from './centerconstraint.js';\nimport _ol_Object_ from './object.js';\nimport _ol_ResolutionConstraint_ from './resolutionconstraint.js';\nimport _ol_RotationConstraint_ from './rotationconstraint.js';\nimport _ol_ViewHint_ from './viewhint.js';\nimport _ol_ViewProperty_ from './viewproperty.js';\nimport _ol_array_ from './array.js';\nimport _ol_asserts_ from './asserts.js';\nimport _ol_coordinate_ from './coordinate.js';\nimport _ol_easing_ from './easing.js';\nimport _ol_extent_ from './extent.js';\nimport _ol_geom_GeometryType_ from './geom/geometrytype.js';\nimport _ol_geom_Polygon_ from './geom/polygon.js';\nimport _ol_geom_SimpleGeometry_ from './geom/simplegeometry.js';\nimport _ol_math_ from './math.js';\nimport _ol_obj_ from './obj.js';\nimport _ol_proj_ from './proj.js';\nimport _ol_proj_Units_ from './proj/units.js';\n/**\n * @classdesc\n * An ol.View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * ### The view states\n *\n * An `ol.View` is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * An `ol.View` has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Spherical Mercator (EPSG:3857).\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view. Any value can be passed to the setters. And the value\n * that is passed to a setter will effectively be the value set in the view,\n * and returned by the corresponding getter.\n *\n * But an `ol.View` object also has a *resolution constraint*, a\n * *rotation constraint* and a *center constraint*.\n *\n * As said above, no constraints are applied when the setters are used to set\n * new states for the view. Applying constraints is done explicitly through\n * the use of the `constrain*` functions (`constrainResolution` and\n * `constrainRotation` and `constrainCenter`).\n *\n * The main users of the constraints are the interactions and the\n * controls. For example, double-clicking on the map changes the view to\n * the \"next\" resolution. And releasing the fingers after pinch-zooming\n * snaps to the closest resolution (with an animation).\n *\n * The *resolution constraint* snaps to specific resolutions. It is\n * determined by the following options: `resolutions`, `maxResolution`,\n * `maxZoom`, and `zoomFactor`. If `resolutions` is set, the other three\n * options are ignored. See documentation for each option for more\n * information.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default the rotation value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the center is not constrained at all.\n *\n * @constructor\n * @extends {ol.Object}\n * @param {olx.ViewOptions=} opt_options View options.\n * @api\n */\n\nvar _ol_View_ = function (opt_options) {\n  _ol_Object_.call(this);\n\n  var options = _ol_obj_.assign({}, opt_options);\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n\n\n  this.hints_ = [0, 0];\n  /**\n   * @private\n   * @type {Array.<Array.<ol.ViewAnimation>>}\n   */\n\n  this.animations_ = [];\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.updateAnimationKey_;\n  this.updateAnimations_ = this.updateAnimations_.bind(this);\n  /**\n   * @private\n   * @const\n   * @type {ol.proj.Projection}\n   */\n\n  this.projection_ = _ol_proj_.createProjection(options.projection, 'EPSG:3857');\n  this.applyOptions_(options);\n};\n\n_ol_.inherits(_ol_View_, _ol_Object_);\n/**\n * Set up the view with the given options.\n * @param {olx.ViewOptions} options View options.\n */\n\n\n_ol_View_.prototype.applyOptions_ = function (options) {\n  /**\n   * @type {Object.<string, *>}\n   */\n  var properties = {};\n  properties[_ol_ViewProperty_.CENTER] = options.center !== undefined ? options.center : null;\n\n  var resolutionConstraintInfo = _ol_View_.createResolutionConstraint_(options);\n  /**\n   * @private\n   * @type {number}\n   */\n\n\n  this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.minResolution_ = resolutionConstraintInfo.minResolution;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n  /**\n   * @private\n   * @type {Array.<number>|undefined}\n   */\n\n  this.resolutions_ = options.resolutions;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.minZoom_ = resolutionConstraintInfo.minZoom;\n\n  var centerConstraint = _ol_View_.createCenterConstraint_(options);\n\n  var resolutionConstraint = resolutionConstraintInfo.constraint;\n\n  var rotationConstraint = _ol_View_.createRotationConstraint_(options);\n  /**\n   * @private\n   * @type {ol.Constraints}\n   */\n\n\n  this.constraints_ = {\n    center: centerConstraint,\n    resolution: resolutionConstraint,\n    rotation: rotationConstraint\n  };\n\n  if (options.resolution !== undefined) {\n    properties[_ol_ViewProperty_.RESOLUTION] = options.resolution;\n  } else if (options.zoom !== undefined) {\n    properties[_ol_ViewProperty_.RESOLUTION] = this.constrainResolution(this.maxResolution_, options.zoom - this.minZoom_);\n\n    if (this.resolutions_) {\n      // in case map zoom is out of min/max zoom range\n      properties[_ol_ViewProperty_.RESOLUTION] = _ol_math_.clamp(Number(this.getResolution() || properties[_ol_ViewProperty_.RESOLUTION]), this.minResolution_, this.maxResolution_);\n    }\n  }\n\n  properties[_ol_ViewProperty_.ROTATION] = options.rotation !== undefined ? options.rotation : 0;\n  this.setProperties(properties);\n  /**\n   * @private\n   * @type {olx.ViewOptions}\n   */\n\n  this.options_ = options;\n};\n/**\n * Get an updated version of the view options used to construct the view.  The\n * current resolution (or zoom), center, and rotation are applied to any stored\n * options.  The provided options can be uesd to apply new min/max zoom or\n * resolution limits.\n * @param {olx.ViewOptions} newOptions New options to be applied.\n * @return {olx.ViewOptions} New options updated with the current view state.\n */\n\n\n_ol_View_.prototype.getUpdatedOptions_ = function (newOptions) {\n  var options = _ol_obj_.assign({}, this.options_); // preserve resolution (or zoom)\n\n\n  if (options.resolution !== undefined) {\n    options.resolution = this.getResolution();\n  } else {\n    options.zoom = this.getZoom();\n  } // preserve center\n\n\n  options.center = this.getCenter(); // preserve rotation\n\n  options.rotation = this.getRotation();\n  return _ol_obj_.assign({}, options, newOptions);\n};\n/**\n * Animate the view.  The view's center, zoom (or resolution), and rotation\n * can be animated for smooth transitions between view states.  For example,\n * to animate the view to a new zoom level:\n *\n *     view.animate({zoom: view.getZoom() + 1});\n *\n * By default, the animation lasts one second and uses in-and-out easing.  You\n * can customize this behavior by including `duration` (in milliseconds) and\n * `easing` options (see {@link ol.easing}).\n *\n * To chain together multiple animations, call the method with multiple\n * animation objects.  For example, to first zoom and then pan:\n *\n *     view.animate({zoom: 10}, {center: [0, 0]});\n *\n * If you provide a function as the last argument to the animate method, it\n * will get called at the end of an animation series.  The callback will be\n * called with `true` if the animation series completed on its own or `false`\n * if it was cancelled.\n *\n * Animations are cancelled by user interactions (e.g. dragging the map) or by\n * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n * (or another method that calls one of these).\n *\n * @param {...(olx.AnimationOptions|function(boolean))} var_args Animation\n *     options.  Multiple animations can be run in series by passing multiple\n *     options objects.  To run multiple animations in parallel, call the method\n *     multiple times.  An optional callback can be provided as a final\n *     argument.  The callback will be called with a boolean indicating whether\n *     the animation completed without being cancelled.\n * @api\n */\n\n\n_ol_View_.prototype.animate = function (var_args) {\n  var animationCount = arguments.length;\n  var callback;\n\n  if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {\n    callback = arguments[animationCount - 1];\n    --animationCount;\n  }\n\n  if (!this.isDef()) {\n    // if view properties are not yet set, shortcut to the final state\n    var state = arguments[animationCount - 1];\n\n    if (state.center) {\n      this.setCenter(state.center);\n    }\n\n    if (state.zoom !== undefined) {\n      this.setZoom(state.zoom);\n    }\n\n    if (state.rotation !== undefined) {\n      this.setRotation(state.rotation);\n    }\n\n    if (callback) {\n      callback(true);\n    }\n\n    return;\n  }\n\n  var start = Date.now();\n  var center = this.getCenter().slice();\n  var resolution = this.getResolution();\n  var rotation = this.getRotation();\n  var series = [];\n\n  for (var i = 0; i < animationCount; ++i) {\n    var options =\n    /** @type {olx.AnimationOptions} */\n    arguments[i];\n    var animation =\n    /** @type {ol.ViewAnimation} */\n    {\n      start: start,\n      complete: false,\n      anchor: options.anchor,\n      duration: options.duration !== undefined ? options.duration : 1000,\n      easing: options.easing || _ol_easing_.inAndOut\n    };\n\n    if (options.center) {\n      animation.sourceCenter = center;\n      animation.targetCenter = options.center;\n      center = animation.targetCenter;\n    }\n\n    if (options.zoom !== undefined) {\n      animation.sourceResolution = resolution;\n      animation.targetResolution = this.constrainResolution(this.maxResolution_, options.zoom - this.minZoom_, 0);\n      resolution = animation.targetResolution;\n    } else if (options.resolution) {\n      animation.sourceResolution = resolution;\n      animation.targetResolution = options.resolution;\n      resolution = animation.targetResolution;\n    }\n\n    if (options.rotation !== undefined) {\n      animation.sourceRotation = rotation;\n      var delta = _ol_math_.modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n      animation.targetRotation = rotation + delta;\n      rotation = animation.targetRotation;\n    }\n\n    animation.callback = callback; // check if animation is a no-op\n\n    if (_ol_View_.isNoopAnimation(animation)) {\n      animation.complete = true; // we still push it onto the series for callback handling\n    } else {\n      start += animation.duration;\n    }\n\n    series.push(animation);\n  }\n\n  this.animations_.push(series);\n  this.setHint(_ol_ViewHint_.ANIMATING, 1);\n  this.updateAnimations_();\n};\n/**\n * Determine if the view is being animated.\n * @return {boolean} The view is being animated.\n * @api\n */\n\n\n_ol_View_.prototype.getAnimating = function () {\n  return this.hints_[_ol_ViewHint_.ANIMATING] > 0;\n};\n/**\n * Determine if the user is interacting with the view, such as panning or zooming.\n * @return {boolean} The view is being interacted with.\n * @api\n */\n\n\n_ol_View_.prototype.getInteracting = function () {\n  return this.hints_[_ol_ViewHint_.INTERACTING] > 0;\n};\n/**\n * Cancel any ongoing animations.\n * @api\n */\n\n\n_ol_View_.prototype.cancelAnimations = function () {\n  this.setHint(_ol_ViewHint_.ANIMATING, -this.hints_[_ol_ViewHint_.ANIMATING]);\n\n  for (var i = 0, ii = this.animations_.length; i < ii; ++i) {\n    var series = this.animations_[i];\n\n    if (series[0].callback) {\n      series[0].callback(false);\n    }\n  }\n\n  this.animations_.length = 0;\n};\n/**\n * Update all animations.\n */\n\n\n_ol_View_.prototype.updateAnimations_ = function () {\n  if (this.updateAnimationKey_ !== undefined) {\n    cancelAnimationFrame(this.updateAnimationKey_);\n    this.updateAnimationKey_ = undefined;\n  }\n\n  if (!this.getAnimating()) {\n    return;\n  }\n\n  var now = Date.now();\n  var more = false;\n\n  for (var i = this.animations_.length - 1; i >= 0; --i) {\n    var series = this.animations_[i];\n    var seriesComplete = true;\n\n    for (var j = 0, jj = series.length; j < jj; ++j) {\n      var animation = series[j];\n\n      if (animation.complete) {\n        continue;\n      }\n\n      var elapsed = now - animation.start;\n      var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n\n      if (fraction >= 1) {\n        animation.complete = true;\n        fraction = 1;\n      } else {\n        seriesComplete = false;\n      }\n\n      var progress = animation.easing(fraction);\n\n      if (animation.sourceCenter) {\n        var x0 = animation.sourceCenter[0];\n        var y0 = animation.sourceCenter[1];\n        var x1 = animation.targetCenter[0];\n        var y1 = animation.targetCenter[1];\n        var x = x0 + progress * (x1 - x0);\n        var y = y0 + progress * (y1 - y0);\n        this.set(_ol_ViewProperty_.CENTER, [x, y]);\n      }\n\n      if (animation.sourceResolution && animation.targetResolution) {\n        var resolution = progress === 1 ? animation.targetResolution : animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\n\n        if (animation.anchor) {\n          this.set(_ol_ViewProperty_.CENTER, this.calculateCenterZoom(resolution, animation.anchor));\n        }\n\n        this.set(_ol_ViewProperty_.RESOLUTION, resolution);\n      }\n\n      if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\n        var rotation = progress === 1 ? _ol_math_.modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI : animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\n\n        if (animation.anchor) {\n          this.set(_ol_ViewProperty_.CENTER, this.calculateCenterRotate(rotation, animation.anchor));\n        }\n\n        this.set(_ol_ViewProperty_.ROTATION, rotation);\n      }\n\n      more = true;\n\n      if (!animation.complete) {\n        break;\n      }\n    }\n\n    if (seriesComplete) {\n      this.animations_[i] = null;\n      this.setHint(_ol_ViewHint_.ANIMATING, -1);\n      var callback = series[0].callback;\n\n      if (callback) {\n        callback(true);\n      }\n    }\n  } // prune completed series\n\n\n  this.animations_ = this.animations_.filter(Boolean);\n\n  if (more && this.updateAnimationKey_ === undefined) {\n    this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_);\n  }\n};\n/**\n * @param {number} rotation Target rotation.\n * @param {ol.Coordinate} anchor Rotation anchor.\n * @return {ol.Coordinate|undefined} Center for rotation and anchor.\n */\n\n\n_ol_View_.prototype.calculateCenterRotate = function (rotation, anchor) {\n  var center;\n  var currentCenter = this.getCenter();\n\n  if (currentCenter !== undefined) {\n    center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n\n    _ol_coordinate_.rotate(center, rotation - this.getRotation());\n\n    _ol_coordinate_.add(center, anchor);\n  }\n\n  return center;\n};\n/**\n * @param {number} resolution Target resolution.\n * @param {ol.Coordinate} anchor Zoom anchor.\n * @return {ol.Coordinate|undefined} Center for resolution and anchor.\n */\n\n\n_ol_View_.prototype.calculateCenterZoom = function (resolution, anchor) {\n  var center;\n  var currentCenter = this.getCenter();\n  var currentResolution = this.getResolution();\n\n  if (currentCenter !== undefined && currentResolution !== undefined) {\n    var x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;\n    var y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;\n    center = [x, y];\n  }\n\n  return center;\n};\n/**\n * @private\n * @return {ol.Size} Viewport size or `[100, 100]` when no viewport is found.\n */\n\n\n_ol_View_.prototype.getSizeFromViewport_ = function () {\n  var size = [100, 100];\n  var selector = '.ol-viewport[data-view=\"' + _ol_.getUid(this) + '\"]';\n  var element = document.querySelector(selector);\n\n  if (element) {\n    var metrics = getComputedStyle(element);\n    size[0] = parseInt(metrics.width, 10);\n    size[1] = parseInt(metrics.height, 10);\n  }\n\n  return size;\n};\n/**\n * Get the constrained center of this view.\n * @param {ol.Coordinate|undefined} center Center.\n * @return {ol.Coordinate|undefined} Constrained center.\n * @api\n */\n\n\n_ol_View_.prototype.constrainCenter = function (center) {\n  return this.constraints_.center(center);\n};\n/**\n * Get the constrained resolution of this view.\n * @param {number|undefined} resolution Resolution.\n * @param {number=} opt_delta Delta. Default is `0`.\n * @param {number=} opt_direction Direction. Default is `0`.\n * @return {number|undefined} Constrained resolution.\n * @api\n */\n\n\n_ol_View_.prototype.constrainResolution = function (resolution, opt_delta, opt_direction) {\n  var delta = opt_delta || 0;\n  var direction = opt_direction || 0;\n  return this.constraints_.resolution(resolution, delta, direction);\n};\n/**\n * Get the constrained rotation of this view.\n * @param {number|undefined} rotation Rotation.\n * @param {number=} opt_delta Delta. Default is `0`.\n * @return {number|undefined} Constrained rotation.\n * @api\n */\n\n\n_ol_View_.prototype.constrainRotation = function (rotation, opt_delta) {\n  var delta = opt_delta || 0;\n  return this.constraints_.rotation(rotation, delta);\n};\n/**\n * Get the view center.\n * @return {ol.Coordinate|undefined} The center of the view.\n * @observable\n * @api\n */\n\n\n_ol_View_.prototype.getCenter = function () {\n  return (\n    /** @type {ol.Coordinate|undefined} */\n    this.get(_ol_ViewProperty_.CENTER)\n  );\n};\n/**\n * @return {ol.Constraints} Constraints.\n */\n\n\n_ol_View_.prototype.getConstraints = function () {\n  return this.constraints_;\n};\n/**\n * @param {Array.<number>=} opt_hints Destination array.\n * @return {Array.<number>} Hint.\n */\n\n\n_ol_View_.prototype.getHints = function (opt_hints) {\n  if (opt_hints !== undefined) {\n    opt_hints[0] = this.hints_[0];\n    opt_hints[1] = this.hints_[1];\n    return opt_hints;\n  } else {\n    return this.hints_.slice();\n  }\n};\n/**\n * Calculate the extent for the current view state and the passed size.\n * The size is the pixel dimensions of the box into which the calculated extent\n * should fit. In most cases you want to get the extent of the entire map,\n * that is `map.getSize()`.\n * @param {ol.Size=} opt_size Box pixel size. If not provided, the size of the\n * first map that uses this view will be used.\n * @return {ol.Extent} Extent.\n * @api\n */\n\n\n_ol_View_.prototype.calculateExtent = function (opt_size) {\n  var size = opt_size || this.getSizeFromViewport_();\n  var center =\n  /** @type {!ol.Coordinate} */\n  this.getCenter();\n\n  _ol_asserts_.assert(center, 1); // The view center is not defined\n\n\n  var resolution =\n  /** @type {!number} */\n  this.getResolution();\n\n  _ol_asserts_.assert(resolution !== undefined, 2); // The view resolution is not defined\n\n\n  var rotation =\n  /** @type {!number} */\n  this.getRotation();\n\n  _ol_asserts_.assert(rotation !== undefined, 3); // The view rotation is not defined\n\n\n  return _ol_extent_.getForViewAndSize(center, resolution, rotation, size);\n};\n/**\n * Get the maximum resolution of the view.\n * @return {number} The maximum resolution of the view.\n * @api\n */\n\n\n_ol_View_.prototype.getMaxResolution = function () {\n  return this.maxResolution_;\n};\n/**\n * Get the minimum resolution of the view.\n * @return {number} The minimum resolution of the view.\n * @api\n */\n\n\n_ol_View_.prototype.getMinResolution = function () {\n  return this.minResolution_;\n};\n/**\n * Get the maximum zoom level for the view.\n * @return {number} The maximum zoom level.\n * @api\n */\n\n\n_ol_View_.prototype.getMaxZoom = function () {\n  return (\n    /** @type {number} */\n    this.getZoomForResolution(this.minResolution_)\n  );\n};\n/**\n * Set a new maximum zoom level for the view.\n * @param {number} zoom The maximum zoom level.\n * @api\n */\n\n\n_ol_View_.prototype.setMaxZoom = function (zoom) {\n  this.applyOptions_(this.getUpdatedOptions_({\n    maxZoom: zoom\n  }));\n};\n/**\n * Get the minimum zoom level for the view.\n * @return {number} The minimum zoom level.\n * @api\n */\n\n\n_ol_View_.prototype.getMinZoom = function () {\n  return (\n    /** @type {number} */\n    this.getZoomForResolution(this.maxResolution_)\n  );\n};\n/**\n * Set a new minimum zoom level for the view.\n * @param {number} zoom The minimum zoom level.\n * @api\n */\n\n\n_ol_View_.prototype.setMinZoom = function (zoom) {\n  this.applyOptions_(this.getUpdatedOptions_({\n    minZoom: zoom\n  }));\n};\n/**\n * Get the view projection.\n * @return {ol.proj.Projection} The projection of the view.\n * @api\n */\n\n\n_ol_View_.prototype.getProjection = function () {\n  return this.projection_;\n};\n/**\n * Get the view resolution.\n * @return {number|undefined} The resolution of the view.\n * @observable\n * @api\n */\n\n\n_ol_View_.prototype.getResolution = function () {\n  return (\n    /** @type {number|undefined} */\n    this.get(_ol_ViewProperty_.RESOLUTION)\n  );\n};\n/**\n * Get the resolutions for the view. This returns the array of resolutions\n * passed to the constructor of the {ol.View}, or undefined if none were given.\n * @return {Array.<number>|undefined} The resolutions of the view.\n * @api\n */\n\n\n_ol_View_.prototype.getResolutions = function () {\n  return this.resolutions_;\n};\n/**\n * Get the resolution for a provided extent (in map units) and size (in pixels).\n * @param {ol.Extent} extent Extent.\n * @param {ol.Size=} opt_size Box pixel size.\n * @return {number} The resolution at which the provided extent will render at\n *     the given size.\n * @api\n */\n\n\n_ol_View_.prototype.getResolutionForExtent = function (extent, opt_size) {\n  var size = opt_size || this.getSizeFromViewport_();\n  var xResolution = _ol_extent_.getWidth(extent) / size[0];\n  var yResolution = _ol_extent_.getHeight(extent) / size[1];\n  return Math.max(xResolution, yResolution);\n};\n/**\n * Return a function that returns a value between 0 and 1 for a\n * resolution. Exponential scaling is assumed.\n * @param {number=} opt_power Power.\n * @return {function(number): number} Resolution for value function.\n */\n\n\n_ol_View_.prototype.getResolutionForValueFunction = function (opt_power) {\n  var power = opt_power || 2;\n  var maxResolution = this.maxResolution_;\n  var minResolution = this.minResolution_;\n  var max = Math.log(maxResolution / minResolution) / Math.log(power);\n  return (\n    /**\n     * @param {number} value Value.\n     * @return {number} Resolution.\n     */\n    function (value) {\n      var resolution = maxResolution / Math.pow(power, value * max);\n      return resolution;\n    }\n  );\n};\n/**\n * Get the view rotation.\n * @return {number} The rotation of the view in radians.\n * @observable\n * @api\n */\n\n\n_ol_View_.prototype.getRotation = function () {\n  return (\n    /** @type {number} */\n    this.get(_ol_ViewProperty_.ROTATION)\n  );\n};\n/**\n * Return a function that returns a resolution for a value between\n * 0 and 1. Exponential scaling is assumed.\n * @param {number=} opt_power Power.\n * @return {function(number): number} Value for resolution function.\n */\n\n\n_ol_View_.prototype.getValueForResolutionFunction = function (opt_power) {\n  var power = opt_power || 2;\n  var maxResolution = this.maxResolution_;\n  var minResolution = this.minResolution_;\n  var max = Math.log(maxResolution / minResolution) / Math.log(power);\n  return (\n    /**\n     * @param {number} resolution Resolution.\n     * @return {number} Value.\n     */\n    function (resolution) {\n      var value = Math.log(maxResolution / resolution) / Math.log(power) / max;\n      return value;\n    }\n  );\n};\n/**\n * @return {olx.ViewState} View state.\n */\n\n\n_ol_View_.prototype.getState = function () {\n  var center =\n  /** @type {ol.Coordinate} */\n  this.getCenter();\n  var projection = this.getProjection();\n  var resolution =\n  /** @type {number} */\n  this.getResolution();\n  var rotation = this.getRotation();\n  return (\n    /** @type {olx.ViewState} */\n    {\n      center: center.slice(),\n      projection: projection !== undefined ? projection : null,\n      resolution: resolution,\n      rotation: rotation,\n      zoom: this.getZoom()\n    }\n  );\n};\n/**\n * Get the current zoom level.  If you configured your view with a resolutions\n * array (this is rare), this method may return non-integer zoom levels (so\n * the zoom level is not safe to use as an index into a resolutions array).\n * @return {number|undefined} Zoom.\n * @api\n */\n\n\n_ol_View_.prototype.getZoom = function () {\n  var zoom;\n  var resolution = this.getResolution();\n\n  if (resolution !== undefined) {\n    zoom = this.getZoomForResolution(resolution);\n  }\n\n  return zoom;\n};\n/**\n * Get the zoom level for a resolution.\n * @param {number} resolution The resolution.\n * @return {number|undefined} The zoom level for the provided resolution.\n * @api\n */\n\n\n_ol_View_.prototype.getZoomForResolution = function (resolution) {\n  var offset = this.minZoom_ || 0;\n  var max, zoomFactor;\n\n  if (this.resolutions_) {\n    var nearest = _ol_array_.linearFindNearest(this.resolutions_, resolution, 1);\n\n    offset = nearest;\n    max = this.resolutions_[nearest];\n\n    if (nearest == this.resolutions_.length - 1) {\n      zoomFactor = 2;\n    } else {\n      zoomFactor = max / this.resolutions_[nearest + 1];\n    }\n  } else {\n    max = this.maxResolution_;\n    zoomFactor = this.zoomFactor_;\n  }\n\n  return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n};\n/**\n * Get the resolution for a zoom level.\n * @param {number} zoom Zoom level.\n * @return {number} The view resolution for the provided zoom level.\n * @api\n */\n\n\n_ol_View_.prototype.getResolutionForZoom = function (zoom) {\n  return (\n    /** @type {number} */\n    this.constrainResolution(this.maxResolution_, zoom - this.minZoom_, 0)\n  );\n};\n/**\n * Fit the given geometry or extent based on the given map size and border.\n * The size is pixel dimensions of the box to fit the extent into.\n * In most cases you will want to use the map size, that is `map.getSize()`.\n * Takes care of the map angle.\n * @param {ol.geom.SimpleGeometry|ol.Extent} geometryOrExtent The geometry or\n *     extent to fit the view to.\n * @param {olx.view.FitOptions=} opt_options Options.\n * @api\n */\n\n\n_ol_View_.prototype.fit = function (geometryOrExtent, opt_options) {\n  var options = opt_options || {};\n  var size = options.size;\n\n  if (!size) {\n    size = this.getSizeFromViewport_();\n  }\n  /** @type {ol.geom.SimpleGeometry} */\n\n\n  var geometry;\n\n  if (!(geometryOrExtent instanceof _ol_geom_SimpleGeometry_)) {\n    _ol_asserts_.assert(Array.isArray(geometryOrExtent), 24); // Invalid extent or geometry provided as `geometry`\n\n\n    _ol_asserts_.assert(!_ol_extent_.isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`\n\n\n    geometry = _ol_geom_Polygon_.fromExtent(geometryOrExtent);\n  } else if (geometryOrExtent.getType() === _ol_geom_GeometryType_.CIRCLE) {\n    geometryOrExtent = geometryOrExtent.getExtent();\n    geometry = _ol_geom_Polygon_.fromExtent(geometryOrExtent);\n    geometry.rotate(this.getRotation(), _ol_extent_.getCenter(geometryOrExtent));\n  } else {\n    geometry = geometryOrExtent;\n  }\n\n  var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n  var constrainResolution = options.constrainResolution !== undefined ? options.constrainResolution : true;\n  var nearest = options.nearest !== undefined ? options.nearest : false;\n  var minResolution;\n\n  if (options.minResolution !== undefined) {\n    minResolution = options.minResolution;\n  } else if (options.maxZoom !== undefined) {\n    minResolution = this.constrainResolution(this.maxResolution_, options.maxZoom - this.minZoom_, 0);\n  } else {\n    minResolution = 0;\n  }\n\n  var coords = geometry.getFlatCoordinates(); // calculate rotated extent\n\n  var rotation = this.getRotation();\n  var cosAngle = Math.cos(-rotation);\n  var sinAngle = Math.sin(-rotation);\n  var minRotX = +Infinity;\n  var minRotY = +Infinity;\n  var maxRotX = -Infinity;\n  var maxRotY = -Infinity;\n  var stride = geometry.getStride();\n\n  for (var i = 0, ii = coords.length; i < ii; i += stride) {\n    var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n    var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n    minRotX = Math.min(minRotX, rotX);\n    minRotY = Math.min(minRotY, rotY);\n    maxRotX = Math.max(maxRotX, rotX);\n    maxRotY = Math.max(maxRotY, rotY);\n  } // calculate resolution\n\n\n  var resolution = this.getResolutionForExtent([minRotX, minRotY, maxRotX, maxRotY], [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);\n  resolution = isNaN(resolution) ? minResolution : Math.max(resolution, minResolution);\n\n  if (constrainResolution) {\n    var constrainedResolution = this.constrainResolution(resolution, 0, 0);\n\n    if (!nearest && constrainedResolution < resolution) {\n      constrainedResolution = this.constrainResolution(constrainedResolution, -1, 0);\n    }\n\n    resolution = constrainedResolution;\n  } // calculate center\n\n\n  sinAngle = -sinAngle; // go back to original rotation\n\n  var centerRotX = (minRotX + maxRotX) / 2;\n  var centerRotY = (minRotY + maxRotY) / 2;\n  centerRotX += (padding[1] - padding[3]) / 2 * resolution;\n  centerRotY += (padding[0] - padding[2]) / 2 * resolution;\n  var centerX = centerRotX * cosAngle - centerRotY * sinAngle;\n  var centerY = centerRotY * cosAngle + centerRotX * sinAngle;\n  var center = [centerX, centerY];\n  var callback = options.callback ? options.callback : _ol_.nullFunction;\n\n  if (options.duration !== undefined) {\n    this.animate({\n      resolution: resolution,\n      center: center,\n      duration: options.duration,\n      easing: options.easing\n    }, callback);\n  } else {\n    this.setResolution(resolution);\n    this.setCenter(center);\n    setTimeout(callback.bind(undefined, true), 0);\n  }\n};\n/**\n * Center on coordinate and view position.\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {ol.Size} size Box pixel size.\n * @param {ol.Pixel} position Position on the view to center on.\n * @api\n */\n\n\n_ol_View_.prototype.centerOn = function (coordinate, size, position) {\n  // calculate rotated position\n  var rotation = this.getRotation();\n  var cosAngle = Math.cos(-rotation);\n  var sinAngle = Math.sin(-rotation);\n  var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  var resolution = this.getResolution();\n  rotX += (size[0] / 2 - position[0]) * resolution;\n  rotY += (position[1] - size[1] / 2) * resolution; // go back to original angle\n\n  sinAngle = -sinAngle; // go back to original rotation\n\n  var centerX = rotX * cosAngle - rotY * sinAngle;\n  var centerY = rotY * cosAngle + rotX * sinAngle;\n  this.setCenter([centerX, centerY]);\n};\n/**\n * @return {boolean} Is defined.\n */\n\n\n_ol_View_.prototype.isDef = function () {\n  return !!this.getCenter() && this.getResolution() !== undefined;\n};\n/**\n * Rotate the view around a given coordinate.\n * @param {number} rotation New rotation value for the view.\n * @param {ol.Coordinate=} opt_anchor The rotation center.\n * @api\n */\n\n\n_ol_View_.prototype.rotate = function (rotation, opt_anchor) {\n  if (opt_anchor !== undefined) {\n    var center = this.calculateCenterRotate(rotation, opt_anchor);\n    this.setCenter(center);\n  }\n\n  this.setRotation(rotation);\n};\n/**\n * Set the center of the current view.\n * @param {ol.Coordinate|undefined} center The center of the view.\n * @observable\n * @api\n */\n\n\n_ol_View_.prototype.setCenter = function (center) {\n  this.set(_ol_ViewProperty_.CENTER, center);\n\n  if (this.getAnimating()) {\n    this.cancelAnimations();\n  }\n};\n/**\n * @param {ol.ViewHint} hint Hint.\n * @param {number} delta Delta.\n * @return {number} New value.\n */\n\n\n_ol_View_.prototype.setHint = function (hint, delta) {\n  this.hints_[hint] += delta;\n  this.changed();\n  return this.hints_[hint];\n};\n/**\n * Set the resolution for this view.\n * @param {number|undefined} resolution The resolution of the view.\n * @observable\n * @api\n */\n\n\n_ol_View_.prototype.setResolution = function (resolution) {\n  this.set(_ol_ViewProperty_.RESOLUTION, resolution);\n\n  if (this.getAnimating()) {\n    this.cancelAnimations();\n  }\n};\n/**\n * Set the rotation for this view.\n * @param {number} rotation The rotation of the view in radians.\n * @observable\n * @api\n */\n\n\n_ol_View_.prototype.setRotation = function (rotation) {\n  this.set(_ol_ViewProperty_.ROTATION, rotation);\n\n  if (this.getAnimating()) {\n    this.cancelAnimations();\n  }\n};\n/**\n * Zoom to a specific zoom level.\n * @param {number} zoom Zoom level.\n * @api\n */\n\n\n_ol_View_.prototype.setZoom = function (zoom) {\n  this.setResolution(this.getResolutionForZoom(zoom));\n};\n/**\n * @param {olx.ViewOptions} options View options.\n * @private\n * @return {ol.CenterConstraintType} The constraint.\n */\n\n\n_ol_View_.createCenterConstraint_ = function (options) {\n  if (options.extent !== undefined) {\n    return _ol_CenterConstraint_.createExtent(options.extent);\n  } else {\n    return _ol_CenterConstraint_.none;\n  }\n};\n/**\n * @private\n * @param {olx.ViewOptions} options View options.\n * @return {{constraint: ol.ResolutionConstraintType, maxResolution: number,\n *     minResolution: number, zoomFactor: number}} The constraint.\n */\n\n\n_ol_View_.createResolutionConstraint_ = function (options) {\n  var resolutionConstraint;\n  var maxResolution;\n  var minResolution; // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n\n  var defaultMaxZoom = 28;\n  var defaultZoomFactor = 2;\n  var minZoom = options.minZoom !== undefined ? options.minZoom : _ol_.DEFAULT_MIN_ZOOM;\n  var maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n  var zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n\n  if (options.resolutions !== undefined) {\n    var resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution = resolutions[maxZoom] !== undefined ? resolutions[maxZoom] : resolutions[resolutions.length - 1];\n    resolutionConstraint = _ol_ResolutionConstraint_.createSnapToResolutions(resolutions);\n  } else {\n    // calculate the default min and max resolution\n    var projection = _ol_proj_.createProjection(options.projection, 'EPSG:3857');\n\n    var extent = projection.getExtent();\n    var size = !extent ? // use an extent that can fit the whole world if need be\n    360 * _ol_proj_.METERS_PER_UNIT[_ol_proj_Units_.DEGREES] / projection.getMetersPerUnit() : Math.max(_ol_extent_.getWidth(extent), _ol_extent_.getHeight(extent));\n    var defaultMaxResolution = size / _ol_.DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, _ol_.DEFAULT_MIN_ZOOM);\n    var defaultMinResolution = defaultMaxResolution / Math.pow(defaultZoomFactor, defaultMaxZoom - _ol_.DEFAULT_MIN_ZOOM); // user provided maxResolution takes precedence\n\n    maxResolution = options.maxResolution;\n\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    } // user provided minResolution takes precedence\n\n\n    minResolution = options.minResolution;\n\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    } // given discrete zoom levels, minResolution may be different than provided\n\n\n    maxZoom = minZoom + Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n    resolutionConstraint = _ol_ResolutionConstraint_.createSnapToPower(zoomFactor, maxResolution, maxZoom - minZoom);\n  }\n\n  return {\n    constraint: resolutionConstraint,\n    maxResolution: maxResolution,\n    minResolution: minResolution,\n    minZoom: minZoom,\n    zoomFactor: zoomFactor\n  };\n};\n/**\n * @private\n * @param {olx.ViewOptions} options View options.\n * @return {ol.RotationConstraintType} Rotation constraint.\n */\n\n\n_ol_View_.createRotationConstraint_ = function (options) {\n  var enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;\n\n  if (enableRotation) {\n    var constrainRotation = options.constrainRotation;\n\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return _ol_RotationConstraint_.createSnapToZero();\n    } else if (constrainRotation === false) {\n      return _ol_RotationConstraint_.none;\n    } else if (typeof constrainRotation === 'number') {\n      return _ol_RotationConstraint_.createSnapToN(constrainRotation);\n    } else {\n      return _ol_RotationConstraint_.none;\n    }\n  } else {\n    return _ol_RotationConstraint_.disable;\n  }\n};\n/**\n * Determine if an animation involves no view change.\n * @param {ol.ViewAnimation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\n\n\n_ol_View_.isNoopAnimation = function (animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!_ol_coordinate_.equals(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default _ol_View_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/view.js"],"names":["_ol_","_ol_CenterConstraint_","_ol_Object_","_ol_ResolutionConstraint_","_ol_RotationConstraint_","_ol_ViewHint_","_ol_ViewProperty_","_ol_array_","_ol_asserts_","_ol_coordinate_","_ol_easing_","_ol_extent_","_ol_geom_GeometryType_","_ol_geom_Polygon_","_ol_geom_SimpleGeometry_","_ol_math_","_ol_obj_","_ol_proj_","_ol_proj_Units_","_ol_View_","opt_options","call","options","assign","hints_","animations_","updateAnimationKey_","updateAnimations_","bind","projection_","createProjection","projection","applyOptions_","inherits","prototype","properties","CENTER","center","undefined","resolutionConstraintInfo","createResolutionConstraint_","maxResolution_","maxResolution","minResolution_","minResolution","zoomFactor_","zoomFactor","resolutions_","resolutions","minZoom_","minZoom","centerConstraint","createCenterConstraint_","resolutionConstraint","constraint","rotationConstraint","createRotationConstraint_","constraints_","resolution","rotation","RESOLUTION","zoom","constrainResolution","clamp","Number","getResolution","ROTATION","setProperties","options_","getUpdatedOptions_","newOptions","getZoom","getCenter","getRotation","animate","var_args","animationCount","arguments","length","callback","isDef","state","setCenter","setZoom","setRotation","start","Date","now","slice","series","i","animation","complete","anchor","duration","easing","inAndOut","sourceCenter","targetCenter","sourceResolution","targetResolution","sourceRotation","delta","modulo","Math","PI","targetRotation","isNoopAnimation","push","setHint","ANIMATING","getAnimating","getInteracting","INTERACTING","cancelAnimations","ii","cancelAnimationFrame","more","seriesComplete","j","jj","elapsed","fraction","progress","x0","y0","x1","y1","x","y","set","calculateCenterZoom","calculateCenterRotate","filter","Boolean","requestAnimationFrame","currentCenter","rotate","add","currentResolution","getSizeFromViewport_","size","selector","getUid","element","document","querySelector","metrics","getComputedStyle","parseInt","width","height","constrainCenter","opt_delta","opt_direction","direction","constrainRotation","get","getConstraints","getHints","opt_hints","calculateExtent","opt_size","assert","getForViewAndSize","getMaxResolution","getMinResolution","getMaxZoom","getZoomForResolution","setMaxZoom","maxZoom","getMinZoom","setMinZoom","getProjection","getResolutions","getResolutionForExtent","extent","xResolution","getWidth","yResolution","getHeight","max","getResolutionForValueFunction","opt_power","power","log","value","pow","getValueForResolutionFunction","getState","offset","nearest","linearFindNearest","getResolutionForZoom","fit","geometryOrExtent","geometry","Array","isArray","isEmpty","fromExtent","getType","CIRCLE","getExtent","padding","coords","getFlatCoordinates","cosAngle","cos","sinAngle","sin","minRotX","Infinity","minRotY","maxRotX","maxRotY","stride","getStride","rotX","rotY","min","isNaN","constrainedResolution","centerRotX","centerRotY","centerX","centerY","nullFunction","setResolution","setTimeout","centerOn","coordinate","position","opt_anchor","hint","changed","createExtent","none","defaultMaxZoom","defaultZoomFactor","DEFAULT_MIN_ZOOM","createSnapToResolutions","METERS_PER_UNIT","DEGREES","getMetersPerUnit","defaultMaxResolution","DEFAULT_TILE_SIZE","defaultMinResolution","floor","createSnapToPower","enableRotation","createSnapToZero","createSnapToN","disable","equals"],"mappings":"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","sourcesContent":["import _ol_ from './index.js';\nimport _ol_CenterConstraint_ from './centerconstraint.js';\nimport _ol_Object_ from './object.js';\nimport _ol_ResolutionConstraint_ from './resolutionconstraint.js';\nimport _ol_RotationConstraint_ from './rotationconstraint.js';\nimport _ol_ViewHint_ from './viewhint.js';\nimport _ol_ViewProperty_ from './viewproperty.js';\nimport _ol_array_ from './array.js';\nimport _ol_asserts_ from './asserts.js';\nimport _ol_coordinate_ from './coordinate.js';\nimport _ol_easing_ from './easing.js';\nimport _ol_extent_ from './extent.js';\nimport _ol_geom_GeometryType_ from './geom/geometrytype.js';\nimport _ol_geom_Polygon_ from './geom/polygon.js';\nimport _ol_geom_SimpleGeometry_ from './geom/simplegeometry.js';\nimport _ol_math_ from './math.js';\nimport _ol_obj_ from './obj.js';\nimport _ol_proj_ from './proj.js';\nimport _ol_proj_Units_ from './proj/units.js';\n\n/**\n * @classdesc\n * An ol.View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * ### The view states\n *\n * An `ol.View` is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * An `ol.View` has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Spherical Mercator (EPSG:3857).\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view. Any value can be passed to the setters. And the value\n * that is passed to a setter will effectively be the value set in the view,\n * and returned by the corresponding getter.\n *\n * But an `ol.View` object also has a *resolution constraint*, a\n * *rotation constraint* and a *center constraint*.\n *\n * As said above, no constraints are applied when the setters are used to set\n * new states for the view. Applying constraints is done explicitly through\n * the use of the `constrain*` functions (`constrainResolution` and\n * `constrainRotation` and `constrainCenter`).\n *\n * The main users of the constraints are the interactions and the\n * controls. For example, double-clicking on the map changes the view to\n * the \"next\" resolution. And releasing the fingers after pinch-zooming\n * snaps to the closest resolution (with an animation).\n *\n * The *resolution constraint* snaps to specific resolutions. It is\n * determined by the following options: `resolutions`, `maxResolution`,\n * `maxZoom`, and `zoomFactor`. If `resolutions` is set, the other three\n * options are ignored. See documentation for each option for more\n * information.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default the rotation value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the center is not constrained at all.\n *\n * @constructor\n * @extends {ol.Object}\n * @param {olx.ViewOptions=} opt_options View options.\n * @api\n */\nvar _ol_View_ = function(opt_options) {\n  _ol_Object_.call(this);\n\n  var options = _ol_obj_.assign({}, opt_options);\n\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n  this.hints_ = [0, 0];\n\n  /**\n   * @private\n   * @type {Array.<Array.<ol.ViewAnimation>>}\n   */\n  this.animations_ = [];\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.updateAnimationKey_;\n\n  this.updateAnimations_ = this.updateAnimations_.bind(this);\n\n  /**\n   * @private\n   * @const\n   * @type {ol.proj.Projection}\n   */\n  this.projection_ = _ol_proj_.createProjection(options.projection, 'EPSG:3857');\n\n  this.applyOptions_(options);\n};\n\n_ol_.inherits(_ol_View_, _ol_Object_);\n\n\n/**\n * Set up the view with the given options.\n * @param {olx.ViewOptions} options View options.\n */\n_ol_View_.prototype.applyOptions_ = function(options) {\n\n  /**\n   * @type {Object.<string, *>}\n   */\n  var properties = {};\n  properties[_ol_ViewProperty_.CENTER] = options.center !== undefined ?\n    options.center : null;\n\n  var resolutionConstraintInfo = _ol_View_.createResolutionConstraint_(\n      options);\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.minResolution_ = resolutionConstraintInfo.minResolution;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n\n  /**\n   * @private\n   * @type {Array.<number>|undefined}\n   */\n  this.resolutions_ = options.resolutions;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.minZoom_ = resolutionConstraintInfo.minZoom;\n\n  var centerConstraint = _ol_View_.createCenterConstraint_(options);\n  var resolutionConstraint = resolutionConstraintInfo.constraint;\n  var rotationConstraint = _ol_View_.createRotationConstraint_(options);\n\n  /**\n   * @private\n   * @type {ol.Constraints}\n   */\n  this.constraints_ = {\n    center: centerConstraint,\n    resolution: resolutionConstraint,\n    rotation: rotationConstraint\n  };\n\n  if (options.resolution !== undefined) {\n    properties[_ol_ViewProperty_.RESOLUTION] = options.resolution;\n  } else if (options.zoom !== undefined) {\n    properties[_ol_ViewProperty_.RESOLUTION] = this.constrainResolution(\n        this.maxResolution_, options.zoom - this.minZoom_);\n\n    if (this.resolutions_) { // in case map zoom is out of min/max zoom range\n      properties[_ol_ViewProperty_.RESOLUTION] = _ol_math_.clamp(\n          Number(this.getResolution() || properties[_ol_ViewProperty_.RESOLUTION]),\n          this.minResolution_, this.maxResolution_);\n    }\n  }\n  properties[_ol_ViewProperty_.ROTATION] =\n      options.rotation !== undefined ? options.rotation : 0;\n  this.setProperties(properties);\n\n  /**\n   * @private\n   * @type {olx.ViewOptions}\n   */\n  this.options_ = options;\n\n};\n\n/**\n * Get an updated version of the view options used to construct the view.  The\n * current resolution (or zoom), center, and rotation are applied to any stored\n * options.  The provided options can be uesd to apply new min/max zoom or\n * resolution limits.\n * @param {olx.ViewOptions} newOptions New options to be applied.\n * @return {olx.ViewOptions} New options updated with the current view state.\n */\n_ol_View_.prototype.getUpdatedOptions_ = function(newOptions) {\n  var options = _ol_obj_.assign({}, this.options_);\n\n  // preserve resolution (or zoom)\n  if (options.resolution !== undefined) {\n    options.resolution = this.getResolution();\n  } else {\n    options.zoom = this.getZoom();\n  }\n\n  // preserve center\n  options.center = this.getCenter();\n\n  // preserve rotation\n  options.rotation = this.getRotation();\n\n  return _ol_obj_.assign({}, options, newOptions);\n};\n\n\n/**\n * Animate the view.  The view's center, zoom (or resolution), and rotation\n * can be animated for smooth transitions between view states.  For example,\n * to animate the view to a new zoom level:\n *\n *     view.animate({zoom: view.getZoom() + 1});\n *\n * By default, the animation lasts one second and uses in-and-out easing.  You\n * can customize this behavior by including `duration` (in milliseconds) and\n * `easing` options (see {@link ol.easing}).\n *\n * To chain together multiple animations, call the method with multiple\n * animation objects.  For example, to first zoom and then pan:\n *\n *     view.animate({zoom: 10}, {center: [0, 0]});\n *\n * If you provide a function as the last argument to the animate method, it\n * will get called at the end of an animation series.  The callback will be\n * called with `true` if the animation series completed on its own or `false`\n * if it was cancelled.\n *\n * Animations are cancelled by user interactions (e.g. dragging the map) or by\n * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n * (or another method that calls one of these).\n *\n * @param {...(olx.AnimationOptions|function(boolean))} var_args Animation\n *     options.  Multiple animations can be run in series by passing multiple\n *     options objects.  To run multiple animations in parallel, call the method\n *     multiple times.  An optional callback can be provided as a final\n *     argument.  The callback will be called with a boolean indicating whether\n *     the animation completed without being cancelled.\n * @api\n */\n_ol_View_.prototype.animate = function(var_args) {\n  var animationCount = arguments.length;\n  var callback;\n  if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {\n    callback = arguments[animationCount - 1];\n    --animationCount;\n  }\n  if (!this.isDef()) {\n    // if view properties are not yet set, shortcut to the final state\n    var state = arguments[animationCount - 1];\n    if (state.center) {\n      this.setCenter(state.center);\n    }\n    if (state.zoom !== undefined) {\n      this.setZoom(state.zoom);\n    }\n    if (state.rotation !== undefined) {\n      this.setRotation(state.rotation);\n    }\n    if (callback) {\n      callback(true);\n    }\n    return;\n  }\n  var start = Date.now();\n  var center = this.getCenter().slice();\n  var resolution = this.getResolution();\n  var rotation = this.getRotation();\n  var series = [];\n  for (var i = 0; i < animationCount; ++i) {\n    var options = /** @type {olx.AnimationOptions} */ (arguments[i]);\n\n    var animation = /** @type {ol.ViewAnimation} */ ({\n      start: start,\n      complete: false,\n      anchor: options.anchor,\n      duration: options.duration !== undefined ? options.duration : 1000,\n      easing: options.easing || _ol_easing_.inAndOut\n    });\n\n    if (options.center) {\n      animation.sourceCenter = center;\n      animation.targetCenter = options.center;\n      center = animation.targetCenter;\n    }\n\n    if (options.zoom !== undefined) {\n      animation.sourceResolution = resolution;\n      animation.targetResolution = this.constrainResolution(\n          this.maxResolution_, options.zoom - this.minZoom_, 0);\n      resolution = animation.targetResolution;\n    } else if (options.resolution) {\n      animation.sourceResolution = resolution;\n      animation.targetResolution = options.resolution;\n      resolution = animation.targetResolution;\n    }\n\n    if (options.rotation !== undefined) {\n      animation.sourceRotation = rotation;\n      var delta = _ol_math_.modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n      animation.targetRotation = rotation + delta;\n      rotation = animation.targetRotation;\n    }\n\n    animation.callback = callback;\n\n    // check if animation is a no-op\n    if (_ol_View_.isNoopAnimation(animation)) {\n      animation.complete = true;\n      // we still push it onto the series for callback handling\n    } else {\n      start += animation.duration;\n    }\n    series.push(animation);\n  }\n  this.animations_.push(series);\n  this.setHint(_ol_ViewHint_.ANIMATING, 1);\n  this.updateAnimations_();\n};\n\n\n/**\n * Determine if the view is being animated.\n * @return {boolean} The view is being animated.\n * @api\n */\n_ol_View_.prototype.getAnimating = function() {\n  return this.hints_[_ol_ViewHint_.ANIMATING] > 0;\n};\n\n\n/**\n * Determine if the user is interacting with the view, such as panning or zooming.\n * @return {boolean} The view is being interacted with.\n * @api\n */\n_ol_View_.prototype.getInteracting = function() {\n  return this.hints_[_ol_ViewHint_.INTERACTING] > 0;\n};\n\n\n/**\n * Cancel any ongoing animations.\n * @api\n */\n_ol_View_.prototype.cancelAnimations = function() {\n  this.setHint(_ol_ViewHint_.ANIMATING, -this.hints_[_ol_ViewHint_.ANIMATING]);\n  for (var i = 0, ii = this.animations_.length; i < ii; ++i) {\n    var series = this.animations_[i];\n    if (series[0].callback) {\n      series[0].callback(false);\n    }\n  }\n  this.animations_.length = 0;\n};\n\n/**\n * Update all animations.\n */\n_ol_View_.prototype.updateAnimations_ = function() {\n  if (this.updateAnimationKey_ !== undefined) {\n    cancelAnimationFrame(this.updateAnimationKey_);\n    this.updateAnimationKey_ = undefined;\n  }\n  if (!this.getAnimating()) {\n    return;\n  }\n  var now = Date.now();\n  var more = false;\n  for (var i = this.animations_.length - 1; i >= 0; --i) {\n    var series = this.animations_[i];\n    var seriesComplete = true;\n    for (var j = 0, jj = series.length; j < jj; ++j) {\n      var animation = series[j];\n      if (animation.complete) {\n        continue;\n      }\n      var elapsed = now - animation.start;\n      var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n      if (fraction >= 1) {\n        animation.complete = true;\n        fraction = 1;\n      } else {\n        seriesComplete = false;\n      }\n      var progress = animation.easing(fraction);\n      if (animation.sourceCenter) {\n        var x0 = animation.sourceCenter[0];\n        var y0 = animation.sourceCenter[1];\n        var x1 = animation.targetCenter[0];\n        var y1 = animation.targetCenter[1];\n        var x = x0 + progress * (x1 - x0);\n        var y = y0 + progress * (y1 - y0);\n        this.set(_ol_ViewProperty_.CENTER, [x, y]);\n      }\n      if (animation.sourceResolution && animation.targetResolution) {\n        var resolution = progress === 1 ?\n          animation.targetResolution :\n          animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\n        if (animation.anchor) {\n          this.set(_ol_ViewProperty_.CENTER,\n              this.calculateCenterZoom(resolution, animation.anchor));\n        }\n        this.set(_ol_ViewProperty_.RESOLUTION, resolution);\n      }\n      if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\n        var rotation = progress === 1 ?\n          _ol_math_.modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI :\n          animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\n        if (animation.anchor) {\n          this.set(_ol_ViewProperty_.CENTER,\n              this.calculateCenterRotate(rotation, animation.anchor));\n        }\n        this.set(_ol_ViewProperty_.ROTATION, rotation);\n      }\n      more = true;\n      if (!animation.complete) {\n        break;\n      }\n    }\n    if (seriesComplete) {\n      this.animations_[i] = null;\n      this.setHint(_ol_ViewHint_.ANIMATING, -1);\n      var callback = series[0].callback;\n      if (callback) {\n        callback(true);\n      }\n    }\n  }\n  // prune completed series\n  this.animations_ = this.animations_.filter(Boolean);\n  if (more && this.updateAnimationKey_ === undefined) {\n    this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_);\n  }\n};\n\n/**\n * @param {number} rotation Target rotation.\n * @param {ol.Coordinate} anchor Rotation anchor.\n * @return {ol.Coordinate|undefined} Center for rotation and anchor.\n */\n_ol_View_.prototype.calculateCenterRotate = function(rotation, anchor) {\n  var center;\n  var currentCenter = this.getCenter();\n  if (currentCenter !== undefined) {\n    center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n    _ol_coordinate_.rotate(center, rotation - this.getRotation());\n    _ol_coordinate_.add(center, anchor);\n  }\n  return center;\n};\n\n\n/**\n * @param {number} resolution Target resolution.\n * @param {ol.Coordinate} anchor Zoom anchor.\n * @return {ol.Coordinate|undefined} Center for resolution and anchor.\n */\n_ol_View_.prototype.calculateCenterZoom = function(resolution, anchor) {\n  var center;\n  var currentCenter = this.getCenter();\n  var currentResolution = this.getResolution();\n  if (currentCenter !== undefined && currentResolution !== undefined) {\n    var x = anchor[0] -\n        resolution * (anchor[0] - currentCenter[0]) / currentResolution;\n    var y = anchor[1] -\n        resolution * (anchor[1] - currentCenter[1]) / currentResolution;\n    center = [x, y];\n  }\n  return center;\n};\n\n\n/**\n * @private\n * @return {ol.Size} Viewport size or `[100, 100]` when no viewport is found.\n */\n_ol_View_.prototype.getSizeFromViewport_ = function() {\n  var size = [100, 100];\n  var selector = '.ol-viewport[data-view=\"' + _ol_.getUid(this) + '\"]';\n  var element = document.querySelector(selector);\n  if (element) {\n    var metrics = getComputedStyle(element);\n    size[0] = parseInt(metrics.width, 10);\n    size[1] = parseInt(metrics.height, 10);\n  }\n  return size;\n};\n\n\n/**\n * Get the constrained center of this view.\n * @param {ol.Coordinate|undefined} center Center.\n * @return {ol.Coordinate|undefined} Constrained center.\n * @api\n */\n_ol_View_.prototype.constrainCenter = function(center) {\n  return this.constraints_.center(center);\n};\n\n\n/**\n * Get the constrained resolution of this view.\n * @param {number|undefined} resolution Resolution.\n * @param {number=} opt_delta Delta. Default is `0`.\n * @param {number=} opt_direction Direction. Default is `0`.\n * @return {number|undefined} Constrained resolution.\n * @api\n */\n_ol_View_.prototype.constrainResolution = function(\n    resolution, opt_delta, opt_direction) {\n  var delta = opt_delta || 0;\n  var direction = opt_direction || 0;\n  return this.constraints_.resolution(resolution, delta, direction);\n};\n\n\n/**\n * Get the constrained rotation of this view.\n * @param {number|undefined} rotation Rotation.\n * @param {number=} opt_delta Delta. Default is `0`.\n * @return {number|undefined} Constrained rotation.\n * @api\n */\n_ol_View_.prototype.constrainRotation = function(rotation, opt_delta) {\n  var delta = opt_delta || 0;\n  return this.constraints_.rotation(rotation, delta);\n};\n\n\n/**\n * Get the view center.\n * @return {ol.Coordinate|undefined} The center of the view.\n * @observable\n * @api\n */\n_ol_View_.prototype.getCenter = function() {\n  return (\n    /** @type {ol.Coordinate|undefined} */ this.get(_ol_ViewProperty_.CENTER)\n  );\n};\n\n\n/**\n * @return {ol.Constraints} Constraints.\n */\n_ol_View_.prototype.getConstraints = function() {\n  return this.constraints_;\n};\n\n\n/**\n * @param {Array.<number>=} opt_hints Destination array.\n * @return {Array.<number>} Hint.\n */\n_ol_View_.prototype.getHints = function(opt_hints) {\n  if (opt_hints !== undefined) {\n    opt_hints[0] = this.hints_[0];\n    opt_hints[1] = this.hints_[1];\n    return opt_hints;\n  } else {\n    return this.hints_.slice();\n  }\n};\n\n\n/**\n * Calculate the extent for the current view state and the passed size.\n * The size is the pixel dimensions of the box into which the calculated extent\n * should fit. In most cases you want to get the extent of the entire map,\n * that is `map.getSize()`.\n * @param {ol.Size=} opt_size Box pixel size. If not provided, the size of the\n * first map that uses this view will be used.\n * @return {ol.Extent} Extent.\n * @api\n */\n_ol_View_.prototype.calculateExtent = function(opt_size) {\n  var size = opt_size || this.getSizeFromViewport_();\n  var center = /** @type {!ol.Coordinate} */ (this.getCenter());\n  _ol_asserts_.assert(center, 1); // The view center is not defined\n  var resolution = /** @type {!number} */ (this.getResolution());\n  _ol_asserts_.assert(resolution !== undefined, 2); // The view resolution is not defined\n  var rotation = /** @type {!number} */ (this.getRotation());\n  _ol_asserts_.assert(rotation !== undefined, 3); // The view rotation is not defined\n\n  return _ol_extent_.getForViewAndSize(center, resolution, rotation, size);\n};\n\n\n/**\n * Get the maximum resolution of the view.\n * @return {number} The maximum resolution of the view.\n * @api\n */\n_ol_View_.prototype.getMaxResolution = function() {\n  return this.maxResolution_;\n};\n\n\n/**\n * Get the minimum resolution of the view.\n * @return {number} The minimum resolution of the view.\n * @api\n */\n_ol_View_.prototype.getMinResolution = function() {\n  return this.minResolution_;\n};\n\n\n/**\n * Get the maximum zoom level for the view.\n * @return {number} The maximum zoom level.\n * @api\n */\n_ol_View_.prototype.getMaxZoom = function() {\n  return /** @type {number} */ (this.getZoomForResolution(this.minResolution_));\n};\n\n\n/**\n * Set a new maximum zoom level for the view.\n * @param {number} zoom The maximum zoom level.\n * @api\n */\n_ol_View_.prototype.setMaxZoom = function(zoom) {\n  this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));\n};\n\n\n/**\n * Get the minimum zoom level for the view.\n * @return {number} The minimum zoom level.\n * @api\n */\n_ol_View_.prototype.getMinZoom = function() {\n  return /** @type {number} */ (this.getZoomForResolution(this.maxResolution_));\n};\n\n\n/**\n * Set a new minimum zoom level for the view.\n * @param {number} zoom The minimum zoom level.\n * @api\n */\n_ol_View_.prototype.setMinZoom = function(zoom) {\n  this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));\n};\n\n\n/**\n * Get the view projection.\n * @return {ol.proj.Projection} The projection of the view.\n * @api\n */\n_ol_View_.prototype.getProjection = function() {\n  return this.projection_;\n};\n\n\n/**\n * Get the view resolution.\n * @return {number|undefined} The resolution of the view.\n * @observable\n * @api\n */\n_ol_View_.prototype.getResolution = function() {\n  return (\n    /** @type {number|undefined} */ this.get(_ol_ViewProperty_.RESOLUTION)\n  );\n};\n\n\n/**\n * Get the resolutions for the view. This returns the array of resolutions\n * passed to the constructor of the {ol.View}, or undefined if none were given.\n * @return {Array.<number>|undefined} The resolutions of the view.\n * @api\n */\n_ol_View_.prototype.getResolutions = function() {\n  return this.resolutions_;\n};\n\n\n/**\n * Get the resolution for a provided extent (in map units) and size (in pixels).\n * @param {ol.Extent} extent Extent.\n * @param {ol.Size=} opt_size Box pixel size.\n * @return {number} The resolution at which the provided extent will render at\n *     the given size.\n * @api\n */\n_ol_View_.prototype.getResolutionForExtent = function(extent, opt_size) {\n  var size = opt_size || this.getSizeFromViewport_();\n  var xResolution = _ol_extent_.getWidth(extent) / size[0];\n  var yResolution = _ol_extent_.getHeight(extent) / size[1];\n  return Math.max(xResolution, yResolution);\n};\n\n\n/**\n * Return a function that returns a value between 0 and 1 for a\n * resolution. Exponential scaling is assumed.\n * @param {number=} opt_power Power.\n * @return {function(number): number} Resolution for value function.\n */\n_ol_View_.prototype.getResolutionForValueFunction = function(opt_power) {\n  var power = opt_power || 2;\n  var maxResolution = this.maxResolution_;\n  var minResolution = this.minResolution_;\n  var max = Math.log(maxResolution / minResolution) / Math.log(power);\n  return (\n    /**\n     * @param {number} value Value.\n     * @return {number} Resolution.\n     */\n    function(value) {\n      var resolution = maxResolution / Math.pow(power, value * max);\n      return resolution;\n    });\n};\n\n\n/**\n * Get the view rotation.\n * @return {number} The rotation of the view in radians.\n * @observable\n * @api\n */\n_ol_View_.prototype.getRotation = function() {\n  return (\n    /** @type {number} */ this.get(_ol_ViewProperty_.ROTATION)\n  );\n};\n\n\n/**\n * Return a function that returns a resolution for a value between\n * 0 and 1. Exponential scaling is assumed.\n * @param {number=} opt_power Power.\n * @return {function(number): number} Value for resolution function.\n */\n_ol_View_.prototype.getValueForResolutionFunction = function(opt_power) {\n  var power = opt_power || 2;\n  var maxResolution = this.maxResolution_;\n  var minResolution = this.minResolution_;\n  var max = Math.log(maxResolution / minResolution) / Math.log(power);\n  return (\n    /**\n     * @param {number} resolution Resolution.\n     * @return {number} Value.\n     */\n    function(resolution) {\n      var value =\n            (Math.log(maxResolution / resolution) / Math.log(power)) / max;\n      return value;\n    });\n};\n\n\n/**\n * @return {olx.ViewState} View state.\n */\n_ol_View_.prototype.getState = function() {\n  var center = /** @type {ol.Coordinate} */ (this.getCenter());\n  var projection = this.getProjection();\n  var resolution = /** @type {number} */ (this.getResolution());\n  var rotation = this.getRotation();\n  return /** @type {olx.ViewState} */ ({\n    center: center.slice(),\n    projection: projection !== undefined ? projection : null,\n    resolution: resolution,\n    rotation: rotation,\n    zoom: this.getZoom()\n  });\n};\n\n\n/**\n * Get the current zoom level.  If you configured your view with a resolutions\n * array (this is rare), this method may return non-integer zoom levels (so\n * the zoom level is not safe to use as an index into a resolutions array).\n * @return {number|undefined} Zoom.\n * @api\n */\n_ol_View_.prototype.getZoom = function() {\n  var zoom;\n  var resolution = this.getResolution();\n  if (resolution !== undefined) {\n    zoom = this.getZoomForResolution(resolution);\n  }\n  return zoom;\n};\n\n\n/**\n * Get the zoom level for a resolution.\n * @param {number} resolution The resolution.\n * @return {number|undefined} The zoom level for the provided resolution.\n * @api\n */\n_ol_View_.prototype.getZoomForResolution = function(resolution) {\n  var offset = this.minZoom_ || 0;\n  var max, zoomFactor;\n  if (this.resolutions_) {\n    var nearest = _ol_array_.linearFindNearest(this.resolutions_, resolution, 1);\n    offset = nearest;\n    max = this.resolutions_[nearest];\n    if (nearest == this.resolutions_.length - 1) {\n      zoomFactor = 2;\n    } else {\n      zoomFactor = max / this.resolutions_[nearest + 1];\n    }\n  } else {\n    max = this.maxResolution_;\n    zoomFactor = this.zoomFactor_;\n  }\n  return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n};\n\n\n/**\n * Get the resolution for a zoom level.\n * @param {number} zoom Zoom level.\n * @return {number} The view resolution for the provided zoom level.\n * @api\n */\n_ol_View_.prototype.getResolutionForZoom = function(zoom) {\n  return /** @type {number} */ (this.constrainResolution(\n      this.maxResolution_, zoom - this.minZoom_, 0));\n};\n\n\n/**\n * Fit the given geometry or extent based on the given map size and border.\n * The size is pixel dimensions of the box to fit the extent into.\n * In most cases you will want to use the map size, that is `map.getSize()`.\n * Takes care of the map angle.\n * @param {ol.geom.SimpleGeometry|ol.Extent} geometryOrExtent The geometry or\n *     extent to fit the view to.\n * @param {olx.view.FitOptions=} opt_options Options.\n * @api\n */\n_ol_View_.prototype.fit = function(geometryOrExtent, opt_options) {\n  var options = opt_options || {};\n  var size = options.size;\n  if (!size) {\n    size = this.getSizeFromViewport_();\n  }\n  /** @type {ol.geom.SimpleGeometry} */\n  var geometry;\n  if (!(geometryOrExtent instanceof _ol_geom_SimpleGeometry_)) {\n    _ol_asserts_.assert(Array.isArray(geometryOrExtent),\n        24); // Invalid extent or geometry provided as `geometry`\n    _ol_asserts_.assert(!_ol_extent_.isEmpty(geometryOrExtent),\n        25); // Cannot fit empty extent provided as `geometry`\n    geometry = _ol_geom_Polygon_.fromExtent(geometryOrExtent);\n  } else if (geometryOrExtent.getType() === _ol_geom_GeometryType_.CIRCLE) {\n    geometryOrExtent = geometryOrExtent.getExtent();\n    geometry = _ol_geom_Polygon_.fromExtent(geometryOrExtent);\n    geometry.rotate(this.getRotation(), _ol_extent_.getCenter(geometryOrExtent));\n  } else {\n    geometry = geometryOrExtent;\n  }\n\n  var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n  var constrainResolution = options.constrainResolution !== undefined ?\n    options.constrainResolution : true;\n  var nearest = options.nearest !== undefined ? options.nearest : false;\n  var minResolution;\n  if (options.minResolution !== undefined) {\n    minResolution = options.minResolution;\n  } else if (options.maxZoom !== undefined) {\n    minResolution = this.constrainResolution(\n        this.maxResolution_, options.maxZoom - this.minZoom_, 0);\n  } else {\n    minResolution = 0;\n  }\n  var coords = geometry.getFlatCoordinates();\n\n  // calculate rotated extent\n  var rotation = this.getRotation();\n  var cosAngle = Math.cos(-rotation);\n  var sinAngle = Math.sin(-rotation);\n  var minRotX = +Infinity;\n  var minRotY = +Infinity;\n  var maxRotX = -Infinity;\n  var maxRotY = -Infinity;\n  var stride = geometry.getStride();\n  for (var i = 0, ii = coords.length; i < ii; i += stride) {\n    var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n    var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n    minRotX = Math.min(minRotX, rotX);\n    minRotY = Math.min(minRotY, rotY);\n    maxRotX = Math.max(maxRotX, rotX);\n    maxRotY = Math.max(maxRotY, rotY);\n  }\n\n  // calculate resolution\n  var resolution = this.getResolutionForExtent(\n      [minRotX, minRotY, maxRotX, maxRotY],\n      [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);\n  resolution = isNaN(resolution) ? minResolution :\n    Math.max(resolution, minResolution);\n  if (constrainResolution) {\n    var constrainedResolution = this.constrainResolution(resolution, 0, 0);\n    if (!nearest && constrainedResolution < resolution) {\n      constrainedResolution = this.constrainResolution(\n          constrainedResolution, -1, 0);\n    }\n    resolution = constrainedResolution;\n  }\n\n  // calculate center\n  sinAngle = -sinAngle; // go back to original rotation\n  var centerRotX = (minRotX + maxRotX) / 2;\n  var centerRotY = (minRotY + maxRotY) / 2;\n  centerRotX += (padding[1] - padding[3]) / 2 * resolution;\n  centerRotY += (padding[0] - padding[2]) / 2 * resolution;\n  var centerX = centerRotX * cosAngle - centerRotY * sinAngle;\n  var centerY = centerRotY * cosAngle + centerRotX * sinAngle;\n  var center = [centerX, centerY];\n  var callback = options.callback ? options.callback : _ol_.nullFunction;\n\n  if (options.duration !== undefined) {\n    this.animate({\n      resolution: resolution,\n      center: center,\n      duration: options.duration,\n      easing: options.easing\n    }, callback);\n  } else {\n    this.setResolution(resolution);\n    this.setCenter(center);\n    setTimeout(callback.bind(undefined, true), 0);\n  }\n};\n\n\n/**\n * Center on coordinate and view position.\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {ol.Size} size Box pixel size.\n * @param {ol.Pixel} position Position on the view to center on.\n * @api\n */\n_ol_View_.prototype.centerOn = function(coordinate, size, position) {\n  // calculate rotated position\n  var rotation = this.getRotation();\n  var cosAngle = Math.cos(-rotation);\n  var sinAngle = Math.sin(-rotation);\n  var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  var resolution = this.getResolution();\n  rotX += (size[0] / 2 - position[0]) * resolution;\n  rotY += (position[1] - size[1] / 2) * resolution;\n\n  // go back to original angle\n  sinAngle = -sinAngle; // go back to original rotation\n  var centerX = rotX * cosAngle - rotY * sinAngle;\n  var centerY = rotY * cosAngle + rotX * sinAngle;\n\n  this.setCenter([centerX, centerY]);\n};\n\n\n/**\n * @return {boolean} Is defined.\n */\n_ol_View_.prototype.isDef = function() {\n  return !!this.getCenter() && this.getResolution() !== undefined;\n};\n\n\n/**\n * Rotate the view around a given coordinate.\n * @param {number} rotation New rotation value for the view.\n * @param {ol.Coordinate=} opt_anchor The rotation center.\n * @api\n */\n_ol_View_.prototype.rotate = function(rotation, opt_anchor) {\n  if (opt_anchor !== undefined) {\n    var center = this.calculateCenterRotate(rotation, opt_anchor);\n    this.setCenter(center);\n  }\n  this.setRotation(rotation);\n};\n\n\n/**\n * Set the center of the current view.\n * @param {ol.Coordinate|undefined} center The center of the view.\n * @observable\n * @api\n */\n_ol_View_.prototype.setCenter = function(center) {\n  this.set(_ol_ViewProperty_.CENTER, center);\n  if (this.getAnimating()) {\n    this.cancelAnimations();\n  }\n};\n\n\n/**\n * @param {ol.ViewHint} hint Hint.\n * @param {number} delta Delta.\n * @return {number} New value.\n */\n_ol_View_.prototype.setHint = function(hint, delta) {\n  this.hints_[hint] += delta;\n  this.changed();\n  return this.hints_[hint];\n};\n\n\n/**\n * Set the resolution for this view.\n * @param {number|undefined} resolution The resolution of the view.\n * @observable\n * @api\n */\n_ol_View_.prototype.setResolution = function(resolution) {\n  this.set(_ol_ViewProperty_.RESOLUTION, resolution);\n  if (this.getAnimating()) {\n    this.cancelAnimations();\n  }\n};\n\n\n/**\n * Set the rotation for this view.\n * @param {number} rotation The rotation of the view in radians.\n * @observable\n * @api\n */\n_ol_View_.prototype.setRotation = function(rotation) {\n  this.set(_ol_ViewProperty_.ROTATION, rotation);\n  if (this.getAnimating()) {\n    this.cancelAnimations();\n  }\n};\n\n\n/**\n * Zoom to a specific zoom level.\n * @param {number} zoom Zoom level.\n * @api\n */\n_ol_View_.prototype.setZoom = function(zoom) {\n  this.setResolution(this.getResolutionForZoom(zoom));\n};\n\n\n/**\n * @param {olx.ViewOptions} options View options.\n * @private\n * @return {ol.CenterConstraintType} The constraint.\n */\n_ol_View_.createCenterConstraint_ = function(options) {\n  if (options.extent !== undefined) {\n    return _ol_CenterConstraint_.createExtent(options.extent);\n  } else {\n    return _ol_CenterConstraint_.none;\n  }\n};\n\n\n/**\n * @private\n * @param {olx.ViewOptions} options View options.\n * @return {{constraint: ol.ResolutionConstraintType, maxResolution: number,\n *     minResolution: number, zoomFactor: number}} The constraint.\n */\n_ol_View_.createResolutionConstraint_ = function(options) {\n  var resolutionConstraint;\n  var maxResolution;\n  var minResolution;\n\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  var defaultMaxZoom = 28;\n  var defaultZoomFactor = 2;\n\n  var minZoom = options.minZoom !== undefined ?\n    options.minZoom : _ol_.DEFAULT_MIN_ZOOM;\n\n  var maxZoom = options.maxZoom !== undefined ?\n    options.maxZoom : defaultMaxZoom;\n\n  var zoomFactor = options.zoomFactor !== undefined ?\n    options.zoomFactor : defaultZoomFactor;\n\n  if (options.resolutions !== undefined) {\n    var resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution = resolutions[maxZoom] !== undefined ?\n      resolutions[maxZoom] : resolutions[resolutions.length - 1];\n    resolutionConstraint = _ol_ResolutionConstraint_.createSnapToResolutions(\n        resolutions);\n  } else {\n    // calculate the default min and max resolution\n    var projection = _ol_proj_.createProjection(options.projection, 'EPSG:3857');\n    var extent = projection.getExtent();\n    var size = !extent ?\n      // use an extent that can fit the whole world if need be\n      360 * _ol_proj_.METERS_PER_UNIT[_ol_proj_Units_.DEGREES] /\n            projection.getMetersPerUnit() :\n      Math.max(_ol_extent_.getWidth(extent), _ol_extent_.getHeight(extent));\n\n    var defaultMaxResolution = size / _ol_.DEFAULT_TILE_SIZE / Math.pow(\n        defaultZoomFactor, _ol_.DEFAULT_MIN_ZOOM);\n\n    var defaultMinResolution = defaultMaxResolution / Math.pow(\n        defaultZoomFactor, defaultMaxZoom - _ol_.DEFAULT_MIN_ZOOM);\n\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom = minZoom + Math.floor(\n        Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n\n    resolutionConstraint = _ol_ResolutionConstraint_.createSnapToPower(\n        zoomFactor, maxResolution, maxZoom - minZoom);\n  }\n  return {constraint: resolutionConstraint, maxResolution: maxResolution,\n    minResolution: minResolution, minZoom: minZoom, zoomFactor: zoomFactor};\n};\n\n\n/**\n * @private\n * @param {olx.ViewOptions} options View options.\n * @return {ol.RotationConstraintType} Rotation constraint.\n */\n_ol_View_.createRotationConstraint_ = function(options) {\n  var enableRotation = options.enableRotation !== undefined ?\n    options.enableRotation : true;\n  if (enableRotation) {\n    var constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return _ol_RotationConstraint_.createSnapToZero();\n    } else if (constrainRotation === false) {\n      return _ol_RotationConstraint_.none;\n    } else if (typeof constrainRotation === 'number') {\n      return _ol_RotationConstraint_.createSnapToN(constrainRotation);\n    } else {\n      return _ol_RotationConstraint_.none;\n    }\n  } else {\n    return _ol_RotationConstraint_.disable;\n  }\n};\n\n\n/**\n * Determine if an animation involves no view change.\n * @param {ol.ViewAnimation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\n_ol_View_.isNoopAnimation = function(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!_ol_coordinate_.equals(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n};\nexport default _ol_View_;\n"]},"metadata":{},"sourceType":"module"}