{"ast":null,"code":"var _ol_size_ = {};\n/**\n * Returns a buffered size.\n * @param {ol.Size} size Size.\n * @param {number} buffer Buffer.\n * @param {ol.Size=} opt_size Optional reusable size array.\n * @return {ol.Size} The buffered size.\n */\n\n_ol_size_.buffer = function (size, buffer, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n\n  opt_size[0] = size[0] + 2 * buffer;\n  opt_size[1] = size[1] + 2 * buffer;\n  return opt_size;\n};\n/**\n * Determines if a size has a positive area.\n * @param {ol.Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\n\n\n_ol_size_.hasArea = function (size) {\n  return size[0] > 0 && size[1] > 0;\n};\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {ol.Size} size Size.\n * @param {number} ratio Ratio.\n * @param {ol.Size=} opt_size Optional reusable size array.\n * @return {ol.Size} The scaled size.\n */\n\n\n_ol_size_.scale = function (size, ratio, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n\n  opt_size[0] = size[0] * ratio + 0.5 | 0;\n  opt_size[1] = size[1] * ratio + 0.5 | 0;\n  return opt_size;\n};\n/**\n * Returns an `ol.Size` array for the passed in number (meaning: square) or\n * `ol.Size` array.\n * (meaning: non-square),\n * @param {number|ol.Size} size Width and height.\n * @param {ol.Size=} opt_size Optional reusable size array.\n * @return {ol.Size} Size.\n * @api\n */\n\n\n_ol_size_.toSize = function (size, opt_size) {\n  if (Array.isArray(size)) {\n    return size;\n  } else {\n    if (opt_size === undefined) {\n      opt_size = [size, size];\n    } else {\n      opt_size[0] = opt_size[1] =\n      /** @type {number} */\n      size;\n    }\n\n    return opt_size;\n  }\n};\n\nexport default _ol_size_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/size.js"],"names":["_ol_size_","buffer","size","opt_size","undefined","hasArea","scale","ratio","toSize","Array","isArray"],"mappings":"AAAA,IAAIA,SAAS,GAAG,EAAhB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,SAAS,CAACC,MAAV,GAAmB,UAASC,IAAT,EAAeD,MAAf,EAAuBE,QAAvB,EAAiC;AAClD,MAAIA,QAAQ,KAAKC,SAAjB,EAA4B;AAC1BD,IAAAA,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAX;AACD;;AACDA,EAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcD,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAID,MAA5B;AACAE,EAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcD,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAID,MAA5B;AACA,SAAOE,QAAP;AACD,CAPD;AAUA;AACA;AACA;AACA;AACA;;;AACAH,SAAS,CAACK,OAAV,GAAoB,UAASH,IAAT,EAAe;AACjC,SAAOA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,IAAeA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAhC;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,SAAS,CAACM,KAAV,GAAkB,UAASJ,IAAT,EAAeK,KAAf,EAAsBJ,QAAtB,EAAgC;AAChD,MAAIA,QAAQ,KAAKC,SAAjB,EAA4B;AAC1BD,IAAAA,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAX;AACD;;AACDA,EAAAA,QAAQ,CAAC,CAAD,CAAR,GAAeD,IAAI,CAAC,CAAD,CAAJ,GAAUK,KAAV,GAAkB,GAAnB,GAA0B,CAAxC;AACAJ,EAAAA,QAAQ,CAAC,CAAD,CAAR,GAAeD,IAAI,CAAC,CAAD,CAAJ,GAAUK,KAAV,GAAkB,GAAnB,GAA0B,CAAxC;AACA,SAAOJ,QAAP;AACD,CAPD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAH,SAAS,CAACQ,MAAV,GAAmB,UAASN,IAAT,EAAeC,QAAf,EAAyB;AAC1C,MAAIM,KAAK,CAACC,OAAN,CAAcR,IAAd,CAAJ,EAAyB;AACvB,WAAOA,IAAP;AACD,GAFD,MAEO;AACL,QAAIC,QAAQ,KAAKC,SAAjB,EAA4B;AAC1BD,MAAAA,QAAQ,GAAG,CAACD,IAAD,EAAOA,IAAP,CAAX;AACD,KAFD,MAEO;AACLC,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAR;AAAc;AAAuBD,MAAAA,IAAnD;AACD;;AACD,WAAOC,QAAP;AACD;AACF,CAXD;;AAYA,eAAeH,SAAf","sourcesContent":["var _ol_size_ = {};\n\n\n/**\n * Returns a buffered size.\n * @param {ol.Size} size Size.\n * @param {number} buffer Buffer.\n * @param {ol.Size=} opt_size Optional reusable size array.\n * @return {ol.Size} The buffered size.\n */\n_ol_size_.buffer = function(size, buffer, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n  opt_size[0] = size[0] + 2 * buffer;\n  opt_size[1] = size[1] + 2 * buffer;\n  return opt_size;\n};\n\n\n/**\n * Determines if a size has a positive area.\n * @param {ol.Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\n_ol_size_.hasArea = function(size) {\n  return size[0] > 0 && size[1] > 0;\n};\n\n\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {ol.Size} size Size.\n * @param {number} ratio Ratio.\n * @param {ol.Size=} opt_size Optional reusable size array.\n * @return {ol.Size} The scaled size.\n */\n_ol_size_.scale = function(size, ratio, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n  opt_size[0] = (size[0] * ratio + 0.5) | 0;\n  opt_size[1] = (size[1] * ratio + 0.5) | 0;\n  return opt_size;\n};\n\n\n/**\n * Returns an `ol.Size` array for the passed in number (meaning: square) or\n * `ol.Size` array.\n * (meaning: non-square),\n * @param {number|ol.Size} size Width and height.\n * @param {ol.Size=} opt_size Optional reusable size array.\n * @return {ol.Size} Size.\n * @api\n */\n_ol_size_.toSize = function(size, opt_size) {\n  if (Array.isArray(size)) {\n    return size;\n  } else {\n    if (opt_size === undefined) {\n      opt_size = [size, size];\n    } else {\n      opt_size[0] = opt_size[1] = /** @type {number} */ (size);\n    }\n    return opt_size;\n  }\n};\nexport default _ol_size_;\n"]},"metadata":{},"sourceType":"module"}