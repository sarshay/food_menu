{"ast":null,"code":"/**\n * @classdesc\n * Implementation of inertial deceleration for map movement.\n *\n * @constructor\n * @param {number} decay Rate of decay (must be negative).\n * @param {number} minVelocity Minimum velocity (pixels/millisecond).\n * @param {number} delay Delay to consider to calculate the kinetic\n *     initial values (milliseconds).\n * @struct\n * @api\n */\nvar _ol_Kinetic_ = function (decay, minVelocity, delay) {\n  /**\n   * @private\n   * @type {number}\n   */\n  this.decay_ = decay;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.minVelocity_ = minVelocity;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.delay_ = delay;\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n\n  this.points_ = [];\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.angle_ = 0;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.initialVelocity_ = 0;\n};\n/**\n * FIXME empty description for jsdoc\n */\n\n\n_ol_Kinetic_.prototype.begin = function () {\n  this.points_.length = 0;\n  this.angle_ = 0;\n  this.initialVelocity_ = 0;\n};\n/**\n * @param {number} x X.\n * @param {number} y Y.\n */\n\n\n_ol_Kinetic_.prototype.update = function (x, y) {\n  this.points_.push(x, y, Date.now());\n};\n/**\n * @return {boolean} Whether we should do kinetic animation.\n */\n\n\n_ol_Kinetic_.prototype.end = function () {\n  if (this.points_.length < 6) {\n    // at least 2 points are required (i.e. there must be at least 6 elements\n    // in the array)\n    return false;\n  }\n\n  var delay = Date.now() - this.delay_;\n  var lastIndex = this.points_.length - 3;\n\n  if (this.points_[lastIndex + 2] < delay) {\n    // the last tracked point is too old, which means that the user stopped\n    // panning before releasing the map\n    return false;\n  } // get the first point which still falls into the delay time\n\n\n  var firstIndex = lastIndex - 3;\n\n  while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {\n    firstIndex -= 3;\n  }\n\n  var duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2]; // we don't want a duration of 0 (divide by zero)\n  // we also make sure the user panned for a duration of at least one frame\n  // (1/60s) to compute sane displacement values\n\n  if (duration < 1000 / 60) {\n    return false;\n  }\n\n  var dx = this.points_[lastIndex] - this.points_[firstIndex];\n  var dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];\n  this.angle_ = Math.atan2(dy, dx);\n  this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;\n  return this.initialVelocity_ > this.minVelocity_;\n};\n/**\n * @return {number} Total distance travelled (pixels).\n */\n\n\n_ol_Kinetic_.prototype.getDistance = function () {\n  return (this.minVelocity_ - this.initialVelocity_) / this.decay_;\n};\n/**\n * @return {number} Angle of the kinetic panning animation (radians).\n */\n\n\n_ol_Kinetic_.prototype.getAngle = function () {\n  return this.angle_;\n};\n\nexport default _ol_Kinetic_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/kinetic.js"],"names":["_ol_Kinetic_","decay","minVelocity","delay","decay_","minVelocity_","delay_","points_","angle_","initialVelocity_","prototype","begin","length","update","x","y","push","Date","now","end","lastIndex","firstIndex","duration","dx","dy","Math","atan2","sqrt","getDistance","getAngle"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,YAAY,GAAG,UAASC,KAAT,EAAgBC,WAAhB,EAA6BC,KAA7B,EAAoC;AAErD;AACF;AACA;AACA;AACE,OAAKC,MAAL,GAAcH,KAAd;AAEA;AACF;AACA;AACA;;AACE,OAAKI,YAAL,GAAoBH,WAApB;AAEA;AACF;AACA;AACA;;AACE,OAAKI,MAAL,GAAcH,KAAd;AAEA;AACF;AACA;AACA;;AACE,OAAKI,OAAL,GAAe,EAAf;AAEA;AACF;AACA;AACA;;AACE,OAAKC,MAAL,GAAc,CAAd;AAEA;AACF;AACA;AACA;;AACE,OAAKC,gBAAL,GAAwB,CAAxB;AACD,CArCD;AAwCA;AACA;AACA;;;AACAT,YAAY,CAACU,SAAb,CAAuBC,KAAvB,GAA+B,YAAW;AACxC,OAAKJ,OAAL,CAAaK,MAAb,GAAsB,CAAtB;AACA,OAAKJ,MAAL,GAAc,CAAd;AACA,OAAKC,gBAAL,GAAwB,CAAxB;AACD,CAJD;AAOA;AACA;AACA;AACA;;;AACAT,YAAY,CAACU,SAAb,CAAuBG,MAAvB,GAAgC,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC7C,OAAKR,OAAL,CAAaS,IAAb,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwBE,IAAI,CAACC,GAAL,EAAxB;AACD,CAFD;AAKA;AACA;AACA;;;AACAlB,YAAY,CAACU,SAAb,CAAuBS,GAAvB,GAA6B,YAAW;AACtC,MAAI,KAAKZ,OAAL,CAAaK,MAAb,GAAsB,CAA1B,EAA6B;AAC3B;AACA;AACA,WAAO,KAAP;AACD;;AACD,MAAIT,KAAK,GAAGc,IAAI,CAACC,GAAL,KAAa,KAAKZ,MAA9B;AACA,MAAIc,SAAS,GAAG,KAAKb,OAAL,CAAaK,MAAb,GAAsB,CAAtC;;AACA,MAAI,KAAKL,OAAL,CAAaa,SAAS,GAAG,CAAzB,IAA8BjB,KAAlC,EAAyC;AACvC;AACA;AACA,WAAO,KAAP;AACD,GAZqC,CActC;;;AACA,MAAIkB,UAAU,GAAGD,SAAS,GAAG,CAA7B;;AACA,SAAOC,UAAU,GAAG,CAAb,IAAkB,KAAKd,OAAL,CAAac,UAAU,GAAG,CAA1B,IAA+BlB,KAAxD,EAA+D;AAC7DkB,IAAAA,UAAU,IAAI,CAAd;AACD;;AAED,MAAIC,QAAQ,GAAG,KAAKf,OAAL,CAAaa,SAAS,GAAG,CAAzB,IAA8B,KAAKb,OAAL,CAAac,UAAU,GAAG,CAA1B,CAA7C,CApBsC,CAqBtC;AACA;AACA;;AACA,MAAIC,QAAQ,GAAG,OAAO,EAAtB,EAA0B;AACxB,WAAO,KAAP;AACD;;AAED,MAAIC,EAAE,GAAG,KAAKhB,OAAL,CAAaa,SAAb,IAA0B,KAAKb,OAAL,CAAac,UAAb,CAAnC;AACA,MAAIG,EAAE,GAAG,KAAKjB,OAAL,CAAaa,SAAS,GAAG,CAAzB,IAA8B,KAAKb,OAAL,CAAac,UAAU,GAAG,CAA1B,CAAvC;AACA,OAAKb,MAAL,GAAciB,IAAI,CAACC,KAAL,CAAWF,EAAX,EAAeD,EAAf,CAAd;AACA,OAAKd,gBAAL,GAAwBgB,IAAI,CAACE,IAAL,CAAUJ,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAzB,IAA+BF,QAAvD;AACA,SAAO,KAAKb,gBAAL,GAAwB,KAAKJ,YAApC;AACD,CAjCD;AAoCA;AACA;AACA;;;AACAL,YAAY,CAACU,SAAb,CAAuBkB,WAAvB,GAAqC,YAAW;AAC9C,SAAO,CAAC,KAAKvB,YAAL,GAAoB,KAAKI,gBAA1B,IAA8C,KAAKL,MAA1D;AACD,CAFD;AAKA;AACA;AACA;;;AACAJ,YAAY,CAACU,SAAb,CAAuBmB,QAAvB,GAAkC,YAAW;AAC3C,SAAO,KAAKrB,MAAZ;AACD,CAFD;;AAGA,eAAeR,YAAf","sourcesContent":["/**\n * @classdesc\n * Implementation of inertial deceleration for map movement.\n *\n * @constructor\n * @param {number} decay Rate of decay (must be negative).\n * @param {number} minVelocity Minimum velocity (pixels/millisecond).\n * @param {number} delay Delay to consider to calculate the kinetic\n *     initial values (milliseconds).\n * @struct\n * @api\n */\nvar _ol_Kinetic_ = function(decay, minVelocity, delay) {\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.decay_ = decay;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.minVelocity_ = minVelocity;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.delay_ = delay;\n\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n  this.points_ = [];\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.angle_ = 0;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.initialVelocity_ = 0;\n};\n\n\n/**\n * FIXME empty description for jsdoc\n */\n_ol_Kinetic_.prototype.begin = function() {\n  this.points_.length = 0;\n  this.angle_ = 0;\n  this.initialVelocity_ = 0;\n};\n\n\n/**\n * @param {number} x X.\n * @param {number} y Y.\n */\n_ol_Kinetic_.prototype.update = function(x, y) {\n  this.points_.push(x, y, Date.now());\n};\n\n\n/**\n * @return {boolean} Whether we should do kinetic animation.\n */\n_ol_Kinetic_.prototype.end = function() {\n  if (this.points_.length < 6) {\n    // at least 2 points are required (i.e. there must be at least 6 elements\n    // in the array)\n    return false;\n  }\n  var delay = Date.now() - this.delay_;\n  var lastIndex = this.points_.length - 3;\n  if (this.points_[lastIndex + 2] < delay) {\n    // the last tracked point is too old, which means that the user stopped\n    // panning before releasing the map\n    return false;\n  }\n\n  // get the first point which still falls into the delay time\n  var firstIndex = lastIndex - 3;\n  while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {\n    firstIndex -= 3;\n  }\n\n  var duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];\n  // we don't want a duration of 0 (divide by zero)\n  // we also make sure the user panned for a duration of at least one frame\n  // (1/60s) to compute sane displacement values\n  if (duration < 1000 / 60) {\n    return false;\n  }\n\n  var dx = this.points_[lastIndex] - this.points_[firstIndex];\n  var dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];\n  this.angle_ = Math.atan2(dy, dx);\n  this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;\n  return this.initialVelocity_ > this.minVelocity_;\n};\n\n\n/**\n * @return {number} Total distance travelled (pixels).\n */\n_ol_Kinetic_.prototype.getDistance = function() {\n  return (this.minVelocity_ - this.initialVelocity_) / this.decay_;\n};\n\n\n/**\n * @return {number} Angle of the kinetic panning animation (radians).\n */\n_ol_Kinetic_.prototype.getAngle = function() {\n  return this.angle_;\n};\nexport default _ol_Kinetic_;\n"]},"metadata":{},"sourceType":"module"}