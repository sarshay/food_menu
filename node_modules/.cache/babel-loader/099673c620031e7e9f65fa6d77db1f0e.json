{"ast":null,"code":"import _ol_PluginType_ from './plugintype.js';\nvar _ol_plugins_ = {};\n/**\n * The registry of map renderer plugins.\n * @type {Array<olx.MapRendererPlugin>}\n * @private\n */\n\n_ol_plugins_.mapRendererPlugins_ = [];\n/**\n * Get all registered map renderer plugins.\n * @return {Array<olx.MapRendererPlugin>} The registered map renderer plugins.\n */\n\n_ol_plugins_.getMapRendererPlugins = function () {\n  return _ol_plugins_.mapRendererPlugins_;\n};\n/**\n * The registry of layer renderer plugins.\n * @type {Array<olx.LayerRendererPlugin>}\n * @private\n */\n\n\n_ol_plugins_.layerRendererPlugins_ = [];\n/**\n * Get all registered layer renderer plugins.\n * @return {Array<olx.LayerRendererPlugin>} The registered layer renderer plugins.\n */\n\n_ol_plugins_.getLayerRendererPlugins = function () {\n  return _ol_plugins_.layerRendererPlugins_;\n};\n/**\n * Register a plugin.\n * @param {ol.PluginType} type The plugin type.\n * @param {*} plugin The plugin.\n */\n\n\n_ol_plugins_.register = function (type, plugin) {\n  var plugins;\n\n  switch (type) {\n    case _ol_PluginType_.MAP_RENDERER:\n      {\n        plugins = _ol_plugins_.mapRendererPlugins_;\n        plugins.push(\n        /** @type {olx.MapRendererPlugin} */\n        plugin);\n        break;\n      }\n\n    case _ol_PluginType_.LAYER_RENDERER:\n      {\n        plugins = _ol_plugins_.layerRendererPlugins_;\n        plugins.push(\n        /** @type {olx.LayerRendererPlugin} */\n        plugin);\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unsupported plugin type: ' + type);\n      }\n  }\n};\n/**\n * Register multiple plugins.\n * @param {ol.PluginType} type The plugin type.\n * @param {Array} plugins The plugins.\n */\n\n\n_ol_plugins_.registerMultiple = function (type, plugins) {\n  for (var i = 0, ii = plugins.length; i < ii; ++i) {\n    _ol_plugins_.register(type, plugins[i]);\n  }\n};\n\nexport default _ol_plugins_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/plugins.js"],"names":["_ol_PluginType_","_ol_plugins_","mapRendererPlugins_","getMapRendererPlugins","layerRendererPlugins_","getLayerRendererPlugins","register","type","plugin","plugins","MAP_RENDERER","push","LAYER_RENDERER","Error","registerMultiple","i","ii","length"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,iBAA5B;AACA,IAAIC,YAAY,GAAG,EAAnB;AAEA;AACA;AACA;AACA;AACA;;AACAA,YAAY,CAACC,mBAAb,GAAmC,EAAnC;AAGA;AACA;AACA;AACA;;AACAD,YAAY,CAACE,qBAAb,GAAqC,YAAW;AAC9C,SAAOF,YAAY,CAACC,mBAApB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAD,YAAY,CAACG,qBAAb,GAAqC,EAArC;AAGA;AACA;AACA;AACA;;AACAH,YAAY,CAACI,uBAAb,GAAuC,YAAW;AAChD,SAAOJ,YAAY,CAACG,qBAApB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAH,YAAY,CAACK,QAAb,GAAwB,UAASC,IAAT,EAAeC,MAAf,EAAuB;AAC7C,MAAIC,OAAJ;;AACA,UAAQF,IAAR;AACE,SAAKP,eAAe,CAACU,YAArB;AAAmC;AACjCD,QAAAA,OAAO,GAAGR,YAAY,CAACC,mBAAvB;AACAO,QAAAA,OAAO,CAACE,IAAR;AAAa;AAAsCH,QAAAA,MAAnD;AACA;AACD;;AACD,SAAKR,eAAe,CAACY,cAArB;AAAqC;AACnCH,QAAAA,OAAO,GAAGR,YAAY,CAACG,qBAAvB;AACAK,QAAAA,OAAO,CAACE,IAAR;AAAa;AAAwCH,QAAAA,MAArD;AACA;AACD;;AACD;AAAS;AACP,cAAM,IAAIK,KAAJ,CAAU,8BAA8BN,IAAxC,CAAN;AACD;AAbH;AAeD,CAjBD;AAoBA;AACA;AACA;AACA;AACA;;;AACAN,YAAY,CAACa,gBAAb,GAAgC,UAASP,IAAT,EAAeE,OAAf,EAAwB;AACtD,OAAK,IAAIM,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGP,OAAO,CAACQ,MAA7B,EAAqCF,CAAC,GAAGC,EAAzC,EAA6C,EAAED,CAA/C,EAAkD;AAChDd,IAAAA,YAAY,CAACK,QAAb,CAAsBC,IAAtB,EAA4BE,OAAO,CAACM,CAAD,CAAnC;AACD;AACF,CAJD;;AAKA,eAAed,YAAf","sourcesContent":["import _ol_PluginType_ from './plugintype.js';\nvar _ol_plugins_ = {};\n\n/**\n * The registry of map renderer plugins.\n * @type {Array<olx.MapRendererPlugin>}\n * @private\n */\n_ol_plugins_.mapRendererPlugins_ = [];\n\n\n/**\n * Get all registered map renderer plugins.\n * @return {Array<olx.MapRendererPlugin>} The registered map renderer plugins.\n */\n_ol_plugins_.getMapRendererPlugins = function() {\n  return _ol_plugins_.mapRendererPlugins_;\n};\n\n\n/**\n * The registry of layer renderer plugins.\n * @type {Array<olx.LayerRendererPlugin>}\n * @private\n */\n_ol_plugins_.layerRendererPlugins_ = [];\n\n\n/**\n * Get all registered layer renderer plugins.\n * @return {Array<olx.LayerRendererPlugin>} The registered layer renderer plugins.\n */\n_ol_plugins_.getLayerRendererPlugins = function() {\n  return _ol_plugins_.layerRendererPlugins_;\n};\n\n\n/**\n * Register a plugin.\n * @param {ol.PluginType} type The plugin type.\n * @param {*} plugin The plugin.\n */\n_ol_plugins_.register = function(type, plugin) {\n  var plugins;\n  switch (type) {\n    case _ol_PluginType_.MAP_RENDERER: {\n      plugins = _ol_plugins_.mapRendererPlugins_;\n      plugins.push(/** @type {olx.MapRendererPlugin} */ (plugin));\n      break;\n    }\n    case _ol_PluginType_.LAYER_RENDERER: {\n      plugins = _ol_plugins_.layerRendererPlugins_;\n      plugins.push(/** @type {olx.LayerRendererPlugin} */ (plugin));\n      break;\n    }\n    default: {\n      throw new Error('Unsupported plugin type: ' + type);\n    }\n  }\n};\n\n\n/**\n * Register multiple plugins.\n * @param {ol.PluginType} type The plugin type.\n * @param {Array} plugins The plugins.\n */\n_ol_plugins_.registerMultiple = function(type, plugins) {\n  for (var i = 0, ii = plugins.length; i < ii; ++i) {\n    _ol_plugins_.register(type, plugins[i]);\n  }\n};\nexport default _ol_plugins_;\n"]},"metadata":{},"sourceType":"module"}