{"ast":null,"code":"import _ol_events_ from '../events.js';\nimport _ol_events_EventType_ from '../events/eventtype.js';\nimport _ol_ from '../index.js';\nimport _ol_Object_ from '../object.js';\nimport _ol_layer_Base_ from '../layer/base.js';\nimport _ol_layer_Property_ from '../layer/property.js';\nimport _ol_obj_ from '../obj.js';\nimport _ol_render_EventType_ from '../render/eventtype.js';\nimport _ol_source_State_ from '../source/state.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link ol.Map#addLayer}. Components\n * like {@link ol.interaction.Select} use unmanaged layers internally. These\n * unmanaged layers are associated with the map using\n * {@link ol.layer.Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * @constructor\n * @abstract\n * @extends {ol.layer.Base}\n * @fires ol.render.Event\n * @param {olx.layer.LayerOptions} options Layer options.\n * @api\n */\n\nvar _ol_layer_Layer_ = function (options) {\n  var baseOptions = _ol_obj_.assign({}, options);\n\n  delete baseOptions.source;\n\n  _ol_layer_Base_.call(this,\n  /** @type {olx.layer.BaseOptions} */\n  baseOptions);\n  /**\n   * @private\n   * @type {?ol.EventsKey}\n   */\n\n\n  this.mapPrecomposeKey_ = null;\n  /**\n   * @private\n   * @type {?ol.EventsKey}\n   */\n\n  this.mapRenderKey_ = null;\n  /**\n   * @private\n   * @type {?ol.EventsKey}\n   */\n\n  this.sourceChangeKey_ = null;\n\n  if (options.map) {\n    this.setMap(options.map);\n  }\n\n  _ol_events_.listen(this, _ol_Object_.getChangeEventType(_ol_layer_Property_.SOURCE), this.handleSourcePropertyChange_, this);\n\n  var source = options.source ? options.source : null;\n  this.setSource(source);\n};\n\n_ol_.inherits(_ol_layer_Layer_, _ol_layer_Base_);\n/**\n * Return `true` if the layer is visible, and if the passed resolution is\n * between the layer's minResolution and maxResolution. The comparison is\n * inclusive for `minResolution` and exclusive for `maxResolution`.\n * @param {ol.LayerState} layerState Layer state.\n * @param {number} resolution Resolution.\n * @return {boolean} The layer is visible at the given resolution.\n */\n\n\n_ol_layer_Layer_.visibleAtResolution = function (layerState, resolution) {\n  return layerState.visible && resolution >= layerState.minResolution && resolution < layerState.maxResolution;\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_layer_Layer_.prototype.getLayersArray = function (opt_array) {\n  var array = opt_array ? opt_array : [];\n  array.push(this);\n  return array;\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_layer_Layer_.prototype.getLayerStatesArray = function (opt_states) {\n  var states = opt_states ? opt_states : [];\n  states.push(this.getLayerState());\n  return states;\n};\n/**\n * Get the layer source.\n * @return {ol.source.Source} The layer source (or `null` if not yet set).\n * @observable\n * @api\n */\n\n\n_ol_layer_Layer_.prototype.getSource = function () {\n  var source = this.get(_ol_layer_Property_.SOURCE);\n  return (\n    /** @type {ol.source.Source} */\n    source || null\n  );\n};\n/**\n  * @inheritDoc\n  */\n\n\n_ol_layer_Layer_.prototype.getSourceState = function () {\n  var source = this.getSource();\n  return !source ? _ol_source_State_.UNDEFINED : source.getState();\n};\n/**\n * @private\n */\n\n\n_ol_layer_Layer_.prototype.handleSourceChange_ = function () {\n  this.changed();\n};\n/**\n * @private\n */\n\n\n_ol_layer_Layer_.prototype.handleSourcePropertyChange_ = function () {\n  if (this.sourceChangeKey_) {\n    _ol_events_.unlistenByKey(this.sourceChangeKey_);\n\n    this.sourceChangeKey_ = null;\n  }\n\n  var source = this.getSource();\n\n  if (source) {\n    this.sourceChangeKey_ = _ol_events_.listen(source, _ol_events_EventType_.CHANGE, this.handleSourceChange_, this);\n  }\n\n  this.changed();\n};\n/**\n * Sets the layer to be rendered on top of other layers on a map. The map will\n * not manage this layer in its layers collection, and the callback in\n * {@link ol.Map#forEachLayerAtPixel} will receive `null` as layer. This\n * is useful for temporary layers. To remove an unmanaged layer from the map,\n * use `#setMap(null)`.\n *\n * To add the layer to a map and have it managed by the map, use\n * {@link ol.Map#addLayer} instead.\n * @param {ol.PluggableMap} map Map.\n * @api\n */\n\n\n_ol_layer_Layer_.prototype.setMap = function (map) {\n  if (this.mapPrecomposeKey_) {\n    _ol_events_.unlistenByKey(this.mapPrecomposeKey_);\n\n    this.mapPrecomposeKey_ = null;\n  }\n\n  if (!map) {\n    this.changed();\n  }\n\n  if (this.mapRenderKey_) {\n    _ol_events_.unlistenByKey(this.mapRenderKey_);\n\n    this.mapRenderKey_ = null;\n  }\n\n  if (map) {\n    this.mapPrecomposeKey_ = _ol_events_.listen(map, _ol_render_EventType_.PRECOMPOSE, function (evt) {\n      var layerState = this.getLayerState();\n      layerState.managed = false;\n      layerState.zIndex = Infinity;\n      evt.frameState.layerStatesArray.push(layerState);\n      evt.frameState.layerStates[_ol_.getUid(this)] = layerState;\n    }, this);\n    this.mapRenderKey_ = _ol_events_.listen(this, _ol_events_EventType_.CHANGE, map.render, map);\n    this.changed();\n  }\n};\n/**\n * Set the layer source.\n * @param {ol.source.Source} source The layer source.\n * @observable\n * @api\n */\n\n\n_ol_layer_Layer_.prototype.setSource = function (source) {\n  this.set(_ol_layer_Property_.SOURCE, source);\n};\n\nexport default _ol_layer_Layer_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/layer/layer.js"],"names":["_ol_events_","_ol_events_EventType_","_ol_","_ol_Object_","_ol_layer_Base_","_ol_layer_Property_","_ol_obj_","_ol_render_EventType_","_ol_source_State_","_ol_layer_Layer_","options","baseOptions","assign","source","call","mapPrecomposeKey_","mapRenderKey_","sourceChangeKey_","map","setMap","listen","getChangeEventType","SOURCE","handleSourcePropertyChange_","setSource","inherits","visibleAtResolution","layerState","resolution","visible","minResolution","maxResolution","prototype","getLayersArray","opt_array","array","push","getLayerStatesArray","opt_states","states","getLayerState","getSource","get","getSourceState","UNDEFINED","getState","handleSourceChange_","changed","unlistenByKey","CHANGE","PRECOMPOSE","evt","managed","zIndex","Infinity","frameState","layerStatesArray","layerStates","getUid","render","set"],"mappings":"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","sourcesContent":["import _ol_events_ from '../events.js';\nimport _ol_events_EventType_ from '../events/eventtype.js';\nimport _ol_ from '../index.js';\nimport _ol_Object_ from '../object.js';\nimport _ol_layer_Base_ from '../layer/base.js';\nimport _ol_layer_Property_ from '../layer/property.js';\nimport _ol_obj_ from '../obj.js';\nimport _ol_render_EventType_ from '../render/eventtype.js';\nimport _ol_source_State_ from '../source/state.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link ol.Map#addLayer}. Components\n * like {@link ol.interaction.Select} use unmanaged layers internally. These\n * unmanaged layers are associated with the map using\n * {@link ol.layer.Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * @constructor\n * @abstract\n * @extends {ol.layer.Base}\n * @fires ol.render.Event\n * @param {olx.layer.LayerOptions} options Layer options.\n * @api\n */\nvar _ol_layer_Layer_ = function(options) {\n\n  var baseOptions = _ol_obj_.assign({}, options);\n  delete baseOptions.source;\n\n  _ol_layer_Base_.call(this, /** @type {olx.layer.BaseOptions} */ (baseOptions));\n\n  /**\n   * @private\n   * @type {?ol.EventsKey}\n   */\n  this.mapPrecomposeKey_ = null;\n\n  /**\n   * @private\n   * @type {?ol.EventsKey}\n   */\n  this.mapRenderKey_ = null;\n\n  /**\n   * @private\n   * @type {?ol.EventsKey}\n   */\n  this.sourceChangeKey_ = null;\n\n  if (options.map) {\n    this.setMap(options.map);\n  }\n\n  _ol_events_.listen(this,\n      _ol_Object_.getChangeEventType(_ol_layer_Property_.SOURCE),\n      this.handleSourcePropertyChange_, this);\n\n  var source = options.source ? options.source : null;\n  this.setSource(source);\n};\n\n_ol_.inherits(_ol_layer_Layer_, _ol_layer_Base_);\n\n\n/**\n * Return `true` if the layer is visible, and if the passed resolution is\n * between the layer's minResolution and maxResolution. The comparison is\n * inclusive for `minResolution` and exclusive for `maxResolution`.\n * @param {ol.LayerState} layerState Layer state.\n * @param {number} resolution Resolution.\n * @return {boolean} The layer is visible at the given resolution.\n */\n_ol_layer_Layer_.visibleAtResolution = function(layerState, resolution) {\n  return layerState.visible && resolution >= layerState.minResolution &&\n      resolution < layerState.maxResolution;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_layer_Layer_.prototype.getLayersArray = function(opt_array) {\n  var array = opt_array ? opt_array : [];\n  array.push(this);\n  return array;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_layer_Layer_.prototype.getLayerStatesArray = function(opt_states) {\n  var states = opt_states ? opt_states : [];\n  states.push(this.getLayerState());\n  return states;\n};\n\n\n/**\n * Get the layer source.\n * @return {ol.source.Source} The layer source (or `null` if not yet set).\n * @observable\n * @api\n */\n_ol_layer_Layer_.prototype.getSource = function() {\n  var source = this.get(_ol_layer_Property_.SOURCE);\n  return /** @type {ol.source.Source} */ (source) || null;\n};\n\n\n/**\n  * @inheritDoc\n  */\n_ol_layer_Layer_.prototype.getSourceState = function() {\n  var source = this.getSource();\n  return !source ? _ol_source_State_.UNDEFINED : source.getState();\n};\n\n\n/**\n * @private\n */\n_ol_layer_Layer_.prototype.handleSourceChange_ = function() {\n  this.changed();\n};\n\n\n/**\n * @private\n */\n_ol_layer_Layer_.prototype.handleSourcePropertyChange_ = function() {\n  if (this.sourceChangeKey_) {\n    _ol_events_.unlistenByKey(this.sourceChangeKey_);\n    this.sourceChangeKey_ = null;\n  }\n  var source = this.getSource();\n  if (source) {\n    this.sourceChangeKey_ = _ol_events_.listen(source,\n        _ol_events_EventType_.CHANGE, this.handleSourceChange_, this);\n  }\n  this.changed();\n};\n\n\n/**\n * Sets the layer to be rendered on top of other layers on a map. The map will\n * not manage this layer in its layers collection, and the callback in\n * {@link ol.Map#forEachLayerAtPixel} will receive `null` as layer. This\n * is useful for temporary layers. To remove an unmanaged layer from the map,\n * use `#setMap(null)`.\n *\n * To add the layer to a map and have it managed by the map, use\n * {@link ol.Map#addLayer} instead.\n * @param {ol.PluggableMap} map Map.\n * @api\n */\n_ol_layer_Layer_.prototype.setMap = function(map) {\n  if (this.mapPrecomposeKey_) {\n    _ol_events_.unlistenByKey(this.mapPrecomposeKey_);\n    this.mapPrecomposeKey_ = null;\n  }\n  if (!map) {\n    this.changed();\n  }\n  if (this.mapRenderKey_) {\n    _ol_events_.unlistenByKey(this.mapRenderKey_);\n    this.mapRenderKey_ = null;\n  }\n  if (map) {\n    this.mapPrecomposeKey_ = _ol_events_.listen(\n        map, _ol_render_EventType_.PRECOMPOSE, function(evt) {\n          var layerState = this.getLayerState();\n          layerState.managed = false;\n          layerState.zIndex = Infinity;\n          evt.frameState.layerStatesArray.push(layerState);\n          evt.frameState.layerStates[_ol_.getUid(this)] = layerState;\n        }, this);\n    this.mapRenderKey_ = _ol_events_.listen(\n        this, _ol_events_EventType_.CHANGE, map.render, map);\n    this.changed();\n  }\n};\n\n\n/**\n * Set the layer source.\n * @param {ol.source.Source} source The layer source.\n * @observable\n * @api\n */\n_ol_layer_Layer_.prototype.setSource = function(source) {\n  this.set(_ol_layer_Property_.SOURCE, source);\n};\nexport default _ol_layer_Layer_;\n"]},"metadata":{},"sourceType":"module"}