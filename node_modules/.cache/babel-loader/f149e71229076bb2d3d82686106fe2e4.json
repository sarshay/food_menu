{"ast":null,"code":"import _ol_array_ from '../../array.js';\nimport _ol_geom_flat_contains_ from '../flat/contains.js';\nvar _ol_geom_flat_interiorpoint_ = {};\n/**\n * Calculates a point that is likely to lie in the interior of the linear rings.\n * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array.<number>} flatCenters Flat centers.\n * @param {number} flatCentersOffset Flat center offset.\n * @param {Array.<number>=} opt_dest Destination.\n * @return {Array.<number>} Destination point as XYM coordinate, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\n\n_ol_geom_flat_interiorpoint_.linearRings = function (flatCoordinates, offset, ends, stride, flatCenters, flatCentersOffset, opt_dest) {\n  var i, ii, x, x1, x2, y1, y2;\n  var y = flatCenters[flatCentersOffset + 1];\n  /** @type {Array.<number>} */\n\n  var intersections = []; // Calculate intersections with the horizontal line\n\n  for (var r = 0, rr = ends.length; r < rr; ++r) {\n    var end = ends[r];\n    x1 = flatCoordinates[end - stride];\n    y1 = flatCoordinates[end - stride + 1];\n\n    for (i = offset; i < end; i += stride) {\n      x2 = flatCoordinates[i];\n      y2 = flatCoordinates[i + 1];\n\n      if (y <= y1 && y2 <= y || y1 <= y && y <= y2) {\n        x = (y - y1) / (y2 - y1) * (x2 - x1) + x1;\n        intersections.push(x);\n      }\n\n      x1 = x2;\n      y1 = y2;\n    }\n  } // Find the longest segment of the horizontal line that has its center point\n  // inside the linear ring.\n\n\n  var pointX = NaN;\n  var maxSegmentLength = -Infinity;\n  intersections.sort(_ol_array_.numberSafeCompareFunction);\n  x1 = intersections[0];\n\n  for (i = 1, ii = intersections.length; i < ii; ++i) {\n    x2 = intersections[i];\n    var segmentLength = Math.abs(x2 - x1);\n\n    if (segmentLength > maxSegmentLength) {\n      x = (x1 + x2) / 2;\n\n      if (_ol_geom_flat_contains_.linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n        pointX = x;\n        maxSegmentLength = segmentLength;\n      }\n    }\n\n    x1 = x2;\n  }\n\n  if (isNaN(pointX)) {\n    // There is no horizontal line that has its center point inside the linear\n    // ring.  Use the center of the the linear ring's extent.\n    pointX = flatCenters[flatCentersOffset];\n  }\n\n  if (opt_dest) {\n    opt_dest.push(pointX, y, maxSegmentLength);\n    return opt_dest;\n  } else {\n    return [pointX, y, maxSegmentLength];\n  }\n};\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<Array.<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {Array.<number>} flatCenters Flat centers.\n * @return {Array.<number>} Interior points as XYM coordinates, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\n\n\n_ol_geom_flat_interiorpoint_.linearRingss = function (flatCoordinates, offset, endss, stride, flatCenters) {\n  var interiorPoints = [];\n  var i, ii;\n\n  for (i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    interiorPoints = _ol_geom_flat_interiorpoint_.linearRings(flatCoordinates, offset, ends, stride, flatCenters, 2 * i, interiorPoints);\n    offset = ends[ends.length - 1];\n  }\n\n  return interiorPoints;\n};\n\nexport default _ol_geom_flat_interiorpoint_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/geom/flat/interiorpoint.js"],"names":["_ol_array_","_ol_geom_flat_contains_","_ol_geom_flat_interiorpoint_","linearRings","flatCoordinates","offset","ends","stride","flatCenters","flatCentersOffset","opt_dest","i","ii","x","x1","x2","y1","y2","y","intersections","r","rr","length","end","push","pointX","NaN","maxSegmentLength","Infinity","sort","numberSafeCompareFunction","segmentLength","Math","abs","linearRingsContainsXY","isNaN","linearRingss","endss","interiorPoints"],"mappings":"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","sourcesContent":["import _ol_array_ from '../../array.js';\nimport _ol_geom_flat_contains_ from '../flat/contains.js';\nvar _ol_geom_flat_interiorpoint_ = {};\n\n\n/**\n * Calculates a point that is likely to lie in the interior of the linear rings.\n * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array.<number>} flatCenters Flat centers.\n * @param {number} flatCentersOffset Flat center offset.\n * @param {Array.<number>=} opt_dest Destination.\n * @return {Array.<number>} Destination point as XYM coordinate, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\n_ol_geom_flat_interiorpoint_.linearRings = function(flatCoordinates, offset,\n    ends, stride, flatCenters, flatCentersOffset, opt_dest) {\n  var i, ii, x, x1, x2, y1, y2;\n  var y = flatCenters[flatCentersOffset + 1];\n  /** @type {Array.<number>} */\n  var intersections = [];\n  // Calculate intersections with the horizontal line\n  for (var r = 0, rr = ends.length; r < rr; ++r) {\n    var end = ends[r];\n    x1 = flatCoordinates[end - stride];\n    y1 = flatCoordinates[end - stride + 1];\n    for (i = offset; i < end; i += stride) {\n      x2 = flatCoordinates[i];\n      y2 = flatCoordinates[i + 1];\n      if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {\n        x = (y - y1) / (y2 - y1) * (x2 - x1) + x1;\n        intersections.push(x);\n      }\n      x1 = x2;\n      y1 = y2;\n    }\n  }\n  // Find the longest segment of the horizontal line that has its center point\n  // inside the linear ring.\n  var pointX = NaN;\n  var maxSegmentLength = -Infinity;\n  intersections.sort(_ol_array_.numberSafeCompareFunction);\n  x1 = intersections[0];\n  for (i = 1, ii = intersections.length; i < ii; ++i) {\n    x2 = intersections[i];\n    var segmentLength = Math.abs(x2 - x1);\n    if (segmentLength > maxSegmentLength) {\n      x = (x1 + x2) / 2;\n      if (_ol_geom_flat_contains_.linearRingsContainsXY(\n          flatCoordinates, offset, ends, stride, x, y)) {\n        pointX = x;\n        maxSegmentLength = segmentLength;\n      }\n    }\n    x1 = x2;\n  }\n  if (isNaN(pointX)) {\n    // There is no horizontal line that has its center point inside the linear\n    // ring.  Use the center of the the linear ring's extent.\n    pointX = flatCenters[flatCentersOffset];\n  }\n  if (opt_dest) {\n    opt_dest.push(pointX, y, maxSegmentLength);\n    return opt_dest;\n  } else {\n    return [pointX, y, maxSegmentLength];\n  }\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<Array.<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {Array.<number>} flatCenters Flat centers.\n * @return {Array.<number>} Interior points as XYM coordinates, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\n_ol_geom_flat_interiorpoint_.linearRingss = function(flatCoordinates, offset, endss, stride, flatCenters) {\n  var interiorPoints = [];\n  var i, ii;\n  for (i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    interiorPoints = _ol_geom_flat_interiorpoint_.linearRings(flatCoordinates,\n        offset, ends, stride, flatCenters, 2 * i, interiorPoints);\n    offset = ends[ends.length - 1];\n  }\n  return interiorPoints;\n};\nexport default _ol_geom_flat_interiorpoint_;\n"]},"metadata":{},"sourceType":"module"}