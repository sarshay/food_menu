{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_ext_rbush_ from 'rbush';\nimport _ol_extent_ from '../extent.js';\nimport _ol_obj_ from '../obj.js';\n/**\n * Wrapper around the RBush by Vladimir Agafonkin.\n *\n * @constructor\n * @param {number=} opt_maxEntries Max entries.\n * @see https://github.com/mourner/rbush\n * @struct\n * @template T\n */\n\nvar _ol_structs_RBush_ = function (opt_maxEntries) {\n  /**\n   * @private\n   */\n  this.rbush_ = _ol_ext_rbush_(opt_maxEntries);\n  /**\n   * A mapping between the objects added to this rbush wrapper\n   * and the objects that are actually added to the internal rbush.\n   * @private\n   * @type {Object.<number, ol.RBushEntry>}\n   */\n\n  this.items_ = {};\n};\n/**\n * Insert a value into the RBush.\n * @param {ol.Extent} extent Extent.\n * @param {T} value Value.\n */\n\n\n_ol_structs_RBush_.prototype.insert = function (extent, value) {\n  /** @type {ol.RBushEntry} */\n  var item = {\n    minX: extent[0],\n    minY: extent[1],\n    maxX: extent[2],\n    maxY: extent[3],\n    value: value\n  };\n  this.rbush_.insert(item);\n  this.items_[_ol_.getUid(value)] = item;\n};\n/**\n * Bulk-insert values into the RBush.\n * @param {Array.<ol.Extent>} extents Extents.\n * @param {Array.<T>} values Values.\n */\n\n\n_ol_structs_RBush_.prototype.load = function (extents, values) {\n  var items = new Array(values.length);\n\n  for (var i = 0, l = values.length; i < l; i++) {\n    var extent = extents[i];\n    var value = values[i];\n    /** @type {ol.RBushEntry} */\n\n    var item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n    items[i] = item;\n    this.items_[_ol_.getUid(value)] = item;\n  }\n\n  this.rbush_.load(items);\n};\n/**\n * Remove a value from the RBush.\n * @param {T} value Value.\n * @return {boolean} Removed.\n */\n\n\n_ol_structs_RBush_.prototype.remove = function (value) {\n  var uid = _ol_.getUid(value); // get the object in which the value was wrapped when adding to the\n  // internal rbush. then use that object to do the removal.\n\n\n  var item = this.items_[uid];\n  delete this.items_[uid];\n  return this.rbush_.remove(item) !== null;\n};\n/**\n * Update the extent of a value in the RBush.\n * @param {ol.Extent} extent Extent.\n * @param {T} value Value.\n */\n\n\n_ol_structs_RBush_.prototype.update = function (extent, value) {\n  var item = this.items_[_ol_.getUid(value)];\n\n  var bbox = [item.minX, item.minY, item.maxX, item.maxY];\n\n  if (!_ol_extent_.equals(bbox, extent)) {\n    this.remove(value);\n    this.insert(extent, value);\n  }\n};\n/**\n * Return all values in the RBush.\n * @return {Array.<T>} All.\n */\n\n\n_ol_structs_RBush_.prototype.getAll = function () {\n  var items = this.rbush_.all();\n  return items.map(function (item) {\n    return item.value;\n  });\n};\n/**\n * Return all values in the given extent.\n * @param {ol.Extent} extent Extent.\n * @return {Array.<T>} All in extent.\n */\n\n\n_ol_structs_RBush_.prototype.getInExtent = function (extent) {\n  /** @type {ol.RBushEntry} */\n  var bbox = {\n    minX: extent[0],\n    minY: extent[1],\n    maxX: extent[2],\n    maxY: extent[3]\n  };\n  var items = this.rbush_.search(bbox);\n  return items.map(function (item) {\n    return item.value;\n  });\n};\n/**\n * Calls a callback function with each value in the tree.\n * If the callback returns a truthy value, this value is returned without\n * checking the rest of the tree.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @return {*} Callback return value.\n * @template S\n */\n\n\n_ol_structs_RBush_.prototype.forEach = function (callback, opt_this) {\n  return this.forEach_(this.getAll(), callback, opt_this);\n};\n/**\n * Calls a callback function with each value in the provided extent.\n * @param {ol.Extent} extent Extent.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @return {*} Callback return value.\n * @template S\n */\n\n\n_ol_structs_RBush_.prototype.forEachInExtent = function (extent, callback, opt_this) {\n  return this.forEach_(this.getInExtent(extent), callback, opt_this);\n};\n/**\n * @param {Array.<T>} values Values.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @private\n * @return {*} Callback return value.\n * @template S\n */\n\n\n_ol_structs_RBush_.prototype.forEach_ = function (values, callback, opt_this) {\n  var result;\n\n  for (var i = 0, l = values.length; i < l; i++) {\n    result = callback.call(opt_this, values[i]);\n\n    if (result) {\n      return result;\n    }\n  }\n\n  return result;\n};\n/**\n * @return {boolean} Is empty.\n */\n\n\n_ol_structs_RBush_.prototype.isEmpty = function () {\n  return _ol_obj_.isEmpty(this.items_);\n};\n/**\n * Remove all values from the RBush.\n */\n\n\n_ol_structs_RBush_.prototype.clear = function () {\n  this.rbush_.clear();\n  this.items_ = {};\n};\n/**\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n\n\n_ol_structs_RBush_.prototype.getExtent = function (opt_extent) {\n  // FIXME add getExtent() to rbush\n  var data = this.rbush_.data;\n  return _ol_extent_.createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n};\n/**\n * @param {ol.structs.RBush} rbush R-Tree.\n */\n\n\n_ol_structs_RBush_.prototype.concat = function (rbush) {\n  this.rbush_.load(rbush.rbush_.all());\n\n  for (var i in rbush.items_) {\n    this.items_[i | 0] = rbush.items_[i | 0];\n  }\n};\n\nexport default _ol_structs_RBush_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/structs/rbush.js"],"names":["_ol_","_ol_ext_rbush_","_ol_extent_","_ol_obj_","_ol_structs_RBush_","opt_maxEntries","rbush_","items_","prototype","insert","extent","value","item","minX","minY","maxX","maxY","getUid","load","extents","values","items","Array","length","i","l","remove","uid","update","bbox","equals","getAll","all","map","getInExtent","search","forEach","callback","opt_this","forEach_","forEachInExtent","result","call","isEmpty","clear","getExtent","opt_extent","data","createOrUpdate","concat","rbush"],"mappings":"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","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_ext_rbush_ from 'rbush';\nimport _ol_extent_ from '../extent.js';\nimport _ol_obj_ from '../obj.js';\n\n/**\n * Wrapper around the RBush by Vladimir Agafonkin.\n *\n * @constructor\n * @param {number=} opt_maxEntries Max entries.\n * @see https://github.com/mourner/rbush\n * @struct\n * @template T\n */\nvar _ol_structs_RBush_ = function(opt_maxEntries) {\n\n  /**\n   * @private\n   */\n  this.rbush_ = _ol_ext_rbush_(opt_maxEntries);\n\n  /**\n   * A mapping between the objects added to this rbush wrapper\n   * and the objects that are actually added to the internal rbush.\n   * @private\n   * @type {Object.<number, ol.RBushEntry>}\n   */\n  this.items_ = {};\n\n};\n\n\n/**\n * Insert a value into the RBush.\n * @param {ol.Extent} extent Extent.\n * @param {T} value Value.\n */\n_ol_structs_RBush_.prototype.insert = function(extent, value) {\n  /** @type {ol.RBushEntry} */\n  var item = {\n    minX: extent[0],\n    minY: extent[1],\n    maxX: extent[2],\n    maxY: extent[3],\n    value: value\n  };\n\n  this.rbush_.insert(item);\n  this.items_[_ol_.getUid(value)] = item;\n};\n\n\n/**\n * Bulk-insert values into the RBush.\n * @param {Array.<ol.Extent>} extents Extents.\n * @param {Array.<T>} values Values.\n */\n_ol_structs_RBush_.prototype.load = function(extents, values) {\n  var items = new Array(values.length);\n  for (var i = 0, l = values.length; i < l; i++) {\n    var extent = extents[i];\n    var value = values[i];\n\n    /** @type {ol.RBushEntry} */\n    var item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n    items[i] = item;\n    this.items_[_ol_.getUid(value)] = item;\n  }\n  this.rbush_.load(items);\n};\n\n\n/**\n * Remove a value from the RBush.\n * @param {T} value Value.\n * @return {boolean} Removed.\n */\n_ol_structs_RBush_.prototype.remove = function(value) {\n  var uid = _ol_.getUid(value);\n\n  // get the object in which the value was wrapped when adding to the\n  // internal rbush. then use that object to do the removal.\n  var item = this.items_[uid];\n  delete this.items_[uid];\n  return this.rbush_.remove(item) !== null;\n};\n\n\n/**\n * Update the extent of a value in the RBush.\n * @param {ol.Extent} extent Extent.\n * @param {T} value Value.\n */\n_ol_structs_RBush_.prototype.update = function(extent, value) {\n  var item = this.items_[_ol_.getUid(value)];\n  var bbox = [item.minX, item.minY, item.maxX, item.maxY];\n  if (!_ol_extent_.equals(bbox, extent)) {\n    this.remove(value);\n    this.insert(extent, value);\n  }\n};\n\n\n/**\n * Return all values in the RBush.\n * @return {Array.<T>} All.\n */\n_ol_structs_RBush_.prototype.getAll = function() {\n  var items = this.rbush_.all();\n  return items.map(function(item) {\n    return item.value;\n  });\n};\n\n\n/**\n * Return all values in the given extent.\n * @param {ol.Extent} extent Extent.\n * @return {Array.<T>} All in extent.\n */\n_ol_structs_RBush_.prototype.getInExtent = function(extent) {\n  /** @type {ol.RBushEntry} */\n  var bbox = {\n    minX: extent[0],\n    minY: extent[1],\n    maxX: extent[2],\n    maxY: extent[3]\n  };\n  var items = this.rbush_.search(bbox);\n  return items.map(function(item) {\n    return item.value;\n  });\n};\n\n\n/**\n * Calls a callback function with each value in the tree.\n * If the callback returns a truthy value, this value is returned without\n * checking the rest of the tree.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @return {*} Callback return value.\n * @template S\n */\n_ol_structs_RBush_.prototype.forEach = function(callback, opt_this) {\n  return this.forEach_(this.getAll(), callback, opt_this);\n};\n\n\n/**\n * Calls a callback function with each value in the provided extent.\n * @param {ol.Extent} extent Extent.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @return {*} Callback return value.\n * @template S\n */\n_ol_structs_RBush_.prototype.forEachInExtent = function(extent, callback, opt_this) {\n  return this.forEach_(this.getInExtent(extent), callback, opt_this);\n};\n\n\n/**\n * @param {Array.<T>} values Values.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @private\n * @return {*} Callback return value.\n * @template S\n */\n_ol_structs_RBush_.prototype.forEach_ = function(values, callback, opt_this) {\n  var result;\n  for (var i = 0, l = values.length; i < l; i++) {\n    result = callback.call(opt_this, values[i]);\n    if (result) {\n      return result;\n    }\n  }\n  return result;\n};\n\n\n/**\n * @return {boolean} Is empty.\n */\n_ol_structs_RBush_.prototype.isEmpty = function() {\n  return _ol_obj_.isEmpty(this.items_);\n};\n\n\n/**\n * Remove all values from the RBush.\n */\n_ol_structs_RBush_.prototype.clear = function() {\n  this.rbush_.clear();\n  this.items_ = {};\n};\n\n\n/**\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_structs_RBush_.prototype.getExtent = function(opt_extent) {\n  // FIXME add getExtent() to rbush\n  var data = this.rbush_.data;\n  return _ol_extent_.createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n};\n\n\n/**\n * @param {ol.structs.RBush} rbush R-Tree.\n */\n_ol_structs_RBush_.prototype.concat = function(rbush) {\n  this.rbush_.load(rbush.rbush_.all());\n  for (var i in rbush.items_) {\n    this.items_[i | 0] = rbush.items_[i | 0];\n  }\n};\nexport default _ol_structs_RBush_;\n"]},"metadata":{},"sourceType":"module"}