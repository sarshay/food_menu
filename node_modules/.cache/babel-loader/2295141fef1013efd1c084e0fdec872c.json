{"ast":null,"code":"import _ol_asserts_ from '../asserts.js';\nimport _ol_obj_ from '../obj.js';\n/**\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * @see http://closure-library.googlecode.com/svn/docs/closure_goog_structs_heap.js.source.html\n * @see http://hg.python.org/cpython/file/2.7/Lib/heapq.py\n *\n * @constructor\n * @param {function(T): number} priorityFunction Priority function.\n * @param {function(T): string} keyFunction Key function.\n * @struct\n * @template T\n */\n\nvar _ol_structs_PriorityQueue_ = function (priorityFunction, keyFunction) {\n  /**\n   * @type {function(T): number}\n   * @private\n   */\n  this.priorityFunction_ = priorityFunction;\n  /**\n   * @type {function(T): string}\n   * @private\n   */\n\n  this.keyFunction_ = keyFunction;\n  /**\n   * @type {Array.<T>}\n   * @private\n   */\n\n  this.elements_ = [];\n  /**\n   * @type {Array.<number>}\n   * @private\n   */\n\n  this.priorities_ = [];\n  /**\n   * @type {Object.<string, boolean>}\n   * @private\n   */\n\n  this.queuedElements_ = {};\n};\n/**\n * @const\n * @type {number}\n */\n\n\n_ol_structs_PriorityQueue_.DROP = Infinity;\n/**\n * FIXME empty description for jsdoc\n */\n\n_ol_structs_PriorityQueue_.prototype.clear = function () {\n  this.elements_.length = 0;\n  this.priorities_.length = 0;\n\n  _ol_obj_.clear(this.queuedElements_);\n};\n/**\n * Remove and return the highest-priority element. O(log N).\n * @return {T} Element.\n */\n\n\n_ol_structs_PriorityQueue_.prototype.dequeue = function () {\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var element = elements[0];\n\n  if (elements.length == 1) {\n    elements.length = 0;\n    priorities.length = 0;\n  } else {\n    elements[0] = elements.pop();\n    priorities[0] = priorities.pop();\n    this.siftUp_(0);\n  }\n\n  var elementKey = this.keyFunction_(element);\n  delete this.queuedElements_[elementKey];\n  return element;\n};\n/**\n * Enqueue an element. O(log N).\n * @param {T} element Element.\n * @return {boolean} The element was added to the queue.\n */\n\n\n_ol_structs_PriorityQueue_.prototype.enqueue = function (element) {\n  _ol_asserts_.assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue\n\n\n  var priority = this.priorityFunction_(element);\n\n  if (priority != _ol_structs_PriorityQueue_.DROP) {\n    this.elements_.push(element);\n    this.priorities_.push(priority);\n    this.queuedElements_[this.keyFunction_(element)] = true;\n    this.siftDown_(0, this.elements_.length - 1);\n    return true;\n  }\n\n  return false;\n};\n/**\n * @return {number} Count.\n */\n\n\n_ol_structs_PriorityQueue_.prototype.getCount = function () {\n  return this.elements_.length;\n};\n/**\n * Gets the index of the left child of the node at the given index.\n * @param {number} index The index of the node to get the left child for.\n * @return {number} The index of the left child.\n * @private\n */\n\n\n_ol_structs_PriorityQueue_.prototype.getLeftChildIndex_ = function (index) {\n  return index * 2 + 1;\n};\n/**\n * Gets the index of the right child of the node at the given index.\n * @param {number} index The index of the node to get the right child for.\n * @return {number} The index of the right child.\n * @private\n */\n\n\n_ol_structs_PriorityQueue_.prototype.getRightChildIndex_ = function (index) {\n  return index * 2 + 2;\n};\n/**\n * Gets the index of the parent of the node at the given index.\n * @param {number} index The index of the node to get the parent for.\n * @return {number} The index of the parent.\n * @private\n */\n\n\n_ol_structs_PriorityQueue_.prototype.getParentIndex_ = function (index) {\n  return index - 1 >> 1;\n};\n/**\n * Make this a heap. O(N).\n * @private\n */\n\n\n_ol_structs_PriorityQueue_.prototype.heapify_ = function () {\n  var i;\n\n  for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n    this.siftUp_(i);\n  }\n};\n/**\n * @return {boolean} Is empty.\n */\n\n\n_ol_structs_PriorityQueue_.prototype.isEmpty = function () {\n  return this.elements_.length === 0;\n};\n/**\n * @param {string} key Key.\n * @return {boolean} Is key queued.\n */\n\n\n_ol_structs_PriorityQueue_.prototype.isKeyQueued = function (key) {\n  return key in this.queuedElements_;\n};\n/**\n * @param {T} element Element.\n * @return {boolean} Is queued.\n */\n\n\n_ol_structs_PriorityQueue_.prototype.isQueued = function (element) {\n  return this.isKeyQueued(this.keyFunction_(element));\n};\n/**\n * @param {number} index The index of the node to move down.\n * @private\n */\n\n\n_ol_structs_PriorityQueue_.prototype.siftUp_ = function (index) {\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var count = elements.length;\n  var element = elements[index];\n  var priority = priorities[index];\n  var startIndex = index;\n\n  while (index < count >> 1) {\n    var lIndex = this.getLeftChildIndex_(index);\n    var rIndex = this.getRightChildIndex_(index);\n    var smallerChildIndex = rIndex < count && priorities[rIndex] < priorities[lIndex] ? rIndex : lIndex;\n    elements[index] = elements[smallerChildIndex];\n    priorities[index] = priorities[smallerChildIndex];\n    index = smallerChildIndex;\n  }\n\n  elements[index] = element;\n  priorities[index] = priority;\n  this.siftDown_(startIndex, index);\n};\n/**\n * @param {number} startIndex The index of the root.\n * @param {number} index The index of the node to move up.\n * @private\n */\n\n\n_ol_structs_PriorityQueue_.prototype.siftDown_ = function (startIndex, index) {\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var element = elements[index];\n  var priority = priorities[index];\n\n  while (index > startIndex) {\n    var parentIndex = this.getParentIndex_(index);\n\n    if (priorities[parentIndex] > priority) {\n      elements[index] = elements[parentIndex];\n      priorities[index] = priorities[parentIndex];\n      index = parentIndex;\n    } else {\n      break;\n    }\n  }\n\n  elements[index] = element;\n  priorities[index] = priority;\n};\n/**\n * FIXME empty description for jsdoc\n */\n\n\n_ol_structs_PriorityQueue_.prototype.reprioritize = function () {\n  var priorityFunction = this.priorityFunction_;\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var index = 0;\n  var n = elements.length;\n  var element, i, priority;\n\n  for (i = 0; i < n; ++i) {\n    element = elements[i];\n    priority = priorityFunction(element);\n\n    if (priority == _ol_structs_PriorityQueue_.DROP) {\n      delete this.queuedElements_[this.keyFunction_(element)];\n    } else {\n      priorities[index] = priority;\n      elements[index++] = element;\n    }\n  }\n\n  elements.length = index;\n  priorities.length = index;\n  this.heapify_();\n};\n\nexport default _ol_structs_PriorityQueue_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/structs/priorityqueue.js"],"names":["_ol_asserts_","_ol_obj_","_ol_structs_PriorityQueue_","priorityFunction","keyFunction","priorityFunction_","keyFunction_","elements_","priorities_","queuedElements_","DROP","Infinity","prototype","clear","length","dequeue","elements","priorities","element","pop","siftUp_","elementKey","enqueue","assert","priority","push","siftDown_","getCount","getLeftChildIndex_","index","getRightChildIndex_","getParentIndex_","heapify_","i","isEmpty","isKeyQueued","key","isQueued","count","startIndex","lIndex","rIndex","smallerChildIndex","parentIndex","reprioritize","n"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,0BAA0B,GAAG,UAASC,gBAAT,EAA2BC,WAA3B,EAAwC;AAEvE;AACF;AACA;AACA;AACE,OAAKC,iBAAL,GAAyBF,gBAAzB;AAEA;AACF;AACA;AACA;;AACE,OAAKG,YAAL,GAAoBF,WAApB;AAEA;AACF;AACA;AACA;;AACE,OAAKG,SAAL,GAAiB,EAAjB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,WAAL,GAAmB,EAAnB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,eAAL,GAAuB,EAAvB;AAED,CAhCD;AAmCA;AACA;AACA;AACA;;;AACAP,0BAA0B,CAACQ,IAA3B,GAAkCC,QAAlC;AAGA;AACA;AACA;;AACAT,0BAA0B,CAACU,SAA3B,CAAqCC,KAArC,GAA6C,YAAW;AACtD,OAAKN,SAAL,CAAeO,MAAf,GAAwB,CAAxB;AACA,OAAKN,WAAL,CAAiBM,MAAjB,GAA0B,CAA1B;;AACAb,EAAAA,QAAQ,CAACY,KAAT,CAAe,KAAKJ,eAApB;AACD,CAJD;AAOA;AACA;AACA;AACA;;;AACAP,0BAA0B,CAACU,SAA3B,CAAqCG,OAArC,GAA+C,YAAW;AACxD,MAAIC,QAAQ,GAAG,KAAKT,SAApB;AACA,MAAIU,UAAU,GAAG,KAAKT,WAAtB;AACA,MAAIU,OAAO,GAAGF,QAAQ,CAAC,CAAD,CAAtB;;AACA,MAAIA,QAAQ,CAACF,MAAT,IAAmB,CAAvB,EAA0B;AACxBE,IAAAA,QAAQ,CAACF,MAAT,GAAkB,CAAlB;AACAG,IAAAA,UAAU,CAACH,MAAX,GAAoB,CAApB;AACD,GAHD,MAGO;AACLE,IAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAACG,GAAT,EAAd;AACAF,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAACE,GAAX,EAAhB;AACA,SAAKC,OAAL,CAAa,CAAb;AACD;;AACD,MAAIC,UAAU,GAAG,KAAKf,YAAL,CAAkBY,OAAlB,CAAjB;AACA,SAAO,KAAKT,eAAL,CAAqBY,UAArB,CAAP;AACA,SAAOH,OAAP;AACD,CAfD;AAkBA;AACA;AACA;AACA;AACA;;;AACAhB,0BAA0B,CAACU,SAA3B,CAAqCU,OAArC,GAA+C,UAASJ,OAAT,EAAkB;AAC/DlB,EAAAA,YAAY,CAACuB,MAAb,CAAoB,EAAE,KAAKjB,YAAL,CAAkBY,OAAlB,KAA8B,KAAKT,eAArC,CAApB,EACI,EADJ,EAD+D,CAEtD;;;AACT,MAAIe,QAAQ,GAAG,KAAKnB,iBAAL,CAAuBa,OAAvB,CAAf;;AACA,MAAIM,QAAQ,IAAItB,0BAA0B,CAACQ,IAA3C,EAAiD;AAC/C,SAAKH,SAAL,CAAekB,IAAf,CAAoBP,OAApB;AACA,SAAKV,WAAL,CAAiBiB,IAAjB,CAAsBD,QAAtB;AACA,SAAKf,eAAL,CAAqB,KAAKH,YAAL,CAAkBY,OAAlB,CAArB,IAAmD,IAAnD;AACA,SAAKQ,SAAL,CAAe,CAAf,EAAkB,KAAKnB,SAAL,CAAeO,MAAf,GAAwB,CAA1C;AACA,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAZD;AAeA;AACA;AACA;;;AACAZ,0BAA0B,CAACU,SAA3B,CAAqCe,QAArC,GAAgD,YAAW;AACzD,SAAO,KAAKpB,SAAL,CAAeO,MAAtB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,0BAA0B,CAACU,SAA3B,CAAqCgB,kBAArC,GAA0D,UAASC,KAAT,EAAgB;AACxE,SAAOA,KAAK,GAAG,CAAR,GAAY,CAAnB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AACA3B,0BAA0B,CAACU,SAA3B,CAAqCkB,mBAArC,GAA2D,UAASD,KAAT,EAAgB;AACzE,SAAOA,KAAK,GAAG,CAAR,GAAY,CAAnB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AACA3B,0BAA0B,CAACU,SAA3B,CAAqCmB,eAArC,GAAuD,UAASF,KAAT,EAAgB;AACrE,SAAQA,KAAK,GAAG,CAAT,IAAe,CAAtB;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACA3B,0BAA0B,CAACU,SAA3B,CAAqCoB,QAArC,GAAgD,YAAW;AACzD,MAAIC,CAAJ;;AACA,OAAKA,CAAC,GAAG,CAAC,KAAK1B,SAAL,CAAeO,MAAf,IAAyB,CAA1B,IAA+B,CAAxC,EAA2CmB,CAAC,IAAI,CAAhD,EAAmDA,CAAC,EAApD,EAAwD;AACtD,SAAKb,OAAL,CAAaa,CAAb;AACD;AACF,CALD;AAQA;AACA;AACA;;;AACA/B,0BAA0B,CAACU,SAA3B,CAAqCsB,OAArC,GAA+C,YAAW;AACxD,SAAO,KAAK3B,SAAL,CAAeO,MAAf,KAA0B,CAAjC;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACAZ,0BAA0B,CAACU,SAA3B,CAAqCuB,WAArC,GAAmD,UAASC,GAAT,EAAc;AAC/D,SAAOA,GAAG,IAAI,KAAK3B,eAAnB;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACAP,0BAA0B,CAACU,SAA3B,CAAqCyB,QAArC,GAAgD,UAASnB,OAAT,EAAkB;AAChE,SAAO,KAAKiB,WAAL,CAAiB,KAAK7B,YAAL,CAAkBY,OAAlB,CAAjB,CAAP;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACAhB,0BAA0B,CAACU,SAA3B,CAAqCQ,OAArC,GAA+C,UAASS,KAAT,EAAgB;AAC7D,MAAIb,QAAQ,GAAG,KAAKT,SAApB;AACA,MAAIU,UAAU,GAAG,KAAKT,WAAtB;AACA,MAAI8B,KAAK,GAAGtB,QAAQ,CAACF,MAArB;AACA,MAAII,OAAO,GAAGF,QAAQ,CAACa,KAAD,CAAtB;AACA,MAAIL,QAAQ,GAAGP,UAAU,CAACY,KAAD,CAAzB;AACA,MAAIU,UAAU,GAAGV,KAAjB;;AAEA,SAAOA,KAAK,GAAIS,KAAK,IAAI,CAAzB,EAA6B;AAC3B,QAAIE,MAAM,GAAG,KAAKZ,kBAAL,CAAwBC,KAAxB,CAAb;AACA,QAAIY,MAAM,GAAG,KAAKX,mBAAL,CAAyBD,KAAzB,CAAb;AAEA,QAAIa,iBAAiB,GAAGD,MAAM,GAAGH,KAAT,IACpBrB,UAAU,CAACwB,MAAD,CAAV,GAAqBxB,UAAU,CAACuB,MAAD,CADX,GAEtBC,MAFsB,GAEbD,MAFX;AAIAxB,IAAAA,QAAQ,CAACa,KAAD,CAAR,GAAkBb,QAAQ,CAAC0B,iBAAD,CAA1B;AACAzB,IAAAA,UAAU,CAACY,KAAD,CAAV,GAAoBZ,UAAU,CAACyB,iBAAD,CAA9B;AACAb,IAAAA,KAAK,GAAGa,iBAAR;AACD;;AAED1B,EAAAA,QAAQ,CAACa,KAAD,CAAR,GAAkBX,OAAlB;AACAD,EAAAA,UAAU,CAACY,KAAD,CAAV,GAAoBL,QAApB;AACA,OAAKE,SAAL,CAAea,UAAf,EAA2BV,KAA3B;AACD,CAxBD;AA2BA;AACA;AACA;AACA;AACA;;;AACA3B,0BAA0B,CAACU,SAA3B,CAAqCc,SAArC,GAAiD,UAASa,UAAT,EAAqBV,KAArB,EAA4B;AAC3E,MAAIb,QAAQ,GAAG,KAAKT,SAApB;AACA,MAAIU,UAAU,GAAG,KAAKT,WAAtB;AACA,MAAIU,OAAO,GAAGF,QAAQ,CAACa,KAAD,CAAtB;AACA,MAAIL,QAAQ,GAAGP,UAAU,CAACY,KAAD,CAAzB;;AAEA,SAAOA,KAAK,GAAGU,UAAf,EAA2B;AACzB,QAAII,WAAW,GAAG,KAAKZ,eAAL,CAAqBF,KAArB,CAAlB;;AACA,QAAIZ,UAAU,CAAC0B,WAAD,CAAV,GAA0BnB,QAA9B,EAAwC;AACtCR,MAAAA,QAAQ,CAACa,KAAD,CAAR,GAAkBb,QAAQ,CAAC2B,WAAD,CAA1B;AACA1B,MAAAA,UAAU,CAACY,KAAD,CAAV,GAAoBZ,UAAU,CAAC0B,WAAD,CAA9B;AACAd,MAAAA,KAAK,GAAGc,WAAR;AACD,KAJD,MAIO;AACL;AACD;AACF;;AACD3B,EAAAA,QAAQ,CAACa,KAAD,CAAR,GAAkBX,OAAlB;AACAD,EAAAA,UAAU,CAACY,KAAD,CAAV,GAAoBL,QAApB;AACD,CAlBD;AAqBA;AACA;AACA;;;AACAtB,0BAA0B,CAACU,SAA3B,CAAqCgC,YAArC,GAAoD,YAAW;AAC7D,MAAIzC,gBAAgB,GAAG,KAAKE,iBAA5B;AACA,MAAIW,QAAQ,GAAG,KAAKT,SAApB;AACA,MAAIU,UAAU,GAAG,KAAKT,WAAtB;AACA,MAAIqB,KAAK,GAAG,CAAZ;AACA,MAAIgB,CAAC,GAAG7B,QAAQ,CAACF,MAAjB;AACA,MAAII,OAAJ,EAAae,CAAb,EAAgBT,QAAhB;;AACA,OAAKS,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGY,CAAhB,EAAmB,EAAEZ,CAArB,EAAwB;AACtBf,IAAAA,OAAO,GAAGF,QAAQ,CAACiB,CAAD,CAAlB;AACAT,IAAAA,QAAQ,GAAGrB,gBAAgB,CAACe,OAAD,CAA3B;;AACA,QAAIM,QAAQ,IAAItB,0BAA0B,CAACQ,IAA3C,EAAiD;AAC/C,aAAO,KAAKD,eAAL,CAAqB,KAAKH,YAAL,CAAkBY,OAAlB,CAArB,CAAP;AACD,KAFD,MAEO;AACLD,MAAAA,UAAU,CAACY,KAAD,CAAV,GAAoBL,QAApB;AACAR,MAAAA,QAAQ,CAACa,KAAK,EAAN,CAAR,GAAoBX,OAApB;AACD;AACF;;AACDF,EAAAA,QAAQ,CAACF,MAAT,GAAkBe,KAAlB;AACAZ,EAAAA,UAAU,CAACH,MAAX,GAAoBe,KAApB;AACA,OAAKG,QAAL;AACD,CApBD;;AAqBA,eAAe9B,0BAAf","sourcesContent":["import _ol_asserts_ from '../asserts.js';\nimport _ol_obj_ from '../obj.js';\n\n/**\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * @see http://closure-library.googlecode.com/svn/docs/closure_goog_structs_heap.js.source.html\n * @see http://hg.python.org/cpython/file/2.7/Lib/heapq.py\n *\n * @constructor\n * @param {function(T): number} priorityFunction Priority function.\n * @param {function(T): string} keyFunction Key function.\n * @struct\n * @template T\n */\nvar _ol_structs_PriorityQueue_ = function(priorityFunction, keyFunction) {\n\n  /**\n   * @type {function(T): number}\n   * @private\n   */\n  this.priorityFunction_ = priorityFunction;\n\n  /**\n   * @type {function(T): string}\n   * @private\n   */\n  this.keyFunction_ = keyFunction;\n\n  /**\n   * @type {Array.<T>}\n   * @private\n   */\n  this.elements_ = [];\n\n  /**\n   * @type {Array.<number>}\n   * @private\n   */\n  this.priorities_ = [];\n\n  /**\n   * @type {Object.<string, boolean>}\n   * @private\n   */\n  this.queuedElements_ = {};\n\n};\n\n\n/**\n * @const\n * @type {number}\n */\n_ol_structs_PriorityQueue_.DROP = Infinity;\n\n\n/**\n * FIXME empty description for jsdoc\n */\n_ol_structs_PriorityQueue_.prototype.clear = function() {\n  this.elements_.length = 0;\n  this.priorities_.length = 0;\n  _ol_obj_.clear(this.queuedElements_);\n};\n\n\n/**\n * Remove and return the highest-priority element. O(log N).\n * @return {T} Element.\n */\n_ol_structs_PriorityQueue_.prototype.dequeue = function() {\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var element = elements[0];\n  if (elements.length == 1) {\n    elements.length = 0;\n    priorities.length = 0;\n  } else {\n    elements[0] = elements.pop();\n    priorities[0] = priorities.pop();\n    this.siftUp_(0);\n  }\n  var elementKey = this.keyFunction_(element);\n  delete this.queuedElements_[elementKey];\n  return element;\n};\n\n\n/**\n * Enqueue an element. O(log N).\n * @param {T} element Element.\n * @return {boolean} The element was added to the queue.\n */\n_ol_structs_PriorityQueue_.prototype.enqueue = function(element) {\n  _ol_asserts_.assert(!(this.keyFunction_(element) in this.queuedElements_),\n      31); // Tried to enqueue an `element` that was already added to the queue\n  var priority = this.priorityFunction_(element);\n  if (priority != _ol_structs_PriorityQueue_.DROP) {\n    this.elements_.push(element);\n    this.priorities_.push(priority);\n    this.queuedElements_[this.keyFunction_(element)] = true;\n    this.siftDown_(0, this.elements_.length - 1);\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * @return {number} Count.\n */\n_ol_structs_PriorityQueue_.prototype.getCount = function() {\n  return this.elements_.length;\n};\n\n\n/**\n * Gets the index of the left child of the node at the given index.\n * @param {number} index The index of the node to get the left child for.\n * @return {number} The index of the left child.\n * @private\n */\n_ol_structs_PriorityQueue_.prototype.getLeftChildIndex_ = function(index) {\n  return index * 2 + 1;\n};\n\n\n/**\n * Gets the index of the right child of the node at the given index.\n * @param {number} index The index of the node to get the right child for.\n * @return {number} The index of the right child.\n * @private\n */\n_ol_structs_PriorityQueue_.prototype.getRightChildIndex_ = function(index) {\n  return index * 2 + 2;\n};\n\n\n/**\n * Gets the index of the parent of the node at the given index.\n * @param {number} index The index of the node to get the parent for.\n * @return {number} The index of the parent.\n * @private\n */\n_ol_structs_PriorityQueue_.prototype.getParentIndex_ = function(index) {\n  return (index - 1) >> 1;\n};\n\n\n/**\n * Make this a heap. O(N).\n * @private\n */\n_ol_structs_PriorityQueue_.prototype.heapify_ = function() {\n  var i;\n  for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n    this.siftUp_(i);\n  }\n};\n\n\n/**\n * @return {boolean} Is empty.\n */\n_ol_structs_PriorityQueue_.prototype.isEmpty = function() {\n  return this.elements_.length === 0;\n};\n\n\n/**\n * @param {string} key Key.\n * @return {boolean} Is key queued.\n */\n_ol_structs_PriorityQueue_.prototype.isKeyQueued = function(key) {\n  return key in this.queuedElements_;\n};\n\n\n/**\n * @param {T} element Element.\n * @return {boolean} Is queued.\n */\n_ol_structs_PriorityQueue_.prototype.isQueued = function(element) {\n  return this.isKeyQueued(this.keyFunction_(element));\n};\n\n\n/**\n * @param {number} index The index of the node to move down.\n * @private\n */\n_ol_structs_PriorityQueue_.prototype.siftUp_ = function(index) {\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var count = elements.length;\n  var element = elements[index];\n  var priority = priorities[index];\n  var startIndex = index;\n\n  while (index < (count >> 1)) {\n    var lIndex = this.getLeftChildIndex_(index);\n    var rIndex = this.getRightChildIndex_(index);\n\n    var smallerChildIndex = rIndex < count &&\n        priorities[rIndex] < priorities[lIndex] ?\n      rIndex : lIndex;\n\n    elements[index] = elements[smallerChildIndex];\n    priorities[index] = priorities[smallerChildIndex];\n    index = smallerChildIndex;\n  }\n\n  elements[index] = element;\n  priorities[index] = priority;\n  this.siftDown_(startIndex, index);\n};\n\n\n/**\n * @param {number} startIndex The index of the root.\n * @param {number} index The index of the node to move up.\n * @private\n */\n_ol_structs_PriorityQueue_.prototype.siftDown_ = function(startIndex, index) {\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var element = elements[index];\n  var priority = priorities[index];\n\n  while (index > startIndex) {\n    var parentIndex = this.getParentIndex_(index);\n    if (priorities[parentIndex] > priority) {\n      elements[index] = elements[parentIndex];\n      priorities[index] = priorities[parentIndex];\n      index = parentIndex;\n    } else {\n      break;\n    }\n  }\n  elements[index] = element;\n  priorities[index] = priority;\n};\n\n\n/**\n * FIXME empty description for jsdoc\n */\n_ol_structs_PriorityQueue_.prototype.reprioritize = function() {\n  var priorityFunction = this.priorityFunction_;\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var index = 0;\n  var n = elements.length;\n  var element, i, priority;\n  for (i = 0; i < n; ++i) {\n    element = elements[i];\n    priority = priorityFunction(element);\n    if (priority == _ol_structs_PriorityQueue_.DROP) {\n      delete this.queuedElements_[this.keyFunction_(element)];\n    } else {\n      priorities[index] = priority;\n      elements[index++] = element;\n    }\n  }\n  elements.length = index;\n  priorities.length = index;\n  this.heapify_();\n};\nexport default _ol_structs_PriorityQueue_;\n"]},"metadata":{},"sourceType":"module"}