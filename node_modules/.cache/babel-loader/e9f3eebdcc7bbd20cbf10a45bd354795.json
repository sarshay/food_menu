{"ast":null,"code":"/**\n * @param {ol.pointer.PointerEventHandler} dispatcher Event handler.\n * @param {!Object.<string, function(Event)>} mapping Event\n *     mapping.\n * @constructor\n */\nvar _ol_pointer_EventSource_ = function (dispatcher, mapping) {\n  /**\n   * @type {ol.pointer.PointerEventHandler}\n   */\n  this.dispatcher = dispatcher;\n  /**\n   * @private\n   * @const\n   * @type {!Object.<string, function(Event)>}\n   */\n\n  this.mapping_ = mapping;\n};\n/**\n * List of events supported by this source.\n * @return {Array.<string>} Event names\n */\n\n\n_ol_pointer_EventSource_.prototype.getEvents = function () {\n  return Object.keys(this.mapping_);\n};\n/**\n * Returns the handler that should handle a given event type.\n * @param {string} eventType The event type.\n * @return {function(Event)} Handler\n */\n\n\n_ol_pointer_EventSource_.prototype.getHandlerForEvent = function (eventType) {\n  return this.mapping_[eventType];\n};\n\nexport default _ol_pointer_EventSource_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/pointer/eventsource.js"],"names":["_ol_pointer_EventSource_","dispatcher","mapping","mapping_","prototype","getEvents","Object","keys","getHandlerForEvent","eventType"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,wBAAwB,GAAG,UAASC,UAAT,EAAqBC,OAArB,EAA8B;AAC3D;AACF;AACA;AACE,OAAKD,UAAL,GAAkBA,UAAlB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKE,QAAL,GAAgBD,OAAhB;AACD,CAZD;AAeA;AACA;AACA;AACA;;;AACAF,wBAAwB,CAACI,SAAzB,CAAmCC,SAAnC,GAA+C,YAAW;AACxD,SAAOC,MAAM,CAACC,IAAP,CAAY,KAAKJ,QAAjB,CAAP;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAH,wBAAwB,CAACI,SAAzB,CAAmCI,kBAAnC,GAAwD,UAASC,SAAT,EAAoB;AAC1E,SAAO,KAAKN,QAAL,CAAcM,SAAd,CAAP;AACD,CAFD;;AAGA,eAAeT,wBAAf","sourcesContent":["/**\n * @param {ol.pointer.PointerEventHandler} dispatcher Event handler.\n * @param {!Object.<string, function(Event)>} mapping Event\n *     mapping.\n * @constructor\n */\nvar _ol_pointer_EventSource_ = function(dispatcher, mapping) {\n  /**\n   * @type {ol.pointer.PointerEventHandler}\n   */\n  this.dispatcher = dispatcher;\n\n  /**\n   * @private\n   * @const\n   * @type {!Object.<string, function(Event)>}\n   */\n  this.mapping_ = mapping;\n};\n\n\n/**\n * List of events supported by this source.\n * @return {Array.<string>} Event names\n */\n_ol_pointer_EventSource_.prototype.getEvents = function() {\n  return Object.keys(this.mapping_);\n};\n\n\n/**\n * Returns the handler that should handle a given event type.\n * @param {string} eventType The event type.\n * @return {function(Event)} Handler\n */\n_ol_pointer_EventSource_.prototype.getHandlerForEvent = function(eventType) {\n  return this.mapping_[eventType];\n};\nexport default _ol_pointer_EventSource_;\n"]},"metadata":{},"sourceType":"module"}