{"ast":null,"code":"import _ol_math_ from './math.js';\nimport _ol_string_ from './string.js';\nvar _ol_coordinate_ = {};\n/**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     var coord = [7.85, 47.983333];\n *     ol.coordinate.add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {ol.Coordinate} delta Delta.\n * @return {ol.Coordinate} The input coordinate adjusted by the given delta.\n * @api\n */\n\n_ol_coordinate_.add = function (coordinate, delta) {\n  coordinate[0] += delta[0];\n  coordinate[1] += delta[1];\n  return coordinate;\n};\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {ol.Coordinate} coordinate The coordinate.\n * @param {ol.geom.Circle} circle The circle.\n * @return {ol.Coordinate} Closest point on the circumference\n */\n\n\n_ol_coordinate_.closestOnCircle = function (coordinate, circle) {\n  var r = circle.getRadius();\n  var center = circle.getCenter();\n  var x0 = center[0];\n  var y0 = center[1];\n  var x1 = coordinate[0];\n  var y1 = coordinate[1];\n  var dx = x1 - x0;\n  var dy = y1 - y0;\n\n  if (dx === 0 && dy === 0) {\n    dx = 1;\n  }\n\n  var d = Math.sqrt(dx * dx + dy * dy);\n  var x, y;\n  x = x0 + r * dx / d;\n  y = y0 + r * dy / d;\n  return [x, y];\n};\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {ol.Coordinate} coordinate The coordinate.\n * @param {Array.<ol.Coordinate>} segment The two coordinates of the segment.\n * @return {ol.Coordinate} The foot of the perpendicular of the coordinate to\n *     the segment.\n */\n\n\n_ol_coordinate_.closestOnSegment = function (coordinate, segment) {\n  var x0 = coordinate[0];\n  var y0 = coordinate[1];\n  var start = segment[0];\n  var end = segment[1];\n  var x1 = start[0];\n  var y1 = start[1];\n  var x2 = end[0];\n  var y2 = end[1];\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  var along = dx === 0 && dy === 0 ? 0 : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n  var x, y;\n\n  if (along <= 0) {\n    x = x1;\n    y = y1;\n  } else if (along >= 1) {\n    x = x2;\n    y = y2;\n  } else {\n    x = x1 + along * dx;\n    y = y1 + along * dy;\n  }\n\n  return [x, y];\n};\n/**\n * Returns a {@link ol.CoordinateFormatType} function that can be used to format\n * a {ol.Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = ol.coordinate.createStringXY();\n *     var out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = ol.coordinate.createStringXY(2);\n *     var out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {ol.CoordinateFormatType} Coordinate format.\n * @api\n */\n\n\n_ol_coordinate_.createStringXY = function (opt_fractionDigits) {\n  return (\n    /**\n     * @param {ol.Coordinate|undefined} coordinate Coordinate.\n     * @return {string} String XY.\n     */\n    function (coordinate) {\n      return _ol_coordinate_.toStringXY(coordinate, opt_fractionDigits);\n    }\n  );\n};\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */\n\n\n_ol_coordinate_.degreesToStringHDMS = function (hemispheres, degrees, opt_fractionDigits) {\n  var normalizedDegrees = _ol_math_.modulo(degrees + 180, 360) - 180;\n  var x = Math.abs(3600 * normalizedDegrees);\n  var dflPrecision = opt_fractionDigits || 0;\n  var precision = Math.pow(10, dflPrecision);\n  var deg = Math.floor(x / 3600);\n  var min = Math.floor((x - deg * 3600) / 60);\n  var sec = x - deg * 3600 - min * 60;\n  sec = Math.ceil(sec * precision) / precision;\n\n  if (sec >= 60) {\n    sec = 0;\n    min += 1;\n  }\n\n  if (min >= 60) {\n    min = 0;\n    deg += 1;\n  }\n\n  return deg + '\\u00b0 ' + _ol_string_.padNumber(min, 2) + '\\u2032 ' + _ol_string_.padNumber(sec, 2, dflPrecision) + '\\u2033' + (normalizedDegrees == 0 ? '' : ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0));\n};\n/**\n * Transforms the given {@link ol.Coordinate} to a string using the given string\n * template. The strings `{x}` and `{y}` in the template will be replaced with\n * the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = ol.coordinate.format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = ol.coordinate.format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {ol.Coordinate|undefined} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */\n\n\n_ol_coordinate_.format = function (coordinate, template, opt_fractionDigits) {\n  if (coordinate) {\n    return template.replace('{x}', coordinate[0].toFixed(opt_fractionDigits)).replace('{y}', coordinate[1].toFixed(opt_fractionDigits));\n  } else {\n    return '';\n  }\n};\n/**\n * @param {ol.Coordinate} coordinate1 First coordinate.\n * @param {ol.Coordinate} coordinate2 Second coordinate.\n * @return {boolean} Whether the passed coordinates are equal.\n */\n\n\n_ol_coordinate_.equals = function (coordinate1, coordinate2) {\n  var equals = true;\n\n  for (var i = coordinate1.length - 1; i >= 0; --i) {\n    if (coordinate1[i] != coordinate2[i]) {\n      equals = false;\n      break;\n    }\n  }\n\n  return equals;\n};\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     var coord = [7.85, 47.983333];\n *     var rotateRadians = Math.PI / 2; // 90 degrees\n *     ol.coordinate.rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {ol.Coordinate} Coordinate.\n * @api\n */\n\n\n_ol_coordinate_.rotate = function (coordinate, angle) {\n  var cosAngle = Math.cos(angle);\n  var sinAngle = Math.sin(angle);\n  var x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  var y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  coordinate[0] = x;\n  coordinate[1] = y;\n  return coordinate;\n};\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     var coord = [7.85, 47.983333];\n *     var scale = 1.2;\n *     ol.coordinate.scale(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {ol.Coordinate} Coordinate.\n */\n\n\n_ol_coordinate_.scale = function (coordinate, scale) {\n  coordinate[0] *= scale;\n  coordinate[1] *= scale;\n  return coordinate;\n};\n/**\n * Subtract `delta` to `coordinate`. `coordinate` is modified in place and\n * returned by the function.\n *\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {ol.Coordinate} delta Delta.\n * @return {ol.Coordinate} Coordinate.\n */\n\n\n_ol_coordinate_.sub = function (coordinate, delta) {\n  coordinate[0] -= delta[0];\n  coordinate[1] -= delta[1];\n  return coordinate;\n};\n/**\n * @param {ol.Coordinate} coord1 First coordinate.\n * @param {ol.Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */\n\n\n_ol_coordinate_.squaredDistance = function (coord1, coord2) {\n  var dx = coord1[0] - coord2[0];\n  var dy = coord1[1] - coord2[1];\n  return dx * dx + dy * dy;\n};\n/**\n * @param {ol.Coordinate} coord1 First coordinate.\n * @param {ol.Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */\n\n\n_ol_coordinate_.distance = function (coord1, coord2) {\n  return Math.sqrt(_ol_coordinate_.squaredDistance(coord1, coord2));\n};\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {ol.Coordinate} coordinate Coordinate of the point.\n * @param {Array.<ol.Coordinate>} segment Line segment (2 coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */\n\n\n_ol_coordinate_.squaredDistanceToSegment = function (coordinate, segment) {\n  return _ol_coordinate_.squaredDistance(coordinate, _ol_coordinate_.closestOnSegment(coordinate, segment));\n};\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     var coord = [7.85, 47.983333];\n *     var out = ol.coordinate.toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     var coord = [7.85, 47.983333];\n *     var out = ol.coordinate.toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {ol.Coordinate|undefined} coordinate Coordinate.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */\n\n\n_ol_coordinate_.toStringHDMS = function (coordinate, opt_fractionDigits) {\n  if (coordinate) {\n    return _ol_coordinate_.degreesToStringHDMS('NS', coordinate[1], opt_fractionDigits) + ' ' + _ol_coordinate_.degreesToStringHDMS('EW', coordinate[0], opt_fractionDigits);\n  } else {\n    return '';\n  }\n};\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     var coord = [7.85, 47.983333];\n *     var out = ol.coordinate.toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     var coord = [7.85, 47.983333];\n *     var out = ol.coordinate.toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {ol.Coordinate|undefined} coordinate Coordinate.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */\n\n\n_ol_coordinate_.toStringXY = function (coordinate, opt_fractionDigits) {\n  return _ol_coordinate_.format(coordinate, '{x}, {y}', opt_fractionDigits);\n};\n\nexport default _ol_coordinate_;","map":{"version":3,"sources":["C:/xampp/htdocs/food_menu/node_modules/ol/coordinate.js"],"names":["_ol_math_","_ol_string_","_ol_coordinate_","add","coordinate","delta","closestOnCircle","circle","r","getRadius","center","getCenter","x0","y0","x1","y1","dx","dy","d","Math","sqrt","x","y","closestOnSegment","segment","start","end","x2","y2","along","createStringXY","opt_fractionDigits","toStringXY","degreesToStringHDMS","hemispheres","degrees","normalizedDegrees","modulo","abs","dflPrecision","precision","pow","deg","floor","min","sec","ceil","padNumber","charAt","format","template","replace","toFixed","equals","coordinate1","coordinate2","i","length","rotate","angle","cosAngle","cos","sinAngle","sin","scale","sub","squaredDistance","coord1","coord2","distance","squaredDistanceToSegment","toStringHDMS"],"mappings":"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","sourcesContent":["import _ol_math_ from './math.js';\nimport _ol_string_ from './string.js';\nvar _ol_coordinate_ = {};\n\n\n/**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     var coord = [7.85, 47.983333];\n *     ol.coordinate.add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {ol.Coordinate} delta Delta.\n * @return {ol.Coordinate} The input coordinate adjusted by the given delta.\n * @api\n */\n_ol_coordinate_.add = function(coordinate, delta) {\n  coordinate[0] += delta[0];\n  coordinate[1] += delta[1];\n  return coordinate;\n};\n\n\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {ol.Coordinate} coordinate The coordinate.\n * @param {ol.geom.Circle} circle The circle.\n * @return {ol.Coordinate} Closest point on the circumference\n */\n_ol_coordinate_.closestOnCircle = function(coordinate, circle) {\n  var r = circle.getRadius();\n  var center = circle.getCenter();\n  var x0 = center[0];\n  var y0 = center[1];\n  var x1 = coordinate[0];\n  var y1 = coordinate[1];\n\n  var dx = x1 - x0;\n  var dy = y1 - y0;\n  if (dx === 0 && dy === 0) {\n    dx = 1;\n  }\n  var d = Math.sqrt(dx * dx + dy * dy);\n\n  var x, y;\n\n  x = x0 + r * dx / d;\n  y = y0 + r * dy / d;\n\n  return [x, y];\n};\n\n\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {ol.Coordinate} coordinate The coordinate.\n * @param {Array.<ol.Coordinate>} segment The two coordinates of the segment.\n * @return {ol.Coordinate} The foot of the perpendicular of the coordinate to\n *     the segment.\n */\n_ol_coordinate_.closestOnSegment = function(coordinate, segment) {\n  var x0 = coordinate[0];\n  var y0 = coordinate[1];\n  var start = segment[0];\n  var end = segment[1];\n  var x1 = start[0];\n  var y1 = start[1];\n  var x2 = end[0];\n  var y2 = end[1];\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  var along = (dx === 0 && dy === 0) ? 0 :\n    ((dx * (x0 - x1)) + (dy * (y0 - y1))) / ((dx * dx + dy * dy) || 0);\n  var x, y;\n  if (along <= 0) {\n    x = x1;\n    y = y1;\n  } else if (along >= 1) {\n    x = x2;\n    y = y2;\n  } else {\n    x = x1 + along * dx;\n    y = y1 + along * dy;\n  }\n  return [x, y];\n};\n\n\n/**\n * Returns a {@link ol.CoordinateFormatType} function that can be used to format\n * a {ol.Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = ol.coordinate.createStringXY();\n *     var out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = ol.coordinate.createStringXY(2);\n *     var out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {ol.CoordinateFormatType} Coordinate format.\n * @api\n */\n_ol_coordinate_.createStringXY = function(opt_fractionDigits) {\n  return (\n    /**\n     * @param {ol.Coordinate|undefined} coordinate Coordinate.\n     * @return {string} String XY.\n     */\n    function(coordinate) {\n      return _ol_coordinate_.toStringXY(coordinate, opt_fractionDigits);\n    }\n  );\n};\n\n\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */\n_ol_coordinate_.degreesToStringHDMS = function(hemispheres, degrees, opt_fractionDigits) {\n  var normalizedDegrees = _ol_math_.modulo(degrees + 180, 360) - 180;\n  var x = Math.abs(3600 * normalizedDegrees);\n  var dflPrecision = opt_fractionDigits || 0;\n  var precision = Math.pow(10, dflPrecision);\n\n  var deg = Math.floor(x / 3600);\n  var min = Math.floor((x - deg * 3600) / 60);\n  var sec = x - (deg * 3600) - (min * 60);\n  sec = Math.ceil(sec * precision) / precision;\n\n  if (sec >= 60) {\n    sec = 0;\n    min += 1;\n  }\n\n  if (min >= 60) {\n    min = 0;\n    deg += 1;\n  }\n\n  return deg + '\\u00b0 ' + _ol_string_.padNumber(min, 2) + '\\u2032 ' +\n    _ol_string_.padNumber(sec, 2, dflPrecision) + '\\u2033' +\n    (normalizedDegrees == 0 ? '' : ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0));\n};\n\n\n/**\n * Transforms the given {@link ol.Coordinate} to a string using the given string\n * template. The strings `{x}` and `{y}` in the template will be replaced with\n * the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = ol.coordinate.format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = ol.coordinate.format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {ol.Coordinate|undefined} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */\n_ol_coordinate_.format = function(coordinate, template, opt_fractionDigits) {\n  if (coordinate) {\n    return template\n        .replace('{x}', coordinate[0].toFixed(opt_fractionDigits))\n        .replace('{y}', coordinate[1].toFixed(opt_fractionDigits));\n  } else {\n    return '';\n  }\n};\n\n\n/**\n * @param {ol.Coordinate} coordinate1 First coordinate.\n * @param {ol.Coordinate} coordinate2 Second coordinate.\n * @return {boolean} Whether the passed coordinates are equal.\n */\n_ol_coordinate_.equals = function(coordinate1, coordinate2) {\n  var equals = true;\n  for (var i = coordinate1.length - 1; i >= 0; --i) {\n    if (coordinate1[i] != coordinate2[i]) {\n      equals = false;\n      break;\n    }\n  }\n  return equals;\n};\n\n\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     var coord = [7.85, 47.983333];\n *     var rotateRadians = Math.PI / 2; // 90 degrees\n *     ol.coordinate.rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {ol.Coordinate} Coordinate.\n * @api\n */\n_ol_coordinate_.rotate = function(coordinate, angle) {\n  var cosAngle = Math.cos(angle);\n  var sinAngle = Math.sin(angle);\n  var x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  var y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  coordinate[0] = x;\n  coordinate[1] = y;\n  return coordinate;\n};\n\n\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     var coord = [7.85, 47.983333];\n *     var scale = 1.2;\n *     ol.coordinate.scale(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {ol.Coordinate} Coordinate.\n */\n_ol_coordinate_.scale = function(coordinate, scale) {\n  coordinate[0] *= scale;\n  coordinate[1] *= scale;\n  return coordinate;\n};\n\n\n/**\n * Subtract `delta` to `coordinate`. `coordinate` is modified in place and\n * returned by the function.\n *\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {ol.Coordinate} delta Delta.\n * @return {ol.Coordinate} Coordinate.\n */\n_ol_coordinate_.sub = function(coordinate, delta) {\n  coordinate[0] -= delta[0];\n  coordinate[1] -= delta[1];\n  return coordinate;\n};\n\n\n/**\n * @param {ol.Coordinate} coord1 First coordinate.\n * @param {ol.Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */\n_ol_coordinate_.squaredDistance = function(coord1, coord2) {\n  var dx = coord1[0] - coord2[0];\n  var dy = coord1[1] - coord2[1];\n  return dx * dx + dy * dy;\n};\n\n\n/**\n * @param {ol.Coordinate} coord1 First coordinate.\n * @param {ol.Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */\n_ol_coordinate_.distance = function(coord1, coord2) {\n  return Math.sqrt(_ol_coordinate_.squaredDistance(coord1, coord2));\n};\n\n\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {ol.Coordinate} coordinate Coordinate of the point.\n * @param {Array.<ol.Coordinate>} segment Line segment (2 coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */\n_ol_coordinate_.squaredDistanceToSegment = function(coordinate, segment) {\n  return _ol_coordinate_.squaredDistance(coordinate,\n      _ol_coordinate_.closestOnSegment(coordinate, segment));\n};\n\n\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     var coord = [7.85, 47.983333];\n *     var out = ol.coordinate.toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     var coord = [7.85, 47.983333];\n *     var out = ol.coordinate.toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {ol.Coordinate|undefined} coordinate Coordinate.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */\n_ol_coordinate_.toStringHDMS = function(coordinate, opt_fractionDigits) {\n  if (coordinate) {\n    return _ol_coordinate_.degreesToStringHDMS('NS', coordinate[1], opt_fractionDigits) + ' ' +\n        _ol_coordinate_.degreesToStringHDMS('EW', coordinate[0], opt_fractionDigits);\n  } else {\n    return '';\n  }\n};\n\n\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     var coord = [7.85, 47.983333];\n *     var out = ol.coordinate.toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     var coord = [7.85, 47.983333];\n *     var out = ol.coordinate.toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {ol.Coordinate|undefined} coordinate Coordinate.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */\n_ol_coordinate_.toStringXY = function(coordinate, opt_fractionDigits) {\n  return _ol_coordinate_.format(coordinate, '{x}, {y}', opt_fractionDigits);\n};\nexport default _ol_coordinate_;\n"]},"metadata":{},"sourceType":"module"}